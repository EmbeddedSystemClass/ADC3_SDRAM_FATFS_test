
ADC3_SDRAM_FATFS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003108  080128b8  080128b8  000228b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080159c0  080159c0  000259c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080159c8  080159c8  000259c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080159cc  080159cc  000259cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000034c  20000000  080159d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002aac  2000034c  08015d1c  0003034c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002df8  08015d1c  00032df8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003e489  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000067e2  00000000  00000000  0006e805  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002128  00000000  00000000  00074fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001e60  00000000  00000000  00077110  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001454d  00000000  00000000  00078f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a09b  00000000  00000000  0008d4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00097558  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009da8  00000000  00000000  000975d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  000a137c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  000a1418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000034c 	.word	0x2000034c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801289c 	.word	0x0801289c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000350 	.word	0x20000350
 800020c:	0801289c 	.word	0x0801289c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f092 0f00 	teq	r2, #0
 80005ca:	bf14      	ite	ne
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e720      	b.n	8000424 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aedc 	beq.w	80003d2 <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6c1      	b.n	80003d2 <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__gedf2>:
 8000a74:	f04f 3cff 	mov.w	ip, #4294967295
 8000a78:	e006      	b.n	8000a88 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__ledf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	e002      	b.n	8000a88 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__cmpdf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9e:	d01b      	beq.n	8000ad8 <__cmpdf2+0x54>
 8000aa0:	b001      	add	sp, #4
 8000aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa6:	bf0c      	ite	eq
 8000aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aac:	ea91 0f03 	teqne	r1, r3
 8000ab0:	bf02      	ittt	eq
 8000ab2:	ea90 0f02 	teqeq	r0, r2
 8000ab6:	2000      	moveq	r0, #0
 8000ab8:	4770      	bxeq	lr
 8000aba:	f110 0f00 	cmn.w	r0, #0
 8000abe:	ea91 0f03 	teq	r1, r3
 8000ac2:	bf58      	it	pl
 8000ac4:	4299      	cmppl	r1, r3
 8000ac6:	bf08      	it	eq
 8000ac8:	4290      	cmpeq	r0, r2
 8000aca:	bf2c      	ite	cs
 8000acc:	17d8      	asrcs	r0, r3, #31
 8000ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad2:	f040 0001 	orr.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d102      	bne.n	8000ae8 <__cmpdf2+0x64>
 8000ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae6:	d107      	bne.n	8000af8 <__cmpdf2+0x74>
 8000ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af0:	d1d6      	bne.n	8000aa0 <__cmpdf2+0x1c>
 8000af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af6:	d0d3      	beq.n	8000aa0 <__cmpdf2+0x1c>
 8000af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdrcmple>:
 8000b00:	4684      	mov	ip, r0
 8000b02:	4610      	mov	r0, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	468c      	mov	ip, r1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	e000      	b.n	8000b10 <__aeabi_cdcmpeq>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_cdcmpeq>:
 8000b10:	b501      	push	{r0, lr}
 8000b12:	f7ff ffb7 	bl	8000a84 <__cmpdf2>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	bf48      	it	mi
 8000b1a:	f110 0f00 	cmnmi.w	r0, #0
 8000b1e:	bd01      	pop	{r0, pc}

08000b20 <__aeabi_dcmpeq>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff fff4 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b28:	bf0c      	ite	eq
 8000b2a:	2001      	moveq	r0, #1
 8000b2c:	2000      	movne	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmplt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffea 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmple>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffe0 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpge>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffce 	bl	8000b00 <__aeabi_cdrcmple>
 8000b64:	bf94      	ite	ls
 8000b66:	2001      	movls	r0, #1
 8000b68:	2000      	movhi	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmpgt>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffc4 	bl	8000b00 <__aeabi_cdrcmple>
 8000b78:	bf34      	ite	cc
 8000b7a:	2001      	movcc	r0, #1
 8000b7c:	2000      	movcs	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpun>:
 8000b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x10>
 8000b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b92:	d10a      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b9c:	d102      	bne.n	8000ba4 <__aeabi_dcmpun+0x20>
 8000b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0001 	mov.w	r0, #1
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2iz>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d215      	bcs.n	8000be6 <__aeabi_d2iz+0x36>
 8000bba:	d511      	bpl.n	8000be0 <__aeabi_d2iz+0x30>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d912      	bls.n	8000bec <__aeabi_d2iz+0x3c>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d105      	bne.n	8000bf8 <__aeabi_d2iz+0x48>
 8000bec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_d2uiz>:
 8000c00:	004a      	lsls	r2, r1, #1
 8000c02:	d211      	bcs.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c08:	d211      	bcs.n	8000c2e <__aeabi_d2uiz+0x2e>
 8000c0a:	d50d      	bpl.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c14:	d40e      	bmi.n	8000c34 <__aeabi_d2uiz+0x34>
 8000c16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c22:	fa23 f002 	lsr.w	r0, r3, r2
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d102      	bne.n	8000c3a <__aeabi_d2uiz+0x3a>
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	4770      	bx	lr
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	4770      	bx	lr

08000c40 <__aeabi_d2f>:
 8000c40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c48:	bf24      	itt	cs
 8000c4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c52:	d90d      	bls.n	8000c70 <__aeabi_d2f+0x30>
 8000c54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c68:	bf08      	it	eq
 8000c6a:	f020 0001 	biceq.w	r0, r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c74:	d121      	bne.n	8000cba <__aeabi_d2f+0x7a>
 8000c76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c7a:	bfbc      	itt	lt
 8000c7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	4770      	bxlt	lr
 8000c82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c8a:	f1c2 0218 	rsb	r2, r2, #24
 8000c8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c96:	fa20 f002 	lsr.w	r0, r0, r2
 8000c9a:	bf18      	it	ne
 8000c9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ca0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cac:	ea40 000c 	orr.w	r0, r0, ip
 8000cb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb8:	e7cc      	b.n	8000c54 <__aeabi_d2f+0x14>
 8000cba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cbe:	d107      	bne.n	8000cd0 <__aeabi_d2f+0x90>
 8000cc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bxne	lr
 8000cd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <__aeabi_uldivmod>:
 8000ce0:	b953      	cbnz	r3, 8000cf8 <__aeabi_uldivmod+0x18>
 8000ce2:	b94a      	cbnz	r2, 8000cf8 <__aeabi_uldivmod+0x18>
 8000ce4:	2900      	cmp	r1, #0
 8000ce6:	bf08      	it	eq
 8000ce8:	2800      	cmpeq	r0, #0
 8000cea:	bf1c      	itt	ne
 8000cec:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf4:	f000 b97a 	b.w	8000fec <__aeabi_idiv0>
 8000cf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d00:	f000 f806 	bl	8000d10 <__udivmoddi4>
 8000d04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d0c:	b004      	add	sp, #16
 8000d0e:	4770      	bx	lr

08000d10 <__udivmoddi4>:
 8000d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d14:	468c      	mov	ip, r1
 8000d16:	460d      	mov	r5, r1
 8000d18:	4604      	mov	r4, r0
 8000d1a:	9e08      	ldr	r6, [sp, #32]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d151      	bne.n	8000dc4 <__udivmoddi4+0xb4>
 8000d20:	428a      	cmp	r2, r1
 8000d22:	4617      	mov	r7, r2
 8000d24:	d96d      	bls.n	8000e02 <__udivmoddi4+0xf2>
 8000d26:	fab2 fe82 	clz	lr, r2
 8000d2a:	f1be 0f00 	cmp.w	lr, #0
 8000d2e:	d00b      	beq.n	8000d48 <__udivmoddi4+0x38>
 8000d30:	f1ce 0c20 	rsb	ip, lr, #32
 8000d34:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d3c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d40:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d48:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d4c:	0c25      	lsrs	r5, r4, #16
 8000d4e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d52:	fa1f f987 	uxth.w	r9, r7
 8000d56:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d5a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d5e:	fb08 f309 	mul.w	r3, r8, r9
 8000d62:	42ab      	cmp	r3, r5
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x6c>
 8000d66:	19ed      	adds	r5, r5, r7
 8000d68:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d6c:	f080 8123 	bcs.w	8000fb6 <__udivmoddi4+0x2a6>
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	f240 8120 	bls.w	8000fb6 <__udivmoddi4+0x2a6>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	443d      	add	r5, r7
 8000d7c:	1aed      	subs	r5, r5, r3
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d84:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d8c:	fb00 f909 	mul.w	r9, r0, r9
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x98>
 8000d94:	19e4      	adds	r4, r4, r7
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	f080 810a 	bcs.w	8000fb2 <__udivmoddi4+0x2a2>
 8000d9e:	45a1      	cmp	r9, r4
 8000da0:	f240 8107 	bls.w	8000fb2 <__udivmoddi4+0x2a2>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 0409 	sub.w	r4, r4, r9
 8000dac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db0:	2100      	movs	r1, #0
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d061      	beq.n	8000e7a <__udivmoddi4+0x16a>
 8000db6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000dba:	2300      	movs	r3, #0
 8000dbc:	6034      	str	r4, [r6, #0]
 8000dbe:	6073      	str	r3, [r6, #4]
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0xc8>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d054      	beq.n	8000e76 <__udivmoddi4+0x166>
 8000dcc:	2100      	movs	r1, #0
 8000dce:	e886 0021 	stmia.w	r6, {r0, r5}
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	fab3 f183 	clz	r1, r3
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	f040 808e 	bne.w	8000efe <__udivmoddi4+0x1ee>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xdc>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 80fa 	bhi.w	8000fe0 <__udivmoddi4+0x2d0>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb65 0503 	sbc.w	r5, r5, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	46ac      	mov	ip, r5
 8000df6:	2e00      	cmp	r6, #0
 8000df8:	d03f      	beq.n	8000e7a <__udivmoddi4+0x16a>
 8000dfa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	b912      	cbnz	r2, 8000e0a <__udivmoddi4+0xfa>
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb7 f7f2 	udiv	r7, r7, r2
 8000e0a:	fab7 fe87 	clz	lr, r7
 8000e0e:	f1be 0f00 	cmp.w	lr, #0
 8000e12:	d134      	bne.n	8000e7e <__udivmoddi4+0x16e>
 8000e14:	1beb      	subs	r3, r5, r7
 8000e16:	0c3a      	lsrs	r2, r7, #16
 8000e18:	fa1f fc87 	uxth.w	ip, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000e22:	0c25      	lsrs	r5, r4, #16
 8000e24:	fb02 3318 	mls	r3, r2, r8, r3
 8000e28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e2c:	fb0c f308 	mul.w	r3, ip, r8
 8000e30:	42ab      	cmp	r3, r5
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x134>
 8000e34:	19ed      	adds	r5, r5, r7
 8000e36:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x132>
 8000e3c:	42ab      	cmp	r3, r5
 8000e3e:	f200 80d1 	bhi.w	8000fe4 <__udivmoddi4+0x2d4>
 8000e42:	4680      	mov	r8, r0
 8000e44:	1aed      	subs	r5, r5, r3
 8000e46:	b2a3      	uxth	r3, r4
 8000e48:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e4c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e54:	fb0c fc00 	mul.w	ip, ip, r0
 8000e58:	45a4      	cmp	ip, r4
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x15c>
 8000e5c:	19e4      	adds	r4, r4, r7
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x15a>
 8000e64:	45a4      	cmp	ip, r4
 8000e66:	f200 80b8 	bhi.w	8000fda <__udivmoddi4+0x2ca>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	eba4 040c 	sub.w	r4, r4, ip
 8000e70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e74:	e79d      	b.n	8000db2 <__udivmoddi4+0xa2>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	f1ce 0420 	rsb	r4, lr, #32
 8000e82:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e8a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e8e:	0c3a      	lsrs	r2, r7, #16
 8000e90:	fa25 f404 	lsr.w	r4, r5, r4
 8000e94:	ea48 0803 	orr.w	r8, r8, r3
 8000e98:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ea0:	fb02 4411 	mls	r4, r2, r1, r4
 8000ea4:	fa1f fc87 	uxth.w	ip, r7
 8000ea8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000eac:	fb01 f30c 	mul.w	r3, r1, ip
 8000eb0:	42ab      	cmp	r3, r5
 8000eb2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000eb6:	d909      	bls.n	8000ecc <__udivmoddi4+0x1bc>
 8000eb8:	19ed      	adds	r5, r5, r7
 8000eba:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ebe:	f080 808a 	bcs.w	8000fd6 <__udivmoddi4+0x2c6>
 8000ec2:	42ab      	cmp	r3, r5
 8000ec4:	f240 8087 	bls.w	8000fd6 <__udivmoddi4+0x2c6>
 8000ec8:	3902      	subs	r1, #2
 8000eca:	443d      	add	r5, r7
 8000ecc:	1aeb      	subs	r3, r5, r3
 8000ece:	fa1f f588 	uxth.w	r5, r8
 8000ed2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ed6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eda:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ede:	fb00 f30c 	mul.w	r3, r0, ip
 8000ee2:	42ab      	cmp	r3, r5
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1e6>
 8000ee6:	19ed      	adds	r5, r5, r7
 8000ee8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eec:	d26f      	bcs.n	8000fce <__udivmoddi4+0x2be>
 8000eee:	42ab      	cmp	r3, r5
 8000ef0:	d96d      	bls.n	8000fce <__udivmoddi4+0x2be>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	443d      	add	r5, r7
 8000ef6:	1aeb      	subs	r3, r5, r3
 8000ef8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efc:	e78f      	b.n	8000e1e <__udivmoddi4+0x10e>
 8000efe:	f1c1 0720 	rsb	r7, r1, #32
 8000f02:	fa22 f807 	lsr.w	r8, r2, r7
 8000f06:	408b      	lsls	r3, r1
 8000f08:	fa05 f401 	lsl.w	r4, r5, r1
 8000f0c:	ea48 0303 	orr.w	r3, r8, r3
 8000f10:	fa20 fe07 	lsr.w	lr, r0, r7
 8000f14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000f18:	40fd      	lsrs	r5, r7
 8000f1a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000f1e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000f22:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000f26:	fb0c 5519 	mls	r5, ip, r9, r5
 8000f2a:	fa1f f883 	uxth.w	r8, r3
 8000f2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f32:	fb09 f408 	mul.w	r4, r9, r8
 8000f36:	42ac      	cmp	r4, r5
 8000f38:	fa02 f201 	lsl.w	r2, r2, r1
 8000f3c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x244>
 8000f42:	18ed      	adds	r5, r5, r3
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d243      	bcs.n	8000fd2 <__udivmoddi4+0x2c2>
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	d941      	bls.n	8000fd2 <__udivmoddi4+0x2c2>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	441d      	add	r5, r3
 8000f54:	1b2d      	subs	r5, r5, r4
 8000f56:	fa1f fe8e 	uxth.w	lr, lr
 8000f5a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f5e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45a0      	cmp	r8, r4
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x26e>
 8000f6e:	18e4      	adds	r4, r4, r3
 8000f70:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f74:	d229      	bcs.n	8000fca <__udivmoddi4+0x2ba>
 8000f76:	45a0      	cmp	r8, r4
 8000f78:	d927      	bls.n	8000fca <__udivmoddi4+0x2ba>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	441c      	add	r4, r3
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba4 0408 	sub.w	r4, r4, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454c      	cmp	r4, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	464d      	mov	r5, r9
 8000f90:	d315      	bcc.n	8000fbe <__udivmoddi4+0x2ae>
 8000f92:	d012      	beq.n	8000fba <__udivmoddi4+0x2aa>
 8000f94:	b156      	cbz	r6, 8000fac <__udivmoddi4+0x29c>
 8000f96:	ebba 030e 	subs.w	r3, sl, lr
 8000f9a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000fa2:	40cb      	lsrs	r3, r1
 8000fa4:	431f      	orrs	r7, r3
 8000fa6:	40cc      	lsrs	r4, r1
 8000fa8:	6037      	str	r7, [r6, #0]
 8000faa:	6074      	str	r4, [r6, #4]
 8000fac:	2100      	movs	r1, #0
 8000fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e6f8      	b.n	8000da8 <__udivmoddi4+0x98>
 8000fb6:	4690      	mov	r8, r2
 8000fb8:	e6e0      	b.n	8000d7c <__udivmoddi4+0x6c>
 8000fba:	45c2      	cmp	sl, r8
 8000fbc:	d2ea      	bcs.n	8000f94 <__udivmoddi4+0x284>
 8000fbe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc2:	eb69 0503 	sbc.w	r5, r9, r3
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7e4      	b.n	8000f94 <__udivmoddi4+0x284>
 8000fca:	4628      	mov	r0, r5
 8000fcc:	e7d7      	b.n	8000f7e <__udivmoddi4+0x26e>
 8000fce:	4640      	mov	r0, r8
 8000fd0:	e791      	b.n	8000ef6 <__udivmoddi4+0x1e6>
 8000fd2:	4681      	mov	r9, r0
 8000fd4:	e7be      	b.n	8000f54 <__udivmoddi4+0x244>
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	e778      	b.n	8000ecc <__udivmoddi4+0x1bc>
 8000fda:	3802      	subs	r0, #2
 8000fdc:	443c      	add	r4, r7
 8000fde:	e745      	b.n	8000e6c <__udivmoddi4+0x15c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xe6>
 8000fe4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fe8:	443d      	add	r5, r7
 8000fea:	e72b      	b.n	8000e44 <__udivmoddi4+0x134>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <BSP_LCD_Init+0xcc>)
 8000ff6:	2228      	movs	r2, #40	; 0x28
 8000ff8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000ffa:	4b30      	ldr	r3, [pc, #192]	; (80010bc <BSP_LCD_Init+0xcc>)
 8000ffc:	2209      	movs	r2, #9
 8000ffe:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001002:	2235      	movs	r2, #53	; 0x35
 8001004:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001008:	220b      	movs	r2, #11
 800100a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <BSP_LCD_Init+0xcc>)
 800100e:	f240 121b 	movw	r2, #283	; 0x11b
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001016:	f240 2215 	movw	r2, #533	; 0x215
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <BSP_LCD_Init+0xcc>)
 800101e:	f240 121d 	movw	r2, #285	; 0x11d
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001026:	f240 2235 	movw	r2, #565	; 0x235
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800102c:	2100      	movs	r1, #0
 800102e:	4823      	ldr	r0, [pc, #140]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001030:	f000 fcae 	bl	8001990 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001036:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800103a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <BSP_LCD_Init+0xcc>)
 800103e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001042:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <BSP_LCD_Init+0xcc>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <BSP_LCD_Init+0xcc>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <BSP_LCD_Init+0xcc>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <BSP_LCD_Init+0xd0>)
 8001078:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800107a:	4810      	ldr	r0, [pc, #64]	; (80010bc <BSP_LCD_Init+0xcc>)
 800107c:	f002 fcc4 	bl	8003a08 <HAL_LTDC_GetState>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d103      	bne.n	800108e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001086:	2100      	movs	r1, #0
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <BSP_LCD_Init+0xcc>)
 800108a:	f000 fba7 	bl	80017dc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001090:	f002 fba0 	bl	80037d4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <BSP_LCD_Init+0xd4>)
 800109c:	f002 fa58 	bl	8003550 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2108      	movs	r1, #8
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <BSP_LCD_Init+0xd8>)
 80010a6:	f002 fa53 	bl	8003550 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80010aa:	f00b fc35 	bl	800c918 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <BSP_LCD_Init+0xdc>)
 80010b0:	f000 f8d8 	bl	8001264 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000490 	.word	0x20000490
 80010c0:	40016800 	.word	0x40016800
 80010c4:	40022000 	.word	0x40022000
 80010c8:	40022800 	.word	0x40022800
 80010cc:	20000000 	.word	0x20000000

080010d0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <BSP_LCD_GetXSize+0x20>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <BSP_LCD_GetXSize+0x24>)
 80010da:	2134      	movs	r1, #52	; 0x34
 80010dc:	fb01 f303 	mul.w	r3, r1, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	3360      	adds	r3, #96	; 0x60
 80010e4:	681b      	ldr	r3, [r3, #0]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	200003a8 	.word	0x200003a8
 80010f4:	20000490 	.word	0x20000490

080010f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <BSP_LCD_GetYSize+0x20>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <BSP_LCD_GetYSize+0x24>)
 8001102:	2134      	movs	r1, #52	; 0x34
 8001104:	fb01 f303 	mul.w	r3, r1, r3
 8001108:	4413      	add	r3, r2
 800110a:	3364      	adds	r3, #100	; 0x64
 800110c:	681b      	ldr	r3, [r3, #0]
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	200003a8 	.word	0x200003a8
 800111c:	20000490 	.word	0x20000490

08001120 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001120:	b580      	push	{r7, lr}
 8001122:	b090      	sub	sp, #64	; 0x40
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001130:	f7ff ffce 	bl	80010d0 <BSP_LCD_GetXSize>
 8001134:	4603      	mov	r3, r0
 8001136:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800113c:	f7ff ffdc 	bl	80010f8 <BSP_LCD_GetYSize>
 8001140:	4603      	mov	r3, r0
 8001142:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001166:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800116c:	2307      	movs	r3, #7
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001170:	f7ff ffae 	bl	80010d0 <BSP_LCD_GetXSize>
 8001174:	4603      	mov	r3, r0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001178:	f7ff ffbe 	bl	80010f8 <BSP_LCD_GetYSize>
 800117c:	4603      	mov	r3, r0
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001180:	88fa      	ldrh	r2, [r7, #6]
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800118a:	f002 fbff 	bl	800398c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800118e:	88fa      	ldrh	r2, [r7, #6]
 8001190:	4911      	ldr	r1, [pc, #68]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	3304      	adds	r3, #4
 800119e:	f04f 32ff 	mov.w	r2, #4294967295
 80011a2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80011a4:	88fa      	ldrh	r2, [r7, #6]
 80011a6:	490c      	ldr	r1, [pc, #48]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	3308      	adds	r3, #8
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <BSP_LCD_LayerDefaultInit+0xbc>)
 80011b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80011b8:	88fa      	ldrh	r2, [r7, #6]
 80011ba:	4907      	ldr	r1, [pc, #28]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	3740      	adds	r7, #64	; 0x40
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000490 	.word	0x20000490
 80011d8:	200003ac 	.word	0x200003ac
 80011dc:	20000000 	.word	0x20000000

080011e0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <BSP_LCD_SelectLayer+0x1c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
} 
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	200003a8 	.word	0x200003a8

08001200 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <BSP_LCD_SetTextColor+0x28>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <BSP_LCD_SetTextColor+0x2c>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	200003a8 	.word	0x200003a8
 800122c:	200003ac 	.word	0x200003ac

08001230 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <BSP_LCD_SetBackColor+0x2c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4908      	ldr	r1, [pc, #32]	; (8001260 <BSP_LCD_SetBackColor+0x30>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3304      	adds	r3, #4
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200003a8 	.word	0x200003a8
 8001260:	200003ac 	.word	0x200003ac

08001264 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <BSP_LCD_SetFont+0x2c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4908      	ldr	r1, [pc, #32]	; (8001294 <BSP_LCD_SetFont+0x30>)
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	3308      	adds	r3, #8
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200003a8 	.word	0x200003a8
 8001294:	200003ac 	.word	0x200003ac

08001298 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <BSP_LCD_GetFont+0x24>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <BSP_LCD_GetFont+0x28>)
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	3308      	adds	r3, #8
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200003a8 	.word	0x200003a8
 80012c0:	200003ac 	.word	0x200003ac

080012c4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <BSP_LCD_Clear+0x48>)
 80012ce:	681c      	ldr	r4, [r3, #0]
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <BSP_LCD_Clear+0x48>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <BSP_LCD_Clear+0x4c>)
 80012d6:	2134      	movs	r1, #52	; 0x34
 80012d8:	fb01 f303 	mul.w	r3, r1, r3
 80012dc:	4413      	add	r3, r2
 80012de:	335c      	adds	r3, #92	; 0x5c
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	461d      	mov	r5, r3
 80012e4:	f7ff fef4 	bl	80010d0 <BSP_LCD_GetXSize>
 80012e8:	4606      	mov	r6, r0
 80012ea:	f7ff ff05 	bl	80010f8 <BSP_LCD_GetYSize>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	4632      	mov	r2, r6
 80012fc:	4629      	mov	r1, r5
 80012fe:	4620      	mov	r0, r4
 8001300:	f000 fc1a 	bl	8001b38 <LL_FillBuffer>
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130c:	200003a8 	.word	0x200003a8
 8001310:	20000490 	.word	0x20000490

08001314 <BSP_LCD_ClearStringLine>:
  * @brief  Clears the selected line.
  * @param  Line: Line to be cleared
  * @retval None
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	492d      	ldr	r1, [pc, #180]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	4827      	ldr	r0, [pc, #156]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800133a:	460b      	mov	r3, r1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	440b      	add	r3, r1
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4403      	add	r3, r0
 8001344:	3304      	adds	r3, #4
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	4823      	ldr	r0, [pc, #140]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4403      	add	r3, r0
 8001354:	6019      	str	r1, [r3, #0]
  
  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	491f      	ldr	r1, [pc, #124]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	3308      	adds	r3, #8
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	88da      	ldrh	r2, [r3, #6]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	b29b      	uxth	r3, r3
 8001370:	fb12 f303 	smulbb	r3, r2, r3
 8001374:	b29c      	uxth	r4, r3
 8001376:	f7ff feab 	bl	80010d0 <BSP_LCD_GetXSize>
 800137a:	4603      	mov	r3, r0
 800137c:	b298      	uxth	r0, r3
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4915      	ldr	r1, [pc, #84]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	3308      	adds	r3, #8
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	88db      	ldrh	r3, [r3, #6]
 8001394:	4602      	mov	r2, r0
 8001396:	4621      	mov	r1, r4
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f987 	bl	80016ac <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = color_backup;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff1b 	bl	8001200 <BSP_LCD_SetTextColor>
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200003a8 	.word	0x200003a8
 80013d8:	200003ac 	.word	0x200003ac

080013dc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	460b      	mov	r3, r1
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	491b      	ldr	r1, [pc, #108]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	3308      	adds	r3, #8
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4c14      	ldr	r4, [pc, #80]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4423      	add	r3, r4
 800141a:	3308      	adds	r3, #8
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001420:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4c0d      	ldr	r4, [pc, #52]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4423      	add	r3, r4
 8001434:	3308      	adds	r3, #8
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	889b      	ldrh	r3, [r3, #4]
 800143a:	3307      	adds	r3, #7
 800143c:	2b00      	cmp	r3, #0
 800143e:	da00      	bge.n	8001442 <BSP_LCD_DisplayChar+0x66>
 8001440:	3307      	adds	r3, #7
 8001442:	10db      	asrs	r3, r3, #3
 8001444:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001448:	18ca      	adds	r2, r1, r3
 800144a:	88b9      	ldrh	r1, [r7, #4]
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 faba 	bl	80019c8 <DrawChar>
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	200003a8 	.word	0x200003a8
 8001460:	200003ac 	.word	0x200003ac

08001464 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001464:	b5b0      	push	{r4, r5, r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	60ba      	str	r2, [r7, #8]
 800146c:	461a      	mov	r2, r3
 800146e:	4603      	mov	r3, r0
 8001470:	81fb      	strh	r3, [r7, #14]
 8001472:	460b      	mov	r3, r1
 8001474:	81bb      	strh	r3, [r7, #12]
 8001476:	4613      	mov	r3, r2
 8001478:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800147a:	2301      	movs	r3, #1
 800147c:	83fb      	strh	r3, [r7, #30]
 800147e:	2300      	movs	r3, #0
 8001480:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800148e:	e002      	b.n	8001496 <BSP_LCD_DisplayStringAt+0x32>
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	3301      	adds	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	617a      	str	r2, [r7, #20]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f6      	bne.n	8001490 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80014a2:	f7ff fe15 	bl	80010d0 <BSP_LCD_GetXSize>
 80014a6:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	494f      	ldr	r1, [pc, #316]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	3308      	adds	r3, #8
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	889b      	ldrh	r3, [r3, #4]
 80014bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c0:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d01c      	beq.n	8001502 <BSP_LCD_DisplayStringAt+0x9e>
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d017      	beq.n	80014fc <BSP_LCD_DisplayStringAt+0x98>
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d12e      	bne.n	800152e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	1ad1      	subs	r1, r2, r3
 80014d6:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4843      	ldr	r0, [pc, #268]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4403      	add	r3, r0
 80014e6:	3308      	adds	r3, #8
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	889b      	ldrh	r3, [r3, #4]
 80014ec:	fb03 f301 	mul.w	r3, r3, r1
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	4413      	add	r3, r2
 80014f8:	83fb      	strh	r3, [r7, #30]
      break;
 80014fa:	e01b      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	83fb      	strh	r3, [r7, #30]
      break;
 8001500:	e018      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	b299      	uxth	r1, r3
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4836      	ldr	r0, [pc, #216]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4403      	add	r3, r0
 800151a:	3308      	adds	r3, #8
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	fb11 f303 	smulbb	r3, r1, r3
 8001524:	b29a      	uxth	r2, r3
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	83fb      	strh	r3, [r7, #30]
      break;
 800152c:	e002      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	83fb      	strh	r3, [r7, #30]
      break;
 8001532:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001534:	8bfb      	ldrh	r3, [r7, #30]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <BSP_LCD_DisplayStringAt+0xde>
 800153a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da1d      	bge.n	800157e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001546:	e01a      	b.n	800157e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	89b9      	ldrh	r1, [r7, #12]
 800154e:	8bfb      	ldrh	r3, [r7, #30]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff43 	bl	80013dc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4923      	ldr	r1, [pc, #140]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3308      	adds	r3, #8
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	889a      	ldrh	r2, [r3, #4]
 800156c:	8bfb      	ldrh	r3, [r7, #30]
 800156e:	4413      	add	r3, r2
 8001570:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3301      	adds	r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
    i++;
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	3301      	adds	r3, #1
 800157c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	bf14      	ite	ne
 8001586:	2301      	movne	r3, #1
 8001588:	2300      	moveq	r3, #0
 800158a:	b2dc      	uxtb	r4, r3
 800158c:	f7ff fda0 	bl	80010d0 <BSP_LCD_GetXSize>
 8001590:	4605      	mov	r5, r0
 8001592:	8bb9      	ldrh	r1, [r7, #28]
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4813      	ldr	r0, [pc, #76]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4403      	add	r3, r0
 80015a4:	3308      	adds	r3, #8
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	fb03 f301 	mul.w	r3, r3, r1
 80015ae:	1aeb      	subs	r3, r5, r3
 80015b0:	b299      	uxth	r1, r3
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	480c      	ldr	r0, [pc, #48]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4403      	add	r3, r0
 80015c2:	3308      	adds	r3, #8
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	889b      	ldrh	r3, [r3, #4]
 80015c8:	4299      	cmp	r1, r3
 80015ca:	bf2c      	ite	cs
 80015cc:	2301      	movcs	r3, #1
 80015ce:	2300      	movcc	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4023      	ands	r3, r4
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1b6      	bne.n	8001548 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80015da:	bf00      	nop
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bdb0      	pop	{r4, r5, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200003a8 	.word	0x200003a8
 80015e8:	200003ac 	.word	0x200003ac

080015ec <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80015f8:	f7ff fe4e 	bl	8001298 <BSP_LCD_GetFont>
 80015fc:	4603      	mov	r3, r0
 80015fe:	88db      	ldrh	r3, [r3, #6]
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	fb12 f303 	smulbb	r3, r2, r3
 8001606:	b299      	uxth	r1, r3
 8001608:	2303      	movs	r3, #3
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ff29 	bl	8001464 <BSP_LCD_DisplayStringAt>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	603a      	str	r2, [r7, #0]
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	460b      	mov	r3, r1
 800162a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001632:	2134      	movs	r1, #52	; 0x34
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	3348      	adds	r3, #72	; 0x48
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d116      	bne.n	8001670 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001648:	2134      	movs	r1, #52	; 0x34
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	335c      	adds	r3, #92	; 0x5c
 8001652:	681c      	ldr	r4, [r3, #0]
 8001654:	88bd      	ldrh	r5, [r7, #4]
 8001656:	f7ff fd3b 	bl	80010d0 <BSP_LCD_GetXSize>
 800165a:	4603      	mov	r3, r0
 800165c:	fb03 f205 	mul.w	r2, r3, r5
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4423      	add	r3, r4
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b292      	uxth	r2, r2
 800166c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800166e:	e015      	b.n	800169c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001676:	2134      	movs	r1, #52	; 0x34
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	335c      	adds	r3, #92	; 0x5c
 8001680:	681c      	ldr	r4, [r3, #0]
 8001682:	88bd      	ldrh	r5, [r7, #4]
 8001684:	f7ff fd24 	bl	80010d0 <BSP_LCD_GetXSize>
 8001688:	4603      	mov	r3, r0
 800168a:	fb03 f205 	mul.w	r2, r3, r5
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4423      	add	r3, r4
 8001696:	461a      	mov	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bdb0      	pop	{r4, r5, r7, pc}
 80016a4:	200003a8 	.word	0x200003a8
 80016a8:	20000490 	.word	0x20000490

080016ac <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80016ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af02      	add	r7, sp, #8
 80016b4:	4604      	mov	r4, r0
 80016b6:	4608      	mov	r0, r1
 80016b8:	4611      	mov	r1, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4623      	mov	r3, r4
 80016be:	80fb      	strh	r3, [r7, #6]
 80016c0:	4603      	mov	r3, r0
 80016c2:	80bb      	strh	r3, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4930      	ldr	r1, [pc, #192]	; (8001798 <BSP_LCD_FillRect+0xec>)
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fd8c 	bl	8001200 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a2b      	ldr	r2, [pc, #172]	; (800179c <BSP_LCD_FillRect+0xf0>)
 80016ee:	2134      	movs	r1, #52	; 0x34
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	3348      	adds	r3, #72	; 0x48
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d114      	bne.n	8001728 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a26      	ldr	r2, [pc, #152]	; (800179c <BSP_LCD_FillRect+0xf0>)
 8001704:	2134      	movs	r1, #52	; 0x34
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	335c      	adds	r3, #92	; 0x5c
 800170e:	681c      	ldr	r4, [r3, #0]
 8001710:	f7ff fcde 	bl	80010d0 <BSP_LCD_GetXSize>
 8001714:	4602      	mov	r2, r0
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	fb03 f202 	mul.w	r2, r3, r2
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4413      	add	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4423      	add	r3, r4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e013      	b.n	8001750 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <BSP_LCD_FillRect+0xf0>)
 800172e:	2134      	movs	r1, #52	; 0x34
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	335c      	adds	r3, #92	; 0x5c
 8001738:	681c      	ldr	r4, [r3, #0]
 800173a:	f7ff fcc9 	bl	80010d0 <BSP_LCD_GetXSize>
 800173e:	4602      	mov	r2, r0
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	fb03 f202 	mul.w	r2, r3, r2
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4423      	add	r3, r4
 800174e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001752:	681c      	ldr	r4, [r3, #0]
 8001754:	68fd      	ldr	r5, [r7, #12]
 8001756:	887e      	ldrh	r6, [r7, #2]
 8001758:	f8b7 8000 	ldrh.w	r8, [r7]
 800175c:	f7ff fcb8 	bl	80010d0 <BSP_LCD_GetXSize>
 8001760:	4602      	mov	r2, r0
 8001762:	887b      	ldrh	r3, [r7, #2]
 8001764:	1ad1      	subs	r1, r2, r3
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <BSP_LCD_FillRect+0xec>)
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4403      	add	r3, r0
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	9100      	str	r1, [sp, #0]
 800177c:	4643      	mov	r3, r8
 800177e:	4632      	mov	r2, r6
 8001780:	4629      	mov	r1, r5
 8001782:	4620      	mov	r0, r4
 8001784:	f000 f9d8 	bl	8001b38 <LL_FillBuffer>
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001792:	bf00      	nop
 8001794:	200003a8 	.word	0x200003a8
 8001798:	200003ac 	.word	0x200003ac
 800179c:	20000490 	.word	0x20000490

080017a0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <BSP_LCD_DisplayOn+0x30>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <BSP_LCD_DisplayOn+0x30>)
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	6992      	ldr	r2, [r2, #24]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <BSP_LCD_DisplayOn+0x34>)
 80017bc:	f001 fec8 	bl	8003550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80017c0:	2201      	movs	r2, #1
 80017c2:	2108      	movs	r1, #8
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <BSP_LCD_DisplayOn+0x38>)
 80017c6:	f001 fec3 	bl	8003550 <HAL_GPIO_WritePin>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000490 	.word	0x20000490
 80017d4:	40022000 	.word	0x40022000
 80017d8:	40022800 	.word	0x40022800

080017dc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80017e6:	4a64      	ldr	r2, [pc, #400]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017e8:	4b63      	ldr	r3, [pc, #396]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b61      	ldr	r3, [pc, #388]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80017fe:	4a5e      	ldr	r2, [pc, #376]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001800:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	4a58      	ldr	r2, [pc, #352]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001818:	4b57      	ldr	r3, [pc, #348]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b55      	ldr	r3, [pc, #340]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800182e:	4a52      	ldr	r2, [pc, #328]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b4f      	ldr	r3, [pc, #316]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001846:	4a4c      	ldr	r2, [pc, #304]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800185e:	4a46      	ldr	r2, [pc, #280]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001860:	4b45      	ldr	r3, [pc, #276]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001876:	4a40      	ldr	r2, [pc, #256]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001878:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800188e:	4a3a      	ldr	r2, [pc, #232]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001890:	4b39      	ldr	r3, [pc, #228]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80018a6:	4a34      	ldr	r2, [pc, #208]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b31      	ldr	r3, [pc, #196]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80018be:	2310      	movs	r3, #16
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80018ca:	2302      	movs	r3, #2
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80018ce:	230e      	movs	r3, #14
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80018d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d6:	4619      	mov	r1, r3
 80018d8:	4828      	ldr	r0, [pc, #160]	; (800197c <BSP_LCD_MspInit+0x1a0>)
 80018da:	f001 fc8f 	bl	80031fc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80018de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80018e8:	2309      	movs	r3, #9
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80018ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f0:	4619      	mov	r1, r3
 80018f2:	4823      	ldr	r0, [pc, #140]	; (8001980 <BSP_LCD_MspInit+0x1a4>)
 80018f4:	f001 fc82 	bl	80031fc <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80018f8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001902:	230e      	movs	r3, #14
 8001904:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190a:	4619      	mov	r1, r3
 800190c:	481d      	ldr	r0, [pc, #116]	; (8001984 <BSP_LCD_MspInit+0x1a8>)
 800190e:	f001 fc75 	bl	80031fc <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001912:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800191c:	230e      	movs	r3, #14
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	4818      	ldr	r0, [pc, #96]	; (8001988 <BSP_LCD_MspInit+0x1ac>)
 8001928:	f001 fc68 	bl	80031fc <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800192c:	23f7      	movs	r3, #247	; 0xf7
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001934:	230e      	movs	r3, #14
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193c:	4619      	mov	r1, r3
 800193e:	4813      	ldr	r0, [pc, #76]	; (800198c <BSP_LCD_MspInit+0x1b0>)
 8001940:	f001 fc5c 	bl	80031fc <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <BSP_LCD_MspInit+0x1a8>)
 8001956:	f001 fc51 	bl	80031fc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800195a:	2308      	movs	r3, #8
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001966:	4619      	mov	r1, r3
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <BSP_LCD_MspInit+0x1b0>)
 800196a:	f001 fc47 	bl	80031fc <HAL_GPIO_Init>
}
 800196e:	bf00      	nop
 8001970:	3740      	adds	r7, #64	; 0x40
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40021000 	.word	0x40021000
 8001980:	40021800 	.word	0x40021800
 8001984:	40022000 	.word	0x40022000
 8001988:	40022400 	.word	0x40022400
 800198c:	40022800 	.word	0x40022800

08001990 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 800199c:	2208      	movs	r2, #8
 800199e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019a2:	22c0      	movs	r2, #192	; 0xc0
 80019a4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019a8:	2205      	movs	r2, #5
 80019aa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019b6:	f004 f815 	bl	80059e4 <HAL_RCCEx_PeriphCLKConfig>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200003c4 	.word	0x200003c4

080019c8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	603a      	str	r2, [r7, #0]
 80019d2:	80fb      	strh	r3, [r7, #6]
 80019d4:	460b      	mov	r3, r1
 80019d6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <DrawChar+0x168>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4953      	ldr	r1, [pc, #332]	; (8001b34 <DrawChar+0x16c>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3308      	adds	r3, #8
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	88db      	ldrh	r3, [r3, #6]
 80019f6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80019f8:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <DrawChar+0x168>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	494d      	ldr	r1, [pc, #308]	; (8001b34 <DrawChar+0x16c>)
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3308      	adds	r3, #8
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	889b      	ldrh	r3, [r3, #4]
 8001a0e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001a10:	8a3b      	ldrh	r3, [r7, #16]
 8001a12:	3307      	adds	r3, #7
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	da00      	bge.n	8001a1a <DrawChar+0x52>
 8001a18:	3307      	adds	r3, #7
 8001a1a:	10db      	asrs	r3, r3, #3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	8a3b      	ldrh	r3, [r7, #16]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e076      	b.n	8001b1e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001a30:	8a3b      	ldrh	r3, [r7, #16]
 8001a32:	3307      	adds	r3, #7
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da00      	bge.n	8001a3a <DrawChar+0x72>
 8001a38:	3307      	adds	r3, #7
 8001a3a:	10db      	asrs	r3, r3, #3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fb03 f302 	mul.w	r3, r3, r2
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8001a4a:	8a3b      	ldrh	r3, [r7, #16]
 8001a4c:	3307      	adds	r3, #7
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da00      	bge.n	8001a54 <DrawChar+0x8c>
 8001a52:	3307      	adds	r3, #7
 8001a54:	10db      	asrs	r3, r3, #3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d002      	beq.n	8001a60 <DrawChar+0x98>
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d004      	beq.n	8001a68 <DrawChar+0xa0>
 8001a5e:	e00c      	b.n	8001a7a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	617b      	str	r3, [r7, #20]
      break;
 8001a66:	e016      	b.n	8001a96 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	3201      	adds	r2, #1
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
      break;
 8001a78:	e00d      	b.n	8001a96 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	041a      	lsls	r2, r3, #16
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	3301      	adds	r3, #1
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	3202      	adds	r2, #2
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
      break;
 8001a94:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	e036      	b.n	8001b0a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001a9c:	8a3a      	ldrh	r2, [r7, #16]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad2      	subs	r2, r2, r3
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d012      	beq.n	8001ade <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	4413      	add	r3, r2
 8001ac0:	b298      	uxth	r0, r3
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <DrawChar+0x168>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	491b      	ldr	r1, [pc, #108]	; (8001b34 <DrawChar+0x16c>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff fda0 	bl	800161c <BSP_LCD_DrawPixel>
 8001adc:	e012      	b.n	8001b04 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b298      	uxth	r0, r3
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <DrawChar+0x168>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4911      	ldr	r1, [pc, #68]	; (8001b34 <DrawChar+0x16c>)
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	3304      	adds	r3, #4
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	88bb      	ldrh	r3, [r7, #4]
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff fd8c 	bl	800161c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	3301      	adds	r3, #1
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	8a3a      	ldrh	r2, [r7, #16]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d8c4      	bhi.n	8001a9c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001b12:	88bb      	ldrh	r3, [r7, #4]
 8001b14:	3301      	adds	r3, #1
 8001b16:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	8a7a      	ldrh	r2, [r7, #18]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d884      	bhi.n	8001a30 <DrawChar+0x68>
  }
}
 8001b26:	bf00      	nop
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200003a8 	.word	0x200003a8
 8001b34:	200003ac 	.word	0x200003ac

08001b38 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b4c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <LL_FillBuffer+0x8c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <LL_FillBuffer+0x90>)
 8001b54:	2134      	movs	r1, #52	; 0x34
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3348      	adds	r3, #72	; 0x48
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d103      	bne.n	8001b6c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b66:	2202      	movs	r2, #2
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	e002      	b.n	8001b72 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001b72:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <LL_FillBuffer+0x94>)
 8001b7c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001b7e:	4810      	ldr	r0, [pc, #64]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b80:	f001 f8a4 	bl	8002ccc <HAL_DMA2D_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d115      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b8e:	f001 f9fb 	bl	8002f88 <HAL_DMA2D_ConfigLayer>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10e      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69f9      	ldr	r1, [r7, #28]
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001ba4:	f001 f8dc 	bl	8002d60 <HAL_DMA2D_Start>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001bae:	210a      	movs	r1, #10
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001bb2:	f001 f900 	bl	8002db6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000368 	.word	0x20000368
 8001bc4:	200003a8 	.word	0x200003a8
 8001bc8:	20000490 	.word	0x20000490
 8001bcc:	4002b000 	.word	0x4002b000

08001bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <HAL_Init+0x34>)
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_Init+0x34>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_Init+0x34>)
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_Init+0x34>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 fc3b 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f00c ffca 	bl	800eb8c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001bf8:	f00c fd30 	bl	800e65c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023c00 	.word	0x40023c00

08001c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x20>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x24>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_IncTick+0x24>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000010 	.word	0x20000010
 8001c2c:	20000538 	.word	0x20000538

08001c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_GetTick+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000538 	.word	0x20000538

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff ffee 	bl	8001c30 <HAL_GetTick>
 8001c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d005      	beq.n	8001c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_Delay+0x40>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6e:	bf00      	nop
 8001c70:	f7ff ffde 	bl	8001c30 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad2      	subs	r2, r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3f7      	bcc.n	8001c70 <HAL_Delay+0x28>
  {
  }
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000010 	.word	0x20000010

08001c8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e031      	b.n	8001d06 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f00c fd01 	bl	800e6c0 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_ADC_Init+0x84>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	f043 0202 	orr.w	r2, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fa02 	bl	80020e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf6:	e001      	b.n	8001cfc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	ffffeefd 	.word	0xffffeefd

08001d14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Start+0x1a>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e085      	b.n	8001e3a <HAL_ADC_Start+0x126>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d018      	beq.n	8001d76 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	6892      	ldr	r2, [r2, #8]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d54:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <HAL_ADC_Start+0x134>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a3c      	ldr	r2, [pc, #240]	; (8001e4c <HAL_ADC_Start+0x138>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0c9a      	lsrs	r2, r3, #18
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d059      	beq.n	8001e38 <HAL_ADC_Start+0x124>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_ADC_Start+0x13c>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001daa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_ADC_Start+0xb8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f023 0206 	bic.w	r2, r3, #6
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
 8001dca:	e002      	b.n	8001dd2 <HAL_ADC_Start+0xbe>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001de2:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_ADC_Start+0x140>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10f      	bne.n	8001e10 <HAL_ADC_Start+0xfc>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d11c      	bne.n	8001e38 <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	6892      	ldr	r2, [r2, #8]
 8001e08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	e013      	b.n	8001e38 <HAL_ADC_Start+0x124>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_ADC_Start+0x144>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10e      	bne.n	8001e38 <HAL_ADC_Start+0x124>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	6892      	ldr	r2, [r2, #8]
 8001e32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e36:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000124 	.word	0x20000124
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	fffff8fe 	.word	0xfffff8fe
 8001e54:	40012300 	.word	0x40012300
 8001e58:	40012000 	.word	0x40012000

08001e5c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e78:	b490      	push	{r4, r7}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1c>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e117      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x24c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	d936      	bls.n	8001f12 <HAL_ADC_ConfigChannel+0x9a>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4403      	add	r3, r0
 8001ebc:	3b1e      	subs	r3, #30
 8001ebe:	2007      	movs	r0, #7
 8001ec0:	fa00 f303 	lsl.w	r3, r0, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	60d3      	str	r3, [r2, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a80      	ldr	r2, [pc, #512]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d10a      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	68d1      	ldr	r1, [r2, #12]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	6892      	ldr	r2, [r2, #8]
 8001ee2:	0612      	lsls	r2, r2, #24
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	e037      	b.n	8001f5a <HAL_ADC_ConfigChannel+0xe2>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68d9      	ldr	r1, [r3, #12]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6898      	ldr	r0, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	461c      	mov	r4, r3
 8001f00:	4623      	mov	r3, r4
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4423      	add	r3, r4
 8001f06:	3b1e      	subs	r3, #30
 8001f08:	fa00 f303 	lsl.w	r3, r0, r3
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	60d3      	str	r3, [r2, #12]
 8001f10:	e023      	b.n	8001f5a <HAL_ADC_ConfigChannel+0xe2>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6919      	ldr	r1, [r3, #16]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4403      	add	r3, r0
 8001f2a:	2007      	movs	r0, #7
 8001f2c:	fa00 f303 	lsl.w	r3, r0, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	400b      	ands	r3, r1
 8001f34:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6919      	ldr	r1, [r3, #16]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6898      	ldr	r0, [r3, #8]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	461c      	mov	r4, r3
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4423      	add	r3, r4
 8001f52:	fa00 f303 	lsl.w	r3, r0, r3
 8001f56:	430b      	orrs	r3, r1
 8001f58:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d824      	bhi.n	8001fac <HAL_ADC_ConfigChannel+0x134>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6819      	ldr	r1, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	3b05      	subs	r3, #5
 8001f78:	221f      	movs	r2, #31
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4003      	ands	r3, r0
 8001f82:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461c      	mov	r4, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b05      	subs	r3, #5
 8001fa2:	fa04 f303 	lsl.w	r3, r4, r3
 8001fa6:	4303      	orrs	r3, r0
 8001fa8:	634b      	str	r3, [r1, #52]	; 0x34
 8001faa:	e04c      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d824      	bhi.n	8001ffe <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6819      	ldr	r1, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b23      	subs	r3, #35	; 0x23
 8001fca:	221f      	movs	r2, #31
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4003      	ands	r3, r0
 8001fd4:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461c      	mov	r4, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3b23      	subs	r3, #35	; 0x23
 8001ff4:	fa04 f303 	lsl.w	r3, r4, r3
 8001ff8:	4303      	orrs	r3, r0
 8001ffa:	630b      	str	r3, [r1, #48]	; 0x30
 8001ffc:	e023      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6819      	ldr	r1, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b41      	subs	r3, #65	; 0x41
 8002014:	221f      	movs	r2, #31
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	4003      	ands	r3, r0
 800201e:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	461c      	mov	r4, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	3b41      	subs	r3, #65	; 0x41
 800203e:	fa04 f303 	lsl.w	r3, r4, r3
 8002042:	4303      	orrs	r3, r0
 8002044:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <HAL_ADC_ConfigChannel+0x25c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d109      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1ec>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b12      	cmp	r3, #18
 8002056:	d105      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002058:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002062:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1a      	ldr	r2, [pc, #104]	; (80020d4 <HAL_ADC_ConfigChannel+0x25c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d125      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <HAL_ADC_ConfigChannel+0x208>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b11      	cmp	r3, #17
 800207e:	d11c      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002080:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800208a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d111      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_ADC_ConfigChannel+0x264>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_ADC_ConfigChannel+0x268>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	0c9a      	lsrs	r2, r3, #18
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020ac:	e002      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x23c>
      {
        counter--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f9      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x236>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc90      	pop	{r4, r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	10000012 	.word	0x10000012
 80020d4:	40012000 	.word	0x40012000
 80020d8:	40012300 	.word	0x40012300
 80020dc:	20000124 	.word	0x20000124
 80020e0:	431bde83 	.word	0x431bde83

080020e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020ec:	4a77      	ldr	r2, [pc, #476]	; (80022cc <ADC_Init+0x1e8>)
 80020ee:	4b77      	ldr	r3, [pc, #476]	; (80022cc <ADC_Init+0x1e8>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020f8:	4974      	ldr	r1, [pc, #464]	; (80022cc <ADC_Init+0x1e8>)
 80020fa:	4b74      	ldr	r3, [pc, #464]	; (80022cc <ADC_Init+0x1e8>)
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	6852      	ldr	r2, [r2, #4]
 8002110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	6851      	ldr	r1, [r2, #4]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6912      	ldr	r2, [r2, #16]
 8002124:	0212      	lsls	r2, r2, #8
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	6852      	ldr	r2, [r2, #4]
 8002134:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	6851      	ldr	r1, [r2, #4]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6892      	ldr	r2, [r2, #8]
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	6892      	ldr	r2, [r2, #8]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	6891      	ldr	r1, [r2, #8]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68d2      	ldr	r2, [r2, #12]
 800216a:	430a      	orrs	r2, r1
 800216c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	4a57      	ldr	r2, [pc, #348]	; (80022d0 <ADC_Init+0x1ec>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d022      	beq.n	80021be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	6892      	ldr	r2, [r2, #8]
 8002182:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	6891      	ldr	r1, [r2, #8]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	6892      	ldr	r2, [r2, #8]
 80021a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	6891      	ldr	r1, [r2, #8]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e00f      	b.n	80021de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	6892      	ldr	r2, [r2, #8]
 80021c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	6892      	ldr	r2, [r2, #8]
 80021d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	6892      	ldr	r2, [r2, #8]
 80021e8:	f022 0202 	bic.w	r2, r2, #2
 80021ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	6891      	ldr	r1, [r2, #8]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6992      	ldr	r2, [r2, #24]
 80021fc:	0052      	lsls	r2, r2, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d01b      	beq.n	8002242 <ADC_Init+0x15e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	6852      	ldr	r2, [r2, #4]
 8002214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002218:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	6852      	ldr	r2, [r2, #4]
 8002224:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002228:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	6851      	ldr	r1, [r2, #4]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002238:	3a01      	subs	r2, #1
 800223a:	0352      	lsls	r2, r2, #13
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	e007      	b.n	8002252 <ADC_Init+0x16e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	6852      	ldr	r2, [r2, #4]
 800224c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002250:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800225c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	69d2      	ldr	r2, [r2, #28]
 8002270:	3a01      	subs	r2, #1
 8002272:	0512      	lsls	r2, r2, #20
 8002274:	430a      	orrs	r2, r1
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	6892      	ldr	r2, [r2, #8]
 8002282:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	6891      	ldr	r1, [r2, #8]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002296:	0252      	lsls	r2, r2, #9
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	6891      	ldr	r1, [r2, #8]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6952      	ldr	r2, [r2, #20]
 80022ba:	0292      	lsls	r2, r2, #10
 80022bc:	430a      	orrs	r2, r1
 80022be:	609a      	str	r2, [r3, #8]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40012300 	.word	0x40012300
 80022d0:	0f000001 	.word	0x0f000001

080022d4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <NVIC_SetPriorityGrouping+0x40>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <NVIC_SetPriorityGrouping+0x44>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <NVIC_SetPriorityGrouping+0x40>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00
 8002318:	05fa0000 	.word	0x05fa0000

0800231c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002342:	4909      	ldr	r1, [pc, #36]	; (8002368 <NVIC_EnableIRQ+0x30>)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	79fa      	ldrb	r2, [r7, #7]
 800234c:	f002 021f 	and.w	r2, r2, #31
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	da0b      	bge.n	8002398 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	490d      	ldr	r1, [pc, #52]	; (80023b8 <NVIC_SetPriority+0x4c>)
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	3b04      	subs	r3, #4
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002396:	e009      	b.n	80023ac <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	4908      	ldr	r1, [pc, #32]	; (80023bc <NVIC_SetPriority+0x50>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	2201      	movs	r2, #1
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	401a      	ands	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002406:	2101      	movs	r1, #1
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	1e59      	subs	r1, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
         );
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002434:	d301      	bcc.n	800243a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002436:	2301      	movs	r3, #1
 8002438:	e00f      	b.n	800245a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <SysTick_Config+0x40>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002442:	210f      	movs	r1, #15
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f7ff ff90 	bl	800236c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <SysTick_Config+0x40>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SysTick_Config+0x40>)
 8002454:	2207      	movs	r2, #7
 8002456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff2f 	bl	80022d4 <NVIC_SetPriorityGrouping>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002490:	f7ff ff44 	bl	800231c <NVIC_GetPriorityGrouping>
 8002494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ff90 	bl	80023c0 <NVIC_EncodePriority>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff5f 	bl	800236c <NVIC_SetPriority>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff37 	bl	8002338 <NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffa2 	bl	8002424 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d106      	bne.n	8002508 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002506:	e005      	b.n	8002514 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002508:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002528:	f000 f802 	bl	8002530 <HAL_SYSTICK_Callback>
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e054      	b.n	80025fc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7f5b      	ldrb	r3, [r3, #29]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f00c f8e6 	bl	800e734 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	791b      	ldrb	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a22      	ldr	r2, [pc, #136]	; (8002604 <HAL_CRC_Init+0xc4>)
 800257c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	6892      	ldr	r2, [r2, #8]
 8002588:	f022 0218 	bic.w	r2, r2, #24
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	e00c      	b.n	80025aa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	461a      	mov	r2, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f834 	bl	8002608 <HAL_CRCEx_Polynomial_Set>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e028      	b.n	80025fc <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	795b      	ldrb	r3, [r3, #5]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ba:	611a      	str	r2, [r3, #16]
 80025bc:	e004      	b.n	80025c8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6912      	ldr	r2, [r2, #16]
 80025c6:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	6892      	ldr	r2, [r2, #8]
 80025d2:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6952      	ldr	r2, [r2, #20]
 80025da:	430a      	orrs	r2, r1
 80025dc:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	6892      	ldr	r2, [r2, #8]
 80025e8:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6992      	ldr	r2, [r2, #24]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	04c11db7 	.word	0x04c11db7

08002608 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002614:	231f      	movs	r3, #31
 8002616:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8002618:	bf00      	nop
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d104      	bne.n	8002634 <HAL_CRCEx_Polynomial_Set+0x2c>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	1e5a      	subs	r2, r3, #1
 800262e:	617a      	str	r2, [r7, #20]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f2      	bne.n	800261a <HAL_CRCEx_Polynomial_Set+0x12>
  {
  }

  switch (PolyLength)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b18      	cmp	r3, #24
 8002638:	d843      	bhi.n	80026c2 <HAL_CRCEx_Polynomial_Set+0xba>
 800263a:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <HAL_CRCEx_Polynomial_Set+0x38>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	080026c3 	.word	0x080026c3
 8002644:	080026c3 	.word	0x080026c3
 8002648:	080026c3 	.word	0x080026c3
 800264c:	080026c3 	.word	0x080026c3
 8002650:	080026c3 	.word	0x080026c3
 8002654:	080026c3 	.word	0x080026c3
 8002658:	080026c3 	.word	0x080026c3
 800265c:	080026c3 	.word	0x080026c3
 8002660:	080026b9 	.word	0x080026b9
 8002664:	080026c3 	.word	0x080026c3
 8002668:	080026c3 	.word	0x080026c3
 800266c:	080026c3 	.word	0x080026c3
 8002670:	080026c3 	.word	0x080026c3
 8002674:	080026c3 	.word	0x080026c3
 8002678:	080026c3 	.word	0x080026c3
 800267c:	080026c3 	.word	0x080026c3
 8002680:	080026af 	.word	0x080026af
 8002684:	080026c3 	.word	0x080026c3
 8002688:	080026c3 	.word	0x080026c3
 800268c:	080026c3 	.word	0x080026c3
 8002690:	080026c3 	.word	0x080026c3
 8002694:	080026c3 	.word	0x080026c3
 8002698:	080026c3 	.word	0x080026c3
 800269c:	080026c3 	.word	0x080026c3
 80026a0:	080026a5 	.word	0x080026a5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d90d      	bls.n	80026c6 <HAL_CRCEx_Polynomial_Set+0xbe>
      { 
        return  HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e01f      	b.n	80026ee <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b07      	cmp	r3, #7
 80026b2:	d90a      	bls.n	80026ca <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e01a      	b.n	80026ee <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	d907      	bls.n	80026ce <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e015      	b.n	80026ee <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
  default:
      break;
 80026c2:	bf00      	nop
 80026c4:	e004      	b.n	80026d0 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026c6:	bf00      	nop
 80026c8:	e002      	b.n	80026d0 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026ca:	bf00      	nop
 80026cc:	e000      	b.n	80026d0 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026ce:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	6892      	ldr	r2, [r2, #8]
 80026e2:	f022 0118 	bic.w	r1, r2, #24
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop

080026fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff fa92 	bl	8001c30 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e099      	b.n	800284c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002738:	e00f      	b.n	800275a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800273a:	f7ff fa79 	bl	8001c30 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b05      	cmp	r3, #5
 8002746:	d908      	bls.n	800275a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2203      	movs	r2, #3
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e078      	b.n	800284c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e8      	bne.n	800273a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4b38      	ldr	r3, [pc, #224]	; (8002854 <HAL_DMA_Init+0x158>)
 8002774:	4013      	ands	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d107      	bne.n	80027c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	4313      	orrs	r3, r2
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f023 0307 	bic.w	r3, r3, #7
 80027da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d117      	bne.n	800281e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00e      	beq.n	800281e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f9e9 	bl	8002bd8 <DMA_CheckFifoParam>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800281a:	2301      	movs	r3, #1
 800281c:	e016      	b.n	800284c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f9a0 	bl	8002b6c <DMA_CalcBaseAndBitshift>
 800282c:	4603      	mov	r3, r0
 800282e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	223f      	movs	r2, #63	; 0x3f
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	f010803f 	.word	0xf010803f

08002858 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002864:	4b92      	ldr	r3, [pc, #584]	; (8002ab0 <HAL_DMA_IRQHandler+0x258>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a92      	ldr	r2, [pc, #584]	; (8002ab4 <HAL_DMA_IRQHandler+0x25c>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0a9b      	lsrs	r3, r3, #10
 8002870:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	2208      	movs	r2, #8
 8002884:	409a      	lsls	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d01a      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	f022 0204 	bic.w	r2, r2, #4
 80028aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	2208      	movs	r2, #8
 80028b2:	409a      	lsls	r2, r3
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	2201      	movs	r2, #1
 80028ca:	409a      	lsls	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d012      	beq.n	80028fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	2201      	movs	r2, #1
 80028e8:	409a      	lsls	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	f043 0202 	orr.w	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	2204      	movs	r2, #4
 8002900:	409a      	lsls	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d012      	beq.n	8002930 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	2204      	movs	r2, #4
 800291e:	409a      	lsls	r2, r3
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	2210      	movs	r2, #16
 8002936:	409a      	lsls	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d043      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d03c      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	2210      	movs	r2, #16
 8002954:	409a      	lsls	r2, r3
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d018      	beq.n	800299a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d108      	bne.n	8002988 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d024      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
 8002986:	e01f      	b.n	80029c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01b      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
 8002998:	e016      	b.n	80029c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d107      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	f022 0208 	bic.w	r2, r2, #8
 80029b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	2220      	movs	r2, #32
 80029ce:	409a      	lsls	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 808e 	beq.w	8002af6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8086 	beq.w	8002af6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	2220      	movs	r2, #32
 80029f0:	409a      	lsls	r2, r3
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d136      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	f022 0216 	bic.w	r2, r2, #22
 8002a10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	6952      	ldr	r2, [r2, #20]
 8002a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_DMA_IRQHandler+0x1da>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	f022 0208 	bic.w	r2, r2, #8
 8002a40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	223f      	movs	r2, #63	; 0x3f
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d07d      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
        }
        return;
 8002a6e:	e078      	b.n	8002b62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d01c      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d108      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d030      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
 8002a9c:	e02b      	b.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d027      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
 8002aae:	e022      	b.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
 8002ab0:	20000124 	.word	0x20000124
 8002ab4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10f      	bne.n	8002ae6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	f022 0210 	bic.w	r2, r2, #16
 8002ad4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d032      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d022      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2205      	movs	r2, #5
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	f022 0201 	bic.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3301      	adds	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d807      	bhi.n	8002b3e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f2      	bne.n	8002b22 <HAL_DMA_IRQHandler+0x2ca>
 8002b3c:	e000      	b.n	8002b40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b3e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
 8002b60:	e000      	b.n	8002b64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b62:	bf00      	nop
    }
  }
}
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop

08002b6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	3b10      	subs	r3, #16
 8002b7c:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <DMA_CalcBaseAndBitshift+0x60>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <DMA_CalcBaseAndBitshift+0x64>)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d908      	bls.n	8002bac <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	1d1a      	adds	r2, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	659a      	str	r2, [r3, #88]	; 0x58
 8002baa:	e006      	b.n	8002bba <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	aaaaaaab 	.word	0xaaaaaaab
 8002bd0:	08015628 	.word	0x08015628
 8002bd4:	fffffc00 	.word	0xfffffc00

08002bd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11f      	bne.n	8002c32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d855      	bhi.n	8002ca4 <DMA_CheckFifoParam+0xcc>
 8002bf8:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <DMA_CheckFifoParam+0x28>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002c11 	.word	0x08002c11
 8002c04:	08002c23 	.word	0x08002c23
 8002c08:	08002c11 	.word	0x08002c11
 8002c0c:	08002ca5 	.word	0x08002ca5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d045      	beq.n	8002ca8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c20:	e042      	b.n	8002ca8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c2a:	d13f      	bne.n	8002cac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c30:	e03c      	b.n	8002cac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3a:	d121      	bne.n	8002c80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d836      	bhi.n	8002cb0 <DMA_CheckFifoParam+0xd8>
 8002c42:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <DMA_CheckFifoParam+0x70>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002c59 	.word	0x08002c59
 8002c4c:	08002c5f 	.word	0x08002c5f
 8002c50:	08002c59 	.word	0x08002c59
 8002c54:	08002c71 	.word	0x08002c71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5c:	e02f      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d024      	beq.n	8002cb4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6e:	e021      	b.n	8002cb4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c78:	d11e      	bne.n	8002cb8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c7e:	e01b      	b.n	8002cb8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d902      	bls.n	8002c8c <DMA_CheckFifoParam+0xb4>
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d003      	beq.n	8002c92 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c8a:	e018      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c90:	e015      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00e      	beq.n	8002cbc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca2:	e00b      	b.n	8002cbc <DMA_CheckFifoParam+0xe4>
      break;
 8002ca4:	bf00      	nop
 8002ca6:	e00a      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002ca8:	bf00      	nop
 8002caa:	e008      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002cac:	bf00      	nop
 8002cae:	e006      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002cb0:	bf00      	nop
 8002cb2:	e004      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002cb4:	bf00      	nop
 8002cb6:	e002      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;   
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002cbc:	bf00      	nop
    }
  } 
  
  return status; 
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e039      	b.n	8002d52 <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f00b fd3e 	bl	800e774 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6852      	ldr	r2, [r2, #4]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d20:	f022 0107 	bic.w	r1, r2, #7
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6892      	ldr	r2, [r2, #8]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_DMA2D_Init+0x90>)
 8002d38:	400b      	ands	r3, r1
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	68c9      	ldr	r1, [r1, #12]
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	ffffc000 	.word	0xffffc000

08002d60 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_DMA2D_Start+0x1c>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e018      	b.n	8002dae <HAL_DMA2D_Start+0x4e>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f98a 	bl	80030b0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d056      	beq.n	8002e84 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002dd6:	f7fe ff2b 	bl	8001c30 <HAL_GetTick>
 8002dda:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002ddc:	e04b      	b.n	8002e76 <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d023      	beq.n	8002e38 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	f043 0202 	orr.w	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2221      	movs	r2, #33	; 0x21
 8002e22:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2204      	movs	r2, #4
 8002e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0a2      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3e:	d01a      	beq.n	8002e76 <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_DMA2D_PollForTransfer+0xa0>
 8002e46:	f7fe fef3 	bl	8001c30 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad2      	subs	r2, r2, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d90f      	bls.n	8002e76 <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	f043 0220 	orr.w	r2, r3, #32
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2203      	movs	r2, #3
 8002e66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e083      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ac      	beq.n	8002dde <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d061      	beq.n	8002f64 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ea0:	f7fe fec6 	bl	8001c30 <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002ea6:	e056      	b.n	8002f56 <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d02e      	beq.n	8002f18 <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	f043 0202 	orr.w	r2, r3, #2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2229      	movs	r2, #41	; 0x29
 8002f02:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2204      	movs	r2, #4
 8002f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d01a      	beq.n	8002f56 <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_DMA2D_PollForTransfer+0x180>
 8002f26:	f7fe fe83 	bl	8001c30 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad2      	subs	r2, r2, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d90f      	bls.n	8002f56 <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2203      	movs	r2, #3
 8002f46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e013      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0a1      	beq.n	8002ea8 <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2212      	movs	r2, #18
 8002f6a:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	3318      	adds	r3, #24
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_DMA2D_ConfigLayer+0x34>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e071      	b.n	80030a0 <HAL_DMA2D_ConfigLayer+0x118>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	041b      	lsls	r3, r3, #16
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002fda:	4b34      	ldr	r3, [pc, #208]	; (80030ac <HAL_DMA2D_ConfigLayer+0x124>)
 8002fdc:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b0a      	cmp	r3, #10
 8002fe4:	d003      	beq.n	8002fee <HAL_DMA2D_ConfigLayer+0x66>
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b09      	cmp	r3, #9
 8002fec:	d107      	bne.n	8002ffe <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	e005      	b.n	800300a <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d11f      	bne.n	8003050 <HAL_DMA2D_ConfigLayer+0xc8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	43d2      	mvns	r2, r2
 800301e:	4011      	ands	r1, r2
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	430a      	orrs	r2, r1
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b0a      	cmp	r3, #10
 8003036:	d003      	beq.n	8003040 <HAL_DMA2D_ConfigLayer+0xb8>
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b09      	cmp	r3, #9
 800303e:	d126      	bne.n	800308e <HAL_DMA2D_ConfigLayer+0x106>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	68d2      	ldr	r2, [r2, #12]
 8003048:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
 800304e:	e01e      	b.n	800308e <HAL_DMA2D_ConfigLayer+0x106>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	69d1      	ldr	r1, [r2, #28]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	43d2      	mvns	r2, r2
 800305e:	4011      	ands	r1, r2
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	430a      	orrs	r2, r1
 8003064:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b0a      	cmp	r3, #10
 8003076:	d003      	beq.n	8003080 <HAL_DMA2D_ConfigLayer+0xf8>
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b09      	cmp	r3, #9
 800307e:	d106      	bne.n	800308e <HAL_DMA2D_ConfigLayer+0x106>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	68d2      	ldr	r2, [r2, #12]
 8003088:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800308c:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	ff03000f 	.word	0xff03000f

080030b0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 80030b0:	b480      	push	{r7}
 80030b2:	b08b      	sub	sp, #44	; 0x2c
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030dc:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	0410      	lsls	r0, r2, #16
 80030e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e6:	4302      	orrs	r2, r0
 80030e8:	430a      	orrs	r2, r1
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030fc:	d174      	bne.n	80031e8 <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003104:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800310c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003114:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d108      	bne.n	8003136 <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	431a      	orrs	r2, r3
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	431a      	orrs	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
 8003134:	e053      	b.n	80031de <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d106      	bne.n	800314c <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	431a      	orrs	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
 800314a:	e048      	b.n	80031de <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d111      	bne.n	8003178 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	0cdb      	lsrs	r3, r3, #19
 8003158:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	0a9b      	lsrs	r3, r3, #10
 800315e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	08db      	lsrs	r3, r3, #3
 8003164:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	02db      	lsls	r3, r3, #11
 800316e:	431a      	orrs	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
 8003176:	e032      	b.n	80031de <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b03      	cmp	r3, #3
 800317e:	d117      	bne.n	80031b0 <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	0fdb      	lsrs	r3, r3, #31
 8003184:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	0cdb      	lsrs	r3, r3, #19
 800318a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	0adb      	lsrs	r3, r3, #11
 8003190:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	08db      	lsrs	r3, r3, #3
 8003196:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	029b      	lsls	r3, r3, #10
 80031a0:	431a      	orrs	r2, r3
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	03db      	lsls	r3, r3, #15
 80031a6:	431a      	orrs	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
 80031ae:	e016      	b.n	80031de <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	0f1b      	lsrs	r3, r3, #28
 80031b4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	0d1b      	lsrs	r3, r3, #20
 80031ba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	0b1b      	lsrs	r3, r3, #12
 80031c0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	011a      	lsls	r2, r3, #4
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	431a      	orrs	r2, r3
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	031b      	lsls	r3, r3, #12
 80031d6:	431a      	orrs	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80031e6:	e003      	b.n	80031f0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	60da      	str	r2, [r3, #12]
}
 80031f0:	bf00      	nop
 80031f2:	372c      	adds	r7, #44	; 0x2c
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e175      	b.n	8003508 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800321c:	2201      	movs	r2, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	429a      	cmp	r2, r3
 8003236:	f040 8164 	bne.w	8003502 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x4e>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b12      	cmp	r3, #18
 8003248:	d123      	bne.n	8003292 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	08da      	lsrs	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3208      	adds	r2, #8
 8003252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	220f      	movs	r2, #15
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	08da      	lsrs	r2, r3, #3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3208      	adds	r2, #8
 800328c:	69b9      	ldr	r1, [r7, #24]
 800328e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0203 	and.w	r2, r3, #3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00b      	beq.n	80032e6 <HAL_GPIO_Init+0xea>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d007      	beq.n	80032e6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032da:	2b11      	cmp	r3, #17
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b12      	cmp	r3, #18
 80032e4:	d130      	bne.n	8003348 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	2203      	movs	r2, #3
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800331c:	2201      	movs	r2, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 0201 	and.w	r2, r3, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	2203      	movs	r2, #3
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80be 	beq.w	8003502 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	4a65      	ldr	r2, [pc, #404]	; (800351c <HAL_GPIO_Init+0x320>)
 8003388:	4b64      	ldr	r3, [pc, #400]	; (800351c <HAL_GPIO_Init+0x320>)
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003390:	6453      	str	r3, [r2, #68]	; 0x44
 8003392:	4b62      	ldr	r3, [pc, #392]	; (800351c <HAL_GPIO_Init+0x320>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800339e:	4a60      	ldr	r2, [pc, #384]	; (8003520 <HAL_GPIO_Init+0x324>)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a57      	ldr	r2, [pc, #348]	; (8003524 <HAL_GPIO_Init+0x328>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d037      	beq.n	800343a <HAL_GPIO_Init+0x23e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a56      	ldr	r2, [pc, #344]	; (8003528 <HAL_GPIO_Init+0x32c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d031      	beq.n	8003436 <HAL_GPIO_Init+0x23a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a55      	ldr	r2, [pc, #340]	; (800352c <HAL_GPIO_Init+0x330>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d02b      	beq.n	8003432 <HAL_GPIO_Init+0x236>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a54      	ldr	r2, [pc, #336]	; (8003530 <HAL_GPIO_Init+0x334>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d025      	beq.n	800342e <HAL_GPIO_Init+0x232>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a53      	ldr	r2, [pc, #332]	; (8003534 <HAL_GPIO_Init+0x338>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01f      	beq.n	800342a <HAL_GPIO_Init+0x22e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_GPIO_Init+0x33c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d019      	beq.n	8003426 <HAL_GPIO_Init+0x22a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a51      	ldr	r2, [pc, #324]	; (800353c <HAL_GPIO_Init+0x340>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_GPIO_Init+0x226>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a50      	ldr	r2, [pc, #320]	; (8003540 <HAL_GPIO_Init+0x344>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00d      	beq.n	800341e <HAL_GPIO_Init+0x222>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a4f      	ldr	r2, [pc, #316]	; (8003544 <HAL_GPIO_Init+0x348>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <HAL_GPIO_Init+0x21e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a4e      	ldr	r2, [pc, #312]	; (8003548 <HAL_GPIO_Init+0x34c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_GPIO_Init+0x21a>
 8003412:	2309      	movs	r3, #9
 8003414:	e012      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003416:	230a      	movs	r3, #10
 8003418:	e010      	b.n	800343c <HAL_GPIO_Init+0x240>
 800341a:	2308      	movs	r3, #8
 800341c:	e00e      	b.n	800343c <HAL_GPIO_Init+0x240>
 800341e:	2307      	movs	r3, #7
 8003420:	e00c      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003422:	2306      	movs	r3, #6
 8003424:	e00a      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003426:	2305      	movs	r3, #5
 8003428:	e008      	b.n	800343c <HAL_GPIO_Init+0x240>
 800342a:	2304      	movs	r3, #4
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x240>
 800342e:	2303      	movs	r3, #3
 8003430:	e004      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003432:	2302      	movs	r3, #2
 8003434:	e002      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_GPIO_Init+0x240>
 800343a:	2300      	movs	r3, #0
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	f002 0203 	and.w	r2, r2, #3
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	4093      	lsls	r3, r2
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800344c:	4934      	ldr	r1, [pc, #208]	; (8003520 <HAL_GPIO_Init+0x324>)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	089b      	lsrs	r3, r3, #2
 8003452:	3302      	adds	r3, #2
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800345a:	4b3c      	ldr	r3, [pc, #240]	; (800354c <HAL_GPIO_Init+0x350>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800347e:	4a33      	ldr	r2, [pc, #204]	; (800354c <HAL_GPIO_Init+0x350>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003484:	4b31      	ldr	r3, [pc, #196]	; (800354c <HAL_GPIO_Init+0x350>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034a8:	4a28      	ldr	r2, [pc, #160]	; (800354c <HAL_GPIO_Init+0x350>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ae:	4b27      	ldr	r3, [pc, #156]	; (800354c <HAL_GPIO_Init+0x350>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034d2:	4a1e      	ldr	r2, [pc, #120]	; (800354c <HAL_GPIO_Init+0x350>)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034d8:	4b1c      	ldr	r3, [pc, #112]	; (800354c <HAL_GPIO_Init+0x350>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034fc:	4a13      	ldr	r2, [pc, #76]	; (800354c <HAL_GPIO_Init+0x350>)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3301      	adds	r3, #1
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2b0f      	cmp	r3, #15
 800350c:	f67f ae86 	bls.w	800321c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003510:	bf00      	nop
 8003512:	3724      	adds	r7, #36	; 0x24
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	40023800 	.word	0x40023800
 8003520:	40013800 	.word	0x40013800
 8003524:	40020000 	.word	0x40020000
 8003528:	40020400 	.word	0x40020400
 800352c:	40020800 	.word	0x40020800
 8003530:	40020c00 	.word	0x40020c00
 8003534:	40021000 	.word	0x40021000
 8003538:	40021400 	.word	0x40021400
 800353c:	40021800 	.word	0x40021800
 8003540:	40021c00 	.word	0x40021c00
 8003544:	40022000 	.word	0x40022000
 8003548:	40022400 	.word	0x40022400
 800354c:	40013c00 	.word	0x40013c00

08003550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
 800355c:	4613      	mov	r3, r2
 800355e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003560:	787b      	ldrb	r3, [r7, #1]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800356c:	e003      	b.n	8003576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	619a      	str	r2, [r3, #24]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e07e      	b.n	8003694 <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f00b f902 	bl	800e7b4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2224      	movs	r2, #36	; 0x24
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6852      	ldr	r2, [r2, #4]
 80035d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	6892      	ldr	r2, [r2, #8]
 80035e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6892      	ldr	r2, [r2, #8]
 80035f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	e006      	b.n	800360c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6892      	ldr	r2, [r2, #8]
 8003606:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800360a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d104      	bne.n	800361e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800361c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <HAL_I2C_Init+0x118>)
 800362a:	430b      	orrs	r3, r1
 800362c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	68d2      	ldr	r2, [r2, #12]
 8003638:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800363c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6911      	ldr	r1, [r2, #16]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6952      	ldr	r2, [r2, #20]
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6992      	ldr	r2, [r2, #24]
 8003650:	0212      	lsls	r2, r2, #8
 8003652:	430a      	orrs	r2, r1
 8003654:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	69d1      	ldr	r1, [r2, #28]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6a12      	ldr	r2, [r2, #32]
 8003662:	430a      	orrs	r2, r1
 8003664:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	02008000 	.word	0x02008000

080036a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d138      	bne.n	8003728 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e032      	b.n	800372a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	; 0x24
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	6811      	ldr	r1, [r2, #0]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	e000      	b.n	800372a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003728:	2302      	movs	r3, #2
  }
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b20      	cmp	r3, #32
 800374e:	d139      	bne.n	80037c4 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_I2CEx_ConfigDigitalFilter+0x28>
 800375a:	2302      	movs	r3, #2
 800375c:	e033      	b.n	80037c6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2224      	movs	r2, #36	; 0x24
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800378c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e000      	b.n	80037c6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	2300      	movs	r3, #0
 80037e2:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0c7      	b.n	800397e <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f00b f872 	bl	800e8ec <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	6992      	ldr	r2, [r2, #24]
 800381a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800381e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	6991      	ldr	r1, [r2, #24]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6850      	ldr	r0, [r2, #4]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6892      	ldr	r2, [r2, #8]
 8003832:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003838:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6912      	ldr	r2, [r2, #16]
 800383e:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003840:	430a      	orrs	r2, r1
 8003842:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6899      	ldr	r1, [r3, #8]
 800384e:	4b4e      	ldr	r3, [pc, #312]	; (8003988 <HAL_LTDC_Init+0x1b4>)
 8003850:	400b      	ands	r3, r1
 8003852:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	041b      	lsls	r3, r3, #16
 800385a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	6891      	ldr	r1, [r2, #8]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6990      	ldr	r0, [r2, #24]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4302      	orrs	r2, r0
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68d9      	ldr	r1, [r3, #12]
 800387c:	4b42      	ldr	r3, [pc, #264]	; (8003988 <HAL_LTDC_Init+0x1b4>)
 800387e:	400b      	ands	r3, r1
 8003880:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	68d1      	ldr	r1, [r2, #12]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6a10      	ldr	r0, [r2, #32]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4302      	orrs	r2, r0
 800389c:	430a      	orrs	r2, r1
 800389e:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6919      	ldr	r1, [r3, #16]
 80038aa:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_LTDC_Init+0x1b4>)
 80038ac:	400b      	ands	r3, r1
 80038ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	041b      	lsls	r3, r3, #16
 80038b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	6911      	ldr	r1, [r2, #16]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4302      	orrs	r2, r0
 80038ca:	430a      	orrs	r2, r1
 80038cc:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6959      	ldr	r1, [r3, #20]
 80038d8:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <HAL_LTDC_Init+0x1b4>)
 80038da:	400b      	ands	r3, r1
 80038dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	041b      	lsls	r3, r3, #16
 80038e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	6951      	ldr	r1, [r2, #20]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4302      	orrs	r2, r0
 80038f8:	430a      	orrs	r2, r1
 80038fa:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800391a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800392a:	68b8      	ldr	r0, [r7, #8]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4302      	orrs	r2, r0
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8003936:	4302      	orrs	r2, r0
 8003938:	430a      	orrs	r2, r1
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003946:	f042 0204 	orr.w	r2, r2, #4
 800394a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003956:	f042 0202 	orr.w	r2, r2, #2
 800395a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	6992      	ldr	r2, [r2, #24]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	f000f800 	.word	0xf000f800

0800398c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 800398c:	b5b0      	push	{r4, r5, r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_LTDC_ConfigLayer+0x1a>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e02c      	b.n	8003a00 <HAL_LTDC_ConfigLayer+0x74>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2134      	movs	r1, #52	; 0x34
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4614      	mov	r4, r2
 80039ca:	461d      	mov	r5, r3
 80039cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f81f 	bl	8003a24 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2201      	movs	r2, #1
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bdb0      	pop	{r4, r5, r7, pc}

08003a08 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003a16:	b2db      	uxtb	r3, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b089      	sub	sp, #36	; 0x24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	0c1b      	lsrs	r3, r3, #16
 8003a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4c:	4413      	add	r3, r2
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	01db      	lsls	r3, r3, #7
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3384      	adds	r3, #132	; 0x84
 8003a60:	461a      	mov	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4619      	mov	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	01db      	lsls	r3, r3, #7
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3384      	adds	r3, #132	; 0x84
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003a76:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	01db      	lsls	r3, r3, #7
 8003a82:	4413      	add	r3, r2
 8003a84:	3384      	adds	r3, #132	; 0x84
 8003a86:	4619      	mov	r1, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	0c1b      	lsrs	r3, r3, #16
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	4413      	add	r3, r2
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab0:	4413      	add	r3, r2
 8003ab2:	041b      	lsls	r3, r3, #16
 8003ab4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	01db      	lsls	r3, r3, #7
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3384      	adds	r3, #132	; 0x84
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4619      	mov	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	01db      	lsls	r3, r3, #7
 8003ad0:	440b      	add	r3, r1
 8003ad2:	3384      	adds	r3, #132	; 0x84
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ada:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	01db      	lsls	r3, r3, #7
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3384      	adds	r3, #132	; 0x84
 8003aea:	4619      	mov	r1, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003afa:	4413      	add	r3, r2
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	01db      	lsls	r3, r3, #7
 8003b0e:	4413      	add	r3, r2
 8003b10:	3384      	adds	r3, #132	; 0x84
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	01db      	lsls	r3, r3, #7
 8003b1e:	440b      	add	r3, r1
 8003b20:	3384      	adds	r3, #132	; 0x84
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f023 0307 	bic.w	r3, r3, #7
 8003b28:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	01db      	lsls	r3, r3, #7
 8003b34:	4413      	add	r3, r2
 8003b36:	3384      	adds	r3, #132	; 0x84
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b50:	041b      	lsls	r3, r3, #16
 8003b52:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	01db      	lsls	r3, r3, #7
 8003b66:	4413      	add	r3, r2
 8003b68:	3384      	adds	r3, #132	; 0x84
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	01db      	lsls	r3, r3, #7
 8003b76:	4413      	add	r3, r2
 8003b78:	3384      	adds	r3, #132	; 0x84
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	01db      	lsls	r3, r3, #7
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3384      	adds	r3, #132	; 0x84
 8003b8e:	4619      	mov	r1, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b96:	461a      	mov	r2, r3
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	01db      	lsls	r3, r3, #7
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3384      	adds	r3, #132	; 0x84
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	01db      	lsls	r3, r3, #7
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3384      	adds	r3, #132	; 0x84
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	01db      	lsls	r3, r3, #7
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3384      	adds	r3, #132	; 0x84
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	01db      	lsls	r3, r3, #7
 8003bec:	4413      	add	r3, r2
 8003bee:	3384      	adds	r3, #132	; 0x84
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	01db      	lsls	r3, r3, #7
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3384      	adds	r3, #132	; 0x84
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	4b5a      	ldr	r3, [pc, #360]	; (8003d6c <LTDC_SetConfig+0x348>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	01db      	lsls	r3, r3, #7
 8003c12:	4413      	add	r3, r2
 8003c14:	3384      	adds	r3, #132	; 0x84
 8003c16:	4619      	mov	r1, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	01db      	lsls	r3, r3, #7
 8003c2e:	4413      	add	r3, r2
 8003c30:	3384      	adds	r3, #132	; 0x84
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	01db      	lsls	r3, r3, #7
 8003c3e:	4413      	add	r3, r2
 8003c40:	3384      	adds	r3, #132	; 0x84
 8003c42:	461a      	mov	r2, r3
 8003c44:	2300      	movs	r3, #0
 8003c46:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	01db      	lsls	r3, r3, #7
 8003c52:	4413      	add	r3, r2
 8003c54:	3384      	adds	r3, #132	; 0x84
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <LTDC_SetConfig+0x248>
  {
    tmp = 4;
 8003c66:	2304      	movs	r3, #4
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	e01b      	b.n	8003ca4 <LTDC_SetConfig+0x280>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d102      	bne.n	8003c7a <LTDC_SetConfig+0x256>
  {
    tmp = 3;
 8003c74:	2303      	movs	r3, #3
 8003c76:	61fb      	str	r3, [r7, #28]
 8003c78:	e014      	b.n	8003ca4 <LTDC_SetConfig+0x280>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d00b      	beq.n	8003c9a <LTDC_SetConfig+0x276>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d007      	beq.n	8003c9a <LTDC_SetConfig+0x276>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d003      	beq.n	8003c9a <LTDC_SetConfig+0x276>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c96:	2b07      	cmp	r3, #7
 8003c98:	d102      	bne.n	8003ca0 <LTDC_SetConfig+0x27c>
  {
    tmp = 2;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	e001      	b.n	8003ca4 <LTDC_SetConfig+0x280>
  }
  else
  {
    tmp = 1;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	01db      	lsls	r3, r3, #7
 8003cae:	4413      	add	r3, r2
 8003cb0:	3384      	adds	r3, #132	; 0x84
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	01db      	lsls	r3, r3, #7
 8003cbe:	440b      	add	r3, r1
 8003cc0:	3384      	adds	r3, #132	; 0x84
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003cc8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	01db      	lsls	r3, r3, #7
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3384      	adds	r3, #132	; 0x84
 8003cd8:	4618      	mov	r0, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	041a      	lsls	r2, r3, #16
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6859      	ldr	r1, [r3, #4]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	1acb      	subs	r3, r1, r3
 8003cf0:	69f9      	ldr	r1, [r7, #28]
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	3303      	adds	r3, #3
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	01db      	lsls	r3, r3, #7
 8003d06:	4413      	add	r3, r2
 8003d08:	3384      	adds	r3, #132	; 0x84
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	01db      	lsls	r3, r3, #7
 8003d16:	4413      	add	r3, r2
 8003d18:	3384      	adds	r3, #132	; 0x84
 8003d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1c:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <LTDC_SetConfig+0x34c>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	01db      	lsls	r3, r3, #7
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3384      	adds	r3, #132	; 0x84
 8003d30:	461a      	mov	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	01db      	lsls	r3, r3, #7
 8003d42:	4413      	add	r3, r2
 8003d44:	3384      	adds	r3, #132	; 0x84
 8003d46:	461a      	mov	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	01db      	lsls	r3, r3, #7
 8003d52:	440b      	add	r3, r1
 8003d54:	3384      	adds	r3, #132	; 0x84
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6013      	str	r3, [r2, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	3724      	adds	r7, #36	; 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	fffff8f8 	.word	0xfffff8f8
 8003d70:	fffff800 	.word	0xfffff800

08003d74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	b08f      	sub	sp, #60	; 0x3c
 8003d78:	af0a      	add	r7, sp, #40	; 0x28
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0fe      	b.n	8003f88 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f00b f86e 	bl	800ee74 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f003 fb2c 	bl	80073fa <USB_DisableGlobalInt>

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	687e      	ldr	r6, [r7, #4]
 8003daa:	466d      	mov	r5, sp
 8003dac:	f106 0410 	add.w	r4, r6, #16
 8003db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dc0:	1d33      	adds	r3, r6, #4
 8003dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dc4:	6838      	ldr	r0, [r7, #0]
 8003dc6:	f003 fab5 	bl	8007334 <USB_CoreInit>

 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f003 fb23 	bl	800741c <USB_SetCurrentMode>

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	e04c      	b.n	8003e76 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	3339      	adds	r3, #57	; 0x39
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	b2d8      	uxtb	r0, r3
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	3338      	adds	r3, #56	; 0x38
 8003e04:	4602      	mov	r2, r0
 8003e06:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	b298      	uxth	r0, r3
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	333e      	adds	r3, #62	; 0x3e
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	333b      	adds	r3, #59	; 0x3b
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	3340      	adds	r3, #64	; 0x40
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0;
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	3344      	adds	r3, #68	; 0x44
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0;
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	334c      	adds	r3, #76	; 0x4c
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 for (i = 0; i < 15 ; i++)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3301      	adds	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b0e      	cmp	r3, #14
 8003e7a:	d9af      	bls.n	8003ddc <HAL_PCD_Init+0x68>
 }

 for (i = 0; i < 15 ; i++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e05a      	b.n	8003f38 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0;
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	b2d8      	uxtb	r0, r3
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003eae:	4602      	mov	r2, r0
 8003eb0:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	b298      	uxth	r0, r3
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	333e      	adds	r3, #62	; 0x3e
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0;
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0;
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]

   hpcd->Instance->DIEPTXF[i] = 0;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3340      	adds	r3, #64	; 0x40
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	2200      	movs	r2, #0
 8003f30:	605a      	str	r2, [r3, #4]
 for (i = 0; i < 15 ; i++)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3301      	adds	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b0e      	cmp	r3, #14
 8003f3c:	d9a1      	bls.n	8003e82 <HAL_PCD_Init+0x10e>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	687e      	ldr	r6, [r7, #4]
 8003f46:	466d      	mov	r5, sp
 8003f48:	f106 0410 	add.w	r4, r6, #16
 8003f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f58:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f5c:	1d33      	adds	r3, r6, #4
 8003f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f60:	6838      	ldr	r0, [r7, #0]
 8003f62:	f003 fa83 	bl	800746c <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d102      	bne.n	8003f7c <HAL_PCD_Init+0x208>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f001 f84c 	bl	8005014 <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f004 fa78 	bl	8008476 <USB_DevDisconnect>
 return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f90 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_PCD_Start+0x16>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e012      	b.n	8003fcc <HAL_PCD_Start+0x3c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f004 fa48 	bl	8008448 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f003 fa0b 	bl	80073d8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_PCD_IRQHandler>:
  * @brief  Handle PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08c      	sub	sp, #48	; 0x30
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	623b      	str	r3, [r7, #32]
  uint32_t i = 0, ep_intr = 0, epint = 0, epnum = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0, temp = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
  uint32_t hclk = 200000000;
 8003ffe:	4b98      	ldr	r3, [pc, #608]	; (8004260 <HAL_PCD_IRQHandler+0x28c>)
 8004000:	60fb      	str	r3, [r7, #12]

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f004 fad7 	bl	80085ba <USB_GetMode>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	f040 84e1 	bne.w	80049d6 <HAL_PCD_IRQHandler+0xa02>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f004 fa43 	bl	80084a4 <USB_ReadInterrupts>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 84d7 	beq.w	80049d4 <HAL_PCD_IRQHandler+0xa00>
    {
      return;
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f004 fa3a 	bl	80084a4 <USB_ReadInterrupts>
 8004030:	4603      	mov	r3, r0
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d103      	bne.n	8004042 <HAL_PCD_IRQHandler+0x6e>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2202      	movs	r2, #2
 8004040:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f004 fa2c 	bl	80084a4 <USB_ReadInterrupts>
 800404c:	4603      	mov	r3, r0
 800404e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004052:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004056:	f040 80ed 	bne.w	8004234 <HAL_PCD_IRQHandler+0x260>
    {
      epnum = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f004 fa33 	bl	80084ce <USB_ReadDevAllOutEpInterrupt>
 8004068:	62b8      	str	r0, [r7, #40]	; 0x28

      while ( ep_intr )
 800406a:	e0df      	b.n	800422c <HAL_PCD_IRQHandler+0x258>
      {
        if (ep_intr & 0x1)
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80d4 	beq.w	8004220 <HAL_PCD_IRQHandler+0x24c>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f004 fa53 	bl	800852e <USB_ReadDevOutEPInterrupt>
 8004088:	61f8      	str	r0, [r7, #28]

          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8082 	beq.w	800419a <HAL_PCD_IRQHandler+0x1c6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a2:	461a      	mov	r2, r3
 80040a4:	2301      	movs	r3, #1
 80040a6:	6093      	str	r3, [r2, #8]

            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d111      	bne.n	80040d4 <HAL_PCD_IRQHandler+0x100>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d009      	beq.n	80040d4 <HAL_PCD_IRQHandler+0x100>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	461a      	mov	r2, r3
 80040ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d2:	6093      	str	r3, [r2, #8]
              }
            }

            if(hpcd->Init.dma_enable == 1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d13c      	bne.n	8004156 <HAL_PCD_IRQHandler+0x182>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	0159      	lsls	r1, r3, #5
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	440b      	add	r3, r1
 80040f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004102:	1ad1      	subs	r1, r2, r3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4403      	add	r3, r0
 8004112:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004116:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800412a:	6819      	ldr	r1, [r3, #0]
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4403      	add	r3, r0
 800413a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4419      	add	r1, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4403      	add	r3, r0
 8004150:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004154:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	b2db      	uxtb	r3, r3
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f00a ff15 	bl	800ef8c <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d117      	bne.n	800419a <HAL_PCD_IRQHandler+0x1c6>
            {
              if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	2b00      	cmp	r3, #0
 800416e:	d114      	bne.n	800419a <HAL_PCD_IRQHandler+0x1c6>
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d108      	bne.n	800419a <HAL_PCD_IRQHandler+0x1c6>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004192:	461a      	mov	r2, r3
 8004194:	2101      	movs	r1, #1
 8004196:	f004 fa55 	bl	8008644 <USB_EP0_OutStart>
              }
            }
          }

          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d021      	beq.n	80041e8 <HAL_PCD_IRQHandler+0x214>
          {
            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d111      	bne.n	80041d0 <HAL_PCD_IRQHandler+0x1fc>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <HAL_PCD_IRQHandler+0x1fc>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c8:	461a      	mov	r2, r3
 80041ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ce:	6093      	str	r3, [r2, #8]
              }
            }

            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f00a fec9 	bl	800ef68 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e2:	461a      	mov	r2, r3
 80041e4:	2308      	movs	r3, #8
 80041e6:	6093      	str	r3, [r2, #8]
          }

          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_PCD_IRQHandler+0x230>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fe:	461a      	mov	r2, r3
 8004200:	2310      	movs	r3, #16
 8004202:	6093      	str	r3, [r2, #8]
          }
          /* Clear Status Phase Received interrupt */
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_PCD_IRQHandler+0x24c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	2320      	movs	r3, #32
 800421e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	3301      	adds	r3, #1
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	2b00      	cmp	r3, #0
 8004230:	f47f af1c 	bne.w	800406c <HAL_PCD_IRQHandler+0x98>
      }
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f004 f933 	bl	80084a4 <USB_ReadInterrupts>
 800423e:	4603      	mov	r3, r0
 8004240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004244:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004248:	f040 80c6 	bne.w	80043d8 <HAL_PCD_IRQHandler+0x404>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f004 f954 	bl	80084fe <USB_ReadDevAllInEpInterrupt>
 8004256:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	627b      	str	r3, [r7, #36]	; 0x24

      while ( ep_intr )
 800425c:	e0b8      	b.n	80043d0 <HAL_PCD_IRQHandler+0x3fc>
 800425e:	bf00      	nop
 8004260:	0bebc200 	.word	0x0bebc200
      {
        if (ep_intr & 0x1) /* In ITR */
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80aa 	beq.w	80043c4 <HAL_PCD_IRQHandler+0x3f0>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f004 f973 	bl	8008566 <USB_ReadDevInEPInterrupt>
 8004280:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d05a      	beq.n	8004342 <HAL_PCD_IRQHandler+0x36e>
          {
            fifoemptymsk = 0x1 << epnum;
 800428c:	2201      	movs	r2, #1
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429c:	4619      	mov	r1, r3
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	43db      	mvns	r3, r3
 80042aa:	4013      	ands	r3, r2
 80042ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ba:	461a      	mov	r2, r3
 80042bc:	2301      	movs	r3, #1
 80042be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d11b      	bne.n	8004300 <HAL_PCD_IRQHandler+0x32c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3344      	adds	r3, #68	; 0x44
 80042d8:	6819      	ldr	r1, [r3, #0]
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4403      	add	r3, r0
 80042e8:	3340      	adds	r3, #64	; 0x40
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4419      	add	r1, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4403      	add	r3, r0
 80042fc:	3344      	adds	r3, #68	; 0x44
 80042fe:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	b2db      	uxtb	r3, r3
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f00a fe5b 	bl	800efc2 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d116      	bne.n	8004342 <HAL_PCD_IRQHandler+0x36e>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	2b00      	cmp	r3, #0
 8004318:	d113      	bne.n	8004342 <HAL_PCD_IRQHandler+0x36e>
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	334c      	adds	r3, #76	; 0x4c
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d108      	bne.n	8004342 <HAL_PCD_IRQHandler+0x36e>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800433a:	461a      	mov	r2, r3
 800433c:	2101      	movs	r1, #1
 800433e:	f004 f981 	bl	8008644 <USB_EP0_OutStart>
              }
            }
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_PCD_IRQHandler+0x38a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	461a      	mov	r2, r3
 800435a:	2308      	movs	r3, #8
 800435c:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_PCD_IRQHandler+0x3a6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	2310      	movs	r3, #16
 8004378:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_PCD_IRQHandler+0x3c2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004390:	461a      	mov	r2, r3
 8004392:	2340      	movs	r3, #64	; 0x40
 8004394:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_PCD_IRQHandler+0x3de>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	461a      	mov	r2, r3
 80043ae:	2302      	movs	r3, #2
 80043b0:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_PCD_IRQHandler+0x3f0>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 80043bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fd43 	bl	8004e4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	3301      	adds	r3, #1
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f47f af46 	bne.w	8004264 <HAL_PCD_IRQHandler+0x290>
      }
    }

    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f004 f861 	bl	80084a4 <USB_ReadInterrupts>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ec:	d120      	bne.n	8004430 <HAL_PCD_IRQHandler+0x45c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f4:	461a      	mov	r2, r3
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	6053      	str	r3, [r2, #4]

      if(hpcd->LPM_State == LPM_L1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 800440a:	2b01      	cmp	r3, #1
 800440c:	d108      	bne.n	8004420 <HAL_PCD_IRQHandler+0x44c>
      {
        hpcd->LPM_State = LPM_L0;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004416:	2100      	movs	r1, #0
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f00b f8ed 	bl	800f5f8 <HAL_PCDEx_LPM_Callback>
 800441e:	e002      	b.n	8004426 <HAL_PCD_IRQHandler+0x452>
      }
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f00a fe47 	bl	800f0b4 <HAL_PCD_ResumeCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800442e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f004 f835 	bl	80084a4 <USB_ReadInterrupts>
 800443a:	4603      	mov	r3, r0
 800443c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004444:	d10f      	bne.n	8004466 <HAL_PCD_IRQHandler+0x492>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b01      	cmp	r3, #1
 8004454:	d102      	bne.n	800445c <HAL_PCD_IRQHandler+0x488>
      {

        HAL_PCD_SuspendCallback(hpcd);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f00a fe04 	bl	800f064 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004464:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f004 f81a 	bl	80084a4 <USB_ReadInterrupts>
 8004470:	4603      	mov	r3, r0
 8004472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800447a:	d11e      	bne.n	80044ba <HAL_PCD_IRQHandler+0x4e6>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004484:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 800448c:	2b00      	cmp	r3, #0
 800448e:	d111      	bne.n	80044b4 <HAL_PCD_IRQHandler+0x4e0>
      {
        hpcd->LPM_State = LPM_L1;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80044aa:	2101      	movs	r1, #1
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f00b f8a3 	bl	800f5f8 <HAL_PCDEx_LPM_Callback>
 80044b2:	e002      	b.n	80044ba <HAL_PCD_IRQHandler+0x4e6>
      }
      else
      {
        HAL_PCD_SuspendCallback(hpcd);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f00a fdd5 	bl	800f064 <HAL_PCD_SuspendCallback>
      }
    }

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f003 fff0 	bl	80084a4 <USB_ReadInterrupts>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	f040 80b0 	bne.w	8004632 <HAL_PCD_IRQHandler+0x65e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d8:	461a      	mov	r2, r3
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2110      	movs	r1, #16
 80044ee:	4618      	mov	r0, r3
 80044f0:	f003 f90a 	bl	8007708 <USB_FlushTxFifo>

      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80044f4:	2300      	movs	r3, #0
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f8:	e036      	b.n	8004568 <HAL_PCD_IRQHandler+0x594>
      {
        USBx_INEP(i)->DIEPINT = 0xFF;
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004506:	461a      	mov	r2, r3
 8004508:	23ff      	movs	r3, #255	; 0xff
 800450a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	4619      	mov	r1, r3
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800452c:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFF;
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453a:	461a      	mov	r2, r3
 800453c:	23ff      	movs	r3, #255	; 0xff
 800453e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454c:	4619      	mov	r1, r3
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004560:	600b      	str	r3, [r1, #0]
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	3301      	adds	r3, #1
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456e:	429a      	cmp	r2, r3
 8004570:	d8c3      	bhi.n	80044fa <HAL_PCD_IRQHandler+0x526>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004578:	461a      	mov	r2, r3
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	461a      	mov	r2, r3
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004594:	61d3      	str	r3, [r2, #28]

      if(hpcd->Init.use_dedicated_ep1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	2b00      	cmp	r3, #0
 800459c:	d018      	beq.n	80045d0 <HAL_PCD_IRQHandler+0x5fc>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a4:	461a      	mov	r2, r3
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b0:	f043 030b 	orr.w	r3, r3, #11
 80045b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045be:	461a      	mov	r2, r3
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c8:	f043 030b 	orr.w	r3, r3, #11
 80045cc:	6453      	str	r3, [r2, #68]	; 0x44
 80045ce:	e015      	b.n	80045fc <HAL_PCD_IRQHandler+0x628>
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d6:	461a      	mov	r2, r3
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80045e4:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ec:	461a      	mov	r2, r3
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f043 030b 	orr.w	r3, r3, #11
 80045fa:	6113      	str	r3, [r2, #16]
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004602:	461a      	mov	r2, r3
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004610:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	b2d9      	uxtb	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004622:	461a      	mov	r2, r3
 8004624:	f004 f80e 	bl	8008644 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004630:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f003 ff34 	bl	80084a4 <USB_ReadInterrupts>
 800463c:	4603      	mov	r3, r0
 800463e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004646:	f040 80d7 	bne.w	80047f8 <HAL_PCD_IRQHandler+0x824>
    {
      USB_ActivateSetup(hpcd->Instance);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f003 ffc2 	bl	80085d8 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	68d2      	ldr	r2, [r2, #12]
 800465e:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8004662:	60da      	str	r2, [r3, #12]

      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f003 f8ad 	bl	80077c8 <USB_GetDevSpeed>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10f      	bne.n	8004694 <HAL_PCD_IRQHandler+0x6c0>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004680:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	68d2      	ldr	r2, [r2, #12]
 800468c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	e0a9      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2203      	movs	r2, #3
 8004698:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2240      	movs	r2, #64	; 0x40
 800469e:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 80046a0:	f001 f93a 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 80046a4:	60f8      	str	r0, [r7, #12]

		if((hclk >= 14200000)&&(hclk < 15000000))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4a79      	ldr	r2, [pc, #484]	; (8004890 <HAL_PCD_IRQHandler+0x8bc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d90c      	bls.n	80046c8 <HAL_PCD_IRQHandler+0x6f4>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a78      	ldr	r2, [pc, #480]	; (8004894 <HAL_PCD_IRQHandler+0x8c0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d808      	bhi.n	80046c8 <HAL_PCD_IRQHandler+0x6f4>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	68d2      	ldr	r2, [r2, #12]
 80046c0:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	e08f      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 15000000)&&(hclk < 16000000))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4a72      	ldr	r2, [pc, #456]	; (8004894 <HAL_PCD_IRQHandler+0x8c0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d90c      	bls.n	80046ea <HAL_PCD_IRQHandler+0x716>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a71      	ldr	r2, [pc, #452]	; (8004898 <HAL_PCD_IRQHandler+0x8c4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d808      	bhi.n	80046ea <HAL_PCD_IRQHandler+0x716>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	68d2      	ldr	r2, [r2, #12]
 80046e2:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	e07e      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 16000000)&&(hclk < 17200000))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a6a      	ldr	r2, [pc, #424]	; (8004898 <HAL_PCD_IRQHandler+0x8c4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d90c      	bls.n	800470c <HAL_PCD_IRQHandler+0x738>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4a69      	ldr	r2, [pc, #420]	; (800489c <HAL_PCD_IRQHandler+0x8c8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d808      	bhi.n	800470c <HAL_PCD_IRQHandler+0x738>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	68d2      	ldr	r2, [r2, #12]
 8004704:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	e06d      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 17200000)&&(hclk < 18500000))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a63      	ldr	r2, [pc, #396]	; (800489c <HAL_PCD_IRQHandler+0x8c8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d90c      	bls.n	800472e <HAL_PCD_IRQHandler+0x75a>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a62      	ldr	r2, [pc, #392]	; (80048a0 <HAL_PCD_IRQHandler+0x8cc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d808      	bhi.n	800472e <HAL_PCD_IRQHandler+0x75a>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	68d2      	ldr	r2, [r2, #12]
 8004726:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800472a:	60da      	str	r2, [r3, #12]
 800472c:	e05c      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 18500000)&&(hclk < 20000000))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a5b      	ldr	r2, [pc, #364]	; (80048a0 <HAL_PCD_IRQHandler+0x8cc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d90c      	bls.n	8004750 <HAL_PCD_IRQHandler+0x77c>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a5a      	ldr	r2, [pc, #360]	; (80048a4 <HAL_PCD_IRQHandler+0x8d0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d808      	bhi.n	8004750 <HAL_PCD_IRQHandler+0x77c>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	68d2      	ldr	r2, [r2, #12]
 8004748:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 800474c:	60da      	str	r2, [r3, #12]
 800474e:	e04b      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 20000000)&&(hclk < 21800000))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a54      	ldr	r2, [pc, #336]	; (80048a4 <HAL_PCD_IRQHandler+0x8d0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d90c      	bls.n	8004772 <HAL_PCD_IRQHandler+0x79e>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a53      	ldr	r2, [pc, #332]	; (80048a8 <HAL_PCD_IRQHandler+0x8d4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d808      	bhi.n	8004772 <HAL_PCD_IRQHandler+0x79e>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	68d2      	ldr	r2, [r2, #12]
 800476a:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800476e:	60da      	str	r2, [r3, #12]
 8004770:	e03a      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 21800000)&&(hclk < 24000000))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a4c      	ldr	r2, [pc, #304]	; (80048a8 <HAL_PCD_IRQHandler+0x8d4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d90c      	bls.n	8004794 <HAL_PCD_IRQHandler+0x7c0>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a4b      	ldr	r2, [pc, #300]	; (80048ac <HAL_PCD_IRQHandler+0x8d8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d808      	bhi.n	8004794 <HAL_PCD_IRQHandler+0x7c0>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	68d2      	ldr	r2, [r2, #12]
 800478c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	e029      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 24000000)&&(hclk < 27700000))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a45      	ldr	r2, [pc, #276]	; (80048ac <HAL_PCD_IRQHandler+0x8d8>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d90c      	bls.n	80047b6 <HAL_PCD_IRQHandler+0x7e2>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a44      	ldr	r2, [pc, #272]	; (80048b0 <HAL_PCD_IRQHandler+0x8dc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d808      	bhi.n	80047b6 <HAL_PCD_IRQHandler+0x7e2>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	68d2      	ldr	r2, [r2, #12]
 80047ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b2:	60da      	str	r2, [r3, #12]
 80047b4:	e018      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 27700000)&&(hclk < 32000000))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a3d      	ldr	r2, [pc, #244]	; (80048b0 <HAL_PCD_IRQHandler+0x8dc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d90c      	bls.n	80047d8 <HAL_PCD_IRQHandler+0x804>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a3c      	ldr	r2, [pc, #240]	; (80048b4 <HAL_PCD_IRQHandler+0x8e0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d808      	bhi.n	80047d8 <HAL_PCD_IRQHandler+0x804>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	68d2      	ldr	r2, [r2, #12]
 80047d0:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	e007      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	68d2      	ldr	r2, [r2, #12]
 80047e2:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80047e6:	60da      	str	r2, [r3, #12]
        }
      }

      HAL_PCD_ResetCallback(hpcd);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f00a fc12 	bl	800f012 <HAL_PCD_ResetCallback>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f003 fe51 	bl	80084a4 <USB_ReadInterrupts>
 8004802:	4603      	mov	r3, r0
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b10      	cmp	r3, #16
 800480a:	d174      	bne.n	80048f6 <HAL_PCD_IRQHandler+0x922>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	6992      	ldr	r2, [r2, #24]
 8004816:	f022 0210 	bic.w	r2, r2, #16
 800481a:	619a      	str	r2, [r3, #24]
      temp = USBx->GRXSTSP;
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	617b      	str	r3, [r7, #20]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 020f 	and.w	r2, r3, #15
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	4413      	add	r3, r2
 8004838:	613b      	str	r3, [r7, #16]

      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	0c5b      	lsrs	r3, r3, #17
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	2b02      	cmp	r3, #2
 8004844:	d138      	bne.n	80048b8 <HAL_PCD_IRQHandler+0x8e4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d049      	beq.n	80048e6 <HAL_PCD_IRQHandler+0x912>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	68d9      	ldr	r1, [r3, #12]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	b29b      	uxth	r3, r3
 800485c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004860:	b29b      	uxth	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	6a38      	ldr	r0, [r7, #32]
 8004866:	f003 fcc1 	bl	80081ec <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004876:	441a      	add	r2, r3
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	091b      	lsrs	r3, r3, #4
 8004884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004888:	441a      	add	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	619a      	str	r2, [r3, #24]
 800488e:	e02a      	b.n	80048e6 <HAL_PCD_IRQHandler+0x912>
 8004890:	00d8acbf 	.word	0x00d8acbf
 8004894:	00e4e1bf 	.word	0x00e4e1bf
 8004898:	00f423ff 	.word	0x00f423ff
 800489c:	0106737f 	.word	0x0106737f
 80048a0:	011a499f 	.word	0x011a499f
 80048a4:	01312cff 	.word	0x01312cff
 80048a8:	014ca43f 	.word	0x014ca43f
 80048ac:	016e35ff 	.word	0x016e35ff
 80048b0:	01a6ab1f 	.word	0x01a6ab1f
 80048b4:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	0c5b      	lsrs	r3, r3, #17
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	2b06      	cmp	r3, #6
 80048c2:	d110      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x912>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80048ca:	2208      	movs	r2, #8
 80048cc:	4619      	mov	r1, r3
 80048ce:	6a38      	ldr	r0, [r7, #32]
 80048d0:	f003 fc8c 	bl	80081ec <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	091b      	lsrs	r3, r3, #4
 80048dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048e0:	441a      	add	r2, r3
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	6992      	ldr	r2, [r2, #24]
 80048f0:	f042 0210 	orr.w	r2, r2, #16
 80048f4:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f003 fdd2 	bl	80084a4 <USB_ReadInterrupts>
 8004900:	4603      	mov	r3, r0
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b08      	cmp	r3, #8
 8004908:	d106      	bne.n	8004918 <HAL_PCD_IRQHandler+0x944>
    {
      HAL_PCD_SOFCallback(hpcd);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f00a fb73 	bl	800eff6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2208      	movs	r2, #8
 8004916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f003 fdc1 	bl	80084a4 <USB_ReadInterrupts>
 8004922:	4603      	mov	r3, r0
 8004924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492c:	d10a      	bne.n	8004944 <HAL_PCD_IRQHandler+0x970>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	b2db      	uxtb	r3, r3
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f00a fbdd 	bl	800f0f4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f003 fdab 	bl	80084a4 <USB_ReadInterrupts>
 800494e:	4603      	mov	r3, r0
 8004950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004958:	d10a      	bne.n	8004970 <HAL_PCD_IRQHandler+0x99c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	b2db      	uxtb	r3, r3
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f00a fbb5 	bl	800f0d0 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800496e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f003 fd95 	bl	80084a4 <USB_ReadInterrupts>
 800497a:	4603      	mov	r3, r0
 800497c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004984:	d107      	bne.n	8004996 <HAL_PCD_IRQHandler+0x9c2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f00a fbc6 	bl	800f118 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f003 fd82 	bl	80084a4 <USB_ReadInterrupts>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d115      	bne.n	80049d6 <HAL_PCD_IRQHandler+0xa02>
    {
      temp = hpcd->Instance->GOTGINT;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	617b      	str	r3, [r7, #20]

      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_PCD_IRQHandler+0x9ee>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f00a fbb9 	bl	800f134 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	6851      	ldr	r1, [r2, #4]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	e000      	b.n	80049d6 <HAL_PCD_IRQHandler+0xa02>
      return;
 80049d4:	bf00      	nop
    }
  }
}
 80049d6:	3730      	adds	r7, #48	; 0x30
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_PCD_SetAddress+0x1a>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e00f      	b.n	8004a16 <HAL_PCD_SetAddress+0x3a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	4611      	mov	r1, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f003 fcf8 	bl	80083fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	4608      	mov	r0, r1
 8004a28:	4611      	mov	r1, r2
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	70fb      	strb	r3, [r7, #3]
 8004a30:	460b      	mov	r3, r1
 8004a32:	803b      	strh	r3, [r7, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8004a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	da0b      	bge.n	8004a5c <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	3338      	adds	r3, #56	; 0x38
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	4413      	add	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e00b      	b.n	8004a74 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a62:	4613      	mov	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8004a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	09db      	lsrs	r3, r3, #7
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8004a90:	883a      	ldrh	r2, [r7, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	78ba      	ldrb	r2, [r7, #2]
 8004a9a:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d004      	beq.n	8004aae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8004aae:	78bb      	ldrb	r3, [r7, #2]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d102      	bne.n	8004aba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_PCD_EP_Open+0xaa>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e00e      	b.n	8004ae6 <HAL_PCD_EP_Open+0xc8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68f9      	ldr	r1, [r7, #12]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f002 feac 	bl	8007834 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 8004ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	460b      	mov	r3, r1
 8004af8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8004afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da0b      	bge.n	8004b1a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b08:	4613      	mov	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	3338      	adds	r3, #56	; 0x38
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	4413      	add	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e00b      	b.n	8004b32 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4413      	add	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8004b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	09db      	lsrs	r3, r3, #7
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_PCD_EP_Close+0x6e>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e00e      	b.n	8004b7a <HAL_PCD_EP_Close+0x8c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f002 feea 	bl	8007944 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b086      	sub	sp, #24
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004b92:	7afb      	ldrb	r3, [r7, #11]
 8004b94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b98:	4613      	mov	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8004bc2:	7afb      	ldrb	r3, [r7, #11]
 8004bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d102      	bne.n	8004bdc <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8004bdc:	7afb      	ldrb	r3, [r7, #11]
 8004bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6979      	ldr	r1, [r7, #20]
 8004bf4:	f003 f966 	bl	8007ec4 <USB_EP0StartXfer>
 8004bf8:	e008      	b.n	8004c0c <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	6979      	ldr	r1, [r7, #20]
 8004c08:	f002 ff18 	bl	8007a3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	460b      	mov	r3, r1
 8004c56:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004c58:	7afb      	ldrb	r3, [r7, #11]
 8004c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c5e:	4613      	mov	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	3338      	adds	r3, #56	; 0x38
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2201      	movs	r2, #1
 8004c84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8004c86:	7afb      	ldrb	r3, [r7, #11]
 8004c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d102      	bne.n	8004ca0 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8004ca0:	7afb      	ldrb	r3, [r7, #11]
 8004ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6979      	ldr	r1, [r7, #20]
 8004cb8:	f003 f904 	bl	8007ec4 <USB_EP0StartXfer>
 8004cbc:	e008      	b.n	8004cd0 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6979      	ldr	r1, [r7, #20]
 8004ccc:	f002 feb6 	bl	8007a3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	f003 020f 	and.w	r2, r3, #15
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d901      	bls.n	8004cf8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e050      	b.n	8004d9a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80 & ep_addr) == 0x80)
 8004cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	da0b      	bge.n	8004d18 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	3338      	adds	r3, #56	; 0x38
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4413      	add	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e009      	b.n	8004d2c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	09db      	lsrs	r3, r3, #7
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	705a      	strb	r2, [r3, #1]


  __HAL_LOCK(hpcd);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_PCD_EP_SetStall+0x82>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e01e      	b.n	8004d9a <HAL_PCD_EP_SetStall+0xc0>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68f9      	ldr	r1, [r7, #12]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f003 fa68 	bl	8008240 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <HAL_PCD_EP_SetStall+0xb6>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	b2d9      	uxtb	r1, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f003 fc5a 	bl	8008644 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	460b      	mov	r3, r1
 8004dac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	f003 020f 	and.w	r2, r3, #15
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d901      	bls.n	8004dc0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e040      	b.n	8004e42 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80 & ep_addr) == 0x80)
 8004dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	da0b      	bge.n	8004de0 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	3338      	adds	r3, #56	; 0x38
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	4413      	add	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e009      	b.n	8004df4 <HAL_PCD_EP_ClrStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	4613      	mov	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	4413      	add	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 0;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	09db      	lsrs	r3, r3, #7
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_PCD_EP_ClrStall+0x82>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e00e      	b.n	8004e42 <HAL_PCD_EP_ClrStall+0xa0>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68f9      	ldr	r1, [r7, #12]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f003 fa75 	bl	8008322 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b08a      	sub	sp, #40	; 0x28
 8004e4e:	af02      	add	r7, sp, #8
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	3338      	adds	r3, #56	; 0x38
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4413      	add	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d202      	bcs.n	8004e90 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	61fb      	str	r3, [r7, #28]
  }


  len32b = (len + 3) / 4;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	3303      	adds	r3, #3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	da00      	bge.n	8004e9a <PCD_WriteEmptyTxFifo+0x50>
 8004e98:	3303      	adds	r3, #3
 8004e9a:	109b      	asrs	r3, r3, #2
 8004e9c:	61bb      	str	r3, [r7, #24]

  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004e9e:	e02e      	b.n	8004efe <PCD_WriteEmptyTxFifo+0xb4>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	695a      	ldr	r2, [r3, #20]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d202      	bcs.n	8004ebc <PCD_WriteEmptyTxFifo+0x72>
    {
      len = ep->maxpacket;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3) / 4;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	3303      	adds	r3, #3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	da00      	bge.n	8004ec6 <PCD_WriteEmptyTxFifo+0x7c>
 8004ec4:	3303      	adds	r3, #3
 8004ec6:	109b      	asrs	r3, r3, #2
 8004ec8:	61bb      	str	r3, [r7, #24]

    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	68d9      	ldr	r1, [r3, #12]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	b298      	uxth	r0, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	4603      	mov	r3, r0
 8004ee0:	6978      	ldr	r0, [r7, #20]
 8004ee2:	f003 f94b 	bl	800817c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	441a      	add	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	441a      	add	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	619a      	str	r2, [r3, #24]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d909      	bls.n	8004f28 <PCD_WriteEmptyTxFifo+0xde>
          ep->xfer_count < ep->xfer_len &&
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	695b      	ldr	r3, [r3, #20]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d203      	bcs.n	8004f28 <PCD_WriteEmptyTxFifo+0xde>
            ep->xfer_len != 0)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1bb      	bne.n	8004ea0 <PCD_WriteEmptyTxFifo+0x56>
  }

  if(len <= 0)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	dc10      	bgt.n	8004f50 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = 0x1 << epnum;
 8004f2e:	2201      	movs	r2, #1
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3e:	4619      	mov	r1, r3
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	634b      	str	r3, [r1, #52]	; 0x34

  }

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	460b      	mov	r3, r1
 8004f64:	70fb      	strb	r3, [r7, #3]
 8004f66:	4613      	mov	r3, r2
 8004f68:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d107      	bne.n	8004f90 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	883a      	ldrh	r2, [r7, #0]
 8004f86:	0411      	lsls	r1, r2, #16
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	629a      	str	r2, [r3, #40]	; 0x28
 8004f8e:	e028      	b.n	8004fe2 <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	0c1b      	lsrs	r3, r3, #16
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	73fb      	strb	r3, [r7, #15]
 8004fa2:	e00d      	b.n	8004fc0 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	3340      	adds	r3, #64	; 0x40
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	0c1b      	lsrs	r3, r3, #16
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
 8004fc0:	7bfa      	ldrb	r2, [r7, #15]
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	dbec      	blt.n	8004fa4 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6819      	ldr	r1, [r3, #0]
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	883a      	ldrh	r2, [r7, #0]
 8004fd4:	0410      	lsls	r0, r2, #16
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	4302      	orrs	r2, r0
 8004fda:	3340      	adds	r3, #64	; 0x40
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	887a      	ldrh	r2, [r7, #2]
 8005002:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM Feature
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60fb      	str	r3, [r7, #12]
  
  hpcd->lpm_active = ENABLE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005042:	4b05      	ldr	r3, [pc, #20]	; (8005058 <HAL_PCDEx_ActivateLPM+0x44>)
 8005044:	4313      	orrs	r3, r2
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	10000003 	.word	0x10000003

0800505c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005066:	4a23      	ldr	r2, [pc, #140]	; (80050f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005068:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005070:	6413      	str	r3, [r2, #64]	; 0x40
 8005072:	4b20      	ldr	r3, [pc, #128]	; (80050f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005080:	4b1d      	ldr	r3, [pc, #116]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005088:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800508a:	f7fc fdd1 	bl	8001c30 <HAL_GetTick>
 800508e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005090:	e009      	b.n	80050a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005092:	f7fc fdcd 	bl	8001c30 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050a0:	d901      	bls.n	80050a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e022      	b.n	80050ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b2:	d1ee      	bne.n	8005092 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80050b4:	4a10      	ldr	r2, [pc, #64]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050c0:	f7fc fdb6 	bl	8001c30 <HAL_GetTick>
 80050c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050c6:	e009      	b.n	80050dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050c8:	f7fc fdb2 	bl	8001c30 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050d6:	d901      	bls.n	80050dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e007      	b.n	80050ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050e8:	d1ee      	bne.n	80050c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40023800 	.word	0x40023800
 80050f8:	40007000 	.word	0x40007000

080050fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005104:	2300      	movs	r3, #0
 8005106:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e25c      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8087 	beq.w	800522e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005120:	4b96      	ldr	r3, [pc, #600]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b04      	cmp	r3, #4
 800512a:	d00c      	beq.n	8005146 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800512c:	4b93      	ldr	r3, [pc, #588]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 030c 	and.w	r3, r3, #12
 8005134:	2b08      	cmp	r3, #8
 8005136:	d112      	bne.n	800515e <HAL_RCC_OscConfig+0x62>
 8005138:	4b90      	ldr	r3, [pc, #576]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005144:	d10b      	bne.n	800515e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005146:	4b8d      	ldr	r3, [pc, #564]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d06c      	beq.n	800522c <HAL_RCC_OscConfig+0x130>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d168      	bne.n	800522c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e236      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x7a>
 8005168:	4a84      	ldr	r2, [pc, #528]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800516a:	4b84      	ldr	r3, [pc, #528]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e02e      	b.n	80051d4 <HAL_RCC_OscConfig+0xd8>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0x9c>
 800517e:	4a7f      	ldr	r2, [pc, #508]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005180:	4b7e      	ldr	r3, [pc, #504]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	4a7c      	ldr	r2, [pc, #496]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800518c:	4b7b      	ldr	r3, [pc, #492]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e01d      	b.n	80051d4 <HAL_RCC_OscConfig+0xd8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051a0:	d10c      	bne.n	80051bc <HAL_RCC_OscConfig+0xc0>
 80051a2:	4a76      	ldr	r2, [pc, #472]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051a4:	4b75      	ldr	r3, [pc, #468]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	4a73      	ldr	r2, [pc, #460]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051b0:	4b72      	ldr	r3, [pc, #456]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e00b      	b.n	80051d4 <HAL_RCC_OscConfig+0xd8>
 80051bc:	4a6f      	ldr	r2, [pc, #444]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051be:	4b6f      	ldr	r3, [pc, #444]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	4a6c      	ldr	r2, [pc, #432]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051ca:	4b6c      	ldr	r3, [pc, #432]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d013      	beq.n	8005204 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fc fd28 	bl	8001c30 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051e4:	f7fc fd24 	bl	8001c30 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e1ea      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f6:	4b61      	ldr	r3, [pc, #388]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0xe8>
 8005202:	e014      	b.n	800522e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fc fd14 	bl	8001c30 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800520c:	f7fc fd10 	bl	8001c30 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b64      	cmp	r3, #100	; 0x64
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e1d6      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800521e:	4b57      	ldr	r3, [pc, #348]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f0      	bne.n	800520c <HAL_RCC_OscConfig+0x110>
 800522a:	e000      	b.n	800522e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d069      	beq.n	800530e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800523a:	4b50      	ldr	r3, [pc, #320]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00b      	beq.n	800525e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005246:	4b4d      	ldr	r3, [pc, #308]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b08      	cmp	r3, #8
 8005250:	d11c      	bne.n	800528c <HAL_RCC_OscConfig+0x190>
 8005252:	4b4a      	ldr	r3, [pc, #296]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d116      	bne.n	800528c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525e:	4b47      	ldr	r3, [pc, #284]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <HAL_RCC_OscConfig+0x17a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d001      	beq.n	8005276 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e1aa      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005276:	4941      	ldr	r1, [pc, #260]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005278:	4b40      	ldr	r3, [pc, #256]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800528a:	e040      	b.n	800530e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d023      	beq.n	80052dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005294:	4a39      	ldr	r2, [pc, #228]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005296:	4b39      	ldr	r3, [pc, #228]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7fc fcc6 	bl	8001c30 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052a8:	f7fc fcc2 	bl	8001c30 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e188      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ba:	4b30      	ldr	r3, [pc, #192]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c6:	492d      	ldr	r1, [pc, #180]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052c8:	4b2c      	ldr	r3, [pc, #176]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4313      	orrs	r3, r2
 80052d8:	600b      	str	r3, [r1, #0]
 80052da:	e018      	b.n	800530e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052dc:	4a27      	ldr	r2, [pc, #156]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052de:	4b27      	ldr	r3, [pc, #156]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 0301 	bic.w	r3, r3, #1
 80052e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fc fca2 	bl	8001c30 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052f0:	f7fc fc9e 	bl	8001c30 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e164      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d038      	beq.n	800538c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d019      	beq.n	8005356 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005322:	4a16      	ldr	r2, [pc, #88]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005324:	4b15      	ldr	r3, [pc, #84]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532e:	f7fc fc7f 	bl	8001c30 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005336:	f7fc fc7b 	bl	8001c30 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e141      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005348:	4b0c      	ldr	r3, [pc, #48]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800534a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f0      	beq.n	8005336 <HAL_RCC_OscConfig+0x23a>
 8005354:	e01a      	b.n	800538c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800535a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fc fc65 	bl	8001c30 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005368:	e00a      	b.n	8005380 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800536a:	f7fc fc61 	bl	8001c30 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d903      	bls.n	8005380 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e127      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
 800537c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005380:	4b94      	ldr	r3, [pc, #592]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1ee      	bne.n	800536a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80a4 	beq.w	80054e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800539a:	4b8e      	ldr	r3, [pc, #568]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10d      	bne.n	80053c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a6:	4a8b      	ldr	r2, [pc, #556]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80053a8:	4b8a      	ldr	r3, [pc, #552]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b0:	6413      	str	r3, [r2, #64]	; 0x40
 80053b2:	4b88      	ldr	r3, [pc, #544]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053c2:	4b85      	ldr	r3, [pc, #532]	; (80055d8 <HAL_RCC_OscConfig+0x4dc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d118      	bne.n	8005400 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80053ce:	4a82      	ldr	r2, [pc, #520]	; (80055d8 <HAL_RCC_OscConfig+0x4dc>)
 80053d0:	4b81      	ldr	r3, [pc, #516]	; (80055d8 <HAL_RCC_OscConfig+0x4dc>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053da:	f7fc fc29 	bl	8001c30 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053e2:	f7fc fc25 	bl	8001c30 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b64      	cmp	r3, #100	; 0x64
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e0eb      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053f4:	4b78      	ldr	r3, [pc, #480]	; (80055d8 <HAL_RCC_OscConfig+0x4dc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d106      	bne.n	8005416 <HAL_RCC_OscConfig+0x31a>
 8005408:	4a72      	ldr	r2, [pc, #456]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800540a:	4b72      	ldr	r3, [pc, #456]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	6713      	str	r3, [r2, #112]	; 0x70
 8005414:	e02d      	b.n	8005472 <HAL_RCC_OscConfig+0x376>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10c      	bne.n	8005438 <HAL_RCC_OscConfig+0x33c>
 800541e:	4a6d      	ldr	r2, [pc, #436]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005420:	4b6c      	ldr	r3, [pc, #432]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	6713      	str	r3, [r2, #112]	; 0x70
 800542a:	4a6a      	ldr	r2, [pc, #424]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800542c:	4b69      	ldr	r3, [pc, #420]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800542e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005430:	f023 0304 	bic.w	r3, r3, #4
 8005434:	6713      	str	r3, [r2, #112]	; 0x70
 8005436:	e01c      	b.n	8005472 <HAL_RCC_OscConfig+0x376>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b05      	cmp	r3, #5
 800543e:	d10c      	bne.n	800545a <HAL_RCC_OscConfig+0x35e>
 8005440:	4a64      	ldr	r2, [pc, #400]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005442:	4b64      	ldr	r3, [pc, #400]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	f043 0304 	orr.w	r3, r3, #4
 800544a:	6713      	str	r3, [r2, #112]	; 0x70
 800544c:	4a61      	ldr	r2, [pc, #388]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800544e:	4b61      	ldr	r3, [pc, #388]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	6713      	str	r3, [r2, #112]	; 0x70
 8005458:	e00b      	b.n	8005472 <HAL_RCC_OscConfig+0x376>
 800545a:	4a5e      	ldr	r2, [pc, #376]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800545c:	4b5d      	ldr	r3, [pc, #372]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	6713      	str	r3, [r2, #112]	; 0x70
 8005466:	4a5b      	ldr	r2, [pc, #364]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005468:	4b5a      	ldr	r3, [pc, #360]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800546a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546c:	f023 0304 	bic.w	r3, r3, #4
 8005470:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d015      	beq.n	80054a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547a:	f7fc fbd9 	bl	8001c30 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005480:	e00a      	b.n	8005498 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7fc fbd5 	bl	8001c30 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e099      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005498:	4b4e      	ldr	r3, [pc, #312]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0ee      	beq.n	8005482 <HAL_RCC_OscConfig+0x386>
 80054a4:	e014      	b.n	80054d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a6:	f7fc fbc3 	bl	8001c30 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ac:	e00a      	b.n	80054c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ae:	f7fc fbbf 	bl	8001c30 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e083      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054c4:	4b43      	ldr	r3, [pc, #268]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ee      	bne.n	80054ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d105      	bne.n	80054e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d6:	4a3f      	ldr	r2, [pc, #252]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80054d8:	4b3e      	ldr	r3, [pc, #248]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d06f      	beq.n	80055ca <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054ea:	4b3a      	ldr	r3, [pc, #232]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 030c 	and.w	r3, r3, #12
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d067      	beq.n	80055c6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d149      	bne.n	8005592 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fe:	4a35      	ldr	r2, [pc, #212]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005500:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550a:	f7fc fb91 	bl	8001c30 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005512:	f7fc fb8d 	bl	8001c30 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e053      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005524:	4b2b      	ldr	r3, [pc, #172]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f0      	bne.n	8005512 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005530:	4928      	ldr	r1, [pc, #160]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	3b01      	subs	r3, #1
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	4313      	orrs	r3, r2
 8005558:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800555c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800555e:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005560:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556a:	f7fc fb61 	bl	8001c30 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005572:	f7fc fb5d 	bl	8001c30 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e023      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005584:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x476>
 8005590:	e01b      	b.n	80055ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005592:	4a10      	ldr	r2, [pc, #64]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005594:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800559c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559e:	f7fc fb47 	bl	8001c30 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055a6:	f7fc fb43 	bl	8001c30 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e009      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b8:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f0      	bne.n	80055a6 <HAL_RCC_OscConfig+0x4aa>
 80055c4:	e001      	b.n	80055ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40007000 	.word	0x40007000

080055dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0ce      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055f4:	4b69      	ldr	r3, [pc, #420]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 020f 	and.w	r2, r3, #15
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d210      	bcs.n	8005624 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	4966      	ldr	r1, [pc, #408]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	4b65      	ldr	r3, [pc, #404]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f023 020f 	bic.w	r2, r3, #15
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	4b62      	ldr	r3, [pc, #392]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 020f 	and.w	r2, r3, #15
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e0b6      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d020      	beq.n	8005672 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800563c:	4a58      	ldr	r2, [pc, #352]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800563e:	4b58      	ldr	r3, [pc, #352]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005646:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005654:	4a52      	ldr	r2, [pc, #328]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005656:	4b52      	ldr	r3, [pc, #328]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800565e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005660:	494f      	ldr	r1, [pc, #316]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005662:	4b4f      	ldr	r3, [pc, #316]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d040      	beq.n	8005700 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d107      	bne.n	8005696 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005686:	4b46      	ldr	r3, [pc, #280]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d115      	bne.n	80056be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e07d      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800569e:	4b40      	ldr	r3, [pc, #256]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e071      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ae:	4b3c      	ldr	r3, [pc, #240]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e069      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056be:	4938      	ldr	r1, [pc, #224]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056c0:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f023 0203 	bic.w	r2, r3, #3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d0:	f7fc faae 	bl	8001c30 <HAL_GetTick>
 80056d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d8:	f7fc faaa 	bl	8001c30 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e051      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ee:	4b2c      	ldr	r3, [pc, #176]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 020c 	and.w	r2, r3, #12
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d1eb      	bne.n	80056d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005700:	4b26      	ldr	r3, [pc, #152]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 020f 	and.w	r2, r3, #15
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d910      	bls.n	8005730 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570e:	4923      	ldr	r1, [pc, #140]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005710:	4b22      	ldr	r3, [pc, #136]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f023 020f 	bic.w	r2, r3, #15
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b1f      	ldr	r3, [pc, #124]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 020f 	and.w	r2, r3, #15
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e030      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800573c:	4918      	ldr	r1, [pc, #96]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800573e:	4b18      	ldr	r3, [pc, #96]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800575a:	4911      	ldr	r1, [pc, #68]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4313      	orrs	r3, r2
 800576c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800576e:	f000 f81d 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8005772:	4601      	mov	r1, r0
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	091b      	lsrs	r3, r3, #4
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	4a09      	ldr	r2, [pc, #36]	; (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005780:	5cd3      	ldrb	r3, [r2, r3]
 8005782:	fa21 f303 	lsr.w	r3, r1, r3
 8005786:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <HAL_RCC_ClockConfig+0x1cc>)
 8005788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800578a:	2000      	movs	r0, #0
 800578c:	f009 f9fe 	bl	800eb8c <HAL_InitTick>

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40023c00 	.word	0x40023c00
 80057a0:	40023800 	.word	0x40023800
 80057a4:	080156e4 	.word	0x080156e4
 80057a8:	20000124 	.word	0x20000124

080057ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b0:	b087      	sub	sp, #28
 80057b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80057b4:	2200      	movs	r2, #0
 80057b6:	60fa      	str	r2, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	617a      	str	r2, [r7, #20]
 80057bc:	2200      	movs	r2, #0
 80057be:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 80057c0:	2200      	movs	r2, #0
 80057c2:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057c4:	4a51      	ldr	r2, [pc, #324]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80057c6:	6892      	ldr	r2, [r2, #8]
 80057c8:	f002 020c 	and.w	r2, r2, #12
 80057cc:	2a04      	cmp	r2, #4
 80057ce:	d007      	beq.n	80057e0 <HAL_RCC_GetSysClockFreq+0x34>
 80057d0:	2a08      	cmp	r2, #8
 80057d2:	d008      	beq.n	80057e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80057d4:	2a00      	cmp	r2, #0
 80057d6:	f040 8090 	bne.w	80058fa <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057da:	4b4d      	ldr	r3, [pc, #308]	; (8005910 <HAL_RCC_GetSysClockFreq+0x164>)
 80057dc:	613b      	str	r3, [r7, #16]
       break;
 80057de:	e08f      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057e0:	4b4c      	ldr	r3, [pc, #304]	; (8005914 <HAL_RCC_GetSysClockFreq+0x168>)
 80057e2:	613b      	str	r3, [r7, #16]
      break;
 80057e4:	e08c      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057e6:	4a49      	ldr	r2, [pc, #292]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80057e8:	6852      	ldr	r2, [r2, #4]
 80057ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80057ee:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80057f0:	4a46      	ldr	r2, [pc, #280]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80057f2:	6852      	ldr	r2, [r2, #4]
 80057f4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80057f8:	2a00      	cmp	r2, #0
 80057fa:	d023      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057fc:	4b43      	ldr	r3, [pc, #268]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	099b      	lsrs	r3, r3, #6
 8005802:	f04f 0400 	mov.w	r4, #0
 8005806:	f240 11ff 	movw	r1, #511	; 0x1ff
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	ea03 0301 	and.w	r3, r3, r1
 8005812:	ea04 0402 	and.w	r4, r4, r2
 8005816:	4a3f      	ldr	r2, [pc, #252]	; (8005914 <HAL_RCC_GetSysClockFreq+0x168>)
 8005818:	fb02 f104 	mul.w	r1, r2, r4
 800581c:	2200      	movs	r2, #0
 800581e:	fb02 f203 	mul.w	r2, r2, r3
 8005822:	440a      	add	r2, r1
 8005824:	493b      	ldr	r1, [pc, #236]	; (8005914 <HAL_RCC_GetSysClockFreq+0x168>)
 8005826:	fba3 0101 	umull	r0, r1, r3, r1
 800582a:	1853      	adds	r3, r2, r1
 800582c:	4619      	mov	r1, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f04f 0400 	mov.w	r4, #0
 8005834:	461a      	mov	r2, r3
 8005836:	4623      	mov	r3, r4
 8005838:	f7fb fa52 	bl	8000ce0 <__aeabi_uldivmod>
 800583c:	4603      	mov	r3, r0
 800583e:	460c      	mov	r4, r1
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	e04c      	b.n	80058de <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005844:	4a31      	ldr	r2, [pc, #196]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 8005846:	6852      	ldr	r2, [r2, #4]
 8005848:	0992      	lsrs	r2, r2, #6
 800584a:	4611      	mov	r1, r2
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f240 15ff 	movw	r5, #511	; 0x1ff
 8005854:	f04f 0600 	mov.w	r6, #0
 8005858:	ea05 0501 	and.w	r5, r5, r1
 800585c:	ea06 0602 	and.w	r6, r6, r2
 8005860:	4629      	mov	r1, r5
 8005862:	4632      	mov	r2, r6
 8005864:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8005868:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 800586c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8005870:	4651      	mov	r1, sl
 8005872:	465a      	mov	r2, fp
 8005874:	46aa      	mov	sl, r5
 8005876:	46b3      	mov	fp, r6
 8005878:	4655      	mov	r5, sl
 800587a:	465e      	mov	r6, fp
 800587c:	1b4d      	subs	r5, r1, r5
 800587e:	eb62 0606 	sbc.w	r6, r2, r6
 8005882:	4629      	mov	r1, r5
 8005884:	4632      	mov	r2, r6
 8005886:	0194      	lsls	r4, r2, #6
 8005888:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800588c:	018b      	lsls	r3, r1, #6
 800588e:	1a5b      	subs	r3, r3, r1
 8005890:	eb64 0402 	sbc.w	r4, r4, r2
 8005894:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8005898:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800589c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80058a0:	4643      	mov	r3, r8
 80058a2:	464c      	mov	r4, r9
 80058a4:	4655      	mov	r5, sl
 80058a6:	465e      	mov	r6, fp
 80058a8:	18ed      	adds	r5, r5, r3
 80058aa:	eb46 0604 	adc.w	r6, r6, r4
 80058ae:	462b      	mov	r3, r5
 80058b0:	4634      	mov	r4, r6
 80058b2:	02a2      	lsls	r2, r4, #10
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	029b      	lsls	r3, r3, #10
 80058c0:	603b      	str	r3, [r7, #0]
 80058c2:	e897 0018 	ldmia.w	r7, {r3, r4}
 80058c6:	4618      	mov	r0, r3
 80058c8:	4621      	mov	r1, r4
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f04f 0400 	mov.w	r4, #0
 80058d0:	461a      	mov	r2, r3
 80058d2:	4623      	mov	r3, r4
 80058d4:	f7fb fa04 	bl	8000ce0 <__aeabi_uldivmod>
 80058d8:	4603      	mov	r3, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	0c1b      	lsrs	r3, r3, #16
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	3301      	adds	r3, #1
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f6:	613b      	str	r3, [r7, #16]
      break;
 80058f8:	e002      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <HAL_RCC_GetSysClockFreq+0x164>)
 80058fc:	613b      	str	r3, [r7, #16]
      break;
 80058fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005900:	693b      	ldr	r3, [r7, #16]
}
 8005902:	4618      	mov	r0, r3
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590c:	40023800 	.word	0x40023800
 8005910:	00f42400 	.word	0x00f42400
 8005914:	017d7840 	.word	0x017d7840

08005918 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800591c:	4b03      	ldr	r3, [pc, #12]	; (800592c <HAL_RCC_GetHCLKFreq+0x14>)
 800591e:	681b      	ldr	r3, [r3, #0]
}
 8005920:	4618      	mov	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000124 	.word	0x20000124

08005930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005934:	f7ff fff0 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005938:	4601      	mov	r1, r0
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	0a9b      	lsrs	r3, r3, #10
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4a03      	ldr	r2, [pc, #12]	; (8005954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005946:	5cd3      	ldrb	r3, [r2, r3]
 8005948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800594c:	4618      	mov	r0, r3
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40023800 	.word	0x40023800
 8005954:	080156f4 	.word	0x080156f4

08005958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800595c:	f7ff ffdc 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005960:	4601      	mov	r1, r0
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	0b5b      	lsrs	r3, r3, #13
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	4a03      	ldr	r2, [pc, #12]	; (800597c <HAL_RCC_GetPCLK2Freq+0x24>)
 800596e:	5cd3      	ldrb	r3, [r2, r3]
 8005970:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005974:	4618      	mov	r0, r3
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40023800 	.word	0x40023800
 800597c:	080156f4 	.word	0x080156f4

08005980 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	220f      	movs	r2, #15
 800598e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005990:	4b12      	ldr	r3, [pc, #72]	; (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0203 	and.w	r2, r3, #3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800599c:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80059a8:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80059b4:	4b09      	ldr	r3, [pc, #36]	; (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	08db      	lsrs	r3, r3, #3
 80059ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059c2:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <HAL_RCC_GetClockConfig+0x60>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 020f 	and.w	r2, r3, #15
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40023800 	.word	0x40023800
 80059e0:	40023c00 	.word	0x40023c00

080059e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d012      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a0c:	4a69      	ldr	r2, [pc, #420]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0e:	4b69      	ldr	r3, [pc, #420]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005a16:	6093      	str	r3, [r2, #8]
 8005a18:	4966      	ldr	r1, [pc, #408]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1a:	4b66      	ldr	r3, [pc, #408]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	4313      	orrs	r3, r2
 8005a24:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1; 
 8005a2e:	2301      	movs	r3, #1
 8005a30:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d017      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a3e:	495d      	ldr	r1, [pc, #372]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a40:	4b5c      	ldr	r3, [pc, #368]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5c:	d101      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1; 
 8005a5e:	2301      	movs	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1; 
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d017      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a7a:	494e      	ldr	r1, [pc, #312]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7c:	4b4d      	ldr	r3, [pc, #308]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a98:	d101      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1; 
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1; 
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {    
      plli2sused = 1; 
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 808b 	beq.w	8005bde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ac8:	4a3a      	ldr	r2, [pc, #232]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aca:	4b3a      	ldr	r3, [pc, #232]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad4:	4b37      	ldr	r3, [pc, #220]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ae0:	4a35      	ldr	r2, [pc, #212]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ae2:	4b35      	ldr	r3, [pc, #212]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aea:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aec:	f7fc f8a0 	bl	8001c30 <HAL_GetTick>
 8005af0:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af4:	f7fc f89c 	bl	8001c30 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b64      	cmp	r3, #100	; 0x64
 8005b00:	d901      	bls.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e355      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b06:	4b2c      	ldr	r3, [pc, #176]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b12:	4b28      	ldr	r3, [pc, #160]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d035      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b26:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d02e      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b30:	4b20      	ldr	r3, [pc, #128]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b3a:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b46:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b52:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b58:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d014      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fc f864 	bl	8001c30 <HAL_GetTick>
 8005b68:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b6c:	f7fc f860 	bl	8001c30 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e317      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0ee      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b9a:	d111      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005b9c:	4805      	ldr	r0, [pc, #20]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005baa:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bac:	400b      	ands	r3, r1
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	6083      	str	r3, [r0, #8]
 8005bb2:	e00b      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	40007000 	.word	0x40007000
 8005bbc:	0ffffcff 	.word	0x0ffffcff
 8005bc0:	4ab0      	ldr	r2, [pc, #704]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bc2:	4bb0      	ldr	r3, [pc, #704]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bca:	6093      	str	r3, [r2, #8]
 8005bcc:	49ad      	ldr	r1, [pc, #692]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bce:	4bad      	ldr	r3, [pc, #692]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d010      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bea:	4aa6      	ldr	r2, [pc, #664]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bec:	4ba5      	ldr	r3, [pc, #660]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bf6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bfa:	49a2      	ldr	r1, [pc, #648]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bfc:	4ba1      	ldr	r3, [pc, #644]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bfe:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c18:	499a      	ldr	r1, [pc, #616]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c1a:	4b9a      	ldr	r3, [pc, #616]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c3a:	4992      	ldr	r1, [pc, #584]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c3c:	4b91      	ldr	r3, [pc, #580]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c42:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c5c:	4989      	ldr	r1, [pc, #548]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c5e:	4b89      	ldr	r3, [pc, #548]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c7e:	4981      	ldr	r1, [pc, #516]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c80:	4b80      	ldr	r3, [pc, #512]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ca0:	4978      	ldr	r1, [pc, #480]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ca2:	4b78      	ldr	r3, [pc, #480]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca8:	f023 0203 	bic.w	r2, r3, #3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cc2:	4970      	ldr	r1, [pc, #448]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cc4:	4b6f      	ldr	r3, [pc, #444]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	f023 020c 	bic.w	r2, r3, #12
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ce4:	4967      	ldr	r1, [pc, #412]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ce6:	4b67      	ldr	r3, [pc, #412]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d06:	495f      	ldr	r1, [pc, #380]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d08:	4b5e      	ldr	r3, [pc, #376]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d28:	4956      	ldr	r1, [pc, #344]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d2a:	4b56      	ldr	r3, [pc, #344]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d4a:	494e      	ldr	r1, [pc, #312]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d4c:	4b4d      	ldr	r3, [pc, #308]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d6c:	4945      	ldr	r1, [pc, #276]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d6e:	4b45      	ldr	r3, [pc, #276]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d8e:	493d      	ldr	r1, [pc, #244]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d90:	4b3c      	ldr	r3, [pc, #240]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005db0:	4934      	ldr	r1, [pc, #208]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005db2:	4b34      	ldr	r3, [pc, #208]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d011      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005dd2:	492c      	ldr	r1, [pc, #176]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dd4:	4b2b      	ldr	r3, [pc, #172]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df0:	d101      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1; 
 8005df2:	2301      	movs	r3, #1
 8005df4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1; 
 8005e02:	2301      	movs	r3, #1
 8005e04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e12:	491c      	ldr	r1, [pc, #112]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e14:	4b1b      	ldr	r3, [pc, #108]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e34:	4913      	ldr	r1, [pc, #76]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e36:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d005      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e5a:	f040 80d8 	bne.w	800600e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8005e5e:	4a09      	ldr	r2, [pc, #36]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e60:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e68:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e6a:	f7fb fee1 	bl	8001c30 <HAL_GetTick>
 8005e6e:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e70:	e00a      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e72:	f7fb fedd 	bl	8001c30 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b64      	cmp	r3, #100	; 0x64
 8005e7e:	d903      	bls.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e196      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005e84:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e88:	4b6c      	ldr	r3, [pc, #432]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1ee      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x48e>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d021      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d11d      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ea8:	4b64      	ldr	r3, [pc, #400]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eae:	0c1b      	lsrs	r3, r3, #16
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005eb6:	4b61      	ldr	r3, [pc, #388]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ebc:	0e1b      	lsrs	r3, r3, #24
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ec4:	495d      	ldr	r1, [pc, #372]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	019a      	lsls	r2, r3, #6
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	041b      	lsls	r3, r3, #16
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	061b      	lsls	r3, r3, #24
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	071b      	lsls	r3, r3, #28
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef8:	d00a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d02e      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f0e:	d129      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f10:	4b4a      	ldr	r3, [pc, #296]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f1e:	4b47      	ldr	r3, [pc, #284]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f24:	0f1b      	lsrs	r3, r3, #28
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f2c:	4943      	ldr	r1, [pc, #268]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	019a      	lsls	r2, r3, #6
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	061b      	lsls	r3, r3, #24
 8005f40:	431a      	orrs	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	071b      	lsls	r3, r3, #28
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8005f4c:	493b      	ldr	r1, [pc, #236]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f4e:	4b3b      	ldr	r3, [pc, #236]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f54:	f023 021f 	bic.w	r2, r3, #31
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01d      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f70:	4b32      	ldr	r3, [pc, #200]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f76:	0e1b      	lsrs	r3, r3, #24
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f7e:	4b2f      	ldr	r3, [pc, #188]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f84:	0f1b      	lsrs	r3, r3, #28
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005f8c:	492b      	ldr	r1, [pc, #172]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	019a      	lsls	r2, r3, #6
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	041b      	lsls	r3, r3, #16
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	061b      	lsls	r3, r3, #24
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	071b      	lsls	r3, r3, #28
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d011      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fb8:	4920      	ldr	r1, [pc, #128]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	019a      	lsls	r2, r3, #6
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	061b      	lsls	r3, r3, #24
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	071b      	lsls	r3, r3, #28
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fdc:	4a17      	ldr	r2, [pc, #92]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fde:	4b17      	ldr	r3, [pc, #92]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fe6:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe8:	f7fb fe22 	bl	8001c30 <HAL_GetTick>
 8005fec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ff0:	f7fb fe1e 	bl	8001c30 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b64      	cmp	r3, #100	; 0x64
 8005ffc:	d901      	bls.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e0d7      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006002:	4b0e      	ldr	r3, [pc, #56]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b01      	cmp	r3, #1
 8006012:	f040 80cd 	bne.w	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8006016:	4a09      	ldr	r2, [pc, #36]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006018:	4b08      	ldr	r3, [pc, #32]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006020:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006022:	f7fb fe05 	bl	8001c30 <HAL_GetTick>
 8006026:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006028:	e00a      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800602a:	f7fb fe01 	bl	8001c30 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b64      	cmp	r3, #100	; 0x64
 8006036:	d903      	bls.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e0ba      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800603c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006040:	4b5e      	ldr	r3, [pc, #376]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800604c:	d0ed      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x646>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800606a:	2b00      	cmp	r3, #0
 800606c:	d02e      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d12a      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006076:	4b51      	ldr	r3, [pc, #324]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006084:	4b4d      	ldr	r3, [pc, #308]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	0f1b      	lsrs	r3, r3, #28
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006092:	494a      	ldr	r1, [pc, #296]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	019a      	lsls	r2, r3, #6
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	041b      	lsls	r3, r3, #16
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	061b      	lsls	r3, r3, #24
 80060a6:	431a      	orrs	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	071b      	lsls	r3, r3, #28
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060b2:	4942      	ldr	r1, [pc, #264]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060b4:	4b41      	ldr	r3, [pc, #260]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	3b01      	subs	r3, #1
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d022      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060e0:	d11d      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060e2:	4b36      	ldr	r3, [pc, #216]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	0e1b      	lsrs	r3, r3, #24
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060f0:	4b32      	ldr	r3, [pc, #200]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	0f1b      	lsrs	r3, r3, #28
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80060fe:	492f      	ldr	r1, [pc, #188]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	019a      	lsls	r2, r3, #6
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	431a      	orrs	r2, r3
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	061b      	lsls	r3, r3, #24
 8006112:	431a      	orrs	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	071b      	lsls	r3, r3, #28
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d028      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800612a:	4b24      	ldr	r3, [pc, #144]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800612c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006130:	0e1b      	lsrs	r3, r3, #24
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006138:	4b20      	ldr	r3, [pc, #128]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	0c1b      	lsrs	r3, r3, #16
 8006140:	f003 0303 	and.w	r3, r3, #3
 8006144:	60fb      	str	r3, [r7, #12]
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006146:	491d      	ldr	r1, [pc, #116]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	019a      	lsls	r2, r3, #6
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	431a      	orrs	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	061b      	lsls	r3, r3, #24
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	071b      	lsls	r3, r3, #28
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006166:	4915      	ldr	r1, [pc, #84]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006168:	4b14      	ldr	r3, [pc, #80]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800616a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800616e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800617c:	4a0f      	ldr	r2, [pc, #60]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800617e:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006186:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006188:	f7fb fd52 	bl	8001c30 <HAL_GetTick>
 800618c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006190:	f7fb fd4e 	bl	8001c30 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b64      	cmp	r3, #100	; 0x64
 800619c:	d901      	bls.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e007      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ae:	d1ef      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3720      	adds	r7, #32
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40023800 	.word	0x40023800

080061c0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e025      	b.n	8006220 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d106      	bne.n	80061ee <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f008 fcc5 	bl	800eb78 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f000 ff83 	bl	800710c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	461a      	mov	r2, r3
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	f000 ffed 	bl	80071f0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_SDRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_SDRAM_Read_32b+0x20>
 8006244:	2302      	movs	r3, #2
 8006246:	e028      	b.n	800629a <HAL_SDRAM_Read_32b+0x72>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d101      	bne.n	8006260 <HAL_SDRAM_Read_32b+0x38>
  {
    return HAL_BUSY;
 800625c:	2302      	movs	r3, #2
 800625e:	e01c      	b.n	800629a <HAL_SDRAM_Read_32b+0x72>
  }
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b05      	cmp	r3, #5
 800626a:	d10e      	bne.n	800628a <HAL_SDRAM_Read_32b+0x62>
  {
    return  HAL_ERROR; 
 800626c:	2301      	movs	r3, #1
 800626e:	e014      	b.n	800629a <HAL_SDRAM_Read_32b+0x72>
  }  
  
  /* Read data from source */
  for(; BufferSize != 0; BufferSize--)
  {
    *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3304      	adds	r3, #4
 800627c:	607b      	str	r3, [r7, #4]
    pSdramAddress++;               
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	3304      	adds	r3, #4
 8006282:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	3b01      	subs	r3, #1
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1ef      	bne.n	8006270 <HAL_SDRAM_Read_32b+0x48>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK; 
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <HAL_SDRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b087      	sub	sp, #28
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	607a      	str	r2, [r7, #4]
 80062b2:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_SDRAM_Write_32b+0x24>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e02a      	b.n	8006320 <HAL_SDRAM_Write_32b+0x7a>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  tmp = hsdram->State;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	613b      	str	r3, [r7, #16]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d101      	bne.n	80062e6 <HAL_SDRAM_Write_32b+0x40>
  {
    return HAL_BUSY;
 80062e2:	2302      	movs	r3, #2
 80062e4:	e01c      	b.n	8006320 <HAL_SDRAM_Write_32b+0x7a>
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	2b05      	cmp	r3, #5
 80062ea:	d002      	beq.n	80062f2 <HAL_SDRAM_Write_32b+0x4c>
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d10e      	bne.n	8006310 <HAL_SDRAM_Write_32b+0x6a>
  {
    return  HAL_ERROR; 
 80062f2:	2301      	movs	r3, #1
 80062f4:	e014      	b.n	8006320 <HAL_SDRAM_Write_32b+0x7a>
  }
  
  /* Write data to memory */
  for(; BufferSize != 0; BufferSize--)
  {
    *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3304      	adds	r3, #4
 8006302:	607b      	str	r3, [r7, #4]
    pSdramAddress++;          
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3304      	adds	r3, #4
 8006308:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	3b01      	subs	r3, #1
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1ef      	bne.n	80062f6 <HAL_SDRAM_Write_32b+0x50>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK;  
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d101      	bne.n	8006348 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006344:	2302      	movs	r3, #2
 8006346:	e018      	b.n	800637a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	68b9      	ldr	r1, [r7, #8]
 8006358:	4618      	mov	r0, r3
 800635a:	f000 ffc9 	bl	80072f0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b02      	cmp	r3, #2
 8006364:	d104      	bne.n	8006370 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2205      	movs	r2, #5
 800636a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800636e:	e003      	b.n	8006378 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e01d      	b.n	80063d0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d106      	bne.n	80063ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f815 	bl	80063d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3304      	adds	r3, #4
 80063be:	4619      	mov	r1, r3
 80063c0:	4610      	mov	r0, r2
 80063c2:	f000 f975 	bl	80066b0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6812      	ldr	r2, [r2, #0]
 80063fc:	68d2      	ldr	r2, [r2, #12]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6812      	ldr	r2, [r2, #0]
 800640c:	6812      	ldr	r2, [r2, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b02      	cmp	r3, #2
 8006436:	d122      	bne.n	800647e <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b02      	cmp	r3, #2
 8006444:	d11b      	bne.n	800647e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f06f 0202 	mvn.w	r2, #2
 800644e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f003 0303 	and.w	r3, r3, #3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f905 	bl	8006674 <HAL_TIM_IC_CaptureCallback>
 800646a:	e005      	b.n	8006478 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f8f7 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f908 	bl	8006688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b04      	cmp	r3, #4
 800648a:	d122      	bne.n	80064d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b04      	cmp	r3, #4
 8006498:	d11b      	bne.n	80064d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f06f 0204 	mvn.w	r2, #4
 80064a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f8db 	bl	8006674 <HAL_TIM_IC_CaptureCallback>
 80064be:	e005      	b.n	80064cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f8cd 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8de 	bl	8006688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d122      	bne.n	8006526 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b08      	cmp	r3, #8
 80064ec:	d11b      	bne.n	8006526 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f06f 0208 	mvn.w	r2, #8
 80064f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2204      	movs	r2, #4
 80064fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	f003 0303 	and.w	r3, r3, #3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_TIM_IRQHandler+0xf2>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f8b1 	bl	8006674 <HAL_TIM_IC_CaptureCallback>
 8006512:	e005      	b.n	8006520 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f8a3 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f8b4 	bl	8006688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b10      	cmp	r3, #16
 8006532:	d122      	bne.n	800657a <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f003 0310 	and.w	r3, r3, #16
 800653e:	2b10      	cmp	r3, #16
 8006540:	d11b      	bne.n	800657a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f06f 0210 	mvn.w	r2, #16
 800654a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2208      	movs	r2, #8
 8006550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_TIM_IRQHandler+0x146>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f887 	bl	8006674 <HAL_TIM_IC_CaptureCallback>
 8006566:	e005      	b.n	8006574 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f879 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f88a 	bl	8006688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b01      	cmp	r3, #1
 8006586:	d10e      	bne.n	80065a6 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b01      	cmp	r3, #1
 8006594:	d107      	bne.n	80065a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f06f 0201 	mvn.w	r2, #1
 800659e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f007 ff77 	bl	800e494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b0:	2b80      	cmp	r3, #128	; 0x80
 80065b2:	d10e      	bne.n	80065d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065be:	2b80      	cmp	r3, #128	; 0x80
 80065c0:	d107      	bne.n	80065d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f929 	bl	8006824 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e0:	d10e      	bne.n	8006600 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ec:	2b80      	cmp	r3, #128	; 0x80
 80065ee:	d107      	bne.n	8006600 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f912 	bl	8006824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660a:	2b40      	cmp	r3, #64	; 0x40
 800660c:	d10e      	bne.n	800662c <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	d107      	bne.n	800662c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f838 	bl	800669c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b20      	cmp	r3, #32
 8006638:	d10e      	bne.n	8006658 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b20      	cmp	r3, #32
 8006646:	d107      	bne.n	8006658 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0220 	mvn.w	r2, #32
 8006650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f8dc 	bl	8006810 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a47      	ldr	r2, [pc, #284]	; (80067e4 <TIM_Base_SetConfig+0x134>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d013      	beq.n	80066f4 <TIM_Base_SetConfig+0x44>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d2:	d00f      	beq.n	80066f4 <TIM_Base_SetConfig+0x44>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a44      	ldr	r2, [pc, #272]	; (80067e8 <TIM_Base_SetConfig+0x138>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00b      	beq.n	80066f4 <TIM_Base_SetConfig+0x44>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a43      	ldr	r2, [pc, #268]	; (80067ec <TIM_Base_SetConfig+0x13c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d007      	beq.n	80066f4 <TIM_Base_SetConfig+0x44>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a42      	ldr	r2, [pc, #264]	; (80067f0 <TIM_Base_SetConfig+0x140>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d003      	beq.n	80066f4 <TIM_Base_SetConfig+0x44>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a41      	ldr	r2, [pc, #260]	; (80067f4 <TIM_Base_SetConfig+0x144>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d101      	bne.n	80066f8 <TIM_Base_SetConfig+0x48>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <TIM_Base_SetConfig+0x4a>
 80066f8:	2300      	movs	r3, #0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d008      	beq.n	8006710 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a34      	ldr	r2, [pc, #208]	; (80067e4 <TIM_Base_SetConfig+0x134>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d02b      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671e:	d027      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a31      	ldr	r2, [pc, #196]	; (80067e8 <TIM_Base_SetConfig+0x138>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d023      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a30      	ldr	r2, [pc, #192]	; (80067ec <TIM_Base_SetConfig+0x13c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d01f      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a2f      	ldr	r2, [pc, #188]	; (80067f0 <TIM_Base_SetConfig+0x140>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d01b      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a2e      	ldr	r2, [pc, #184]	; (80067f4 <TIM_Base_SetConfig+0x144>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d017      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a2d      	ldr	r2, [pc, #180]	; (80067f8 <TIM_Base_SetConfig+0x148>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d013      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a2c      	ldr	r2, [pc, #176]	; (80067fc <TIM_Base_SetConfig+0x14c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00f      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a2b      	ldr	r2, [pc, #172]	; (8006800 <TIM_Base_SetConfig+0x150>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00b      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a2a      	ldr	r2, [pc, #168]	; (8006804 <TIM_Base_SetConfig+0x154>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d007      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a29      	ldr	r2, [pc, #164]	; (8006808 <TIM_Base_SetConfig+0x158>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_Base_SetConfig+0xc0>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a28      	ldr	r2, [pc, #160]	; (800680c <TIM_Base_SetConfig+0x15c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d101      	bne.n	8006774 <TIM_Base_SetConfig+0xc4>
 8006770:	2301      	movs	r3, #1
 8006772:	e000      	b.n	8006776 <TIM_Base_SetConfig+0xc6>
 8006774:	2300      	movs	r3, #0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d008      	beq.n	800678c <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a0c      	ldr	r2, [pc, #48]	; (80067e4 <TIM_Base_SetConfig+0x134>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_Base_SetConfig+0x110>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a0e      	ldr	r2, [pc, #56]	; (80067f4 <TIM_Base_SetConfig+0x144>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d101      	bne.n	80067c4 <TIM_Base_SetConfig+0x114>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e000      	b.n	80067c6 <TIM_Base_SetConfig+0x116>
 80067c4:	2300      	movs	r3, #0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	691a      	ldr	r2, [r3, #16]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	615a      	str	r2, [r3, #20]
}
 80067d8:	bf00      	nop
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	40010000 	.word	0x40010000
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40010400 	.word	0x40010400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800
 8006804:	40001800 	.word	0x40001800
 8006808:	40001c00 	.word	0x40001c00
 800680c:	40002000 	.word	0x40002000

08006810 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e043      	b.n	80068d2 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f008 f8be 	bl	800e9e0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2224      	movs	r2, #36	; 0x24
 8006868:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6812      	ldr	r2, [r2, #0]
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	f022 0201 	bic.w	r2, r2, #1
 800687a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f901 	bl	8006a84 <UART_SetConfig>
 8006882:	4603      	mov	r3, r0
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e022      	b.n	80068d2 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fb63 	bl	8006f60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6812      	ldr	r2, [r2, #0]
 80068a2:	6852      	ldr	r2, [r2, #4]
 80068a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6812      	ldr	r2, [r2, #0]
 80068b2:	6892      	ldr	r2, [r2, #8]
 80068b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068b8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	6812      	ldr	r2, [r2, #0]
 80068c4:	f042 0201 	orr.w	r2, r2, #1
 80068c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fbea 	bl	80070a4 <UART_CheckIdleState>
 80068d0:	4603      	mov	r3, r0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b088      	sub	sp, #32
 80068de:	af02      	add	r7, sp, #8
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	603b      	str	r3, [r7, #0]
 80068e6:	4613      	mov	r3, r2
 80068e8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	d175      	bne.n	80069e6 <HAL_UART_Transmit+0x10c>
  {
    if((pData == NULL ) || (Size == 0U))
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <HAL_UART_Transmit+0x2c>
 8006900:	88fb      	ldrh	r3, [r7, #6]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e06e      	b.n	80069e8 <HAL_UART_Transmit+0x10e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_UART_Transmit+0x3e>
 8006914:	2302      	movs	r3, #2
 8006916:	e067      	b.n	80069e8 <HAL_UART_Transmit+0x10e>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2221      	movs	r2, #33	; 0x21
 800692a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800692e:	f7fb f97f 	bl	8001c30 <HAL_GetTick>
 8006932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	88fa      	ldrh	r2, [r7, #6]
 8006938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	88fa      	ldrh	r2, [r7, #6]
 8006940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8006944:	e032      	b.n	80069ac <HAL_UART_Transmit+0xd2>
    {
      huart->TxXferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2200      	movs	r2, #0
 8006960:	2180      	movs	r1, #128	; 0x80
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f844 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e03a      	b.n	80069e8 <HAL_UART_Transmit+0x10e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697a:	d110      	bne.n	800699e <HAL_UART_Transmit+0xc4>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10c      	bne.n	800699e <HAL_UART_Transmit+0xc4>
      {
        tmp = (uint16_t*) pData;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	8812      	ldrh	r2, [r2, #0]
 8006990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006994:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	3302      	adds	r3, #2
 800699a:	60bb      	str	r3, [r7, #8]
 800699c:	e006      	b.n	80069ac <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	1c59      	adds	r1, r3, #1
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	6293      	str	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1c6      	bne.n	8006946 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2200      	movs	r2, #0
 80069c0:	2140      	movs	r1, #64	; 0x40
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f814 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_UART_Transmit+0xf8>
    {
      return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e00a      	b.n	80069e8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2220      	movs	r2, #32
 80069d6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	e000      	b.n	80069e8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80069e6:	2302      	movs	r3, #2
  }
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a00:	e02c      	b.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d028      	beq.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a10:	f7fb f90e 	bl	8001c30 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	1ad2      	subs	r2, r2, r3
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d31d      	bcc.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	6812      	ldr	r2, [r2, #0]
 8006a2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a2e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	6892      	ldr	r2, [r2, #8]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e00f      	b.n	8006a7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69da      	ldr	r2, [r3, #28]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	401a      	ands	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2301      	moveq	r3, #1
 8006a6e:	2300      	movne	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d0c3      	beq.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a84:	b590      	push	{r4, r7, lr}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006a90:	2310      	movs	r3, #16
 8006a92:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6819      	ldr	r1, [r3, #0]
 8006ac2:	4baa      	ldr	r3, [pc, #680]	; (8006d6c <UART_SetConfig+0x2e8>)
 8006ac4:	400b      	ands	r3, r1
 8006ac6:	68f9      	ldr	r1, [r7, #12]
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6812      	ldr	r2, [r2, #0]
 8006ad4:	6852      	ldr	r2, [r2, #4]
 8006ad6:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	68d2      	ldr	r2, [r2, #12]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699a      	ldr	r2, [r3, #24]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6812      	ldr	r2, [r2, #0]
 8006af6:	6892      	ldr	r2, [r2, #8]
 8006af8:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a9a      	ldr	r2, [pc, #616]	; (8006d70 <UART_SetConfig+0x2ec>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d11f      	bne.n	8006b4c <UART_SetConfig+0xc8>
 8006b0c:	4b99      	ldr	r3, [pc, #612]	; (8006d74 <UART_SetConfig+0x2f0>)
 8006b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	f200 813e 	bhi.w	8006d98 <UART_SetConfig+0x314>
 8006b1c:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <UART_SetConfig+0xa0>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006b35 	.word	0x08006b35
 8006b28:	08006b41 	.word	0x08006b41
 8006b2c:	08006b3b 	.word	0x08006b3b
 8006b30:	08006b47 	.word	0x08006b47
 8006b34:	2301      	movs	r3, #1
 8006b36:	75fb      	strb	r3, [r7, #23]
 8006b38:	e12e      	b.n	8006d98 <UART_SetConfig+0x314>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	75fb      	strb	r3, [r7, #23]
 8006b3e:	e12b      	b.n	8006d98 <UART_SetConfig+0x314>
 8006b40:	2304      	movs	r3, #4
 8006b42:	75fb      	strb	r3, [r7, #23]
 8006b44:	e128      	b.n	8006d98 <UART_SetConfig+0x314>
 8006b46:	2308      	movs	r3, #8
 8006b48:	75fb      	strb	r3, [r7, #23]
 8006b4a:	e125      	b.n	8006d98 <UART_SetConfig+0x314>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a89      	ldr	r2, [pc, #548]	; (8006d78 <UART_SetConfig+0x2f4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d130      	bne.n	8006bb8 <UART_SetConfig+0x134>
 8006b56:	4b87      	ldr	r3, [pc, #540]	; (8006d74 <UART_SetConfig+0x2f0>)
 8006b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5c:	f003 030c 	and.w	r3, r3, #12
 8006b60:	2b0c      	cmp	r3, #12
 8006b62:	f200 8119 	bhi.w	8006d98 <UART_SetConfig+0x314>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <UART_SetConfig+0xe8>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006ba1 	.word	0x08006ba1
 8006b70:	08006d99 	.word	0x08006d99
 8006b74:	08006d99 	.word	0x08006d99
 8006b78:	08006d99 	.word	0x08006d99
 8006b7c:	08006bad 	.word	0x08006bad
 8006b80:	08006d99 	.word	0x08006d99
 8006b84:	08006d99 	.word	0x08006d99
 8006b88:	08006d99 	.word	0x08006d99
 8006b8c:	08006ba7 	.word	0x08006ba7
 8006b90:	08006d99 	.word	0x08006d99
 8006b94:	08006d99 	.word	0x08006d99
 8006b98:	08006d99 	.word	0x08006d99
 8006b9c:	08006bb3 	.word	0x08006bb3
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	75fb      	strb	r3, [r7, #23]
 8006ba4:	e0f8      	b.n	8006d98 <UART_SetConfig+0x314>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	75fb      	strb	r3, [r7, #23]
 8006baa:	e0f5      	b.n	8006d98 <UART_SetConfig+0x314>
 8006bac:	2304      	movs	r3, #4
 8006bae:	75fb      	strb	r3, [r7, #23]
 8006bb0:	e0f2      	b.n	8006d98 <UART_SetConfig+0x314>
 8006bb2:	2308      	movs	r3, #8
 8006bb4:	75fb      	strb	r3, [r7, #23]
 8006bb6:	e0ef      	b.n	8006d98 <UART_SetConfig+0x314>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a6f      	ldr	r2, [pc, #444]	; (8006d7c <UART_SetConfig+0x2f8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d11c      	bne.n	8006bfc <UART_SetConfig+0x178>
 8006bc2:	4b6c      	ldr	r3, [pc, #432]	; (8006d74 <UART_SetConfig+0x2f0>)
 8006bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bcc:	2b10      	cmp	r3, #16
 8006bce:	d00f      	beq.n	8006bf0 <UART_SetConfig+0x16c>
 8006bd0:	2b10      	cmp	r3, #16
 8006bd2:	d802      	bhi.n	8006bda <UART_SetConfig+0x156>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <UART_SetConfig+0x160>
 8006bd8:	e0de      	b.n	8006d98 <UART_SetConfig+0x314>
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d005      	beq.n	8006bea <UART_SetConfig+0x166>
 8006bde:	2b30      	cmp	r3, #48	; 0x30
 8006be0:	d009      	beq.n	8006bf6 <UART_SetConfig+0x172>
 8006be2:	e0d9      	b.n	8006d98 <UART_SetConfig+0x314>
 8006be4:	2300      	movs	r3, #0
 8006be6:	75fb      	strb	r3, [r7, #23]
 8006be8:	e0d6      	b.n	8006d98 <UART_SetConfig+0x314>
 8006bea:	2302      	movs	r3, #2
 8006bec:	75fb      	strb	r3, [r7, #23]
 8006bee:	e0d3      	b.n	8006d98 <UART_SetConfig+0x314>
 8006bf0:	2304      	movs	r3, #4
 8006bf2:	75fb      	strb	r3, [r7, #23]
 8006bf4:	e0d0      	b.n	8006d98 <UART_SetConfig+0x314>
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	75fb      	strb	r3, [r7, #23]
 8006bfa:	e0cd      	b.n	8006d98 <UART_SetConfig+0x314>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a5f      	ldr	r2, [pc, #380]	; (8006d80 <UART_SetConfig+0x2fc>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d11c      	bne.n	8006c40 <UART_SetConfig+0x1bc>
 8006c06:	4b5b      	ldr	r3, [pc, #364]	; (8006d74 <UART_SetConfig+0x2f0>)
 8006c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c10:	2b40      	cmp	r3, #64	; 0x40
 8006c12:	d00f      	beq.n	8006c34 <UART_SetConfig+0x1b0>
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d802      	bhi.n	8006c1e <UART_SetConfig+0x19a>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <UART_SetConfig+0x1a4>
 8006c1c:	e0bc      	b.n	8006d98 <UART_SetConfig+0x314>
 8006c1e:	2b80      	cmp	r3, #128	; 0x80
 8006c20:	d005      	beq.n	8006c2e <UART_SetConfig+0x1aa>
 8006c22:	2bc0      	cmp	r3, #192	; 0xc0
 8006c24:	d009      	beq.n	8006c3a <UART_SetConfig+0x1b6>
 8006c26:	e0b7      	b.n	8006d98 <UART_SetConfig+0x314>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	75fb      	strb	r3, [r7, #23]
 8006c2c:	e0b4      	b.n	8006d98 <UART_SetConfig+0x314>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	75fb      	strb	r3, [r7, #23]
 8006c32:	e0b1      	b.n	8006d98 <UART_SetConfig+0x314>
 8006c34:	2304      	movs	r3, #4
 8006c36:	75fb      	strb	r3, [r7, #23]
 8006c38:	e0ae      	b.n	8006d98 <UART_SetConfig+0x314>
 8006c3a:	2308      	movs	r3, #8
 8006c3c:	75fb      	strb	r3, [r7, #23]
 8006c3e:	e0ab      	b.n	8006d98 <UART_SetConfig+0x314>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a4f      	ldr	r2, [pc, #316]	; (8006d84 <UART_SetConfig+0x300>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d120      	bne.n	8006c8c <UART_SetConfig+0x208>
 8006c4a:	4b4a      	ldr	r3, [pc, #296]	; (8006d74 <UART_SetConfig+0x2f0>)
 8006c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c58:	d012      	beq.n	8006c80 <UART_SetConfig+0x1fc>
 8006c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5e:	d802      	bhi.n	8006c66 <UART_SetConfig+0x1e2>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d007      	beq.n	8006c74 <UART_SetConfig+0x1f0>
 8006c64:	e098      	b.n	8006d98 <UART_SetConfig+0x314>
 8006c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6a:	d006      	beq.n	8006c7a <UART_SetConfig+0x1f6>
 8006c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c70:	d009      	beq.n	8006c86 <UART_SetConfig+0x202>
 8006c72:	e091      	b.n	8006d98 <UART_SetConfig+0x314>
 8006c74:	2300      	movs	r3, #0
 8006c76:	75fb      	strb	r3, [r7, #23]
 8006c78:	e08e      	b.n	8006d98 <UART_SetConfig+0x314>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	75fb      	strb	r3, [r7, #23]
 8006c7e:	e08b      	b.n	8006d98 <UART_SetConfig+0x314>
 8006c80:	2304      	movs	r3, #4
 8006c82:	75fb      	strb	r3, [r7, #23]
 8006c84:	e088      	b.n	8006d98 <UART_SetConfig+0x314>
 8006c86:	2308      	movs	r3, #8
 8006c88:	75fb      	strb	r3, [r7, #23]
 8006c8a:	e085      	b.n	8006d98 <UART_SetConfig+0x314>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a3d      	ldr	r2, [pc, #244]	; (8006d88 <UART_SetConfig+0x304>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d120      	bne.n	8006cd8 <UART_SetConfig+0x254>
 8006c96:	4b37      	ldr	r3, [pc, #220]	; (8006d74 <UART_SetConfig+0x2f0>)
 8006c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca4:	d012      	beq.n	8006ccc <UART_SetConfig+0x248>
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006caa:	d802      	bhi.n	8006cb2 <UART_SetConfig+0x22e>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d007      	beq.n	8006cc0 <UART_SetConfig+0x23c>
 8006cb0:	e072      	b.n	8006d98 <UART_SetConfig+0x314>
 8006cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb6:	d006      	beq.n	8006cc6 <UART_SetConfig+0x242>
 8006cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cbc:	d009      	beq.n	8006cd2 <UART_SetConfig+0x24e>
 8006cbe:	e06b      	b.n	8006d98 <UART_SetConfig+0x314>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	75fb      	strb	r3, [r7, #23]
 8006cc4:	e068      	b.n	8006d98 <UART_SetConfig+0x314>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	75fb      	strb	r3, [r7, #23]
 8006cca:	e065      	b.n	8006d98 <UART_SetConfig+0x314>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	75fb      	strb	r3, [r7, #23]
 8006cd0:	e062      	b.n	8006d98 <UART_SetConfig+0x314>
 8006cd2:	2308      	movs	r3, #8
 8006cd4:	75fb      	strb	r3, [r7, #23]
 8006cd6:	e05f      	b.n	8006d98 <UART_SetConfig+0x314>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a2b      	ldr	r2, [pc, #172]	; (8006d8c <UART_SetConfig+0x308>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d120      	bne.n	8006d24 <UART_SetConfig+0x2a0>
 8006ce2:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <UART_SetConfig+0x2f0>)
 8006ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf0:	d012      	beq.n	8006d18 <UART_SetConfig+0x294>
 8006cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf6:	d802      	bhi.n	8006cfe <UART_SetConfig+0x27a>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d007      	beq.n	8006d0c <UART_SetConfig+0x288>
 8006cfc:	e04c      	b.n	8006d98 <UART_SetConfig+0x314>
 8006cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d02:	d006      	beq.n	8006d12 <UART_SetConfig+0x28e>
 8006d04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d08:	d009      	beq.n	8006d1e <UART_SetConfig+0x29a>
 8006d0a:	e045      	b.n	8006d98 <UART_SetConfig+0x314>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	75fb      	strb	r3, [r7, #23]
 8006d10:	e042      	b.n	8006d98 <UART_SetConfig+0x314>
 8006d12:	2302      	movs	r3, #2
 8006d14:	75fb      	strb	r3, [r7, #23]
 8006d16:	e03f      	b.n	8006d98 <UART_SetConfig+0x314>
 8006d18:	2304      	movs	r3, #4
 8006d1a:	75fb      	strb	r3, [r7, #23]
 8006d1c:	e03c      	b.n	8006d98 <UART_SetConfig+0x314>
 8006d1e:	2308      	movs	r3, #8
 8006d20:	75fb      	strb	r3, [r7, #23]
 8006d22:	e039      	b.n	8006d98 <UART_SetConfig+0x314>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a19      	ldr	r2, [pc, #100]	; (8006d90 <UART_SetConfig+0x30c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d135      	bne.n	8006d9a <UART_SetConfig+0x316>
 8006d2e:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <UART_SetConfig+0x2f0>)
 8006d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d3c:	d012      	beq.n	8006d64 <UART_SetConfig+0x2e0>
 8006d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d42:	d802      	bhi.n	8006d4a <UART_SetConfig+0x2c6>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <UART_SetConfig+0x2d4>
 8006d48:	e026      	b.n	8006d98 <UART_SetConfig+0x314>
 8006d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d4e:	d006      	beq.n	8006d5e <UART_SetConfig+0x2da>
 8006d50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d54:	d01e      	beq.n	8006d94 <UART_SetConfig+0x310>
 8006d56:	e01f      	b.n	8006d98 <UART_SetConfig+0x314>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	75fb      	strb	r3, [r7, #23]
 8006d5c:	e01c      	b.n	8006d98 <UART_SetConfig+0x314>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	75fb      	strb	r3, [r7, #23]
 8006d62:	e019      	b.n	8006d98 <UART_SetConfig+0x314>
 8006d64:	2304      	movs	r3, #4
 8006d66:	75fb      	strb	r3, [r7, #23]
 8006d68:	e016      	b.n	8006d98 <UART_SetConfig+0x314>
 8006d6a:	bf00      	nop
 8006d6c:	efff69f3 	.word	0xefff69f3
 8006d70:	40011000 	.word	0x40011000
 8006d74:	40023800 	.word	0x40023800
 8006d78:	40004400 	.word	0x40004400
 8006d7c:	40004800 	.word	0x40004800
 8006d80:	40004c00 	.word	0x40004c00
 8006d84:	40005000 	.word	0x40005000
 8006d88:	40011400 	.word	0x40011400
 8006d8c:	40007800 	.word	0x40007800
 8006d90:	40007c00 	.word	0x40007c00
 8006d94:	2308      	movs	r3, #8
 8006d96:	75fb      	strb	r3, [r7, #23]
 8006d98:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da2:	d16c      	bne.n	8006e7e <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d854      	bhi.n	8006e54 <UART_SetConfig+0x3d0>
 8006daa:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <UART_SetConfig+0x32c>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dd5 	.word	0x08006dd5
 8006db4:	08006df1 	.word	0x08006df1
 8006db8:	08006e0d 	.word	0x08006e0d
 8006dbc:	08006e55 	.word	0x08006e55
 8006dc0:	08006e23 	.word	0x08006e23
 8006dc4:	08006e55 	.word	0x08006e55
 8006dc8:	08006e55 	.word	0x08006e55
 8006dcc:	08006e55 	.word	0x08006e55
 8006dd0:	08006e3f 	.word	0x08006e3f
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006dd4:	f7fe fdac 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	005a      	lsls	r2, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	085b      	lsrs	r3, r3, #1
 8006de2:	441a      	add	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dec:	82bb      	strh	r3, [r7, #20]
      break;
 8006dee:	e034      	b.n	8006e5a <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006df0:	f7fe fdb2 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 8006df4:	4603      	mov	r3, r0
 8006df6:	005a      	lsls	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	085b      	lsrs	r3, r3, #1
 8006dfe:	441a      	add	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e08:	82bb      	strh	r3, [r7, #20]
      break;
 8006e0a:	e026      	b.n	8006e5a <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	085a      	lsrs	r2, r3, #1
 8006e12:	4b51      	ldr	r3, [pc, #324]	; (8006f58 <UART_SetConfig+0x4d4>)
 8006e14:	4413      	add	r3, r2
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6852      	ldr	r2, [r2, #4]
 8006e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e1e:	82bb      	strh	r3, [r7, #20]
      break;
 8006e20:	e01b      	b.n	8006e5a <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006e22:	f7fe fcc3 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8006e26:	4603      	mov	r3, r0
 8006e28:	005a      	lsls	r2, r3, #1
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	085b      	lsrs	r3, r3, #1
 8006e30:	441a      	add	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3a:	82bb      	strh	r3, [r7, #20]
      break;
 8006e3c:	e00d      	b.n	8006e5a <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	085b      	lsrs	r3, r3, #1
 8006e44:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e50:	82bb      	strh	r3, [r7, #20]
      break;
 8006e52:	e002      	b.n	8006e5a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	74fb      	strb	r3, [r7, #19]
      break;
 8006e58:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8006e5a:	8abb      	ldrh	r3, [r7, #20]
 8006e5c:	f023 030f 	bic.w	r3, r3, #15
 8006e60:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e62:	8abb      	ldrh	r3, [r7, #20]
 8006e64:	105b      	asrs	r3, r3, #1
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	897b      	ldrh	r3, [r7, #10]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	897a      	ldrh	r2, [r7, #10]
 8006e7a:	60da      	str	r2, [r3, #12]
 8006e7c:	e067      	b.n	8006f4e <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d861      	bhi.n	8006f48 <UART_SetConfig+0x4c4>
 8006e84:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <UART_SetConfig+0x408>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006eb1 	.word	0x08006eb1
 8006e90:	08006ed1 	.word	0x08006ed1
 8006e94:	08006ef1 	.word	0x08006ef1
 8006e98:	08006f49 	.word	0x08006f49
 8006e9c:	08006f0d 	.word	0x08006f0d
 8006ea0:	08006f49 	.word	0x08006f49
 8006ea4:	08006f49 	.word	0x08006f49
 8006ea8:	08006f49 	.word	0x08006f49
 8006eac:	08006f2d 	.word	0x08006f2d
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681c      	ldr	r4, [r3, #0]
 8006eb4:	f7fe fd3c 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	085b      	lsrs	r3, r3, #1
 8006ec0:	441a      	add	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	60e3      	str	r3, [r4, #12]
      break;
 8006ece:	e03e      	b.n	8006f4e <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681c      	ldr	r4, [r3, #0]
 8006ed4:	f7fe fd40 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	085b      	lsrs	r3, r3, #1
 8006ee0:	441a      	add	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	60e3      	str	r3, [r4, #12]
      break;
 8006eee:	e02e      	b.n	8006f4e <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	0859      	lsrs	r1, r3, #1
 8006efa:	4b18      	ldr	r3, [pc, #96]	; (8006f5c <UART_SetConfig+0x4d8>)
 8006efc:	440b      	add	r3, r1
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	6849      	ldr	r1, [r1, #4]
 8006f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	60d3      	str	r3, [r2, #12]
      break;
 8006f0a:	e020      	b.n	8006f4e <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681c      	ldr	r4, [r3, #0]
 8006f10:	f7fe fc4c 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8006f14:	4602      	mov	r2, r0
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	441a      	add	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	60e3      	str	r3, [r4, #12]
      break;
 8006f2a:	e010      	b.n	8006f4e <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6852      	ldr	r2, [r2, #4]
 8006f34:	0852      	lsrs	r2, r2, #1
 8006f36:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6852      	ldr	r2, [r2, #4]
 8006f3e:	fbb1 f2f2 	udiv	r2, r1, r2
 8006f42:	b292      	uxth	r2, r2
 8006f44:	60da      	str	r2, [r3, #12]
      break;
 8006f46:	e002      	b.n	8006f4e <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	74fb      	strb	r3, [r7, #19]
      break;
 8006f4c:	bf00      	nop
    }
  }

  return ret;
 8006f4e:	7cfb      	ldrb	r3, [r7, #19]

}
 8006f50:	4618      	mov	r0, r3
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd90      	pop	{r4, r7, pc}
 8006f58:	01e84800 	.word	0x01e84800
 8006f5c:	00f42400 	.word	0x00f42400

08006f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00a      	beq.n	8006f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	6852      	ldr	r2, [r2, #4]
 8006f7e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006f86:	430a      	orrs	r2, r1
 8006f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6812      	ldr	r2, [r2, #0]
 8006f9e:	6852      	ldr	r2, [r2, #4]
 8006fa0:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00a      	beq.n	8006fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	6852      	ldr	r2, [r2, #4]
 8006fc2:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6812      	ldr	r2, [r2, #0]
 8006fe2:	6852      	ldr	r2, [r2, #4]
 8006fe4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fec:	430a      	orrs	r2, r1
 8006fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00a      	beq.n	8007012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	6892      	ldr	r2, [r2, #8]
 8007006:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800700e:	430a      	orrs	r2, r1
 8007010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	6812      	ldr	r2, [r2, #0]
 8007026:	6892      	ldr	r2, [r2, #8]
 8007028:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007030:	430a      	orrs	r2, r1
 8007032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01a      	beq.n	8007076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	6812      	ldr	r2, [r2, #0]
 8007048:	6852      	ldr	r2, [r2, #4]
 800704a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007052:	430a      	orrs	r2, r1
 8007054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800705e:	d10a      	bne.n	8007076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6812      	ldr	r2, [r2, #0]
 8007068:	6852      	ldr	r2, [r2, #4]
 800706a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	6852      	ldr	r2, [r2, #4]
 800708c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007094:	430a      	orrs	r2, r1
 8007096:	605a      	str	r2, [r3, #4]
  }
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80070b6:	f7fa fdbb 	bl	8001c30 <HAL_GetTick>
 80070ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d10e      	bne.n	80070e8 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff fc89 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e00c      	b.n	8007102 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d027      	beq.n	8007176 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4b2f      	ldr	r3, [pc, #188]	; (80071ec <FMC_SDRAM_Init+0xe0>)
 8007130:	4013      	ands	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800713c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8007142:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007148:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800714e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007154:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800715a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007160:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007166:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e032      	b.n	80071dc <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007182:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800718c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007192:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	4b12      	ldr	r3, [pc, #72]	; (80071ec <FMC_SDRAM_Init+0xe0>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071b0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80071b6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80071bc:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80071c2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80071c8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	ffff8000 	.word	0xffff8000

080071f0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d02e      	beq.n	8007268 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007216:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	3b01      	subs	r3, #1
 8007224:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007226:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	3b01      	subs	r3, #1
 800722e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007230:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	3b01      	subs	r3, #1
 8007238:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800723a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	3b01      	subs	r3, #1
 8007242:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007244:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	3b01      	subs	r3, #1
 800724c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800724e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	3b01      	subs	r3, #1
 8007256:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007258:	4313      	orrs	r3, r2
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4313      	orrs	r3, r2
 800725e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	609a      	str	r2, [r3, #8]
 8007266:	e039      	b.n	80072dc <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4b1e      	ldr	r3, [pc, #120]	; (80072ec <FMC_SDRAM_Timing_Init+0xfc>)
 8007272:	4013      	ands	r3, r2
 8007274:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	3b01      	subs	r3, #1
 800727c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	3b01      	subs	r3, #1
 8007284:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007286:	4313      	orrs	r3, r2
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800729a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80072aa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80072b4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80072be:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80072c8:	4313      	orrs	r3, r2
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	ff0f0fff 	.word	0xff0f0fff

080072f0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007308:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	3b01      	subs	r3, #1
 8007310:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007312:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800731a:	4313      	orrs	r3, r2
 800731c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
	...

08007334 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007334:	b084      	sub	sp, #16
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	f107 0014 	add.w	r0, r7, #20
 8007342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	2b01      	cmp	r3, #1
 800734a:	d11e      	bne.n	800738a <USB_CoreInit+0x56>
  {

    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	4b1d      	ldr	r3, [pc, #116]	; (80073d4 <USB_CoreInit+0xa0>)
 800735e:	4013      	ands	r3, r2
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1)
 8007370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007372:	2b01      	cmp	r3, #1
 8007374:	d105      	bne.n	8007382 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 f9a4 	bl	80086d0 <USB_CoreReset>
 8007388:	e00c      	b.n	80073a4 <USB_CoreInit+0x70>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 f99a 	bl	80086d0 <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80073a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(cfg.dma_enable == ENABLE)
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d10b      	bne.n	80073c2 <USB_CoreInit+0x8e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f043 0206 	orr.w	r2, r3, #6
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f043 0220 	orr.w	r2, r3, #32
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073ce:	b004      	add	sp, #16
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	ffbdffbf 	.word	0xffbdffbf

080073d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f043 0201 	orr.w	r2, r3, #1
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f023 0201 	bic.w	r2, r3, #1
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	60da      	str	r2, [r3, #12]

  if ( mode == USB_OTG_HOST_MODE)
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d106      	bne.n	8007448 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	60da      	str	r2, [r3, #12]
 8007446:	e008      	b.n	800745a <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8007448:	78fb      	ldrb	r3, [r7, #3]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d105      	bne.n	800745a <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 800745a:	2032      	movs	r0, #50	; 0x32
 800745c:	f7fa fbf4 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800746c:	b084      	sub	sp, #16
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	f107 001c 	add.w	r0, r7, #28
 800747a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	60fb      	str	r3, [r7, #12]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	639a      	str	r2, [r3, #56]	; 0x38

  if (cfg.vbus_sensing_enable == 0)
 800748e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007490:	2b00      	cmp	r3, #0
 8007492:	d111      	bne.n	80074b8 <USB_DevInit+0x4c>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable*/
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	601a      	str	r2, [r3, #0]
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074be:	461a      	mov	r2, r3
 80074c0:	2300      	movs	r3, #0
 80074c2:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ca:	461a      	mov	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6013      	str	r3, [r2, #0]

  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d10c      	bne.n	80074f6 <USB_DevInit+0x8a>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <USB_DevInit+0x80>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 80074e2:	2100      	movs	r1, #0
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f957 	bl	8007798 <USB_SetDevSpeed>
 80074ea:	e018      	b.n	800751e <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80074ec:	2101      	movs	r1, #1
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f952 	bl	8007798 <USB_SetDevSpeed>
 80074f4:	e013      	b.n	800751e <USB_DevInit+0xb2>
    }
  }

  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d10c      	bne.n	8007516 <USB_DevInit+0xaa>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d104      	bne.n	800750c <USB_DevInit+0xa0>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8007502:	2100      	movs	r1, #0
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f947 	bl	8007798 <USB_SetDevSpeed>
 800750a:	e008      	b.n	800751e <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 800750c:	2101      	movs	r1, #1
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f942 	bl	8007798 <USB_SetDevSpeed>
 8007514:	e003      	b.n	800751e <USB_DevInit+0xb2>
  }

  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8007516:	2103      	movs	r1, #3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f93d 	bl	8007798 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 800751e:	2110      	movs	r1, #16
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f8f1 	bl	8007708 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f914 	bl	8007754 <USB_FlushRxFifo>

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007532:	461a      	mov	r2, r3
 8007534:	2300      	movs	r3, #0
 8007536:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753e:	461a      	mov	r2, r3
 8007540:	2300      	movs	r3, #0
 8007542:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754a:	461a      	mov	r2, r3
 800754c:	f04f 33ff 	mov.w	r3, #4294967295
 8007550:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007558:	461a      	mov	r2, r3
 800755a:	2300      	movs	r3, #0
 800755c:	61d3      	str	r3, [r2, #28]

  for (i = 0; i < cfg.dev_endpoints; i++)
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	e034      	b.n	80075ce <USB_DevInit+0x162>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800757a:	d10a      	bne.n	8007592 <USB_DevInit+0x126>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4413      	add	r3, r2
 8007584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007588:	461a      	mov	r2, r3
 800758a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	e008      	b.n	80075a4 <USB_DevInit+0x138>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759e:	461a      	mov	r2, r3
 80075a0:	2300      	movs	r3, #0
 80075a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b0:	461a      	mov	r2, r3
 80075b2:	2300      	movs	r3, #0
 80075b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c2:	461a      	mov	r2, r3
 80075c4:	23ff      	movs	r3, #255	; 0xff
 80075c6:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	69fa      	ldr	r2, [r7, #28]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d8c6      	bhi.n	8007564 <USB_DevInit+0xf8>
  }

  for (i = 0; i < cfg.dev_endpoints; i++)
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	e034      	b.n	8007646 <USB_DevInit+0x1da>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075f2:	d10a      	bne.n	800760a <USB_DevInit+0x19e>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	461a      	mov	r2, r3
 8007602:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	e008      	b.n	800761c <USB_DevInit+0x1b0>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007616:	461a      	mov	r2, r3
 8007618:	2300      	movs	r3, #0
 800761a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007628:	461a      	mov	r2, r3
 800762a:	2300      	movs	r3, #0
 800762c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	461a      	mov	r2, r3
 800763c:	23ff      	movs	r3, #255	; 0xff
 800763e:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3301      	adds	r3, #1
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	429a      	cmp	r2, r3
 800764c:	d8c6      	bhi.n	80075dc <USB_DevInit+0x170>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007654:	461a      	mov	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007662:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1)
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	2b01      	cmp	r3, #1
 8007668:	d115      	bne.n	8007696 <USB_DevInit+0x22a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007670:	461a      	mov	r2, r3
 8007672:	4b21      	ldr	r3, [pc, #132]	; (80076f8 <USB_DevInit+0x28c>)
 8007674:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767c:	4619      	mov	r1, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007686:	4b1d      	ldr	r3, [pc, #116]	; (80076fc <USB_DevInit+0x290>)
 8007688:	4313      	orrs	r3, r2
 800768a:	630b      	str	r3, [r1, #48]	; 0x30

    i= USBx_DEVICE->DTHRCTL;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007694:	60fb      	str	r3, [r7, #12]
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80076a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d105      	bne.n	80076b6 <USB_DevInit+0x24a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	f043 0210 	orr.w	r2, r3, #16
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	699a      	ldr	r2, [r3, #24]
 80076ba:	4b11      	ldr	r3, [pc, #68]	; (8007700 <USB_DevInit+0x294>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 80076c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d005      	beq.n	80076d4 <USB_DevInit+0x268>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	f043 0208 	orr.w	r2, r3, #8
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80076d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d105      	bne.n	80076e6 <USB_DevInit+0x27a>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699a      	ldr	r2, [r3, #24]
 80076de:	4b09      	ldr	r3, [pc, #36]	; (8007704 <USB_DevInit+0x298>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	6193      	str	r3, [r2, #24]
  }

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076f2:	b004      	add	sp, #16
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	00800100 	.word	0x00800100
 80076fc:	00010003 	.word	0x00010003
 8007700:	803c3800 	.word	0x803c3800
 8007704:	40000004 	.word	0x40000004

08007708 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8007712:	2300      	movs	r3, #0
 8007714:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	019b      	lsls	r3, r3, #6
 800771a:	f043 0220 	orr.w	r2, r3, #32
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3301      	adds	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4a09      	ldr	r2, [pc, #36]	; (8007750 <USB_FlushTxFifo+0x48>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d901      	bls.n	8007734 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e006      	b.n	8007742 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b20      	cmp	r3, #32
 800773e:	d0f0      	beq.n	8007722 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	00030d40 	.word	0x00030d40

08007754 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2210      	movs	r2, #16
 8007764:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3301      	adds	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4a09      	ldr	r2, [pc, #36]	; (8007794 <USB_FlushRxFifo+0x40>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d901      	bls.n	8007778 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e006      	b.n	8007786 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	f003 0310 	and.w	r3, r3, #16
 8007780:	2b10      	cmp	r3, #16
 8007782:	d0f0      	beq.n	8007766 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	00030d40 	.word	0x00030d40

08007798 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077aa:	4619      	mov	r1, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	73fb      	strb	r3, [r7, #15]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f003 0306 	and.w	r3, r3, #6
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d102      	bne.n	80077ea <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
 80077e8:	e01c      	b.n	8007824 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 0306 	and.w	r3, r3, #6
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d007      	beq.n	800780a <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8007806:	2b06      	cmp	r3, #6
 8007808:	d102      	bne.n	8007810 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 800780a:	2303      	movs	r3, #3
 800780c:	73fb      	strb	r3, [r7, #15]
 800780e:	e009      	b.n	8007824 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f003 0306 	and.w	r3, r3, #6
 800781c:	2b04      	cmp	r3, #4
 800781e:	d101      	bne.n	8007824 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8007820:	2302      	movs	r3, #2
 8007822:	73fb      	strb	r3, [r7, #15]
  }

  return speed;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
	...

08007834 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	785b      	ldrb	r3, [r3, #1]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d13c      	bne.n	80078c0 <USB_ActivateEndpoint+0x8c>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784c:	4619      	mov	r1, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007854:	69da      	ldr	r2, [r3, #28]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	2301      	movs	r3, #1
 800785e:	4083      	lsls	r3, r0
 8007860:	b29b      	uxth	r3, r3
 8007862:	4313      	orrs	r3, r2
 8007864:	61cb      	str	r3, [r1, #28]

    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d158      	bne.n	8007930 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788c:	4618      	mov	r0, r3
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	78c9      	ldrb	r1, [r1, #3]
 80078aa:	0489      	lsls	r1, r1, #18
 80078ac:	430b      	orrs	r3, r1
        ((ep->num) << 22 ) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP));
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	7809      	ldrb	r1, [r1, #0]
 80078b2:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80078b4:	430b      	orrs	r3, r1
 80078b6:	431a      	orrs	r2, r3
 80078b8:	4b21      	ldr	r3, [pc, #132]	; (8007940 <USB_ActivateEndpoint+0x10c>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	6003      	str	r3, [r0, #0]
 80078be:	e037      	b.n	8007930 <USB_ActivateEndpoint+0xfc>
    }

  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c6:	4619      	mov	r1, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	7812      	ldrb	r2, [r2, #0]
 80078d4:	4610      	mov	r0, r2
 80078d6:	2201      	movs	r2, #1
 80078d8:	4082      	lsls	r2, r0
 80078da:	0412      	lsls	r2, r2, #16
 80078dc:	4313      	orrs	r3, r2
 80078de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d11b      	bne.n	8007930 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007906:	4618      	mov	r0, r3
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	78c9      	ldrb	r1, [r1, #3]
 8007924:	0489      	lsls	r1, r1, #18
 8007926:	430b      	orrs	r3, r1
 8007928:	431a      	orrs	r2, r3
 800792a:	4b05      	ldr	r3, [pc, #20]	; (8007940 <USB_ActivateEndpoint+0x10c>)
 800792c:	4313      	orrs	r3, r2
 800792e:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    }
  }
  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	10008000 	.word	0x10008000

08007944 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	785b      	ldrb	r3, [r3, #1]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d135      	bne.n	80079c2 <USB_DeactivateEndpoint+0x7e>
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795c:	4619      	mov	r1, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	4618      	mov	r0, r3
 800796c:	2301      	movs	r3, #1
 800796e:	4083      	lsls	r3, r0
 8007970:	b29b      	uxth	r3, r3
 8007972:	43db      	mvns	r3, r3
 8007974:	4013      	ands	r3, r2
 8007976:	63cb      	str	r3, [r1, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800797e:	4619      	mov	r1, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007986:	69da      	ldr	r2, [r3, #28]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	4618      	mov	r0, r3
 800798e:	2301      	movs	r3, #1
 8007990:	4083      	lsls	r3, r0
 8007992:	b29b      	uxth	r3, r3
 8007994:	43db      	mvns	r3, r3
 8007996:	4013      	ands	r3, r2
 8007998:	61cb      	str	r3, [r1, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a8:	4619      	mov	r1, r3
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079be:	600b      	str	r3, [r1, #0]
 80079c0:	e034      	b.n	8007a2c <USB_DeactivateEndpoint+0xe8>
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c8:	4619      	mov	r1, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	2301      	movs	r3, #1
 80079da:	4083      	lsls	r3, r0
 80079dc:	041b      	lsls	r3, r3, #16
 80079de:	43db      	mvns	r3, r3
 80079e0:	4013      	ands	r3, r2
 80079e2:	63cb      	str	r3, [r1, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ea:	4619      	mov	r1, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f2:	69da      	ldr	r2, [r3, #28]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	2301      	movs	r3, #1
 80079fc:	4083      	lsls	r3, r0
 80079fe:	041b      	lsls	r3, r3, #16
 8007a00:	43db      	mvns	r3, r3
 8007a02:	4013      	ands	r3, r2
 8007a04:	61cb      	str	r3, [r1, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a14:	4619      	mov	r1, r3
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a2a:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
	...

08007a3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	82fb      	strh	r3, [r7, #22]

  /* IN endpoint */
  if (ep->is_in == 1)
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	785b      	ldrb	r3, [r3, #1]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	f040 8148 	bne.w	8007ce8 <USB_EPStartXfer+0x2ac>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d139      	bne.n	8007ad4 <USB_EPStartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6e:	4619      	mov	r1, r3
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7e:	691a      	ldr	r2, [r3, #16]
 8007a80:	4b96      	ldr	r3, [pc, #600]	; (8007cdc <USB_EPStartXfer+0x2a0>)
 8007a82:	4013      	ands	r3, r2
 8007a84:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a94:	4619      	mov	r1, r3
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aaa:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aba:	4619      	mov	r1, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	4b84      	ldr	r3, [pc, #528]	; (8007ce0 <USB_EPStartXfer+0x2a4>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	610b      	str	r3, [r1, #16]
 8007ad2:	e084      	b.n	8007bde <USB_EPStartXfer+0x1a2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af2:	691a      	ldr	r2, [r3, #16]
 8007af4:	4b7a      	ldr	r3, [pc, #488]	; (8007ce0 <USB_EPStartXfer+0x2a4>)
 8007af6:	4013      	ands	r3, r2
 8007af8:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b08:	4619      	mov	r1, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b18:	691a      	ldr	r2, [r3, #16]
 8007b1a:	4b70      	ldr	r3, [pc, #448]	; (8007cdc <USB_EPStartXfer+0x2a0>)
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2e:	4618      	mov	r0, r3
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3e:	691a      	ldr	r2, [r3, #16]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	6959      	ldr	r1, [r3, #20]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	440b      	add	r3, r1
 8007b4a:	1e59      	subs	r1, r3, #1
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b54:	04d9      	lsls	r1, r3, #19
 8007b56:	4b63      	ldr	r3, [pc, #396]	; (8007ce4 <USB_EPStartXfer+0x2a8>)
 8007b58:	400b      	ands	r3, r1
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b86:	4313      	orrs	r3, r2
 8007b88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	78db      	ldrb	r3, [r3, #3]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d125      	bne.n	8007bde <USB_EPStartXfer+0x1a2>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007bb6:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29));
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bdc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1)
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d10b      	bne.n	8007bfc <USB_EPStartXfer+0x1c0>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	6153      	str	r3, [r2, #20]
 8007bfa:	e016      	b.n	8007c2a <USB_EPStartXfer+0x1ee>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	78db      	ldrb	r3, [r3, #3]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d012      	beq.n	8007c2a <USB_EPStartXfer+0x1ee>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00e      	beq.n	8007c2a <USB_EPStartXfer+0x1ee>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c12:	4619      	mov	r1, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	7812      	ldrb	r2, [r2, #0]
 8007c20:	4610      	mov	r0, r2
 8007c22:	2201      	movs	r2, #1
 8007c24:	4082      	lsls	r2, r0
 8007c26:	4313      	orrs	r3, r2
 8007c28:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	78db      	ldrb	r3, [r3, #3]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d12e      	bne.n	8007c90 <USB_EPStartXfer+0x254>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d113      	bne.n	8007c6a <USB_EPStartXfer+0x22e>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c50:	4619      	mov	r1, r3
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c66:	600b      	str	r3, [r1, #0]
 8007c68:	e012      	b.n	8007c90 <USB_EPStartXfer+0x254>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c78:	4619      	mov	r1, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c8e:	600b      	str	r3, [r1, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cb4:	600b      	str	r3, [r1, #0]

    if (ep->type == EP_TYPE_ISOC)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	78db      	ldrb	r3, [r3, #3]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	f040 80f7 	bne.w	8007eae <USB_EPStartXfer+0x472>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	68d9      	ldr	r1, [r3, #12]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	781a      	ldrb	r2, [r3, #0]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	b298      	uxth	r0, r3
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 fa51 	bl	800817c <USB_WritePacket>
 8007cda:	e0e8      	b.n	8007eae <USB_EPStartXfer+0x472>
 8007cdc:	e007ffff 	.word	0xe007ffff
 8007ce0:	fff80000 	.word	0xfff80000
 8007ce4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d06:	691a      	ldr	r2, [r3, #16]
 8007d08:	4b6b      	ldr	r3, [pc, #428]	; (8007eb8 <USB_EPStartXfer+0x47c>)
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2c:	691a      	ldr	r2, [r3, #16]
 8007d2e:	4b63      	ldr	r3, [pc, #396]	; (8007ebc <USB_EPStartXfer+0x480>)
 8007d30:	4013      	ands	r3, r2
 8007d32:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d129      	bne.n	8007d90 <USB_EPStartXfer+0x354>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5a:	691a      	ldr	r2, [r3, #16]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d64:	4313      	orrs	r3, r2
 8007d66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d76:	4619      	mov	r1, r3
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d8c:	610b      	str	r3, [r1, #16]
 8007d8e:	e03a      	b.n	8007e06 <USB_EPStartXfer+0x3ca>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	695a      	ldr	r2, [r3, #20]
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	4413      	add	r3, r2
 8007d9a:	1e5a      	subs	r2, r3, #1
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db4:	4619      	mov	r1, r3
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	8afb      	ldrh	r3, [r7, #22]
 8007dc8:	04db      	lsls	r3, r3, #19
 8007dca:	4618      	mov	r0, r3
 8007dcc:	4b3c      	ldr	r3, [pc, #240]	; (8007ec0 <USB_EPStartXfer+0x484>)
 8007dce:	4003      	ands	r3, r0
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de2:	4618      	mov	r0, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	8af9      	ldrh	r1, [r7, #22]
 8007dfa:	fb01 f303 	mul.w	r3, r1, r3
 8007dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e02:	4313      	orrs	r3, r2
 8007e04:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1)
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d10a      	bne.n	8007e22 <USB_EPStartXfer+0x3e6>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	6153      	str	r3, [r2, #20]
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	78db      	ldrb	r3, [r3, #3]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d12e      	bne.n	8007e88 <USB_EPStartXfer+0x44c>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d113      	bne.n	8007e62 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e48:	4619      	mov	r1, r3
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e5e:	600b      	str	r3, [r1, #0]
 8007e60:	e012      	b.n	8007e88 <USB_EPStartXfer+0x44c>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e70:	4619      	mov	r1, r3
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e86:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e96:	4619      	mov	r1, r3
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007eac:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	fff80000 	.word	0xfff80000
 8007ebc:	e007ffff 	.word	0xe007ffff
 8007ec0:	1ff80000 	.word	0x1ff80000

08007ec4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1)
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	f040 80cd 	bne.w	8008076 <USB_EP0StartXfer+0x1b2>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d139      	bne.n	8007f58 <USB_EP0StartXfer+0x94>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	4b9b      	ldr	r3, [pc, #620]	; (8008174 <USB_EP0StartXfer+0x2b0>)
 8007f06:	4013      	ands	r3, r2
 8007f08:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f18:	4619      	mov	r1, r3
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3e:	4619      	mov	r1, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	4b89      	ldr	r3, [pc, #548]	; (8008178 <USB_EP0StartXfer+0x2b4>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	610b      	str	r3, [r1, #16]
 8007f56:	e058      	b.n	800800a <USB_EP0StartXfer+0x146>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f66:	4619      	mov	r1, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f76:	691a      	ldr	r2, [r3, #16]
 8007f78:	4b7f      	ldr	r3, [pc, #508]	; (8008178 <USB_EP0StartXfer+0x2b4>)
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9c:	691a      	ldr	r2, [r3, #16]
 8007f9e:	4b75      	ldr	r3, [pc, #468]	; (8008174 <USB_EP0StartXfer+0x2b0>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	610b      	str	r3, [r1, #16]

      if(ep->xfer_len > ep->maxpacket)
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	695a      	ldr	r2, [r3, #20]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d903      	bls.n	8007fb8 <USB_EP0StartXfer+0xf4>
      {
        ep->xfer_len = ep->maxpacket;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fdc:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fec:	4619      	mov	r1, r3
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffc:	691a      	ldr	r2, [r3, #16]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008006:	4313      	orrs	r3, r2
 8008008:	610b      	str	r3, [r1, #16]

    }

    if (dma == 1)
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d10b      	bne.n	8008028 <USB_EP0StartXfer+0x164>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801e:	461a      	mov	r2, r3
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	6153      	str	r3, [r2, #20]
 8008026:	e012      	b.n	800804e <USB_EP0StartXfer+0x18a>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00e      	beq.n	800804e <USB_EP0StartXfer+0x18a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008036:	4619      	mov	r1, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	4618      	mov	r0, r3
 8008046:	2301      	movs	r3, #1
 8008048:	4083      	lsls	r3, r0
 800804a:	4313      	orrs	r3, r2
 800804c:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805c:	4619      	mov	r1, r3
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008072:	600b      	str	r3, [r1, #0]
 8008074:	e077      	b.n	8008166 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008084:	4619      	mov	r1, r3
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008094:	691a      	ldr	r2, [r3, #16]
 8008096:	4b38      	ldr	r3, [pc, #224]	; (8008178 <USB_EP0StartXfer+0x2b4>)
 8008098:	4013      	ands	r3, r2
 800809a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080aa:	4619      	mov	r1, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ba:	691a      	ldr	r2, [r3, #16]
 80080bc:	4b2d      	ldr	r3, [pc, #180]	; (8008174 <USB_EP0StartXfer+0x2b0>)
 80080be:	4013      	ands	r3, r2
 80080c0:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <USB_EP0StartXfer+0x20e>
    {
      ep->xfer_len = ep->maxpacket;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	689a      	ldr	r2, [r3, #8]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e0:	4619      	mov	r1, r3
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080f6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008106:	4619      	mov	r1, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008116:	691a      	ldr	r2, [r3, #16]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008120:	4313      	orrs	r3, r2
 8008122:	610b      	str	r3, [r1, #16]


    if (dma == 1)
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d10a      	bne.n	8008140 <USB_EP0StartXfer+0x27c>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008138:	461a      	mov	r2, r3
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	6153      	str	r3, [r2, #20]
    }

    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4413      	add	r3, r2
 800814a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814e:	4619      	mov	r1, r3
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008164:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	e007ffff 	.word	0xe007ffff
 8008178:	fff80000 	.word	0xfff80000

0800817c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4611      	mov	r1, r2
 8008188:	461a      	mov	r2, r3
 800818a:	460b      	mov	r3, r1
 800818c:	71fb      	strb	r3, [r7, #7]
 800818e:	4613      	mov	r3, r2
 8008190:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b= 0 , i= 0;
 8008192:	2300      	movs	r3, #0
 8008194:	613b      	str	r3, [r7, #16]
 8008196:	2300      	movs	r3, #0
 8008198:	617b      	str	r3, [r7, #20]

  if (dma == 0)
 800819a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d11d      	bne.n	80081de <USB_WritePacket+0x62>
  {
    count32b =  (len + 3) / 4;
 80081a2:	88bb      	ldrh	r3, [r7, #4]
 80081a4:	3303      	adds	r3, #3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	da00      	bge.n	80081ac <USB_WritePacket+0x30>
 80081aa:	3303      	adds	r3, #3
 80081ac:	109b      	asrs	r3, r3, #2
 80081ae:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src += 4)
 80081b0:	2300      	movs	r3, #0
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	e00f      	b.n	80081d6 <USB_WritePacket+0x5a>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80081b6:	79fb      	ldrb	r3, [r7, #7]
 80081b8:	031a      	lsls	r2, r3, #12
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c2:	461a      	mov	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6013      	str	r3, [r2, #0]
    for (i = 0; i < count32b; i++, src += 4)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	3301      	adds	r3, #1
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	3304      	adds	r3, #4
 80081d4:	60bb      	str	r3, [r7, #8]
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d3eb      	bcc.n	80081b6 <USB_WritePacket+0x3a>
    }
  }
  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	371c      	adds	r7, #28
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 80081fe:	88fb      	ldrh	r3, [r7, #6]
 8008200:	3303      	adds	r3, #3
 8008202:	2b00      	cmp	r3, #0
 8008204:	da00      	bge.n	8008208 <USB_ReadPacket+0x1c>
 8008206:	3303      	adds	r3, #3
 8008208:	109b      	asrs	r3, r3, #2
 800820a:	613b      	str	r3, [r7, #16]

  for ( i = 0; i < count32b; i++, dest += 4 )
 800820c:	2300      	movs	r3, #0
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	e00b      	b.n	800822a <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	3301      	adds	r3, #1
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	3304      	adds	r3, #4
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	429a      	cmp	r2, r3
 8008230:	d3ef      	bcc.n	8008212 <USB_ReadPacket+0x26>

  }
  return ((void *)dest);
 8008232:	68bb      	ldr	r3, [r7, #8]
}
 8008234:	4618      	mov	r0, r3
 8008236:	371c      	adds	r7, #28
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d130      	bne.n	80082b4 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4413      	add	r3, r2
 800825c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	db12      	blt.n	800828c <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008274:	4619      	mov	r1, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800828a:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829a:	4619      	mov	r1, r3
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082b0:	600b      	str	r3, [r1, #0]
 80082b2:	e02f      	b.n	8008314 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	db12      	blt.n	80082ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d6:	4619      	mov	r1, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082ec:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fc:	4619      	mov	r1, r3
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008312:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d12e      	bne.n	8008392 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4413      	add	r3, r2
 800833e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008342:	4619      	mov	r1, r3
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4413      	add	r3, r2
 800834e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008358:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	78db      	ldrb	r3, [r3, #3]
 800835e:	2b03      	cmp	r3, #3
 8008360:	d003      	beq.n	800836a <USB_EPClearStall+0x48>
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	78db      	ldrb	r3, [r3, #3]
 8008366:	2b02      	cmp	r3, #2
 8008368:	d141      	bne.n	80083ee <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008378:	4619      	mov	r1, r3
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800838e:	600b      	str	r3, [r1, #0]
 8008390:	e02d      	b.n	80083ee <USB_EPClearStall+0xcc>
    }
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a0:	4619      	mov	r1, r3
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083b6:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	78db      	ldrb	r3, [r3, #3]
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d003      	beq.n	80083c8 <USB_EPClearStall+0xa6>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	78db      	ldrb	r3, [r3, #3]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d112      	bne.n	80083ee <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d6:	4619      	mov	r1, r3
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ec:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840e:	461a      	mov	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800841c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008424:	4619      	mov	r1, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	011b      	lsls	r3, r3, #4
 8008432:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008436:	4313      	orrs	r3, r2
 8008438:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008456:	461a      	mov	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f023 0302 	bic.w	r3, r3, #2
 8008464:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 8008466:	2003      	movs	r0, #3
 8008468:	f7f9 fbee 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008484:	461a      	mov	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f043 0302 	orr.w	r3, r3, #2
 8008492:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 8008494:	2003      	movs	r0, #3
 8008496:	f7f9 fbd7 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]

  v = USBx->GINTSTS;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4013      	ands	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]
  return v;
 80084c0:	68fb      	ldr	r3, [r7, #12]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b085      	sub	sp, #20
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	4013      	ands	r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	0c1b      	lsrs	r3, r3, #16
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4013      	ands	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFF));
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	b29b      	uxth	r3, r3
}
 8008522:	4618      	mov	r0, r3
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 800852e:	b480      	push	{r7}
 8008530:	b085      	sub	sp, #20
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 800853a:	78fb      	ldrb	r3, [r7, #3]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	4013      	ands	r3, r2
 8008556:	60fb      	str	r3, [r7, #12]
  return v;
 8008558:	68fb      	ldr	r3, [r7, #12]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8008566:	b480      	push	{r7}
 8008568:	b087      	sub	sp, #28
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	460b      	mov	r3, r1
 8008570:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008584:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008586:	78fb      	ldrb	r3, [r7, #3]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	fa22 f303 	lsr.w	r3, r2, r3
 800858e:	01db      	lsls	r3, r3, #7
 8008590:	b2db      	uxtb	r3, r3
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	4313      	orrs	r3, r2
 8008596:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	4013      	ands	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]
  return v;
 80085ac:	68fb      	ldr	r3, [r7, #12]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	f003 0301 	and.w	r3, r3, #1
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
	...

080085d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e6:	4619      	mov	r1, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	4b13      	ldr	r3, [pc, #76]	; (8008640 <USB_ActivateSetup+0x68>)
 80085f2:	4013      	ands	r3, r2
 80085f4:	600b      	str	r3, [r1, #0]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f003 0306 	and.w	r3, r3, #6
 8008602:	2b04      	cmp	r3, #4
 8008604:	d10a      	bne.n	800861c <USB_ActivateSetup+0x44>
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860c:	461a      	mov	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f043 0303 	orr.w	r3, r3, #3
 800861a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008622:	461a      	mov	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008630:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	fffff800 	.word	0xfffff800

08008644 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	460b      	mov	r3, r1
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008658:	461a      	mov	r2, r3
 800865a:	2300      	movs	r3, #0
 800865c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008664:	461a      	mov	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008672:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867a:	461a      	mov	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	f043 0318 	orr.w	r3, r3, #24
 8008688:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008690:	461a      	mov	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800869e:	6113      	str	r3, [r2, #16]

  if (dma == 1)
 80086a0:	7afb      	ldrb	r3, [r7, #11]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d10c      	bne.n	80086c0 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ac:	461a      	mov	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b8:	461a      	mov	r2, r3
 80086ba:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80086be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
	...

080086d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3301      	adds	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4a13      	ldr	r2, [pc, #76]	; (8008734 <USB_CoreReset+0x64>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d901      	bls.n	80086ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e01b      	b.n	8008726 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	daf2      	bge.n	80086dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	f043 0201 	orr.w	r2, r3, #1
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3301      	adds	r3, #1
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	4a09      	ldr	r2, [pc, #36]	; (8008734 <USB_CoreReset+0x64>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d901      	bls.n	8008718 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e006      	b.n	8008726 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b01      	cmp	r3, #1
 8008722:	d0f0      	beq.n	8008706 <USB_CoreReset+0x36>

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	00030d40 	.word	0x00030d40

08008738 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	4603      	mov	r3, r0
 8008740:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008742:	79fb      	ldrb	r3, [r7, #7]
 8008744:	4a08      	ldr	r2, [pc, #32]	; (8008768 <disk_status+0x30>)
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	79fa      	ldrb	r2, [r7, #7]
 8008750:	4905      	ldr	r1, [pc, #20]	; (8008768 <disk_status+0x30>)
 8008752:	440a      	add	r2, r1
 8008754:	7a12      	ldrb	r2, [r2, #8]
 8008756:	4610      	mov	r0, r2
 8008758:	4798      	blx	r3
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800875e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	20000470 	.word	0x20000470

0800876c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	4a0d      	ldr	r2, [pc, #52]	; (80087b4 <disk_initialize+0x48>)
 800877e:	5cd3      	ldrb	r3, [r2, r3]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d111      	bne.n	80087a8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	4a0b      	ldr	r2, [pc, #44]	; (80087b4 <disk_initialize+0x48>)
 8008788:	2101      	movs	r1, #1
 800878a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	4a09      	ldr	r2, [pc, #36]	; (80087b4 <disk_initialize+0x48>)
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	79fa      	ldrb	r2, [r7, #7]
 800879a:	4906      	ldr	r1, [pc, #24]	; (80087b4 <disk_initialize+0x48>)
 800879c:	440a      	add	r2, r1
 800879e:	7a12      	ldrb	r2, [r2, #8]
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000470 	.word	0x20000470

080087b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80087b8:	b590      	push	{r4, r7, lr}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	607a      	str	r2, [r7, #4]
 80087c2:	603b      	str	r3, [r7, #0]
 80087c4:	4603      	mov	r3, r0
 80087c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	4a0a      	ldr	r2, [pc, #40]	; (80087f4 <disk_read+0x3c>)
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	689c      	ldr	r4, [r3, #8]
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	4a07      	ldr	r2, [pc, #28]	; (80087f4 <disk_read+0x3c>)
 80087d8:	4413      	add	r3, r2
 80087da:	7a18      	ldrb	r0, [r3, #8]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	68b9      	ldr	r1, [r7, #8]
 80087e2:	47a0      	blx	r4
 80087e4:	4603      	mov	r3, r0
 80087e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80087e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	371c      	adds	r7, #28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd90      	pop	{r4, r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20000470 	.word	0x20000470

080087f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80087f8:	b590      	push	{r4, r7, lr}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	607a      	str	r2, [r7, #4]
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	4603      	mov	r3, r0
 8008806:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	4a0a      	ldr	r2, [pc, #40]	; (8008834 <disk_write+0x3c>)
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	68dc      	ldr	r4, [r3, #12]
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	4a07      	ldr	r2, [pc, #28]	; (8008834 <disk_write+0x3c>)
 8008818:	4413      	add	r3, r2
 800881a:	7a18      	ldrb	r0, [r3, #8]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	68b9      	ldr	r1, [r7, #8]
 8008822:	47a0      	blx	r4
 8008824:	4603      	mov	r3, r0
 8008826:	75fb      	strb	r3, [r7, #23]
  return res;
 8008828:	7dfb      	ldrb	r3, [r7, #23]
}
 800882a:	4618      	mov	r0, r3
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	bd90      	pop	{r4, r7, pc}
 8008832:	bf00      	nop
 8008834:	20000470 	.word	0x20000470

08008838 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	4603      	mov	r3, r0
 8008840:	603a      	str	r2, [r7, #0]
 8008842:	71fb      	strb	r3, [r7, #7]
 8008844:	460b      	mov	r3, r1
 8008846:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	4a09      	ldr	r2, [pc, #36]	; (8008870 <disk_ioctl+0x38>)
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	79fa      	ldrb	r2, [r7, #7]
 8008856:	4906      	ldr	r1, [pc, #24]	; (8008870 <disk_ioctl+0x38>)
 8008858:	440a      	add	r2, r1
 800885a:	7a10      	ldrb	r0, [r2, #8]
 800885c:	79b9      	ldrb	r1, [r7, #6]
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	4798      	blx	r3
 8008862:	4603      	mov	r3, r0
 8008864:	73fb      	strb	r3, [r7, #15]
  return res;
 8008866:	7bfb      	ldrb	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	20000470 	.word	0x20000470

08008874 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3301      	adds	r3, #1
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008884:	89fb      	ldrh	r3, [r7, #14]
 8008886:	021b      	lsls	r3, r3, #8
 8008888:	b21a      	sxth	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	b21b      	sxth	r3, r3
 8008890:	4313      	orrs	r3, r2
 8008892:	b21b      	sxth	r3, r3
 8008894:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008896:	89fb      	ldrh	r3, [r7, #14]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	3303      	adds	r3, #3
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	021b      	lsls	r3, r3, #8
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	3202      	adds	r2, #2
 80088bc:	7812      	ldrb	r2, [r2, #0]
 80088be:	4313      	orrs	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	021b      	lsls	r3, r3, #8
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	3201      	adds	r2, #1
 80088ca:	7812      	ldrb	r2, [r2, #0]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	021b      	lsls	r3, r3, #8
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	7812      	ldrb	r2, [r2, #0]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
	return rv;
 80088dc:	68fb      	ldr	r3, [r7, #12]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80088ea:	b480      	push	{r7}
 80088ec:	b083      	sub	sp, #12
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	460b      	mov	r3, r1
 80088f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	607a      	str	r2, [r7, #4]
 80088fc:	887a      	ldrh	r2, [r7, #2]
 80088fe:	b2d2      	uxtb	r2, r2
 8008900:	701a      	strb	r2, [r3, #0]
 8008902:	887b      	ldrh	r3, [r7, #2]
 8008904:	0a1b      	lsrs	r3, r3, #8
 8008906:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	607a      	str	r2, [r7, #4]
 800890e:	887a      	ldrh	r2, [r7, #2]
 8008910:	b2d2      	uxtb	r2, r2
 8008912:	701a      	strb	r2, [r3, #0]
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	b2d2      	uxtb	r2, r2
 8008934:	701a      	strb	r2, [r3, #0]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	0a1b      	lsrs	r3, r3, #8
 800893a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	607a      	str	r2, [r7, #4]
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	b2d2      	uxtb	r2, r2
 8008946:	701a      	strb	r2, [r3, #0]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	0a1b      	lsrs	r3, r3, #8
 800894c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	1c5a      	adds	r2, r3, #1
 8008952:	607a      	str	r2, [r7, #4]
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	b2d2      	uxtb	r2, r2
 8008958:	701a      	strb	r2, [r3, #0]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	0a1b      	lsrs	r3, r3, #8
 800895e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	1c5a      	adds	r2, r3, #1
 8008964:	607a      	str	r2, [r7, #4]
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	b2d2      	uxtb	r2, r2
 800896a:	701a      	strb	r2, [r3, #0]
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00d      	beq.n	80089ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	617a      	str	r2, [r7, #20]
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	1c51      	adds	r1, r2, #1
 800899c:	6139      	str	r1, [r7, #16]
 800899e:	7812      	ldrb	r2, [r2, #0]
 80089a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	607b      	str	r3, [r7, #4]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1f1      	bne.n	8008992 <mem_cpy+0x1a>
	}
}
 80089ae:	bf00      	nop
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80089ba:	b480      	push	{r7}
 80089bc:	b087      	sub	sp, #28
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	617a      	str	r2, [r7, #20]
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3b01      	subs	r3, #1
 80089da:	607b      	str	r3, [r7, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1f3      	bne.n	80089ca <mem_set+0x10>
}
 80089e2:	bf00      	nop
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80089ee:	b480      	push	{r7}
 80089f0:	b089      	sub	sp, #36	; 0x24
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	61fb      	str	r3, [r7, #28]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	61fa      	str	r2, [r7, #28]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	61ba      	str	r2, [r7, #24]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	1acb      	subs	r3, r1, r3
 8008a1a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	607b      	str	r3, [r7, #4]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <mem_cmp+0x40>
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d0eb      	beq.n	8008a06 <mem_cmp+0x18>

	return r;
 8008a2e:	697b      	ldr	r3, [r7, #20]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3724      	adds	r7, #36	; 0x24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008a46:	e002      	b.n	8008a4e <chk_chr+0x12>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	607b      	str	r3, [r7, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <chk_chr+0x26>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d1f2      	bne.n	8008a48 <chk_chr+0xc>
	return *str;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	781b      	ldrb	r3, [r3, #0]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
	...

08008a74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a7e:	2300      	movs	r3, #0
 8008a80:	60bb      	str	r3, [r7, #8]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	e029      	b.n	8008adc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008a88:	4a27      	ldr	r2, [pc, #156]	; (8008b28 <chk_lock+0xb4>)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	4413      	add	r3, r2
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d01d      	beq.n	8008ad2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008a96:	4a24      	ldr	r2, [pc, #144]	; (8008b28 <chk_lock+0xb4>)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	011b      	lsls	r3, r3, #4
 8008a9c:	4413      	add	r3, r2
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d116      	bne.n	8008ad6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008aa8:	4a1f      	ldr	r2, [pc, #124]	; (8008b28 <chk_lock+0xb4>)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	011b      	lsls	r3, r3, #4
 8008aae:	4413      	add	r3, r2
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d10c      	bne.n	8008ad6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008abc:	4a1a      	ldr	r2, [pc, #104]	; (8008b28 <chk_lock+0xb4>)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	011b      	lsls	r3, r3, #4
 8008ac2:	4413      	add	r3, r2
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d102      	bne.n	8008ad6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008ad0:	e007      	b.n	8008ae2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d9d2      	bls.n	8008a88 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d109      	bne.n	8008afc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d102      	bne.n	8008af4 <chk_lock+0x80>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d101      	bne.n	8008af8 <chk_lock+0x84>
 8008af4:	2300      	movs	r3, #0
 8008af6:	e010      	b.n	8008b1a <chk_lock+0xa6>
 8008af8:	2312      	movs	r3, #18
 8008afa:	e00e      	b.n	8008b1a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d108      	bne.n	8008b14 <chk_lock+0xa0>
 8008b02:	4a09      	ldr	r2, [pc, #36]	; (8008b28 <chk_lock+0xb4>)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	4413      	add	r3, r2
 8008b0a:	330c      	adds	r3, #12
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b12:	d101      	bne.n	8008b18 <chk_lock+0xa4>
 8008b14:	2310      	movs	r3, #16
 8008b16:	e000      	b.n	8008b1a <chk_lock+0xa6>
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	20000450 	.word	0x20000450

08008b2c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b32:	2300      	movs	r3, #0
 8008b34:	607b      	str	r3, [r7, #4]
 8008b36:	e002      	b.n	8008b3e <enq_lock+0x12>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	607b      	str	r3, [r7, #4]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d806      	bhi.n	8008b52 <enq_lock+0x26>
 8008b44:	4a09      	ldr	r2, [pc, #36]	; (8008b6c <enq_lock+0x40>)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	011b      	lsls	r3, r3, #4
 8008b4a:	4413      	add	r3, r2
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f2      	bne.n	8008b38 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	bf14      	ite	ne
 8008b58:	2301      	movne	r3, #1
 8008b5a:	2300      	moveq	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	20000450 	.word	0x20000450

08008b70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	e01f      	b.n	8008bc0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008b80:	4a41      	ldr	r2, [pc, #260]	; (8008c88 <inc_lock+0x118>)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	011b      	lsls	r3, r3, #4
 8008b86:	4413      	add	r3, r2
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d113      	bne.n	8008bba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008b92:	4a3d      	ldr	r2, [pc, #244]	; (8008c88 <inc_lock+0x118>)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	011b      	lsls	r3, r3, #4
 8008b98:	4413      	add	r3, r2
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d109      	bne.n	8008bba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008ba6:	4a38      	ldr	r2, [pc, #224]	; (8008c88 <inc_lock+0x118>)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	011b      	lsls	r3, r3, #4
 8008bac:	4413      	add	r3, r2
 8008bae:	3308      	adds	r3, #8
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d006      	beq.n	8008bc8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	60fb      	str	r3, [r7, #12]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d9dc      	bls.n	8008b80 <inc_lock+0x10>
 8008bc6:	e000      	b.n	8008bca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008bc8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d132      	bne.n	8008c36 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e002      	b.n	8008bdc <inc_lock+0x6c>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d806      	bhi.n	8008bf0 <inc_lock+0x80>
 8008be2:	4a29      	ldr	r2, [pc, #164]	; (8008c88 <inc_lock+0x118>)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	011b      	lsls	r3, r3, #4
 8008be8:	4413      	add	r3, r2
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1f2      	bne.n	8008bd6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d101      	bne.n	8008bfa <inc_lock+0x8a>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e040      	b.n	8008c7c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	4922      	ldr	r1, [pc, #136]	; (8008c88 <inc_lock+0x118>)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	011b      	lsls	r3, r3, #4
 8008c04:	440b      	add	r3, r1
 8008c06:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689a      	ldr	r2, [r3, #8]
 8008c0c:	491e      	ldr	r1, [pc, #120]	; (8008c88 <inc_lock+0x118>)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	011b      	lsls	r3, r3, #4
 8008c12:	440b      	add	r3, r1
 8008c14:	3304      	adds	r3, #4
 8008c16:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	695a      	ldr	r2, [r3, #20]
 8008c1c:	491a      	ldr	r1, [pc, #104]	; (8008c88 <inc_lock+0x118>)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	011b      	lsls	r3, r3, #4
 8008c22:	440b      	add	r3, r1
 8008c24:	3308      	adds	r3, #8
 8008c26:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008c28:	4a17      	ldr	r2, [pc, #92]	; (8008c88 <inc_lock+0x118>)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	011b      	lsls	r3, r3, #4
 8008c2e:	4413      	add	r3, r2
 8008c30:	330c      	adds	r3, #12
 8008c32:	2200      	movs	r2, #0
 8008c34:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d009      	beq.n	8008c50 <inc_lock+0xe0>
 8008c3c:	4a12      	ldr	r2, [pc, #72]	; (8008c88 <inc_lock+0x118>)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	011b      	lsls	r3, r3, #4
 8008c42:	4413      	add	r3, r2
 8008c44:	330c      	adds	r3, #12
 8008c46:	881b      	ldrh	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <inc_lock+0xe0>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e015      	b.n	8008c7c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d108      	bne.n	8008c68 <inc_lock+0xf8>
 8008c56:	4a0c      	ldr	r2, [pc, #48]	; (8008c88 <inc_lock+0x118>)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	4413      	add	r3, r2
 8008c5e:	330c      	adds	r3, #12
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	3301      	adds	r3, #1
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	e001      	b.n	8008c6c <inc_lock+0xfc>
 8008c68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c6c:	4906      	ldr	r1, [pc, #24]	; (8008c88 <inc_lock+0x118>)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	011b      	lsls	r3, r3, #4
 8008c72:	440b      	add	r3, r1
 8008c74:	330c      	adds	r3, #12
 8008c76:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	3301      	adds	r3, #1
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	20000450 	.word	0x20000450

08008c8c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	607b      	str	r3, [r7, #4]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d825      	bhi.n	8008cec <dec_lock+0x60>
		n = Files[i].ctr;
 8008ca0:	4a17      	ldr	r2, [pc, #92]	; (8008d00 <dec_lock+0x74>)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	011b      	lsls	r3, r3, #4
 8008ca6:	4413      	add	r3, r2
 8008ca8:	330c      	adds	r3, #12
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008cae:	89fb      	ldrh	r3, [r7, #14]
 8008cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb4:	d101      	bne.n	8008cba <dec_lock+0x2e>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008cba:	89fb      	ldrh	r3, [r7, #14]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <dec_lock+0x3a>
 8008cc0:	89fb      	ldrh	r3, [r7, #14]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008cc6:	4a0e      	ldr	r2, [pc, #56]	; (8008d00 <dec_lock+0x74>)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	4413      	add	r3, r2
 8008cce:	330c      	adds	r3, #12
 8008cd0:	89fa      	ldrh	r2, [r7, #14]
 8008cd2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008cd4:	89fb      	ldrh	r3, [r7, #14]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d105      	bne.n	8008ce6 <dec_lock+0x5a>
 8008cda:	4a09      	ldr	r2, [pc, #36]	; (8008d00 <dec_lock+0x74>)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	011b      	lsls	r3, r3, #4
 8008ce0:	4413      	add	r3, r2
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	737b      	strb	r3, [r7, #13]
 8008cea:	e001      	b.n	8008cf0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008cec:	2302      	movs	r3, #2
 8008cee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008cf0:	7b7b      	ldrb	r3, [r7, #13]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	20000450 	.word	0x20000450

08008d04 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	60fb      	str	r3, [r7, #12]
 8008d10:	e010      	b.n	8008d34 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008d12:	4a0d      	ldr	r2, [pc, #52]	; (8008d48 <clear_lock+0x44>)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	011b      	lsls	r3, r3, #4
 8008d18:	4413      	add	r3, r2
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d105      	bne.n	8008d2e <clear_lock+0x2a>
 8008d22:	4a09      	ldr	r2, [pc, #36]	; (8008d48 <clear_lock+0x44>)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	011b      	lsls	r3, r3, #4
 8008d28:	4413      	add	r3, r2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3301      	adds	r3, #1
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d9eb      	bls.n	8008d12 <clear_lock+0xe>
	}
}
 8008d3a:	bf00      	nop
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	20000450 	.word	0x20000450

08008d4c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	78db      	ldrb	r3, [r3, #3]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d034      	beq.n	8008dca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d64:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7858      	ldrb	r0, [r3, #1]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d70:	2301      	movs	r3, #1
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	f7ff fd40 	bl	80087f8 <disk_write>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	73fb      	strb	r3, [r7, #15]
 8008d82:	e022      	b.n	8008dca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	1ad2      	subs	r2, r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d217      	bcs.n	8008dca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	789b      	ldrb	r3, [r3, #2]
 8008d9e:	613b      	str	r3, [r7, #16]
 8008da0:	e010      	b.n	8008dc4 <sync_window+0x78>
					wsect += fs->fsize;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	4413      	add	r3, r2
 8008daa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	7858      	ldrb	r0, [r3, #1]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008db6:	2301      	movs	r3, #1
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	f7ff fd1d 	bl	80087f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	613b      	str	r3, [r7, #16]
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d8eb      	bhi.n	8008da2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d01b      	beq.n	8008e24 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7ff ffad 	bl	8008d4c <sync_window>
 8008df2:	4603      	mov	r3, r0
 8008df4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d113      	bne.n	8008e24 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	7858      	ldrb	r0, [r3, #1]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e06:	2301      	movs	r3, #1
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	f7ff fcd5 	bl	80087b8 <disk_read>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d004      	beq.n	8008e1e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008e14:	f04f 33ff 	mov.w	r3, #4294967295
 8008e18:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff ff87 	bl	8008d4c <sync_window>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d158      	bne.n	8008efa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d148      	bne.n	8008ee2 <sync_fs+0xb2>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	791b      	ldrb	r3, [r3, #4]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d144      	bne.n	8008ee2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	3330      	adds	r3, #48	; 0x30
 8008e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e60:	2100      	movs	r1, #0
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7ff fda9 	bl	80089ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3330      	adds	r3, #48	; 0x30
 8008e6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e70:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7ff fd38 	bl	80088ea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3330      	adds	r3, #48	; 0x30
 8008e7e:	4921      	ldr	r1, [pc, #132]	; (8008f04 <sync_fs+0xd4>)
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff fd4d 	bl	8008920 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	3330      	adds	r3, #48	; 0x30
 8008e8a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008e8e:	491e      	ldr	r1, [pc, #120]	; (8008f08 <sync_fs+0xd8>)
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7ff fd45 	bl	8008920 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	3330      	adds	r3, #48	; 0x30
 8008e9a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	f7ff fd3b 	bl	8008920 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	3330      	adds	r3, #48	; 0x30
 8008eae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4610      	mov	r0, r2
 8008eba:	f7ff fd31 	bl	8008920 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	7858      	ldrb	r0, [r3, #1]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	f7ff fc8e 	bl	80087f8 <disk_write>
			fs->fsi_flag = 0;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	785b      	ldrb	r3, [r3, #1]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	2100      	movs	r1, #0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7ff fca4 	bl	8008838 <disk_ioctl>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <sync_fs+0xca>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	41615252 	.word	0x41615252
 8008f08:	61417272 	.word	0x61417272

08008f0c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	3b02      	subs	r3, #2
 8008f1a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	1e9a      	subs	r2, r3, #2
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d801      	bhi.n	8008f2c <clust2sect+0x20>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e008      	b.n	8008f3e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	895b      	ldrh	r3, [r3, #10]
 8008f30:	461a      	mov	r2, r3
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	fb03 f202 	mul.w	r2, r3, r2
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3c:	4413      	add	r3, r2
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b086      	sub	sp, #24
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d904      	bls.n	8008f6a <get_fat+0x20>
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	695a      	ldr	r2, [r3, #20]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d802      	bhi.n	8008f70 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	617b      	str	r3, [r7, #20]
 8008f6e:	e08c      	b.n	800908a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008f70:	f04f 33ff 	mov.w	r3, #4294967295
 8008f74:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d045      	beq.n	800900a <get_fat+0xc0>
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	d05d      	beq.n	800903e <get_fat+0xf4>
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d177      	bne.n	8009076 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	60fb      	str	r3, [r7, #12]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	085b      	lsrs	r3, r3, #1
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	4413      	add	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	6a1a      	ldr	r2, [r3, #32]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	0a5b      	lsrs	r3, r3, #9
 8008f9c:	4413      	add	r3, r2
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6938      	ldr	r0, [r7, #16]
 8008fa2:	f7ff ff17 	bl	8008dd4 <move_window>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d167      	bne.n	800907c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	60fa      	str	r2, [r7, #12]
 8008fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fbe:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	6a1a      	ldr	r2, [r3, #32]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	0a5b      	lsrs	r3, r3, #9
 8008fc8:	4413      	add	r3, r2
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6938      	ldr	r0, [r7, #16]
 8008fce:	f7ff ff01 	bl	8008dd4 <move_window>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d153      	bne.n	8009080 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fe6:	021b      	lsls	r3, r3, #8
 8008fe8:	461a      	mov	r2, r3
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <get_fat+0xb6>
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	091b      	lsrs	r3, r3, #4
 8008ffe:	e002      	b.n	8009006 <get_fat+0xbc>
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009006:	617b      	str	r3, [r7, #20]
			break;
 8009008:	e03f      	b.n	800908a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	6a1a      	ldr	r2, [r3, #32]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	0a1b      	lsrs	r3, r3, #8
 8009012:	4413      	add	r3, r2
 8009014:	4619      	mov	r1, r3
 8009016:	6938      	ldr	r0, [r7, #16]
 8009018:	f7ff fedc 	bl	8008dd4 <move_window>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d130      	bne.n	8009084 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009030:	4413      	add	r3, r2
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff fc1e 	bl	8008874 <ld_word>
 8009038:	4603      	mov	r3, r0
 800903a:	617b      	str	r3, [r7, #20]
			break;
 800903c:	e025      	b.n	800908a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	6a1a      	ldr	r2, [r3, #32]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	09db      	lsrs	r3, r3, #7
 8009046:	4413      	add	r3, r2
 8009048:	4619      	mov	r1, r3
 800904a:	6938      	ldr	r0, [r7, #16]
 800904c:	f7ff fec2 	bl	8008dd4 <move_window>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d118      	bne.n	8009088 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009064:	4413      	add	r3, r2
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff fc1c 	bl	80088a4 <ld_dword>
 800906c:	4603      	mov	r3, r0
 800906e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009072:	617b      	str	r3, [r7, #20]
			break;
 8009074:	e009      	b.n	800908a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009076:	2301      	movs	r3, #1
 8009078:	617b      	str	r3, [r7, #20]
 800907a:	e006      	b.n	800908a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800907c:	bf00      	nop
 800907e:	e004      	b.n	800908a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009080:	bf00      	nop
 8009082:	e002      	b.n	800908a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009084:	bf00      	nop
 8009086:	e000      	b.n	800908a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009088:	bf00      	nop
		}
	}

	return val;
 800908a:	697b      	ldr	r3, [r7, #20]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009094:	b590      	push	{r4, r7, lr}
 8009096:	b089      	sub	sp, #36	; 0x24
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80090a0:	2302      	movs	r3, #2
 80090a2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	f240 80d6 	bls.w	8009258 <put_fat+0x1c4>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	695a      	ldr	r2, [r3, #20]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	f240 80d0 	bls.w	8009258 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d073      	beq.n	80091a8 <put_fat+0x114>
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	f000 8091 	beq.w	80091e8 <put_fat+0x154>
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	f040 80c6 	bne.w	8009258 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	61bb      	str	r3, [r7, #24]
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	085b      	lsrs	r3, r3, #1
 80090d4:	69ba      	ldr	r2, [r7, #24]
 80090d6:	4413      	add	r3, r2
 80090d8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6a1a      	ldr	r2, [r3, #32]
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	0a5b      	lsrs	r3, r3, #9
 80090e2:	4413      	add	r3, r2
 80090e4:	4619      	mov	r1, r3
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f7ff fe74 	bl	8008dd4 <move_window>
 80090ec:	4603      	mov	r3, r0
 80090ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80090f0:	7ffb      	ldrb	r3, [r7, #31]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f040 80a9 	bne.w	800924a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	1c59      	adds	r1, r3, #1
 8009102:	61b9      	str	r1, [r7, #24]
 8009104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009108:	4413      	add	r3, r2
 800910a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00d      	beq.n	8009132 <put_fat+0x9e>
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	b25b      	sxtb	r3, r3
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	b25a      	sxtb	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	b2db      	uxtb	r3, r3
 8009126:	011b      	lsls	r3, r3, #4
 8009128:	b25b      	sxtb	r3, r3
 800912a:	4313      	orrs	r3, r2
 800912c:	b25b      	sxtb	r3, r3
 800912e:	b2db      	uxtb	r3, r3
 8009130:	e001      	b.n	8009136 <put_fat+0xa2>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	b2db      	uxtb	r3, r3
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2201      	movs	r2, #1
 800913e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6a1a      	ldr	r2, [r3, #32]
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	0a5b      	lsrs	r3, r3, #9
 8009148:	4413      	add	r3, r2
 800914a:	4619      	mov	r1, r3
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7ff fe41 	bl	8008dd4 <move_window>
 8009152:	4603      	mov	r3, r0
 8009154:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009156:	7ffb      	ldrb	r3, [r7, #31]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d178      	bne.n	800924e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009168:	4413      	add	r3, r2
 800916a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <put_fat+0xea>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	091b      	lsrs	r3, r3, #4
 800917a:	b2db      	uxtb	r3, r3
 800917c:	e00e      	b.n	800919c <put_fat+0x108>
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	b25b      	sxtb	r3, r3
 8009184:	f023 030f 	bic.w	r3, r3, #15
 8009188:	b25a      	sxtb	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	0a1b      	lsrs	r3, r3, #8
 800918e:	b25b      	sxtb	r3, r3
 8009190:	f003 030f 	and.w	r3, r3, #15
 8009194:	b25b      	sxtb	r3, r3
 8009196:	4313      	orrs	r3, r2
 8009198:	b25b      	sxtb	r3, r3
 800919a:	b2db      	uxtb	r3, r3
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2201      	movs	r2, #1
 80091a4:	70da      	strb	r2, [r3, #3]
			break;
 80091a6:	e057      	b.n	8009258 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6a1a      	ldr	r2, [r3, #32]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	0a1b      	lsrs	r3, r3, #8
 80091b0:	4413      	add	r3, r2
 80091b2:	4619      	mov	r1, r3
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f7ff fe0d 	bl	8008dd4 <move_window>
 80091ba:	4603      	mov	r3, r0
 80091bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80091be:	7ffb      	ldrb	r3, [r7, #31]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d146      	bne.n	8009252 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	005b      	lsls	r3, r3, #1
 80091ce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80091d2:	4413      	add	r3, r2
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	b292      	uxth	r2, r2
 80091d8:	4611      	mov	r1, r2
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff fb85 	bl	80088ea <st_word>
			fs->wflag = 1;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2201      	movs	r2, #1
 80091e4:	70da      	strb	r2, [r3, #3]
			break;
 80091e6:	e037      	b.n	8009258 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6a1a      	ldr	r2, [r3, #32]
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	09db      	lsrs	r3, r3, #7
 80091f0:	4413      	add	r3, r2
 80091f2:	4619      	mov	r1, r3
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7ff fded 	bl	8008dd4 <move_window>
 80091fa:	4603      	mov	r3, r0
 80091fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80091fe:	7ffb      	ldrb	r3, [r7, #31]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d128      	bne.n	8009256 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009218:	4413      	add	r3, r2
 800921a:	4618      	mov	r0, r3
 800921c:	f7ff fb42 	bl	80088a4 <ld_dword>
 8009220:	4603      	mov	r3, r0
 8009222:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009226:	4323      	orrs	r3, r4
 8009228:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009238:	4413      	add	r3, r2
 800923a:	6879      	ldr	r1, [r7, #4]
 800923c:	4618      	mov	r0, r3
 800923e:	f7ff fb6f 	bl	8008920 <st_dword>
			fs->wflag = 1;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	70da      	strb	r2, [r3, #3]
			break;
 8009248:	e006      	b.n	8009258 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800924a:	bf00      	nop
 800924c:	e004      	b.n	8009258 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800924e:	bf00      	nop
 8009250:	e002      	b.n	8009258 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009252:	bf00      	nop
 8009254:	e000      	b.n	8009258 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8009256:	bf00      	nop
		}
	}
	return res;
 8009258:	7ffb      	ldrb	r3, [r7, #31]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3724      	adds	r7, #36	; 0x24
 800925e:	46bd      	mov	sp, r7
 8009260:	bd90      	pop	{r4, r7, pc}

08009262 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b088      	sub	sp, #32
 8009266:	af00      	add	r7, sp, #0
 8009268:	60f8      	str	r0, [r7, #12]
 800926a:	60b9      	str	r1, [r7, #8]
 800926c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d904      	bls.n	8009288 <remove_chain+0x26>
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	695a      	ldr	r2, [r3, #20]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	429a      	cmp	r2, r3
 8009286:	d801      	bhi.n	800928c <remove_chain+0x2a>
 8009288:	2302      	movs	r3, #2
 800928a:	e04b      	b.n	8009324 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00c      	beq.n	80092ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009292:	f04f 32ff 	mov.w	r2, #4294967295
 8009296:	6879      	ldr	r1, [r7, #4]
 8009298:	69b8      	ldr	r0, [r7, #24]
 800929a:	f7ff fefb 	bl	8009094 <put_fat>
 800929e:	4603      	mov	r3, r0
 80092a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80092a2:	7ffb      	ldrb	r3, [r7, #31]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <remove_chain+0x4a>
 80092a8:	7ffb      	ldrb	r3, [r7, #31]
 80092aa:	e03b      	b.n	8009324 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80092ac:	68b9      	ldr	r1, [r7, #8]
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f7ff fe4b 	bl	8008f4a <get_fat>
 80092b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d031      	beq.n	8009320 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d101      	bne.n	80092c6 <remove_chain+0x64>
 80092c2:	2302      	movs	r3, #2
 80092c4:	e02e      	b.n	8009324 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092cc:	d101      	bne.n	80092d2 <remove_chain+0x70>
 80092ce:	2301      	movs	r3, #1
 80092d0:	e028      	b.n	8009324 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80092d2:	2200      	movs	r2, #0
 80092d4:	68b9      	ldr	r1, [r7, #8]
 80092d6:	69b8      	ldr	r0, [r7, #24]
 80092d8:	f7ff fedc 	bl	8009094 <put_fat>
 80092dc:	4603      	mov	r3, r0
 80092de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80092e0:	7ffb      	ldrb	r3, [r7, #31]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <remove_chain+0x88>
 80092e6:	7ffb      	ldrb	r3, [r7, #31]
 80092e8:	e01c      	b.n	8009324 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	691a      	ldr	r2, [r3, #16]
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	3b02      	subs	r3, #2
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d20b      	bcs.n	8009310 <remove_chain+0xae>
			fs->free_clst++;
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	1c5a      	adds	r2, r3, #1
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	791b      	ldrb	r3, [r3, #4]
 8009306:	f043 0301 	orr.w	r3, r3, #1
 800930a:	b2da      	uxtb	r2, r3
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	695a      	ldr	r2, [r3, #20]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	429a      	cmp	r2, r3
 800931c:	d8c6      	bhi.n	80092ac <remove_chain+0x4a>
 800931e:	e000      	b.n	8009322 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009320:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3720      	adds	r7, #32
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10d      	bne.n	800935e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d004      	beq.n	8009358 <create_chain+0x2c>
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	695a      	ldr	r2, [r3, #20]
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	429a      	cmp	r2, r3
 8009356:	d81b      	bhi.n	8009390 <create_chain+0x64>
 8009358:	2301      	movs	r3, #1
 800935a:	61bb      	str	r3, [r7, #24]
 800935c:	e018      	b.n	8009390 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7ff fdf2 	bl	8008f4a <get_fat>
 8009366:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d801      	bhi.n	8009372 <create_chain+0x46>
 800936e:	2301      	movs	r3, #1
 8009370:	e070      	b.n	8009454 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d101      	bne.n	800937e <create_chain+0x52>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	e06a      	b.n	8009454 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	695a      	ldr	r2, [r3, #20]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	429a      	cmp	r2, r3
 8009386:	d901      	bls.n	800938c <create_chain+0x60>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	e063      	b.n	8009454 <create_chain+0x128>
		scl = clst;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	3301      	adds	r3, #1
 8009398:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	695a      	ldr	r2, [r3, #20]
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d807      	bhi.n	80093b4 <create_chain+0x88>
				ncl = 2;
 80093a4:	2302      	movs	r3, #2
 80093a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80093a8:	69fa      	ldr	r2, [r7, #28]
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d901      	bls.n	80093b4 <create_chain+0x88>
 80093b0:	2300      	movs	r3, #0
 80093b2:	e04f      	b.n	8009454 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80093b4:	69f9      	ldr	r1, [r7, #28]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff fdc7 	bl	8008f4a <get_fat>
 80093bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00e      	beq.n	80093e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d003      	beq.n	80093d2 <create_chain+0xa6>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d0:	d101      	bne.n	80093d6 <create_chain+0xaa>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	e03e      	b.n	8009454 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80093d6:	69fa      	ldr	r2, [r7, #28]
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d1da      	bne.n	8009394 <create_chain+0x68>
 80093de:	2300      	movs	r3, #0
 80093e0:	e038      	b.n	8009454 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80093e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80093e4:	f04f 32ff 	mov.w	r2, #4294967295
 80093e8:	69f9      	ldr	r1, [r7, #28]
 80093ea:	6938      	ldr	r0, [r7, #16]
 80093ec:	f7ff fe52 	bl	8009094 <put_fat>
 80093f0:	4603      	mov	r3, r0
 80093f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d109      	bne.n	800940e <create_chain+0xe2>
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d006      	beq.n	800940e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009400:	69fa      	ldr	r2, [r7, #28]
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6938      	ldr	r0, [r7, #16]
 8009406:	f7ff fe45 	bl	8009094 <put_fat>
 800940a:	4603      	mov	r3, r0
 800940c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d116      	bne.n	8009442 <create_chain+0x116>
		fs->last_clst = ncl;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	691a      	ldr	r2, [r3, #16]
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	3b02      	subs	r3, #2
 8009424:	429a      	cmp	r2, r3
 8009426:	d804      	bhi.n	8009432 <create_chain+0x106>
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	1e5a      	subs	r2, r3, #1
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	791b      	ldrb	r3, [r3, #4]
 8009436:	f043 0301 	orr.w	r3, r3, #1
 800943a:	b2da      	uxtb	r2, r3
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	711a      	strb	r2, [r3, #4]
 8009440:	e007      	b.n	8009452 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009442:	7dfb      	ldrb	r3, [r7, #23]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d102      	bne.n	800944e <create_chain+0x122>
 8009448:	f04f 33ff 	mov.w	r3, #4294967295
 800944c:	e000      	b.n	8009450 <create_chain+0x124>
 800944e:	2301      	movs	r3, #1
 8009450:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009452:	69fb      	ldr	r3, [r7, #28]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3720      	adds	r7, #32
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800945c:	b480      	push	{r7}
 800945e:	b087      	sub	sp, #28
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009470:	3304      	adds	r3, #4
 8009472:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	0a5b      	lsrs	r3, r3, #9
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	8952      	ldrh	r2, [r2, #10]
 800947c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009480:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	1d1a      	adds	r2, r3, #4
 8009486:	613a      	str	r2, [r7, #16]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <clmt_clust+0x3a>
 8009492:	2300      	movs	r3, #0
 8009494:	e010      	b.n	80094b8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	429a      	cmp	r2, r3
 800949c:	d307      	bcc.n	80094ae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	3304      	adds	r3, #4
 80094aa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80094ac:	e7e9      	b.n	8009482 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80094ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	4413      	add	r3, r2
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	371c      	adds	r7, #28
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094da:	d204      	bcs.n	80094e6 <dir_sdi+0x22>
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	f003 031f 	and.w	r3, r3, #31
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <dir_sdi+0x26>
		return FR_INT_ERR;
 80094e6:	2302      	movs	r3, #2
 80094e8:	e063      	b.n	80095b2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d106      	bne.n	800950a <dir_sdi+0x46>
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d902      	bls.n	800950a <dir_sdi+0x46>
		clst = fs->dirbase;
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009508:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10c      	bne.n	800952a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	095b      	lsrs	r3, r3, #5
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	8912      	ldrh	r2, [r2, #8]
 8009518:	4293      	cmp	r3, r2
 800951a:	d301      	bcc.n	8009520 <dir_sdi+0x5c>
 800951c:	2302      	movs	r3, #2
 800951e:	e048      	b.n	80095b2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	61da      	str	r2, [r3, #28]
 8009528:	e029      	b.n	800957e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	895b      	ldrh	r3, [r3, #10]
 800952e:	025b      	lsls	r3, r3, #9
 8009530:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009532:	e019      	b.n	8009568 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6979      	ldr	r1, [r7, #20]
 8009538:	4618      	mov	r0, r3
 800953a:	f7ff fd06 	bl	8008f4a <get_fat>
 800953e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009546:	d101      	bne.n	800954c <dir_sdi+0x88>
 8009548:	2301      	movs	r3, #1
 800954a:	e032      	b.n	80095b2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d904      	bls.n	800955c <dir_sdi+0x98>
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	695a      	ldr	r2, [r3, #20]
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	429a      	cmp	r2, r3
 800955a:	d801      	bhi.n	8009560 <dir_sdi+0x9c>
 800955c:	2302      	movs	r3, #2
 800955e:	e028      	b.n	80095b2 <dir_sdi+0xee>
			ofs -= csz;
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	429a      	cmp	r2, r3
 800956e:	d2e1      	bcs.n	8009534 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009570:	6979      	ldr	r1, [r7, #20]
 8009572:	6938      	ldr	r0, [r7, #16]
 8009574:	f7ff fcca 	bl	8008f0c <clust2sect>
 8009578:	4602      	mov	r2, r0
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	69db      	ldr	r3, [r3, #28]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <dir_sdi+0xcc>
 800958c:	2302      	movs	r3, #2
 800958e:	e010      	b.n	80095b2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	69da      	ldr	r2, [r3, #28]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	0a5b      	lsrs	r3, r3, #9
 8009598:	441a      	add	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095aa:	441a      	add	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b086      	sub	sp, #24
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	3320      	adds	r3, #32
 80095d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <dir_next+0x28>
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095e0:	d301      	bcc.n	80095e6 <dir_next+0x2c>
 80095e2:	2304      	movs	r3, #4
 80095e4:	e0aa      	b.n	800973c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f040 8098 	bne.w	8009722 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	1c5a      	adds	r2, r3, #1
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10b      	bne.n	800961c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	095b      	lsrs	r3, r3, #5
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	8912      	ldrh	r2, [r2, #8]
 800960c:	4293      	cmp	r3, r2
 800960e:	f0c0 8088 	bcc.w	8009722 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	61da      	str	r2, [r3, #28]
 8009618:	2304      	movs	r3, #4
 800961a:	e08f      	b.n	800973c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	0a5b      	lsrs	r3, r3, #9
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	8952      	ldrh	r2, [r2, #10]
 8009624:	3a01      	subs	r2, #1
 8009626:	4013      	ands	r3, r2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d17a      	bne.n	8009722 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	4619      	mov	r1, r3
 8009634:	4610      	mov	r0, r2
 8009636:	f7ff fc88 	bl	8008f4a <get_fat>
 800963a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d801      	bhi.n	8009646 <dir_next+0x8c>
 8009642:	2302      	movs	r3, #2
 8009644:	e07a      	b.n	800973c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964c:	d101      	bne.n	8009652 <dir_next+0x98>
 800964e:	2301      	movs	r3, #1
 8009650:	e074      	b.n	800973c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	695a      	ldr	r2, [r3, #20]
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	429a      	cmp	r2, r3
 800965a:	d858      	bhi.n	800970e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d104      	bne.n	800966c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	61da      	str	r2, [r3, #28]
 8009668:	2304      	movs	r3, #4
 800966a:	e067      	b.n	800973c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	4619      	mov	r1, r3
 8009674:	4610      	mov	r0, r2
 8009676:	f7ff fe59 	bl	800932c <create_chain>
 800967a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <dir_next+0xcc>
 8009682:	2307      	movs	r3, #7
 8009684:	e05a      	b.n	800973c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d101      	bne.n	8009690 <dir_next+0xd6>
 800968c:	2302      	movs	r3, #2
 800968e:	e055      	b.n	800973c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009696:	d101      	bne.n	800969c <dir_next+0xe2>
 8009698:	2301      	movs	r3, #1
 800969a:	e04f      	b.n	800973c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f7ff fb55 	bl	8008d4c <sync_window>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <dir_next+0xf2>
 80096a8:	2301      	movs	r3, #1
 80096aa:	e047      	b.n	800973c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	3330      	adds	r3, #48	; 0x30
 80096b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096b4:	2100      	movs	r1, #0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff f97f 	bl	80089ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80096bc:	2300      	movs	r3, #0
 80096be:	613b      	str	r3, [r7, #16]
 80096c0:	6979      	ldr	r1, [r7, #20]
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f7ff fc22 	bl	8008f0c <clust2sect>
 80096c8:	4602      	mov	r2, r0
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80096ce:	e012      	b.n	80096f6 <dir_next+0x13c>
						fs->wflag = 1;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2201      	movs	r2, #1
 80096d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f7ff fb38 	bl	8008d4c <sync_window>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <dir_next+0x12c>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e02a      	b.n	800973c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	3301      	adds	r3, #1
 80096ea:	613b      	str	r3, [r7, #16]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	895b      	ldrh	r3, [r3, #10]
 80096fa:	461a      	mov	r2, r3
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d8e6      	bhi.n	80096d0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	1ad2      	subs	r2, r2, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	697a      	ldr	r2, [r7, #20]
 8009712:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009714:	6979      	ldr	r1, [r7, #20]
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f7ff fbf8 	bl	8008f0c <clust2sect>
 800971c:	4602      	mov	r2, r0
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009734:	441a      	add	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009754:	2100      	movs	r1, #0
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7ff feb4 	bl	80094c4 <dir_sdi>
 800975c:	4603      	mov	r3, r0
 800975e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009760:	7dfb      	ldrb	r3, [r7, #23]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d12b      	bne.n	80097be <dir_alloc+0x7a>
		n = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	4619      	mov	r1, r3
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff fb2f 	bl	8008dd4 <move_window>
 8009776:	4603      	mov	r3, r0
 8009778:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800977a:	7dfb      	ldrb	r3, [r7, #23]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d11d      	bne.n	80097bc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a1b      	ldr	r3, [r3, #32]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	2be5      	cmp	r3, #229	; 0xe5
 8009788:	d004      	beq.n	8009794 <dir_alloc+0x50>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d107      	bne.n	80097a4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	3301      	adds	r3, #1
 8009798:	613b      	str	r3, [r7, #16]
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d102      	bne.n	80097a8 <dir_alloc+0x64>
 80097a2:	e00c      	b.n	80097be <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80097a4:	2300      	movs	r3, #0
 80097a6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80097a8:	2101      	movs	r1, #1
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff ff05 	bl	80095ba <dir_next>
 80097b0:	4603      	mov	r3, r0
 80097b2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d0d7      	beq.n	800976a <dir_alloc+0x26>
 80097ba:	e000      	b.n	80097be <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80097bc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80097be:	7dfb      	ldrb	r3, [r7, #23]
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d101      	bne.n	80097c8 <dir_alloc+0x84>
 80097c4:	2307      	movs	r3, #7
 80097c6:	75fb      	strb	r3, [r7, #23]
	return res;
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	331a      	adds	r3, #26
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff f847 	bl	8008874 <ld_word>
 80097e6:	4603      	mov	r3, r0
 80097e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d109      	bne.n	8009806 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	3314      	adds	r3, #20
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7ff f83c 	bl	8008874 <ld_word>
 80097fc:	4603      	mov	r3, r0
 80097fe:	041b      	lsls	r3, r3, #16
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	4313      	orrs	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009806:	68fb      	ldr	r3, [r7, #12]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	331a      	adds	r3, #26
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	b292      	uxth	r2, r2
 8009824:	4611      	mov	r1, r2
 8009826:	4618      	mov	r0, r3
 8009828:	f7ff f85f 	bl	80088ea <st_word>
	if (fs->fs_type == FS_FAT32) {
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	2b03      	cmp	r3, #3
 8009832:	d109      	bne.n	8009848 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	f103 0214 	add.w	r2, r3, #20
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	0c1b      	lsrs	r3, r3, #16
 800983e:	b29b      	uxth	r3, r3
 8009840:	4619      	mov	r1, r3
 8009842:	4610      	mov	r0, r2
 8009844:	f7ff f851 	bl	80088ea <st_word>
	}
}
 8009848:	bf00      	nop
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800985e:	2100      	movs	r1, #0
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff fe2f 	bl	80094c4 <dir_sdi>
 8009866:	4603      	mov	r3, r0
 8009868:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <dir_find+0x24>
 8009870:	7dfb      	ldrb	r3, [r7, #23]
 8009872:	e03e      	b.n	80098f2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	4619      	mov	r1, r3
 800987a:	6938      	ldr	r0, [r7, #16]
 800987c:	f7ff faaa 	bl	8008dd4 <move_window>
 8009880:	4603      	mov	r3, r0
 8009882:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009884:	7dfb      	ldrb	r3, [r7, #23]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d12f      	bne.n	80098ea <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d102      	bne.n	800989e <dir_find+0x4e>
 8009898:	2304      	movs	r3, #4
 800989a:	75fb      	strb	r3, [r7, #23]
 800989c:	e028      	b.n	80098f0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	330b      	adds	r3, #11
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	330b      	adds	r3, #11
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	f003 0308 	and.w	r3, r3, #8
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10a      	bne.n	80098d6 <dir_find+0x86>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a18      	ldr	r0, [r3, #32]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	3324      	adds	r3, #36	; 0x24
 80098c8:	220b      	movs	r2, #11
 80098ca:	4619      	mov	r1, r3
 80098cc:	f7ff f88f 	bl	80089ee <mem_cmp>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00b      	beq.n	80098ee <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80098d6:	2100      	movs	r1, #0
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff fe6e 	bl	80095ba <dir_next>
 80098de:	4603      	mov	r3, r0
 80098e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d0c5      	beq.n	8009874 <dir_find+0x24>
 80098e8:	e002      	b.n	80098f0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80098ea:	bf00      	nop
 80098ec:	e000      	b.n	80098f0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80098ee:	bf00      	nop

	return res;
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009908:	2101      	movs	r1, #1
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7ff ff1a 	bl	8009744 <dir_alloc>
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d11c      	bne.n	8009954 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	4619      	mov	r1, r3
 8009920:	68b8      	ldr	r0, [r7, #8]
 8009922:	f7ff fa57 	bl	8008dd4 <move_window>
 8009926:	4603      	mov	r3, r0
 8009928:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d111      	bne.n	8009954 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a1b      	ldr	r3, [r3, #32]
 8009934:	2220      	movs	r2, #32
 8009936:	2100      	movs	r1, #0
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff f83e 	bl	80089ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a18      	ldr	r0, [r3, #32]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	3324      	adds	r3, #36	; 0x24
 8009946:	220b      	movs	r2, #11
 8009948:	4619      	mov	r1, r3
 800994a:	f7ff f815 	bl	8008978 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2201      	movs	r2, #1
 8009952:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009954:	7bfb      	ldrb	r3, [r7, #15]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b088      	sub	sp, #32
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	60fb      	str	r3, [r7, #12]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	3324      	adds	r3, #36	; 0x24
 8009974:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009976:	220b      	movs	r2, #11
 8009978:	2120      	movs	r1, #32
 800997a:	68b8      	ldr	r0, [r7, #8]
 800997c:	f7ff f81d 	bl	80089ba <mem_set>
	si = i = 0; ni = 8;
 8009980:	2300      	movs	r3, #0
 8009982:	613b      	str	r3, [r7, #16]
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	617b      	str	r3, [r7, #20]
 8009988:	2308      	movs	r3, #8
 800998a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	617a      	str	r2, [r7, #20]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	4413      	add	r3, r2
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800999a:	7ffb      	ldrb	r3, [r7, #31]
 800999c:	2b20      	cmp	r3, #32
 800999e:	d94e      	bls.n	8009a3e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80099a0:	7ffb      	ldrb	r3, [r7, #31]
 80099a2:	2b2f      	cmp	r3, #47	; 0x2f
 80099a4:	d006      	beq.n	80099b4 <create_name+0x54>
 80099a6:	7ffb      	ldrb	r3, [r7, #31]
 80099a8:	2b5c      	cmp	r3, #92	; 0x5c
 80099aa:	d110      	bne.n	80099ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80099ac:	e002      	b.n	80099b4 <create_name+0x54>
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	3301      	adds	r3, #1
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	4413      	add	r3, r2
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	2b2f      	cmp	r3, #47	; 0x2f
 80099be:	d0f6      	beq.n	80099ae <create_name+0x4e>
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	4413      	add	r3, r2
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b5c      	cmp	r3, #92	; 0x5c
 80099ca:	d0f0      	beq.n	80099ae <create_name+0x4e>
			break;
 80099cc:	e038      	b.n	8009a40 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80099ce:	7ffb      	ldrb	r3, [r7, #31]
 80099d0:	2b2e      	cmp	r3, #46	; 0x2e
 80099d2:	d003      	beq.n	80099dc <create_name+0x7c>
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d30c      	bcc.n	80099f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	2b0b      	cmp	r3, #11
 80099e0:	d002      	beq.n	80099e8 <create_name+0x88>
 80099e2:	7ffb      	ldrb	r3, [r7, #31]
 80099e4:	2b2e      	cmp	r3, #46	; 0x2e
 80099e6:	d001      	beq.n	80099ec <create_name+0x8c>
 80099e8:	2306      	movs	r3, #6
 80099ea:	e044      	b.n	8009a76 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80099ec:	2308      	movs	r3, #8
 80099ee:	613b      	str	r3, [r7, #16]
 80099f0:	230b      	movs	r3, #11
 80099f2:	61bb      	str	r3, [r7, #24]
			continue;
 80099f4:	e022      	b.n	8009a3c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80099f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	da04      	bge.n	8009a08 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80099fe:	7ffb      	ldrb	r3, [r7, #31]
 8009a00:	3b80      	subs	r3, #128	; 0x80
 8009a02:	4a1f      	ldr	r2, [pc, #124]	; (8009a80 <create_name+0x120>)
 8009a04:	5cd3      	ldrb	r3, [r2, r3]
 8009a06:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009a08:	7ffb      	ldrb	r3, [r7, #31]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	481d      	ldr	r0, [pc, #116]	; (8009a84 <create_name+0x124>)
 8009a0e:	f7ff f815 	bl	8008a3c <chk_chr>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <create_name+0xbc>
 8009a18:	2306      	movs	r3, #6
 8009a1a:	e02c      	b.n	8009a76 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009a1c:	7ffb      	ldrb	r3, [r7, #31]
 8009a1e:	2b60      	cmp	r3, #96	; 0x60
 8009a20:	d905      	bls.n	8009a2e <create_name+0xce>
 8009a22:	7ffb      	ldrb	r3, [r7, #31]
 8009a24:	2b7a      	cmp	r3, #122	; 0x7a
 8009a26:	d802      	bhi.n	8009a2e <create_name+0xce>
 8009a28:	7ffb      	ldrb	r3, [r7, #31]
 8009a2a:	3b20      	subs	r3, #32
 8009a2c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	613a      	str	r2, [r7, #16]
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	4413      	add	r3, r2
 8009a38:	7ffa      	ldrb	r2, [r7, #31]
 8009a3a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009a3c:	e7a6      	b.n	800998c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009a3e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	441a      	add	r2, r3
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d101      	bne.n	8009a54 <create_name+0xf4>
 8009a50:	2306      	movs	r3, #6
 8009a52:	e010      	b.n	8009a76 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	2be5      	cmp	r3, #229	; 0xe5
 8009a5a:	d102      	bne.n	8009a62 <create_name+0x102>
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2205      	movs	r2, #5
 8009a60:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	330b      	adds	r3, #11
 8009a66:	7ffa      	ldrb	r2, [r7, #31]
 8009a68:	2a20      	cmp	r2, #32
 8009a6a:	d801      	bhi.n	8009a70 <create_name+0x110>
 8009a6c:	2204      	movs	r2, #4
 8009a6e:	e000      	b.n	8009a72 <create_name+0x112>
 8009a70:	2200      	movs	r2, #0
 8009a72:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009a74:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3720      	adds	r7, #32
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	08015630 	.word	0x08015630
 8009a84:	080128b8 	.word	0x080128b8

08009a88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009a9c:	e002      	b.n	8009aa4 <follow_path+0x1c>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	603b      	str	r3, [r7, #0]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	2b2f      	cmp	r3, #47	; 0x2f
 8009aaa:	d0f8      	beq.n	8009a9e <follow_path+0x16>
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b5c      	cmp	r3, #92	; 0x5c
 8009ab2:	d0f4      	beq.n	8009a9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	2b1f      	cmp	r3, #31
 8009ac0:	d80a      	bhi.n	8009ad8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2280      	movs	r2, #128	; 0x80
 8009ac6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009aca:	2100      	movs	r1, #0
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff fcf9 	bl	80094c4 <dir_sdi>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	75fb      	strb	r3, [r7, #23]
 8009ad6:	e043      	b.n	8009b60 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ad8:	463b      	mov	r3, r7
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff ff3f 	bl	8009960 <create_name>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d134      	bne.n	8009b56 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7ff feaf 	bl	8009850 <dir_find>
 8009af2:	4603      	mov	r3, r0
 8009af4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009afc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00a      	beq.n	8009b1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
 8009b06:	2b04      	cmp	r3, #4
 8009b08:	d127      	bne.n	8009b5a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009b0a:	7afb      	ldrb	r3, [r7, #11]
 8009b0c:	f003 0304 	and.w	r3, r3, #4
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d122      	bne.n	8009b5a <follow_path+0xd2>
 8009b14:	2305      	movs	r3, #5
 8009b16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009b18:	e01f      	b.n	8009b5a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b1a:	7afb      	ldrb	r3, [r7, #11]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d11c      	bne.n	8009b5e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	799b      	ldrb	r3, [r3, #6]
 8009b28:	f003 0310 	and.w	r3, r3, #16
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d102      	bne.n	8009b36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009b30:	2305      	movs	r3, #5
 8009b32:	75fb      	strb	r3, [r7, #23]
 8009b34:	e014      	b.n	8009b60 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b44:	4413      	add	r3, r2
 8009b46:	4619      	mov	r1, r3
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f7ff fe42 	bl	80097d2 <ld_clust>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b54:	e7c0      	b.n	8009ad8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009b56:	bf00      	nop
 8009b58:	e002      	b.n	8009b60 <follow_path+0xd8>
				break;
 8009b5a:	bf00      	nop
 8009b5c:	e000      	b.n	8009b60 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b5e:	bf00      	nop
			}
		}
	}

	return res;
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b087      	sub	sp, #28
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009b72:	f04f 33ff 	mov.w	r3, #4294967295
 8009b76:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d031      	beq.n	8009be4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	617b      	str	r3, [r7, #20]
 8009b86:	e002      	b.n	8009b8e <get_ldnumber+0x24>
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	617b      	str	r3, [r7, #20]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	2b20      	cmp	r3, #32
 8009b94:	d903      	bls.n	8009b9e <get_ldnumber+0x34>
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b3a      	cmp	r3, #58	; 0x3a
 8009b9c:	d1f4      	bne.n	8009b88 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	2b3a      	cmp	r3, #58	; 0x3a
 8009ba4:	d11c      	bne.n	8009be0 <get_ldnumber+0x76>
			tp = *path;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	60fa      	str	r2, [r7, #12]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	3b30      	subs	r3, #48	; 0x30
 8009bb6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2b09      	cmp	r3, #9
 8009bbc:	d80e      	bhi.n	8009bdc <get_ldnumber+0x72>
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d10a      	bne.n	8009bdc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d107      	bne.n	8009bdc <get_ldnumber+0x72>
					vol = (int)i;
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	617b      	str	r3, [r7, #20]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	697a      	ldr	r2, [r7, #20]
 8009bda:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	e002      	b.n	8009be6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009be0:	2300      	movs	r3, #0
 8009be2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009be4:	693b      	ldr	r3, [r7, #16]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	371c      	adds	r7, #28
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
	...

08009bf4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	70da      	strb	r2, [r3, #3]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f04f 32ff 	mov.w	r2, #4294967295
 8009c0a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7ff f8e0 	bl	8008dd4 <move_window>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <check_fs+0x2a>
 8009c1a:	2304      	movs	r3, #4
 8009c1c:	e038      	b.n	8009c90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	3330      	adds	r3, #48	; 0x30
 8009c22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fe fe24 	bl	8008874 <ld_word>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d001      	beq.n	8009c3c <check_fs+0x48>
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e029      	b.n	8009c90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c42:	2be9      	cmp	r3, #233	; 0xe9
 8009c44:	d009      	beq.n	8009c5a <check_fs+0x66>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c4c:	2beb      	cmp	r3, #235	; 0xeb
 8009c4e:	d11e      	bne.n	8009c8e <check_fs+0x9a>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009c56:	2b90      	cmp	r3, #144	; 0x90
 8009c58:	d119      	bne.n	8009c8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3330      	adds	r3, #48	; 0x30
 8009c5e:	3336      	adds	r3, #54	; 0x36
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fe fe1f 	bl	80088a4 <ld_dword>
 8009c66:	4603      	mov	r3, r0
 8009c68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009c6c:	4a0a      	ldr	r2, [pc, #40]	; (8009c98 <check_fs+0xa4>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d101      	bne.n	8009c76 <check_fs+0x82>
 8009c72:	2300      	movs	r3, #0
 8009c74:	e00c      	b.n	8009c90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	3330      	adds	r3, #48	; 0x30
 8009c7a:	3352      	adds	r3, #82	; 0x52
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe fe11 	bl	80088a4 <ld_dword>
 8009c82:	4602      	mov	r2, r0
 8009c84:	4b05      	ldr	r3, [pc, #20]	; (8009c9c <check_fs+0xa8>)
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d101      	bne.n	8009c8e <check_fs+0x9a>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e000      	b.n	8009c90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009c8e:	2302      	movs	r3, #2
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	00544146 	.word	0x00544146
 8009c9c:	33544146 	.word	0x33544146

08009ca0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b096      	sub	sp, #88	; 0x58
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	4613      	mov	r3, r2
 8009cac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f7ff ff58 	bl	8009b6a <get_ldnumber>
 8009cba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	da01      	bge.n	8009cc6 <find_volume+0x26>
 8009cc2:	230b      	movs	r3, #11
 8009cc4:	e22e      	b.n	800a124 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009cc6:	4aa8      	ldr	r2, [pc, #672]	; (8009f68 <find_volume+0x2c8>)
 8009cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <find_volume+0x3a>
 8009cd6:	230c      	movs	r3, #12
 8009cd8:	e224      	b.n	800a124 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cde:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009ce0:	79fb      	ldrb	r3, [r7, #7]
 8009ce2:	f023 0301 	bic.w	r3, r3, #1
 8009ce6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d01a      	beq.n	8009d26 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf2:	785b      	ldrb	r3, [r3, #1]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fe fd1f 	bl	8008738 <disk_status>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009d00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d04:	f003 0301 	and.w	r3, r3, #1
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10c      	bne.n	8009d26 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009d0c:	79fb      	ldrb	r3, [r7, #7]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d007      	beq.n	8009d22 <find_volume+0x82>
 8009d12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d16:	f003 0304 	and.w	r3, r3, #4
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009d1e:	230a      	movs	r3, #10
 8009d20:	e200      	b.n	800a124 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8009d22:	2300      	movs	r3, #0
 8009d24:	e1fe      	b.n	800a124 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d28:	2200      	movs	r2, #0
 8009d2a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d32:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	785b      	ldrb	r3, [r3, #1]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fe fd17 	bl	800876c <disk_initialize>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009d44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009d50:	2303      	movs	r3, #3
 8009d52:	e1e7      	b.n	800a124 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009d54:	79fb      	ldrb	r3, [r7, #7]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d007      	beq.n	8009d6a <find_volume+0xca>
 8009d5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d5e:	f003 0304 	and.w	r3, r3, #4
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009d66:	230a      	movs	r3, #10
 8009d68:	e1dc      	b.n	800a124 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009d6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d72:	f7ff ff3f 	bl	8009bf4 <check_fs>
 8009d76:	4603      	mov	r3, r0
 8009d78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d14b      	bne.n	8009e1c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009d84:	2300      	movs	r3, #0
 8009d86:	643b      	str	r3, [r7, #64]	; 0x40
 8009d88:	e01f      	b.n	8009dca <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d92:	011b      	lsls	r3, r3, #4
 8009d94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009d98:	4413      	add	r3, r2
 8009d9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	3304      	adds	r3, #4
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d006      	beq.n	8009db4 <find_volume+0x114>
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	3308      	adds	r3, #8
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe fd7a 	bl	80088a4 <ld_dword>
 8009db0:	4602      	mov	r2, r0
 8009db2:	e000      	b.n	8009db6 <find_volume+0x116>
 8009db4:	2200      	movs	r2, #0
 8009db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009dbe:	440b      	add	r3, r1
 8009dc0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8009dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d9dc      	bls.n	8009d8a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d002      	beq.n	8009de0 <find_volume+0x140>
 8009dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009de8:	4413      	add	r3, r2
 8009dea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009dee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d005      	beq.n	8009e02 <find_volume+0x162>
 8009df6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009df8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009dfa:	f7ff fefb 	bl	8009bf4 <check_fs>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	e000      	b.n	8009e04 <find_volume+0x164>
 8009e02:	2303      	movs	r3, #3
 8009e04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d905      	bls.n	8009e1c <find_volume+0x17c>
 8009e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e12:	3301      	adds	r3, #1
 8009e14:	643b      	str	r3, [r7, #64]	; 0x40
 8009e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d9e1      	bls.n	8009de0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009e1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d101      	bne.n	8009e28 <find_volume+0x188>
 8009e24:	2301      	movs	r3, #1
 8009e26:	e17d      	b.n	800a124 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d901      	bls.n	8009e34 <find_volume+0x194>
 8009e30:	230d      	movs	r3, #13
 8009e32:	e177      	b.n	800a124 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e36:	3330      	adds	r3, #48	; 0x30
 8009e38:	330b      	adds	r3, #11
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fe fd1a 	bl	8008874 <ld_word>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e46:	d001      	beq.n	8009e4c <find_volume+0x1ac>
 8009e48:	230d      	movs	r3, #13
 8009e4a:	e16b      	b.n	800a124 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4e:	3330      	adds	r3, #48	; 0x30
 8009e50:	3316      	adds	r3, #22
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe fd0e 	bl	8008874 <ld_word>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d106      	bne.n	8009e70 <find_volume+0x1d0>
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	3330      	adds	r3, #48	; 0x30
 8009e66:	3324      	adds	r3, #36	; 0x24
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe fd1b 	bl	80088a4 <ld_dword>
 8009e6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e74:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e78:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e82:	789b      	ldrb	r3, [r3, #2]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d005      	beq.n	8009e94 <find_volume+0x1f4>
 8009e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8a:	789b      	ldrb	r3, [r3, #2]
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d001      	beq.n	8009e94 <find_volume+0x1f4>
 8009e90:	230d      	movs	r3, #13
 8009e92:	e147      	b.n	800a124 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	789b      	ldrb	r3, [r3, #2]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e9c:	fb02 f303 	mul.w	r3, r2, r3
 8009ea0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb0:	895b      	ldrh	r3, [r3, #10]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d008      	beq.n	8009ec8 <find_volume+0x228>
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb8:	895b      	ldrh	r3, [r3, #10]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebe:	895b      	ldrh	r3, [r3, #10]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <find_volume+0x22c>
 8009ec8:	230d      	movs	r3, #13
 8009eca:	e12b      	b.n	800a124 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ece:	3330      	adds	r3, #48	; 0x30
 8009ed0:	3311      	adds	r3, #17
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe fcce 	bl	8008874 <ld_word>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	461a      	mov	r2, r3
 8009edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ede:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee2:	891b      	ldrh	r3, [r3, #8]
 8009ee4:	f003 030f 	and.w	r3, r3, #15
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <find_volume+0x252>
 8009eee:	230d      	movs	r3, #13
 8009ef0:	e118      	b.n	800a124 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef4:	3330      	adds	r3, #48	; 0x30
 8009ef6:	3313      	adds	r3, #19
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fe fcbb 	bl	8008874 <ld_word>
 8009efe:	4603      	mov	r3, r0
 8009f00:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d106      	bne.n	8009f16 <find_volume+0x276>
 8009f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0a:	3330      	adds	r3, #48	; 0x30
 8009f0c:	3320      	adds	r3, #32
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fe fcc8 	bl	80088a4 <ld_dword>
 8009f14:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	3330      	adds	r3, #48	; 0x30
 8009f1a:	330e      	adds	r3, #14
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fe fca9 	bl	8008874 <ld_word>
 8009f22:	4603      	mov	r3, r0
 8009f24:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009f26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d101      	bne.n	8009f30 <find_volume+0x290>
 8009f2c:	230d      	movs	r3, #13
 8009f2e:	e0f9      	b.n	800a124 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009f30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f34:	4413      	add	r3, r2
 8009f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f38:	8912      	ldrh	r2, [r2, #8]
 8009f3a:	0912      	lsrs	r2, r2, #4
 8009f3c:	b292      	uxth	r2, r2
 8009f3e:	4413      	add	r3, r2
 8009f40:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009f42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d201      	bcs.n	8009f4e <find_volume+0x2ae>
 8009f4a:	230d      	movs	r3, #13
 8009f4c:	e0ea      	b.n	800a124 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f56:	8952      	ldrh	r2, [r2, #10]
 8009f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f5c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d103      	bne.n	8009f6c <find_volume+0x2cc>
 8009f64:	230d      	movs	r3, #13
 8009f66:	e0dd      	b.n	800a124 <find_volume+0x484>
 8009f68:	20000448 	.word	0x20000448
		fmt = FS_FAT32;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d802      	bhi.n	8009f82 <find_volume+0x2e2>
 8009f7c:	2302      	movs	r3, #2
 8009f7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f84:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d802      	bhi.n	8009f92 <find_volume+0x2f2>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	1c9a      	adds	r2, r3, #2
 8009f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f98:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f9e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009fa0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fa4:	441a      	add	r2, r3
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009faa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	441a      	add	r2, r3
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d11e      	bne.n	8009ffa <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbe:	3330      	adds	r3, #48	; 0x30
 8009fc0:	332a      	adds	r3, #42	; 0x2a
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fe fc56 	bl	8008874 <ld_word>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <find_volume+0x332>
 8009fce:	230d      	movs	r3, #13
 8009fd0:	e0a8      	b.n	800a124 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	891b      	ldrh	r3, [r3, #8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <find_volume+0x33e>
 8009fda:	230d      	movs	r3, #13
 8009fdc:	e0a2      	b.n	800a124 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe0:	3330      	adds	r3, #48	; 0x30
 8009fe2:	332c      	adds	r3, #44	; 0x2c
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fe fc5d 	bl	80088a4 <ld_dword>
 8009fea:	4602      	mov	r2, r0
 8009fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fee:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8009ff8:	e01f      	b.n	800a03a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffc:	891b      	ldrh	r3, [r3, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <find_volume+0x366>
 800a002:	230d      	movs	r3, #13
 800a004:	e08e      	b.n	800a124 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a008:	6a1a      	ldr	r2, [r3, #32]
 800a00a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a00c:	441a      	add	r2, r3
 800a00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a010:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a012:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a016:	2b02      	cmp	r3, #2
 800a018:	d103      	bne.n	800a022 <find_volume+0x382>
 800a01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01c:	695b      	ldr	r3, [r3, #20]
 800a01e:	005b      	lsls	r3, r3, #1
 800a020:	e00a      	b.n	800a038 <find_volume+0x398>
 800a022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a024:	695a      	ldr	r2, [r3, #20]
 800a026:	4613      	mov	r3, r2
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	4413      	add	r3, r2
 800a02c:	085a      	lsrs	r2, r3, #1
 800a02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a038:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03c:	699a      	ldr	r2, [r3, #24]
 800a03e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a040:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a044:	0a5b      	lsrs	r3, r3, #9
 800a046:	429a      	cmp	r2, r3
 800a048:	d201      	bcs.n	800a04e <find_volume+0x3ae>
 800a04a:	230d      	movs	r3, #13
 800a04c:	e06a      	b.n	800a124 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a050:	f04f 32ff 	mov.w	r2, #4294967295
 800a054:	611a      	str	r2, [r3, #16]
 800a056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a058:	691a      	ldr	r2, [r3, #16]
 800a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a060:	2280      	movs	r2, #128	; 0x80
 800a062:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a064:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a068:	2b03      	cmp	r3, #3
 800a06a:	d149      	bne.n	800a100 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	3330      	adds	r3, #48	; 0x30
 800a070:	3330      	adds	r3, #48	; 0x30
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe fbfe 	bl	8008874 <ld_word>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d140      	bne.n	800a100 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a07e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a080:	3301      	adds	r3, #1
 800a082:	4619      	mov	r1, r3
 800a084:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a086:	f7fe fea5 	bl	8008dd4 <move_window>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d137      	bne.n	800a100 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800a090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a092:	2200      	movs	r2, #0
 800a094:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a098:	3330      	adds	r3, #48	; 0x30
 800a09a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe fbe8 	bl	8008874 <ld_word>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d127      	bne.n	800a100 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b2:	3330      	adds	r3, #48	; 0x30
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fe fbf5 	bl	80088a4 <ld_dword>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	4b1b      	ldr	r3, [pc, #108]	; (800a12c <find_volume+0x48c>)
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d11e      	bne.n	800a100 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c4:	3330      	adds	r3, #48	; 0x30
 800a0c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe fbea 	bl	80088a4 <ld_dword>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	4b17      	ldr	r3, [pc, #92]	; (800a130 <find_volume+0x490>)
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d113      	bne.n	800a100 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0da:	3330      	adds	r3, #48	; 0x30
 800a0dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7fe fbdf 	bl	80088a4 <ld_dword>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ee:	3330      	adds	r3, #48	; 0x30
 800a0f0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fe fbd5 	bl	80088a4 <ld_dword>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a102:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a106:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a108:	4b0a      	ldr	r3, [pc, #40]	; (800a134 <find_volume+0x494>)
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	3301      	adds	r3, #1
 800a10e:	b29a      	uxth	r2, r3
 800a110:	4b08      	ldr	r3, [pc, #32]	; (800a134 <find_volume+0x494>)
 800a112:	801a      	strh	r2, [r3, #0]
 800a114:	4b07      	ldr	r3, [pc, #28]	; (800a134 <find_volume+0x494>)
 800a116:	881a      	ldrh	r2, [r3, #0]
 800a118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a11c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a11e:	f7fe fdf1 	bl	8008d04 <clear_lock>
#endif
	return FR_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3758      	adds	r7, #88	; 0x58
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	41615252 	.word	0x41615252
 800a130:	61417272 	.word	0x61417272
 800a134:	2000044c 	.word	0x2000044c

0800a138 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d01a      	beq.n	800a17e <validate+0x46>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d016      	beq.n	800a17e <validate+0x46>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d011      	beq.n	800a17e <validate+0x46>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	88da      	ldrh	r2, [r3, #6]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	889b      	ldrh	r3, [r3, #4]
 800a164:	429a      	cmp	r2, r3
 800a166:	d10a      	bne.n	800a17e <validate+0x46>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	785b      	ldrb	r3, [r3, #1]
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fe fae2 	bl	8008738 <disk_status>
 800a174:	4603      	mov	r3, r0
 800a176:	f003 0301 	and.w	r3, r3, #1
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d005      	beq.n	800a18a <validate+0x52>
		*fs = 0;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2200      	movs	r2, #0
 800a182:	601a      	str	r2, [r3, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 800a184:	2309      	movs	r3, #9
 800a186:	73fb      	strb	r3, [r7, #15]
 800a188:	e005      	b.n	800a196 <validate+0x5e>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	601a      	str	r2, [r3, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800a196:	7bfb      	ldrb	r3, [r7, #15]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a1b2:	f107 0310 	add.w	r3, r7, #16
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff fcd7 	bl	8009b6a <get_ldnumber>
 800a1bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	da01      	bge.n	800a1c8 <f_mount+0x28>
 800a1c4:	230b      	movs	r3, #11
 800a1c6:	e02b      	b.n	800a220 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a1c8:	4a17      	ldr	r2, [pc, #92]	; (800a228 <f_mount+0x88>)
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d005      	beq.n	800a1e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a1d8:	69b8      	ldr	r0, [r7, #24]
 800a1da:	f7fe fd93 	bl	8008d04 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d002      	beq.n	800a1f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	490d      	ldr	r1, [pc, #52]	; (800a228 <f_mount+0x88>)
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d002      	beq.n	800a206 <f_mount+0x66>
 800a200:	79fb      	ldrb	r3, [r7, #7]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d001      	beq.n	800a20a <f_mount+0x6a>
 800a206:	2300      	movs	r3, #0
 800a208:	e00a      	b.n	800a220 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a20a:	f107 010c 	add.w	r1, r7, #12
 800a20e:	f107 0308 	add.w	r3, r7, #8
 800a212:	2200      	movs	r2, #0
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff fd43 	bl	8009ca0 <find_volume>
 800a21a:	4603      	mov	r3, r0
 800a21c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3720      	adds	r7, #32
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	20000448 	.word	0x20000448

0800a22c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b098      	sub	sp, #96	; 0x60
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	4613      	mov	r3, r2
 800a238:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <f_open+0x18>
 800a240:	2309      	movs	r3, #9
 800a242:	e1ad      	b.n	800a5a0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a244:	79fb      	ldrb	r3, [r7, #7]
 800a246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a24a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a24c:	79fa      	ldrb	r2, [r7, #7]
 800a24e:	f107 0110 	add.w	r1, r7, #16
 800a252:	f107 0308 	add.w	r3, r7, #8
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff fd22 	bl	8009ca0 <find_volume>
 800a25c:	4603      	mov	r3, r0
 800a25e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a266:	2b00      	cmp	r3, #0
 800a268:	f040 8191 	bne.w	800a58e <f_open+0x362>
		dj.obj.fs = fs;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a270:	68ba      	ldr	r2, [r7, #8]
 800a272:	f107 0314 	add.w	r3, r7, #20
 800a276:	4611      	mov	r1, r2
 800a278:	4618      	mov	r0, r3
 800a27a:	f7ff fc05 	bl	8009a88 <follow_path>
 800a27e:	4603      	mov	r3, r0
 800a280:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a284:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d11a      	bne.n	800a2c2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a28c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a290:	b25b      	sxtb	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	da03      	bge.n	800a29e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a296:	2306      	movs	r3, #6
 800a298:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a29c:	e011      	b.n	800a2c2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	f023 0301 	bic.w	r3, r3, #1
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	bf14      	ite	ne
 800a2a8:	2301      	movne	r3, #1
 800a2aa:	2300      	moveq	r3, #0
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	f107 0314 	add.w	r3, r7, #20
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fe fbdc 	bl	8008a74 <chk_lock>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a2c2:	79fb      	ldrb	r3, [r7, #7]
 800a2c4:	f003 031c 	and.w	r3, r3, #28
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d07f      	beq.n	800a3cc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a2cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d017      	beq.n	800a304 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a2d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2d8:	2b04      	cmp	r3, #4
 800a2da:	d10e      	bne.n	800a2fa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a2dc:	f7fe fc26 	bl	8008b2c <enq_lock>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d006      	beq.n	800a2f4 <f_open+0xc8>
 800a2e6:	f107 0314 	add.w	r3, r7, #20
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7ff fb05 	bl	80098fa <dir_register>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	e000      	b.n	800a2f6 <f_open+0xca>
 800a2f4:	2312      	movs	r3, #18
 800a2f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	f043 0308 	orr.w	r3, r3, #8
 800a300:	71fb      	strb	r3, [r7, #7]
 800a302:	e010      	b.n	800a326 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a304:	7ebb      	ldrb	r3, [r7, #26]
 800a306:	f003 0311 	and.w	r3, r3, #17
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <f_open+0xea>
					res = FR_DENIED;
 800a30e:	2307      	movs	r3, #7
 800a310:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a314:	e007      	b.n	800a326 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a316:	79fb      	ldrb	r3, [r7, #7]
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d002      	beq.n	800a326 <f_open+0xfa>
 800a320:	2308      	movs	r3, #8
 800a322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a326:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d168      	bne.n	800a400 <f_open+0x1d4>
 800a32e:	79fb      	ldrb	r3, [r7, #7]
 800a330:	f003 0308 	and.w	r3, r3, #8
 800a334:	2b00      	cmp	r3, #0
 800a336:	d063      	beq.n	800a400 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a338:	f002 fbce 	bl	800cad8 <get_fattime>
 800a33c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a340:	330e      	adds	r3, #14
 800a342:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a344:	4618      	mov	r0, r3
 800a346:	f7fe faeb 	bl	8008920 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34c:	3316      	adds	r3, #22
 800a34e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a350:	4618      	mov	r0, r3
 800a352:	f7fe fae5 	bl	8008920 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a358:	330b      	adds	r3, #11
 800a35a:	2220      	movs	r2, #32
 800a35c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a362:	4611      	mov	r1, r2
 800a364:	4618      	mov	r0, r3
 800a366:	f7ff fa34 	bl	80097d2 <ld_clust>
 800a36a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a370:	2200      	movs	r2, #0
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff fa4c 	bl	8009810 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37a:	331c      	adds	r3, #28
 800a37c:	2100      	movs	r1, #0
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fe face 	bl	8008920 <st_dword>
					fs->wflag = 1;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	2201      	movs	r2, #1
 800a388:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d037      	beq.n	800a400 <f_open+0x1d4>
						dw = fs->winsect;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a396:	f107 0314 	add.w	r3, r7, #20
 800a39a:	2200      	movs	r2, #0
 800a39c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fe ff5f 	bl	8009262 <remove_chain>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a3aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d126      	bne.n	800a400 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fe fd0c 	bl	8008dd4 <move_window>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3c6:	3a01      	subs	r2, #1
 800a3c8:	60da      	str	r2, [r3, #12]
 800a3ca:	e019      	b.n	800a400 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a3cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d115      	bne.n	800a400 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a3d4:	7ebb      	ldrb	r3, [r7, #26]
 800a3d6:	f003 0310 	and.w	r3, r3, #16
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d003      	beq.n	800a3e6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a3de:	2304      	movs	r3, #4
 800a3e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a3e4:	e00c      	b.n	800a400 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a3e6:	79fb      	ldrb	r3, [r7, #7]
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d007      	beq.n	800a400 <f_open+0x1d4>
 800a3f0:	7ebb      	ldrb	r3, [r7, #26]
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <f_open+0x1d4>
						res = FR_DENIED;
 800a3fa:	2307      	movs	r3, #7
 800a3fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a400:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a404:	2b00      	cmp	r3, #0
 800a406:	d128      	bne.n	800a45a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	f003 0308 	and.w	r3, r3, #8
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a412:	79fb      	ldrb	r3, [r7, #7]
 800a414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a418:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	f023 0301 	bic.w	r3, r3, #1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	bf14      	ite	ne
 800a432:	2301      	movne	r3, #1
 800a434:	2300      	moveq	r3, #0
 800a436:	b2db      	uxtb	r3, r3
 800a438:	461a      	mov	r2, r3
 800a43a:	f107 0314 	add.w	r3, r7, #20
 800a43e:	4611      	mov	r1, r2
 800a440:	4618      	mov	r0, r3
 800a442:	f7fe fb95 	bl	8008b70 <inc_lock>
 800a446:	4602      	mov	r2, r0
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d102      	bne.n	800a45a <f_open+0x22e>
 800a454:	2302      	movs	r3, #2
 800a456:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a45a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f040 8095 	bne.w	800a58e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a468:	4611      	mov	r1, r2
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7ff f9b1 	bl	80097d2 <ld_clust>
 800a470:	4602      	mov	r2, r0
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a478:	331c      	adds	r3, #28
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fe fa12 	bl	80088a4 <ld_dword>
 800a480:	4602      	mov	r2, r0
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	88da      	ldrh	r2, [r3, #6]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	79fa      	ldrb	r2, [r7, #7]
 800a49e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3330      	adds	r3, #48	; 0x30
 800a4b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe fa7c 	bl	80089ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a4c2:	79fb      	ldrb	r3, [r7, #7]
 800a4c4:	f003 0320 	and.w	r3, r3, #32
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d060      	beq.n	800a58e <f_open+0x362>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d05c      	beq.n	800a58e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	68da      	ldr	r2, [r3, #12]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	895b      	ldrh	r3, [r3, #10]
 800a4e0:	025b      	lsls	r3, r3, #9
 800a4e2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	657b      	str	r3, [r7, #84]	; 0x54
 800a4f0:	e016      	b.n	800a520 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fe fd27 	bl	8008f4a <get_fat>
 800a4fc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a4fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a500:	2b01      	cmp	r3, #1
 800a502:	d802      	bhi.n	800a50a <f_open+0x2de>
 800a504:	2302      	movs	r3, #2
 800a506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a50a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a510:	d102      	bne.n	800a518 <f_open+0x2ec>
 800a512:	2301      	movs	r3, #1
 800a514:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a518:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a51a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	657b      	str	r3, [r7, #84]	; 0x54
 800a520:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a524:	2b00      	cmp	r3, #0
 800a526:	d103      	bne.n	800a530 <f_open+0x304>
 800a528:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a52a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d8e0      	bhi.n	800a4f2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a534:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d127      	bne.n	800a58e <f_open+0x362>
 800a53e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a544:	2b00      	cmp	r3, #0
 800a546:	d022      	beq.n	800a58e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fe fcdd 	bl	8008f0c <clust2sect>
 800a552:	6478      	str	r0, [r7, #68]	; 0x44
 800a554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a556:	2b00      	cmp	r3, #0
 800a558:	d103      	bne.n	800a562 <f_open+0x336>
						res = FR_INT_ERR;
 800a55a:	2302      	movs	r3, #2
 800a55c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a560:	e015      	b.n	800a58e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a564:	0a5a      	lsrs	r2, r3, #9
 800a566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a568:	441a      	add	r2, r3
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	7858      	ldrb	r0, [r3, #1]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6a1a      	ldr	r2, [r3, #32]
 800a57c:	2301      	movs	r3, #1
 800a57e:	f7fe f91b 	bl	80087b8 <disk_read>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <f_open+0x362>
 800a588:	2301      	movs	r3, #1
 800a58a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a58e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a592:	2b00      	cmp	r3, #0
 800a594:	d002      	beq.n	800a59c <f_open+0x370>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a59c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3760      	adds	r7, #96	; 0x60
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08e      	sub	sp, #56	; 0x38
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
 800a5b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f107 0214 	add.w	r2, r7, #20
 800a5c6:	4611      	mov	r1, r2
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7ff fdb5 	bl	800a138 <validate>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a5d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d107      	bne.n	800a5ec <f_read+0x44>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	7d5b      	ldrb	r3, [r3, #21]
 800a5e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a5e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <f_read+0x4a>
 800a5ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5f0:	e115      	b.n	800a81e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	7d1b      	ldrb	r3, [r3, #20]
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d101      	bne.n	800a602 <f_read+0x5a>
 800a5fe:	2307      	movs	r3, #7
 800a600:	e10d      	b.n	800a81e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	68da      	ldr	r2, [r3, #12]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6a3b      	ldr	r3, [r7, #32]
 800a612:	429a      	cmp	r2, r3
 800a614:	f240 80fe 	bls.w	800a814 <f_read+0x26c>
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a61c:	e0fa      	b.n	800a814 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a626:	2b00      	cmp	r3, #0
 800a628:	f040 80c6 	bne.w	800a7b8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	0a5b      	lsrs	r3, r3, #9
 800a632:	697a      	ldr	r2, [r7, #20]
 800a634:	8952      	ldrh	r2, [r2, #10]
 800a636:	3a01      	subs	r2, #1
 800a638:	4013      	ands	r3, r2
 800a63a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d12f      	bne.n	800a6a2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d103      	bne.n	800a652 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	633b      	str	r3, [r7, #48]	; 0x30
 800a650:	e013      	b.n	800a67a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	2b00      	cmp	r3, #0
 800a658:	d007      	beq.n	800a66a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	4619      	mov	r1, r3
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f7fe fefb 	bl	800945c <clmt_clust>
 800a666:	6338      	str	r0, [r7, #48]	; 0x30
 800a668:	e007      	b.n	800a67a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	69db      	ldr	r3, [r3, #28]
 800a670:	4619      	mov	r1, r3
 800a672:	4610      	mov	r0, r2
 800a674:	f7fe fc69 	bl	8008f4a <get_fat>
 800a678:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d804      	bhi.n	800a68a <f_read+0xe2>
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2202      	movs	r2, #2
 800a684:	755a      	strb	r2, [r3, #21]
 800a686:	2302      	movs	r3, #2
 800a688:	e0c9      	b.n	800a81e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a690:	d104      	bne.n	800a69c <f_read+0xf4>
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2201      	movs	r2, #1
 800a696:	755a      	strb	r2, [r3, #21]
 800a698:	2301      	movs	r3, #1
 800a69a:	e0c0      	b.n	800a81e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a6a2:	697a      	ldr	r2, [r7, #20]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	69db      	ldr	r3, [r3, #28]
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	f7fe fc2e 	bl	8008f0c <clust2sect>
 800a6b0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d104      	bne.n	800a6c2 <f_read+0x11a>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	755a      	strb	r2, [r3, #21]
 800a6be:	2302      	movs	r3, #2
 800a6c0:	e0ad      	b.n	800a81e <f_read+0x276>
			sect += csect;
 800a6c2:	69ba      	ldr	r2, [r7, #24]
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	0a5b      	lsrs	r3, r3, #9
 800a6ce:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d039      	beq.n	800a74a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a6d6:	69fa      	ldr	r2, [r7, #28]
 800a6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6da:	4413      	add	r3, r2
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	8952      	ldrh	r2, [r2, #10]
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d905      	bls.n	800a6f0 <f_read+0x148>
					cc = fs->csize - csect;
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	895b      	ldrh	r3, [r3, #10]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	7858      	ldrb	r0, [r3, #1]
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	69ba      	ldr	r2, [r7, #24]
 800a6f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6fa:	f7fe f85d 	bl	80087b8 <disk_read>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d004      	beq.n	800a70e <f_read+0x166>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2201      	movs	r2, #1
 800a708:	755a      	strb	r2, [r3, #21]
 800a70a:	2301      	movs	r3, #1
 800a70c:	e087      	b.n	800a81e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	7d1b      	ldrb	r3, [r3, #20]
 800a712:	b25b      	sxtb	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	da14      	bge.n	800a742 <f_read+0x19a>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6a1a      	ldr	r2, [r3, #32]
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	1ad2      	subs	r2, r2, r3
 800a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a722:	429a      	cmp	r2, r3
 800a724:	d20d      	bcs.n	800a742 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6a1a      	ldr	r2, [r3, #32]
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	025b      	lsls	r3, r3, #9
 800a730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a732:	18d0      	adds	r0, r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3330      	adds	r3, #48	; 0x30
 800a738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a73c:	4619      	mov	r1, r3
 800a73e:	f7fe f91b 	bl	8008978 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a744:	025b      	lsls	r3, r3, #9
 800a746:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a748:	e050      	b.n	800a7ec <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6a1a      	ldr	r2, [r3, #32]
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	429a      	cmp	r2, r3
 800a752:	d02e      	beq.n	800a7b2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	7d1b      	ldrb	r3, [r3, #20]
 800a758:	b25b      	sxtb	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	da18      	bge.n	800a790 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	7858      	ldrb	r0, [r3, #1]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6a1a      	ldr	r2, [r3, #32]
 800a76c:	2301      	movs	r3, #1
 800a76e:	f7fe f843 	bl	80087f8 <disk_write>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d004      	beq.n	800a782 <f_read+0x1da>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2201      	movs	r2, #1
 800a77c:	755a      	strb	r2, [r3, #21]
 800a77e:	2301      	movs	r3, #1
 800a780:	e04d      	b.n	800a81e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	7d1b      	ldrb	r3, [r3, #20]
 800a786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	7858      	ldrb	r0, [r3, #1]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a79a:	2301      	movs	r3, #1
 800a79c:	69ba      	ldr	r2, [r7, #24]
 800a79e:	f7fe f80b 	bl	80087b8 <disk_read>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d004      	beq.n	800a7b2 <f_read+0x20a>
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	755a      	strb	r2, [r3, #21]
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e035      	b.n	800a81e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a7c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d901      	bls.n	800a7d2 <f_read+0x22a>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e0:	4413      	add	r3, r2
 800a7e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7e8:	f7fe f8c6 	bl	8008978 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a7ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f0:	4413      	add	r3, r2
 800a7f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	699a      	ldr	r2, [r3, #24]
 800a7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fa:	441a      	add	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	619a      	str	r2, [r3, #24]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a806:	441a      	add	r2, r3
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	601a      	str	r2, [r3, #0]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	f47f af01 	bne.w	800a61e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3738      	adds	r7, #56	; 0x38
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b08c      	sub	sp, #48	; 0x30
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	60b9      	str	r1, [r7, #8]
 800a830:	607a      	str	r2, [r7, #4]
 800a832:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2200      	movs	r2, #0
 800a83c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f107 0210 	add.w	r2, r7, #16
 800a844:	4611      	mov	r1, r2
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff fc76 	bl	800a138 <validate>
 800a84c:	4603      	mov	r3, r0
 800a84e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a856:	2b00      	cmp	r3, #0
 800a858:	d107      	bne.n	800a86a <f_write+0x44>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	7d5b      	ldrb	r3, [r3, #21]
 800a85e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <f_write+0x4a>
 800a86a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a86e:	e14b      	b.n	800ab08 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	7d1b      	ldrb	r3, [r3, #20]
 800a874:	f003 0302 	and.w	r3, r3, #2
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <f_write+0x5a>
 800a87c:	2307      	movs	r3, #7
 800a87e:	e143      	b.n	800ab08 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	699a      	ldr	r2, [r3, #24]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	441a      	add	r2, r3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	699b      	ldr	r3, [r3, #24]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	f080 812d 	bcs.w	800aaec <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	43db      	mvns	r3, r3
 800a898:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a89a:	e127      	b.n	800aaec <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f040 80e3 	bne.w	800aa70 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	0a5b      	lsrs	r3, r3, #9
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	8952      	ldrh	r2, [r2, #10]
 800a8b4:	3a01      	subs	r2, #1
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d143      	bne.n	800a948 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10c      	bne.n	800a8e2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d11a      	bne.n	800a90a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fe fd27 	bl	800932c <create_chain>
 800a8de:	62b8      	str	r0, [r7, #40]	; 0x28
 800a8e0:	e013      	b.n	800a90a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d007      	beq.n	800a8fa <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f7fe fdb3 	bl	800945c <clmt_clust>
 800a8f6:	62b8      	str	r0, [r7, #40]	; 0x28
 800a8f8:	e007      	b.n	800a90a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	4619      	mov	r1, r3
 800a902:	4610      	mov	r0, r2
 800a904:	f7fe fd12 	bl	800932c <create_chain>
 800a908:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 80f2 	beq.w	800aaf6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a914:	2b01      	cmp	r3, #1
 800a916:	d104      	bne.n	800a922 <f_write+0xfc>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2202      	movs	r2, #2
 800a91c:	755a      	strb	r2, [r3, #21]
 800a91e:	2302      	movs	r3, #2
 800a920:	e0f2      	b.n	800ab08 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a928:	d104      	bne.n	800a934 <f_write+0x10e>
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2201      	movs	r2, #1
 800a92e:	755a      	strb	r2, [r3, #21]
 800a930:	2301      	movs	r3, #1
 800a932:	e0e9      	b.n	800ab08 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a938:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d102      	bne.n	800a948 <f_write+0x122>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a946:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	7d1b      	ldrb	r3, [r3, #20]
 800a94c:	b25b      	sxtb	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	da18      	bge.n	800a984 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	7858      	ldrb	r0, [r3, #1]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6a1a      	ldr	r2, [r3, #32]
 800a960:	2301      	movs	r3, #1
 800a962:	f7fd ff49 	bl	80087f8 <disk_write>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d004      	beq.n	800a976 <f_write+0x150>
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2201      	movs	r2, #1
 800a970:	755a      	strb	r2, [r3, #21]
 800a972:	2301      	movs	r3, #1
 800a974:	e0c8      	b.n	800ab08 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	7d1b      	ldrb	r3, [r3, #20]
 800a97a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	4619      	mov	r1, r3
 800a98c:	4610      	mov	r0, r2
 800a98e:	f7fe fabd 	bl	8008f0c <clust2sect>
 800a992:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d104      	bne.n	800a9a4 <f_write+0x17e>
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2202      	movs	r2, #2
 800a99e:	755a      	strb	r2, [r3, #21]
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	e0b1      	b.n	800ab08 <f_write+0x2e2>
			sect += csect;
 800a9a4:	697a      	ldr	r2, [r7, #20]
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	0a5b      	lsrs	r3, r3, #9
 800a9b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d03c      	beq.n	800aa32 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a9b8:	69ba      	ldr	r2, [r7, #24]
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	4413      	add	r3, r2
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	8952      	ldrh	r2, [r2, #10]
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d905      	bls.n	800a9d2 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	895b      	ldrh	r3, [r3, #10]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	7858      	ldrb	r0, [r3, #1]
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	697a      	ldr	r2, [r7, #20]
 800a9da:	69f9      	ldr	r1, [r7, #28]
 800a9dc:	f7fd ff0c 	bl	80087f8 <disk_write>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d004      	beq.n	800a9f0 <f_write+0x1ca>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	755a      	strb	r2, [r3, #21]
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e08b      	b.n	800ab08 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6a1a      	ldr	r2, [r3, #32]
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	1ad2      	subs	r2, r2, r3
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d215      	bcs.n	800aa2a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6a1a      	ldr	r2, [r3, #32]
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	025b      	lsls	r3, r3, #9
 800aa0e:	69fa      	ldr	r2, [r7, #28]
 800aa10:	4413      	add	r3, r2
 800aa12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa16:	4619      	mov	r1, r3
 800aa18:	f7fd ffae 	bl	8008978 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	7d1b      	ldrb	r3, [r3, #20]
 800aa20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	025b      	lsls	r3, r3, #9
 800aa2e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800aa30:	e03f      	b.n	800aab2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6a1a      	ldr	r2, [r3, #32]
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d016      	beq.n	800aa6a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	699a      	ldr	r2, [r3, #24]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d210      	bcs.n	800aa6a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	7858      	ldrb	r0, [r3, #1]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa52:	2301      	movs	r3, #1
 800aa54:	697a      	ldr	r2, [r7, #20]
 800aa56:	f7fd feaf 	bl	80087b8 <disk_read>
 800aa5a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d004      	beq.n	800aa6a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2201      	movs	r2, #1
 800aa64:	755a      	strb	r2, [r3, #21]
 800aa66:	2301      	movs	r3, #1
 800aa68:	e04e      	b.n	800ab08 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	699b      	ldr	r3, [r3, #24]
 800aa74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa78:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800aa7c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aa7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d901      	bls.n	800aa8a <f_write+0x264>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	699b      	ldr	r3, [r3, #24]
 800aa94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa98:	4413      	add	r3, r2
 800aa9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa9c:	69f9      	ldr	r1, [r7, #28]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fd ff6a 	bl	8008978 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	7d1b      	ldrb	r3, [r3, #20]
 800aaa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aaac:	b2da      	uxtb	r2, r3
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aab2:	69fa      	ldr	r2, [r7, #28]
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	4413      	add	r3, r2
 800aab8:	61fb      	str	r3, [r7, #28]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	699a      	ldr	r2, [r3, #24]
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	441a      	add	r2, r3
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	619a      	str	r2, [r3, #24]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	68da      	ldr	r2, [r3, #12]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	429a      	cmp	r2, r3
 800aad0:	bf38      	it	cc
 800aad2:	461a      	movcc	r2, r3
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	60da      	str	r2, [r3, #12]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	441a      	add	r2, r3
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f47f aed4 	bne.w	800a89c <f_write+0x76>
 800aaf4:	e000      	b.n	800aaf8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aaf6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	7d1b      	ldrb	r3, [r3, #20]
 800aafc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3730      	adds	r7, #48	; 0x30
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f107 0208 	add.w	r2, r7, #8
 800ab1e:	4611      	mov	r1, r2
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff fb09 	bl	800a138 <validate>
 800ab26:	4603      	mov	r3, r0
 800ab28:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d168      	bne.n	800ac02 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	7d1b      	ldrb	r3, [r3, #20]
 800ab34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d062      	beq.n	800ac02 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	7d1b      	ldrb	r3, [r3, #20]
 800ab40:	b25b      	sxtb	r3, r3
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	da15      	bge.n	800ab72 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	7858      	ldrb	r0, [r3, #1]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a1a      	ldr	r2, [r3, #32]
 800ab54:	2301      	movs	r3, #1
 800ab56:	f7fd fe4f 	bl	80087f8 <disk_write>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <f_sync+0x54>
 800ab60:	2301      	movs	r3, #1
 800ab62:	e04f      	b.n	800ac04 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	7d1b      	ldrb	r3, [r3, #20]
 800ab68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab6c:	b2da      	uxtb	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ab72:	f001 ffb1 	bl	800cad8 <get_fattime>
 800ab76:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4610      	mov	r0, r2
 800ab82:	f7fe f927 	bl	8008dd4 <move_window>
 800ab86:	4603      	mov	r3, r0
 800ab88:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ab8a:	7dfb      	ldrb	r3, [r7, #23]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d138      	bne.n	800ac02 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab94:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	330b      	adds	r3, #11
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	320b      	adds	r2, #11
 800ab9e:	7812      	ldrb	r2, [r2, #0]
 800aba0:	f042 0220 	orr.w	r2, r2, #32
 800aba4:	b2d2      	uxtb	r2, r2
 800aba6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6818      	ldr	r0, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	461a      	mov	r2, r3
 800abb2:	68f9      	ldr	r1, [r7, #12]
 800abb4:	f7fe fe2c 	bl	8009810 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f103 021c 	add.w	r2, r3, #28
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	4619      	mov	r1, r3
 800abc4:	4610      	mov	r0, r2
 800abc6:	f7fd feab 	bl	8008920 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3316      	adds	r3, #22
 800abce:	6939      	ldr	r1, [r7, #16]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fd fea5 	bl	8008920 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	3312      	adds	r3, #18
 800abda:	2100      	movs	r1, #0
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fd fe84 	bl	80088ea <st_word>
					fs->wflag = 1;
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2201      	movs	r2, #1
 800abe6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe f920 	bl	8008e30 <sync_fs>
 800abf0:	4603      	mov	r3, r0
 800abf2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	7d1b      	ldrb	r3, [r3, #20]
 800abf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ac02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7ff ff7b 	bl	800ab10 <f_sync>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d118      	bne.n	800ac56 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f107 0208 	add.w	r2, r7, #8
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff fa83 	bl	800a138 <validate>
 800ac32:	4603      	mov	r3, r0
 800ac34:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ac36:	7bfb      	ldrb	r3, [r7, #15]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10c      	bne.n	800ac56 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fe f823 	bl	8008c8c <dec_lock>
 800ac46:	4603      	mov	r3, r0
 800ac48:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d102      	bne.n	800ac56 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ac56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800ac60:	b590      	push	{r4, r7, lr}
 800ac62:	b09d      	sub	sp, #116	; 0x74
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	607a      	str	r2, [r7, #4]
 800ac6a:	603b      	str	r3, [r7, #0]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800ac70:	2301      	movs	r3, #1
 800ac72:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800ac74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac78:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800ac7a:	f107 030c 	add.w	r3, r7, #12
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fe ff73 	bl	8009b6a <get_ldnumber>
 800ac84:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	da02      	bge.n	800ac92 <f_mkfs+0x32>
 800ac8c:	230b      	movs	r3, #11
 800ac8e:	f000 bc0d 	b.w	800b4ac <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800ac92:	4a94      	ldr	r2, [pc, #592]	; (800aee4 <f_mkfs+0x284>)
 800ac94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d005      	beq.n	800acaa <f_mkfs+0x4a>
 800ac9e:	4a91      	ldr	r2, [pc, #580]	; (800aee4 <f_mkfs+0x284>)
 800aca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aca6:	2200      	movs	r2, #0
 800aca8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800acaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800acb0:	2300      	movs	r3, #0
 800acb2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800acb6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800acba:	4618      	mov	r0, r3
 800acbc:	f7fd fd56 	bl	800876c <disk_initialize>
 800acc0:	4603      	mov	r3, r0
 800acc2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800acc6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <f_mkfs+0x76>
 800acd2:	2303      	movs	r3, #3
 800acd4:	e3ea      	b.n	800b4ac <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800acd6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800acda:	f003 0304 	and.w	r3, r3, #4
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d001      	beq.n	800ace6 <f_mkfs+0x86>
 800ace2:	230a      	movs	r3, #10
 800ace4:	e3e2      	b.n	800b4ac <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800ace6:	f107 0214 	add.w	r2, r7, #20
 800acea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800acee:	2103      	movs	r1, #3
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fd fda1 	bl	8008838 <disk_ioctl>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10c      	bne.n	800ad16 <f_mkfs+0xb6>
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d009      	beq.n	800ad16 <f_mkfs+0xb6>
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad08:	d805      	bhi.n	800ad16 <f_mkfs+0xb6>
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	1e5a      	subs	r2, r3, #1
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	4013      	ands	r3, r2
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d001      	beq.n	800ad1a <f_mkfs+0xba>
 800ad16:	2301      	movs	r3, #1
 800ad18:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800ad1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad1e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <f_mkfs+0xce>
 800ad26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d809      	bhi.n	800ad42 <f_mkfs+0xe2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad34:	d805      	bhi.n	800ad42 <f_mkfs+0xe2>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	1e5a      	subs	r2, r3, #1
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <f_mkfs+0xe6>
 800ad42:	2313      	movs	r3, #19
 800ad44:	e3b2      	b.n	800b4ac <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800ad46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad4e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800ad54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ad5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800ad60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad64:	fb02 f303 	mul.w	r3, r2, r3
 800ad68:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800ad6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d101      	bne.n	800ad74 <f_mkfs+0x114>
 800ad70:	230e      	movs	r3, #14
 800ad72:	e39b      	b.n	800b4ac <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800ad74:	f107 0210 	add.w	r2, r7, #16
 800ad78:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fd fd5a 	bl	8008838 <disk_ioctl>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <f_mkfs+0x12e>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e38e      	b.n	800b4ac <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800ad8e:	7afb      	ldrb	r3, [r7, #11]
 800ad90:	f003 0308 	and.w	r3, r3, #8
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d001      	beq.n	800ad9c <f_mkfs+0x13c>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	e000      	b.n	800ad9e <f_mkfs+0x13e>
 800ad9c:	233f      	movs	r3, #63	; 0x3f
 800ad9e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d201      	bcs.n	800adac <f_mkfs+0x14c>
 800ada8:	230e      	movs	r3, #14
 800adaa:	e37f      	b.n	800b4ac <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	2b7f      	cmp	r3, #127	; 0x7f
 800adb8:	d801      	bhi.n	800adbe <f_mkfs+0x15e>
 800adba:	230e      	movs	r3, #14
 800adbc:	e376      	b.n	800b4ac <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2b80      	cmp	r3, #128	; 0x80
 800adc2:	d901      	bls.n	800adc8 <f_mkfs+0x168>
 800adc4:	2313      	movs	r3, #19
 800adc6:	e371      	b.n	800b4ac <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800adc8:	7afb      	ldrb	r3, [r7, #11]
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00d      	beq.n	800adee <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800add2:	7afb      	ldrb	r3, [r7, #11]
 800add4:	f003 0307 	and.w	r3, r3, #7
 800add8:	2b02      	cmp	r3, #2
 800adda:	d004      	beq.n	800ade6 <f_mkfs+0x186>
 800addc:	7afb      	ldrb	r3, [r7, #11]
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d103      	bne.n	800adee <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800ade6:	2303      	movs	r3, #3
 800ade8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800adec:	e009      	b.n	800ae02 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800adee:	7afb      	ldrb	r3, [r7, #11]
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <f_mkfs+0x19c>
 800adf8:	2313      	movs	r3, #19
 800adfa:	e357      	b.n	800b4ac <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800adfc:	2302      	movs	r3, #2
 800adfe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	66bb      	str	r3, [r7, #104]	; 0x68
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800ae06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	d13c      	bne.n	800ae88 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800ae0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d11b      	bne.n	800ae4c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	0c5b      	lsrs	r3, r3, #17
 800ae18:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae1e:	2301      	movs	r3, #1
 800ae20:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae22:	e005      	b.n	800ae30 <f_mkfs+0x1d0>
 800ae24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae26:	3301      	adds	r3, #1
 800ae28:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae30:	4a2d      	ldr	r2, [pc, #180]	; (800aee8 <f_mkfs+0x288>)
 800ae32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d007      	beq.n	800ae4c <f_mkfs+0x1ec>
 800ae3c:	4a2a      	ldr	r2, [pc, #168]	; (800aee8 <f_mkfs+0x288>)
 800ae3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae44:	461a      	mov	r2, r3
 800ae46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d9eb      	bls.n	800ae24 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae54:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	3302      	adds	r3, #2
 800ae5a:	009a      	lsls	r2, r3, #2
 800ae5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae5e:	4413      	add	r3, r2
 800ae60:	1e5a      	subs	r2, r3, #1
 800ae62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae68:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 32;	/* Number of reserved sectors */
 800ae6a:	2320      	movs	r3, #32
 800ae6c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800ae6e:	2300      	movs	r3, #0
 800ae70:	64fb      	str	r3, [r7, #76]	; 0x4c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800ae72:	6a3b      	ldr	r3, [r7, #32]
 800ae74:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d903      	bls.n	800ae84 <f_mkfs+0x224>
 800ae7c:	6a3b      	ldr	r3, [r7, #32]
 800ae7e:	4a1b      	ldr	r2, [pc, #108]	; (800aeec <f_mkfs+0x28c>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d952      	bls.n	800af2a <f_mkfs+0x2ca>
 800ae84:	230e      	movs	r3, #14
 800ae86:	e311      	b.n	800b4ac <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800ae88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d11b      	bne.n	800aec6 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	0b1b      	lsrs	r3, r3, #12
 800ae92:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ae94:	2300      	movs	r3, #0
 800ae96:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae98:	2301      	movs	r3, #1
 800ae9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae9c:	e005      	b.n	800aeaa <f_mkfs+0x24a>
 800ae9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aea0:	3301      	adds	r3, #1
 800aea2:	64bb      	str	r3, [r7, #72]	; 0x48
 800aea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aea6:	005b      	lsls	r3, r3, #1
 800aea8:	66bb      	str	r3, [r7, #104]	; 0x68
 800aeaa:	4a11      	ldr	r2, [pc, #68]	; (800aef0 <f_mkfs+0x290>)
 800aeac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d007      	beq.n	800aec6 <f_mkfs+0x266>
 800aeb6:	4a0e      	ldr	r2, [pc, #56]	; (800aef0 <f_mkfs+0x290>)
 800aeb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aebe:	461a      	mov	r2, r3
 800aec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d9eb      	bls.n	800ae9e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800aec6:	693a      	ldr	r2, [r7, #16]
 800aec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aeca:	fbb2 f3f3 	udiv	r3, r2, r3
 800aece:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800aed0:	6a3b      	ldr	r3, [r7, #32]
 800aed2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d90c      	bls.n	800aef4 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	3302      	adds	r3, #2
 800aede:	005b      	lsls	r3, r3, #1
 800aee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aee2:	e012      	b.n	800af0a <f_mkfs+0x2aa>
 800aee4:	20000448 	.word	0x20000448
 800aee8:	080156b0 	.word	0x080156b0
 800aeec:	0ffffff5 	.word	0x0ffffff5
 800aef0:	080156c0 	.word	0x080156c0
				} else {
					fmt = FS_FAT12;
 800aef4:	2301      	movs	r3, #1
 800aef6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800aefa:	6a3a      	ldr	r2, [r7, #32]
 800aefc:	4613      	mov	r3, r2
 800aefe:	005b      	lsls	r3, r3, #1
 800af00:	4413      	add	r3, r2
 800af02:	3301      	adds	r3, #1
 800af04:	085b      	lsrs	r3, r3, #1
 800af06:	3303      	adds	r3, #3
 800af08:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800af0a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800af0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af0e:	4413      	add	r3, r2
 800af10:	1e5a      	subs	r2, r3, #1
 800af12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af14:	fbb2 f3f3 	udiv	r3, r2, r3
 800af18:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 1;						/* Number of reserved sectors */
 800af1a:	2301      	movs	r3, #1
 800af1c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800af1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af20:	015a      	lsls	r2, r3, #5
 800af22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af24:	fbb2 f3f3 	udiv	r3, r2, r3
 800af28:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800af2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af2e:	4413      	add	r3, r2
 800af30:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800af32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af36:	fb02 f203 	mul.w	r2, r2, r3
 800af3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af3c:	441a      	add	r2, r3
 800af3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af40:	4413      	add	r3, r2
 800af42:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	4413      	add	r3, r2
 800af4a:	1e5a      	subs	r2, r3, #1
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	425b      	negs	r3, r3
 800af50:	401a      	ands	r2, r3
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800af58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800af5c:	2b03      	cmp	r3, #3
 800af5e:	d108      	bne.n	800af72 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800af60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af64:	4413      	add	r3, r2
 800af66:	657b      	str	r3, [r7, #84]	; 0x54
 800af68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af6c:	4413      	add	r3, r2
 800af6e:	65bb      	str	r3, [r7, #88]	; 0x58
 800af70:	e006      	b.n	800af80 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800af72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af76:	fbb2 f3f3 	udiv	r3, r2, r3
 800af7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af7c:	4413      	add	r3, r2
 800af7e:	653b      	str	r3, [r7, #80]	; 0x50
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800af80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af82:	011a      	lsls	r2, r3, #4
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	441a      	add	r2, r3
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	1ad2      	subs	r2, r2, r3
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d901      	bls.n	800af96 <f_mkfs+0x336>
 800af92:	230e      	movs	r3, #14
 800af94:	e28a      	b.n	800b4ac <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800af96:	693a      	ldr	r2, [r7, #16]
 800af98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af9a:	1ad2      	subs	r2, r2, r3
 800af9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800afa0:	fb01 f303 	mul.w	r3, r1, r3
 800afa4:	1ad2      	subs	r2, r2, r3
 800afa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa8:	1ad2      	subs	r2, r2, r3
 800afaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afac:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800afb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d10f      	bne.n	800afda <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d80a      	bhi.n	800afda <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d105      	bne.n	800afd6 <f_mkfs+0x376>
 800afca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afcc:	085b      	lsrs	r3, r3, #1
 800afce:	607b      	str	r3, [r7, #4]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d144      	bne.n	800b060 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800afd6:	230e      	movs	r3, #14
 800afd8:	e268      	b.n	800b4ac <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800afda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d133      	bne.n	800b04a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800afe2:	6a3b      	ldr	r3, [r7, #32]
 800afe4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800afe8:	4293      	cmp	r3, r2
 800afea:	d91e      	bls.n	800b02a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d107      	bne.n	800b002 <f_mkfs+0x3a2>
 800aff2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	2b40      	cmp	r3, #64	; 0x40
 800aff8:	d803      	bhi.n	800b002 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800affa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800affc:	005b      	lsls	r3, r3, #1
 800affe:	607b      	str	r3, [r7, #4]
 800b000:	e033      	b.n	800b06a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800b002:	7afb      	ldrb	r3, [r7, #11]
 800b004:	f003 0302 	and.w	r3, r3, #2
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d003      	beq.n	800b014 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800b00c:	2303      	movs	r3, #3
 800b00e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b012:	e02a      	b.n	800b06a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d105      	bne.n	800b026 <f_mkfs+0x3c6>
 800b01a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b01c:	005b      	lsls	r3, r3, #1
 800b01e:	607b      	str	r3, [r7, #4]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b80      	cmp	r3, #128	; 0x80
 800b024:	d91e      	bls.n	800b064 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800b026:	230e      	movs	r3, #14
 800b028:	e240      	b.n	800b4ac <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800b02a:	6a3b      	ldr	r3, [r7, #32]
 800b02c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b030:	4293      	cmp	r3, r2
 800b032:	d80a      	bhi.n	800b04a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d105      	bne.n	800b046 <f_mkfs+0x3e6>
 800b03a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b03c:	005b      	lsls	r3, r3, #1
 800b03e:	607b      	str	r3, [r7, #4]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b80      	cmp	r3, #128	; 0x80
 800b044:	d910      	bls.n	800b068 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800b046:	230e      	movs	r3, #14
 800b048:	e230      	b.n	800b4ac <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800b04a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d10c      	bne.n	800b06c <f_mkfs+0x40c>
 800b052:	6a3b      	ldr	r3, [r7, #32]
 800b054:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b058:	4293      	cmp	r3, r2
 800b05a:	d907      	bls.n	800b06c <f_mkfs+0x40c>
 800b05c:	230e      	movs	r3, #14
 800b05e:	e225      	b.n	800b4ac <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b060:	bf00      	nop
 800b062:	e6ce      	b.n	800ae02 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b064:	bf00      	nop
 800b066:	e6cc      	b.n	800ae02 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b068:	bf00      	nop
			pau = au;
 800b06a:	e6ca      	b.n	800ae02 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800b06c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800b06e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b070:	461a      	mov	r2, r3
 800b072:	2100      	movs	r1, #0
 800b074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b076:	f7fd fca0 	bl	80089ba <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800b07a:	220b      	movs	r2, #11
 800b07c:	49bc      	ldr	r1, [pc, #752]	; (800b370 <f_mkfs+0x710>)
 800b07e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b080:	f7fd fc7a 	bl	8008978 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800b084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b086:	330b      	adds	r3, #11
 800b088:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b08a:	4611      	mov	r1, r2
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fd fc2c 	bl	80088ea <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	330d      	adds	r3, #13
 800b096:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b098:	b2d2      	uxtb	r2, r2
 800b09a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	330e      	adds	r3, #14
 800b0a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b0a2:	b292      	uxth	r2, r2
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7fd fc1f 	bl	80088ea <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ae:	3310      	adds	r3, #16
 800b0b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0b2:	b2d2      	uxtb	r2, r2
 800b0b4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	f103 0211 	add.w	r2, r3, #17
 800b0bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d002      	beq.n	800b0ca <f_mkfs+0x46a>
 800b0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	e000      	b.n	800b0cc <f_mkfs+0x46c>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	f7fd fc0b 	bl	80088ea <st_word>
		if (sz_vol < 0x10000) {
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0da:	d208      	bcs.n	800b0ee <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	3313      	adds	r3, #19
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	b292      	uxth	r2, r2
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fd fbff 	bl	80088ea <st_word>
 800b0ec:	e006      	b.n	800b0fc <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f0:	3320      	adds	r3, #32
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	4611      	mov	r1, r2
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fd fc12 	bl	8008920 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	3315      	adds	r3, #21
 800b100:	22f8      	movs	r2, #248	; 0xf8
 800b102:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800b104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b106:	3318      	adds	r3, #24
 800b108:	213f      	movs	r1, #63	; 0x3f
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fd fbed 	bl	80088ea <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800b110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b112:	331a      	adds	r3, #26
 800b114:	21ff      	movs	r1, #255	; 0xff
 800b116:	4618      	mov	r0, r3
 800b118:	f7fd fbe7 	bl	80088ea <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	331c      	adds	r3, #28
 800b120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b122:	4618      	mov	r0, r3
 800b124:	f7fd fbfc 	bl	8008920 <st_dword>
		if (fmt == FS_FAT32) {
 800b128:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b12c:	2b03      	cmp	r3, #3
 800b12e:	d131      	bne.n	800b194 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b132:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800b136:	f001 fccf 	bl	800cad8 <get_fattime>
 800b13a:	4603      	mov	r3, r0
 800b13c:	4619      	mov	r1, r3
 800b13e:	4620      	mov	r0, r4
 800b140:	f7fd fbee 	bl	8008920 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800b144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b146:	3324      	adds	r3, #36	; 0x24
 800b148:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fd fbe8 	bl	8008920 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800b150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b152:	332c      	adds	r3, #44	; 0x2c
 800b154:	2102      	movs	r1, #2
 800b156:	4618      	mov	r0, r3
 800b158:	f7fd fbe2 	bl	8008920 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	3330      	adds	r3, #48	; 0x30
 800b160:	2101      	movs	r1, #1
 800b162:	4618      	mov	r0, r3
 800b164:	f7fd fbc1 	bl	80088ea <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800b168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16a:	3332      	adds	r3, #50	; 0x32
 800b16c:	2106      	movs	r1, #6
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fd fbbb 	bl	80088ea <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800b174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b176:	3340      	adds	r3, #64	; 0x40
 800b178:	2280      	movs	r2, #128	; 0x80
 800b17a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	3342      	adds	r3, #66	; 0x42
 800b180:	2229      	movs	r2, #41	; 0x29
 800b182:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800b184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b186:	3347      	adds	r3, #71	; 0x47
 800b188:	2213      	movs	r2, #19
 800b18a:	497a      	ldr	r1, [pc, #488]	; (800b374 <f_mkfs+0x714>)
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fd fbf3 	bl	8008978 <mem_cpy>
 800b192:	e020      	b.n	800b1d6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800b194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b196:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800b19a:	f001 fc9d 	bl	800cad8 <get_fattime>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f7fd fbbc 	bl	8008920 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800b1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1aa:	3316      	adds	r3, #22
 800b1ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1ae:	b292      	uxth	r2, r2
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fd fb99 	bl	80088ea <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800b1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ba:	3324      	adds	r3, #36	; 0x24
 800b1bc:	2280      	movs	r2, #128	; 0x80
 800b1be:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c2:	3326      	adds	r3, #38	; 0x26
 800b1c4:	2229      	movs	r2, #41	; 0x29
 800b1c6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ca:	332b      	adds	r3, #43	; 0x2b
 800b1cc:	2213      	movs	r2, #19
 800b1ce:	496a      	ldr	r1, [pc, #424]	; (800b378 <f_mkfs+0x718>)
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fd fbd1 	bl	8008978 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b1dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fd fb82 	bl	80088ea <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800b1e6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b1f0:	f7fd fb02 	bl	80087f8 <disk_write>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <f_mkfs+0x59e>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e156      	b.n	800b4ac <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800b1fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b202:	2b03      	cmp	r3, #3
 800b204:	d140      	bne.n	800b288 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b208:	1d9a      	adds	r2, r3, #6
 800b20a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b20e:	2301      	movs	r3, #1
 800b210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b212:	f7fd faf1 	bl	80087f8 <disk_write>
			mem_set(buf, 0, ss);
 800b216:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b218:	461a      	mov	r2, r3
 800b21a:	2100      	movs	r1, #0
 800b21c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b21e:	f7fd fbcc 	bl	80089ba <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800b222:	4956      	ldr	r1, [pc, #344]	; (800b37c <f_mkfs+0x71c>)
 800b224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b226:	f7fd fb7b 	bl	8008920 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800b22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b230:	4953      	ldr	r1, [pc, #332]	; (800b380 <f_mkfs+0x720>)
 800b232:	4618      	mov	r0, r3
 800b234:	f7fd fb74 	bl	8008920 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800b238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	3b01      	subs	r3, #1
 800b242:	4619      	mov	r1, r3
 800b244:	4610      	mov	r0, r2
 800b246:	f7fd fb6b 	bl	8008920 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b250:	2102      	movs	r1, #2
 800b252:	4618      	mov	r0, r3
 800b254:	f7fd fb64 	bl	8008920 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b25e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b262:	4618      	mov	r0, r3
 800b264:	f7fd fb41 	bl	80088ea <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800b268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26a:	1dda      	adds	r2, r3, #7
 800b26c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b270:	2301      	movs	r3, #1
 800b272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b274:	f7fd fac0 	bl	80087f8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27a:	1c5a      	adds	r2, r3, #1
 800b27c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b280:	2301      	movs	r3, #1
 800b282:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b284:	f7fd fab8 	bl	80087f8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800b288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b28a:	2100      	movs	r1, #0
 800b28c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b28e:	f7fd fb94 	bl	80089ba <mem_set>
		sect = b_fat;		/* FAT start sector */
 800b292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b294:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800b296:	2300      	movs	r3, #0
 800b298:	64bb      	str	r3, [r7, #72]	; 0x48
 800b29a:	e04b      	b.n	800b334 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800b29c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b2a0:	2b03      	cmp	r3, #3
 800b2a2:	d113      	bne.n	800b2cc <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800b2a4:	f06f 0107 	mvn.w	r1, #7
 800b2a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2aa:	f7fd fb39 	bl	8008920 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	f04f 31ff 	mov.w	r1, #4294967295
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fd fb32 	bl	8008920 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2be:	3308      	adds	r3, #8
 800b2c0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fd fb2b 	bl	8008920 <st_dword>
 800b2ca:	e00b      	b.n	800b2e4 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800b2cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d101      	bne.n	800b2d8 <f_mkfs+0x678>
 800b2d4:	4b2b      	ldr	r3, [pc, #172]	; (800b384 <f_mkfs+0x724>)
 800b2d6:	e001      	b.n	800b2dc <f_mkfs+0x67c>
 800b2d8:	f06f 0307 	mvn.w	r3, #7
 800b2dc:	4619      	mov	r1, r3
 800b2de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2e0:	f7fd fb1e 	bl	8008920 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800b2e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2e6:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800b2e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	bf28      	it	cs
 800b2f0:	4613      	movcs	r3, r2
 800b2f2:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800b2f4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b2f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b2fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2fe:	f7fd fa7b 	bl	80087f8 <disk_write>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d001      	beq.n	800b30c <f_mkfs+0x6ac>
 800b308:	2301      	movs	r3, #1
 800b30a:	e0cf      	b.n	800b4ac <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800b30c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b30e:	461a      	mov	r2, r3
 800b310:	2100      	movs	r1, #0
 800b312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b314:	f7fd fb51 	bl	80089ba <mem_set>
				sect += n; nsect -= n;
 800b318:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b31a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b31c:	4413      	add	r3, r2
 800b31e:	667b      	str	r3, [r7, #100]	; 0x64
 800b320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800b328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1dc      	bne.n	800b2e8 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800b32e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b330:	3301      	adds	r3, #1
 800b332:	64bb      	str	r3, [r7, #72]	; 0x48
 800b334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b338:	429a      	cmp	r2, r3
 800b33a:	d3af      	bcc.n	800b29c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800b33c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b340:	2b03      	cmp	r3, #3
 800b342:	d101      	bne.n	800b348 <f_mkfs+0x6e8>
 800b344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b346:	e000      	b.n	800b34a <f_mkfs+0x6ea>
 800b348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b34a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800b34c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b350:	4293      	cmp	r3, r2
 800b352:	bf28      	it	cs
 800b354:	4613      	movcs	r3, r2
 800b356:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800b358:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b35c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b35e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b362:	f7fd fa49 	bl	80087f8 <disk_write>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00d      	beq.n	800b388 <f_mkfs+0x728>
 800b36c:	2301      	movs	r3, #1
 800b36e:	e09d      	b.n	800b4ac <f_mkfs+0x84c>
 800b370:	080128c8 	.word	0x080128c8
 800b374:	080128d4 	.word	0x080128d4
 800b378:	080128e8 	.word	0x080128e8
 800b37c:	41615252 	.word	0x41615252
 800b380:	61417272 	.word	0x61417272
 800b384:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800b388:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b38a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b38c:	4413      	add	r3, r2
 800b38e:	667b      	str	r3, [r7, #100]	; 0x64
 800b390:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800b398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1d6      	bne.n	800b34c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800b39e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d103      	bne.n	800b3ae <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800b3a6:	230c      	movs	r3, #12
 800b3a8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800b3ac:	e010      	b.n	800b3d0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3b4:	d303      	bcc.n	800b3be <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800b3b6:	2306      	movs	r3, #6
 800b3b8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800b3bc:	e008      	b.n	800b3d0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800b3be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d101      	bne.n	800b3ca <f_mkfs+0x76a>
 800b3c6:	2304      	movs	r3, #4
 800b3c8:	e000      	b.n	800b3cc <f_mkfs+0x76c>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800b3d0:	7afb      	ldrb	r3, [r7, #11]
 800b3d2:	f003 0308 	and.w	r3, r3, #8
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d15b      	bne.n	800b492 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800b3da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b3dc:	461a      	mov	r2, r3
 800b3de:	2100      	movs	r1, #0
 800b3e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3e2:	f7fd faea 	bl	80089ba <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800b3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3ec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7fd fa7a 	bl	80088ea <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b3fc:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	2200      	movs	r2, #0
 800b402:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	3301      	adds	r3, #1
 800b408:	2201      	movs	r2, #1
 800b40a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	3302      	adds	r3, #2
 800b410:	2201      	movs	r2, #1
 800b412:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	3303      	adds	r3, #3
 800b418:	2200      	movs	r2, #0
 800b41a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	3304      	adds	r3, #4
 800b420:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800b424:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	441a      	add	r2, r3
 800b42c:	4b21      	ldr	r3, [pc, #132]	; (800b4b4 <f_mkfs+0x854>)
 800b42e:	fba3 1302 	umull	r1, r3, r3, r2
 800b432:	1ad2      	subs	r2, r2, r3
 800b434:	0852      	lsrs	r2, r2, #1
 800b436:	4413      	add	r3, r2
 800b438:	0b5b      	lsrs	r3, r3, #13
 800b43a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	3305      	adds	r3, #5
 800b440:	22fe      	movs	r2, #254	; 0xfe
 800b442:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	3306      	adds	r3, #6
 800b448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b44a:	0892      	lsrs	r2, r2, #2
 800b44c:	b2d2      	uxtb	r2, r2
 800b44e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800b452:	b2d2      	uxtb	r2, r2
 800b454:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	3307      	adds	r3, #7
 800b45a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b45c:	b2d2      	uxtb	r2, r2
 800b45e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	3308      	adds	r3, #8
 800b464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b466:	4618      	mov	r0, r3
 800b468:	f7fd fa5a 	bl	8008920 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	330c      	adds	r3, #12
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	4611      	mov	r1, r2
 800b474:	4618      	mov	r0, r3
 800b476:	f7fd fa53 	bl	8008920 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800b47a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b47e:	2301      	movs	r3, #1
 800b480:	2200      	movs	r2, #0
 800b482:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b484:	f7fd f9b8 	bl	80087f8 <disk_write>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <f_mkfs+0x832>
 800b48e:	2301      	movs	r3, #1
 800b490:	e00c      	b.n	800b4ac <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800b492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b496:	2200      	movs	r2, #0
 800b498:	2100      	movs	r1, #0
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fd f9cc 	bl	8008838 <disk_ioctl>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <f_mkfs+0x84a>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e000      	b.n	800b4ac <f_mkfs+0x84c>

	return FR_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3774      	adds	r7, #116	; 0x74
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd90      	pop	{r4, r7, pc}
 800b4b4:	0515565b 	.word	0x0515565b

0800b4b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b4ce:	4b1f      	ldr	r3, [pc, #124]	; (800b54c <FATFS_LinkDriverEx+0x94>)
 800b4d0:	7a5b      	ldrb	r3, [r3, #9]
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d131      	bne.n	800b53c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b4d8:	4b1c      	ldr	r3, [pc, #112]	; (800b54c <FATFS_LinkDriverEx+0x94>)
 800b4da:	7a5b      	ldrb	r3, [r3, #9]
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	461a      	mov	r2, r3
 800b4e0:	4b1a      	ldr	r3, [pc, #104]	; (800b54c <FATFS_LinkDriverEx+0x94>)
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b4e6:	4b19      	ldr	r3, [pc, #100]	; (800b54c <FATFS_LinkDriverEx+0x94>)
 800b4e8:	7a5b      	ldrb	r3, [r3, #9]
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	4a17      	ldr	r2, [pc, #92]	; (800b54c <FATFS_LinkDriverEx+0x94>)
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b4f6:	4b15      	ldr	r3, [pc, #84]	; (800b54c <FATFS_LinkDriverEx+0x94>)
 800b4f8:	7a5b      	ldrb	r3, [r3, #9]
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	4b13      	ldr	r3, [pc, #76]	; (800b54c <FATFS_LinkDriverEx+0x94>)
 800b500:	4413      	add	r3, r2
 800b502:	79fa      	ldrb	r2, [r7, #7]
 800b504:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b506:	4b11      	ldr	r3, [pc, #68]	; (800b54c <FATFS_LinkDriverEx+0x94>)
 800b508:	7a5b      	ldrb	r3, [r3, #9]
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	1c5a      	adds	r2, r3, #1
 800b50e:	b2d1      	uxtb	r1, r2
 800b510:	4a0e      	ldr	r2, [pc, #56]	; (800b54c <FATFS_LinkDriverEx+0x94>)
 800b512:	7251      	strb	r1, [r2, #9]
 800b514:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b516:	7dbb      	ldrb	r3, [r7, #22]
 800b518:	3330      	adds	r3, #48	; 0x30
 800b51a:	b2da      	uxtb	r2, r3
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	3301      	adds	r3, #1
 800b524:	223a      	movs	r2, #58	; 0x3a
 800b526:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	3302      	adds	r3, #2
 800b52c:	222f      	movs	r2, #47	; 0x2f
 800b52e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	3303      	adds	r3, #3
 800b534:	2200      	movs	r2, #0
 800b536:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b53c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	371c      	adds	r7, #28
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	20000470 	.word	0x20000470

0800b550 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b55a:	2200      	movs	r2, #0
 800b55c:	6839      	ldr	r1, [r7, #0]
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f7ff ffaa 	bl	800b4b8 <FATFS_LinkDriverEx>
 800b564:	4603      	mov	r3, r0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3708      	adds	r7, #8
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
	...

0800b570 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	460b      	mov	r3, r1
 800b57a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800b57c:	2300      	movs	r3, #0
 800b57e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800b580:	2301      	movs	r3, #1
 800b582:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800b584:	4b15      	ldr	r3, [pc, #84]	; (800b5dc <FATFS_UnLinkDriverEx+0x6c>)
 800b586:	7a5b      	ldrb	r3, [r3, #9]
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d01e      	beq.n	800b5cc <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	3b30      	subs	r3, #48	; 0x30
 800b594:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	4a10      	ldr	r2, [pc, #64]	; (800b5dc <FATFS_UnLinkDriverEx+0x6c>)
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d013      	beq.n	800b5cc <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800b5a4:	7bbb      	ldrb	r3, [r7, #14]
 800b5a6:	4a0d      	ldr	r2, [pc, #52]	; (800b5dc <FATFS_UnLinkDriverEx+0x6c>)
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4413      	add	r3, r2
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800b5b0:	7bbb      	ldrb	r3, [r7, #14]
 800b5b2:	4a0a      	ldr	r2, [pc, #40]	; (800b5dc <FATFS_UnLinkDriverEx+0x6c>)
 800b5b4:	4413      	add	r3, r2
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800b5ba:	4b08      	ldr	r3, [pc, #32]	; (800b5dc <FATFS_UnLinkDriverEx+0x6c>)
 800b5bc:	7a5b      	ldrb	r3, [r3, #9]
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	b2da      	uxtb	r2, r3
 800b5c4:	4b05      	ldr	r3, [pc, #20]	; (800b5dc <FATFS_UnLinkDriverEx+0x6c>)
 800b5c6:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3714      	adds	r7, #20
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	20000470 	.word	0x20000470

0800b5e0 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7ff ffc0 	bl	800b570 <FATFS_UnLinkDriverEx>
 800b5f0:	4603      	mov	r3, r0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b084      	sub	sp, #16
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	460b      	mov	r3, r1
 800b604:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	7c1b      	ldrb	r3, [r3, #16]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10e      	bne.n	800b630 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800b612:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b616:	2202      	movs	r2, #2
 800b618:	2181      	movs	r1, #129	; 0x81
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f003 fe22 	bl	800f264 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800b620:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b624:	2202      	movs	r2, #2
 800b626:	2101      	movs	r1, #1
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f003 fe1b 	bl	800f264 <USBD_LL_OpenEP>
 800b62e:	e00b      	b.n	800b648 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800b630:	2340      	movs	r3, #64	; 0x40
 800b632:	2202      	movs	r2, #2
 800b634:	2181      	movs	r1, #129	; 0x81
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f003 fe14 	bl	800f264 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800b63c:	2340      	movs	r3, #64	; 0x40
 800b63e:	2202      	movs	r2, #2
 800b640:	2101      	movs	r1, #1
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f003 fe0e 	bl	800f264 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800b648:	2308      	movs	r3, #8
 800b64a:	2203      	movs	r2, #3
 800b64c:	2182      	movs	r1, #130	; 0x82
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f003 fe08 	bl	800f264 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b654:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b658:	f004 f98a 	bl	800f970 <malloc>
 800b65c:	4603      	mov	r3, r0
 800b65e:	461a      	mov	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d102      	bne.n	800b676 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 800b670:	2301      	movs	r3, #1
 800b672:	73fb      	strb	r3, [r7, #15]
 800b674:	e026      	b.n	800b6c4 <USBD_CDC_Init+0xca>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b67c:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	2200      	movs	r2, #0
 800b694:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	7c1b      	ldrb	r3, [r3, #16]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d109      	bne.n	800b6b4 <USBD_CDC_Init+0xba>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f003 ff55 	bl	800f55c <USBD_LL_PrepareReceive>
 800b6b2:	e007      	b.n	800b6c4 <USBD_CDC_Init+0xca>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6ba:	2340      	movs	r3, #64	; 0x40
 800b6bc:	2101      	movs	r1, #1
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f003 ff4c 	bl	800f55c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b084      	sub	sp, #16
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800b6de:	2181      	movs	r1, #129	; 0x81
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f003 fdfd 	bl	800f2e0 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800b6e6:	2101      	movs	r1, #1
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f003 fdf9 	bl	800f2e0 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800b6ee:	2182      	movs	r1, #130	; 0x82
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f003 fdf5 	bl	800f2e0 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00e      	beq.n	800b71e <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b710:	4618      	mov	r0, r3
 800b712:	f004 f935 	bl	800f980 <free>
    pdev->pClassData = NULL;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800b71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b738:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b742:	2b00      	cmp	r3, #0
 800b744:	d03a      	beq.n	800b7bc <USBD_CDC_Setup+0x94>
 800b746:	2b20      	cmp	r3, #32
 800b748:	d000      	beq.n	800b74c <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800b74a:	e043      	b.n	800b7d4 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	88db      	ldrh	r3, [r3, #6]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d029      	beq.n	800b7a8 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	b25b      	sxtb	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	da11      	bge.n	800b782 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b76a:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	88d2      	ldrh	r2, [r2, #6]
 800b770:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 800b772:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	88db      	ldrh	r3, [r3, #6]
 800b778:	461a      	mov	r2, r3
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f001 f848 	bl	800c810 <USBD_CtlSendData>
    break;
 800b780:	e029      	b.n	800b7d6 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	785a      	ldrb	r2, [r3, #1]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	88db      	ldrh	r3, [r3, #6]
 800b790:	b2da      	uxtb	r2, r3
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 800b798:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	88db      	ldrh	r3, [r3, #6]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f001 f863 	bl	800c86c <USBD_CtlPrepareRx>
    break;
 800b7a6:	e016      	b.n	800b7d6 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	683a      	ldr	r2, [r7, #0]
 800b7b2:	7850      	ldrb	r0, [r2, #1]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	6839      	ldr	r1, [r7, #0]
 800b7b8:	4798      	blx	r3
    break;
 800b7ba:	e00c      	b.n	800b7d6 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	785b      	ldrb	r3, [r3, #1]
 800b7c0:	2b0a      	cmp	r3, #10
 800b7c2:	d001      	beq.n	800b7c8 <USBD_CDC_Setup+0xa0>
 800b7c4:	2b0b      	cmp	r3, #11
      break;
 800b7c6:	e005      	b.n	800b7d4 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	4905      	ldr	r1, [pc, #20]	; (800b7e0 <USBD_CDC_Setup+0xb8>)
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f001 f81f 	bl	800c810 <USBD_CtlSendData>
      break;
 800b7d2:	bf00      	nop
    break;
 800b7d4:	bf00      	nop
  }
  return USBD_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	2000047c 	.word	0x2000047c

0800b7e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b7f6:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d005      	beq.n	800b80e <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2200      	movs	r2, #0
 800b806:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800b80a:	2300      	movs	r3, #0
 800b80c:	e000      	b.n	800b810 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800b80e:	2302      	movs	r3, #2
  }
}
 800b810:	4618      	mov	r0, r3
 800b812:	3714      	adds	r7, #20
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b82e:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b830:	78fb      	ldrb	r3, [r7, #3]
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f003 fecb 	bl	800f5d0 <USBD_LL_GetRxDataSize>
 800b83a:	4602      	mov	r2, r0
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00d      	beq.n	800b868 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b860:	4611      	mov	r1, r2
 800b862:	4798      	blx	r3

    return USBD_OK;
 800b864:	2300      	movs	r3, #0
 800b866:	e000      	b.n	800b86a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b868:	2302      	movs	r3, #2
  }
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800b872:	b580      	push	{r7, lr}
 800b874:	b084      	sub	sp, #16
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b880:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d015      	beq.n	800b8b8 <USBD_CDC_EP0_RxReady+0x46>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b892:	2bff      	cmp	r3, #255	; 0xff
 800b894:	d010      	beq.n	800b8b8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b8a4:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b8ac:	b292      	uxth	r2, r2
 800b8ae:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	22ff      	movs	r2, #255	; 0xff
 800b8b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
	...

0800b8c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2243      	movs	r2, #67	; 0x43
 800b8d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b8d2:	4b03      	ldr	r3, [pc, #12]	; (800b8e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	2000009c 	.word	0x2000009c

0800b8e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2243      	movs	r2, #67	; 0x43
 800b8f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b8f2:	4b03      	ldr	r3, [pc, #12]	; (800b900 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	20000058 	.word	0x20000058

0800b904 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2243      	movs	r2, #67	; 0x43
 800b910:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b912:	4b03      	ldr	r3, [pc, #12]	; (800b920 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b914:	4618      	mov	r0, r3
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	200000e0 	.word	0x200000e0

0800b924 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	220a      	movs	r2, #10
 800b930:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b932:	4b03      	ldr	r3, [pc, #12]	; (800b940 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b934:	4618      	mov	r0, r3
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	20000014 	.word	0x20000014

0800b944 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 800b944:	b480      	push	{r7}
 800b946:	b085      	sub	sp, #20
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b94e:	2302      	movs	r3, #2
 800b950:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d005      	beq.n	800b964 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	683a      	ldr	r2, [r7, #0]
 800b95c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 800b960:	2300      	movs	r3, #0
 800b962:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800b964:	7bfb      	ldrb	r3, [r7, #15]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr

0800b972 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800b972:	b480      	push	{r7}
 800b974:	b087      	sub	sp, #28
 800b976:	af00      	add	r7, sp, #0
 800b978:	60f8      	str	r0, [r7, #12]
 800b97a:	60b9      	str	r1, [r7, #8]
 800b97c:	4613      	mov	r3, r2
 800b97e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b986:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800b990:	88fa      	ldrh	r2, [r7, #6]
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	371c      	adds	r7, #28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr

0800b9a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b085      	sub	sp, #20
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b9b6:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	683a      	ldr	r2, [r7, #0]
 800b9bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b084      	sub	sp, #16
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b9dc:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d017      	beq.n	800ba18 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	7c1b      	ldrb	r3, [r3, #16]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d109      	bne.n	800ba04 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f003 fdad 	bl	800f55c <USBD_LL_PrepareReceive>
 800ba02:	e007      	b.n	800ba14 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba0a:	2340      	movs	r3, #64	; 0x40
 800ba0c:	2101      	movs	r1, #1
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f003 fda4 	bl	800f55c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	e000      	b.n	800ba1a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ba18:	2302      	movs	r3, #2
  }
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	60f8      	str	r0, [r7, #12]
 800ba2a:	60b9      	str	r1, [r7, #8]
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d101      	bne.n	800ba3a <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800ba36:	2302      	movs	r3, #2
 800ba38:	e01a      	b.n	800ba70 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d003      	beq.n	800ba4c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d003      	beq.n	800ba5a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	79fa      	ldrb	r2, [r7, #7]
 800ba66:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f003 fb71 	bl	800f150 <USBD_LL_Init>
  
  return USBD_OK; 
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800ba82:	2300      	movs	r3, #0
 800ba84:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d006      	beq.n	800ba9a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	73fb      	strb	r3, [r7, #15]
 800ba98:	e001      	b.n	800ba9e <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800ba9a:	2302      	movs	r3, #2
 800ba9c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f003 fba3 	bl	800f200 <USBD_LL_Start>
  
  return USBD_OK;  
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	370c      	adds	r7, #12
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b084      	sub	sp, #16
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	460b      	mov	r3, r1
 800bae4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800bae6:	2302      	movs	r3, #2
 800bae8:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00c      	beq.n	800bb0e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	78fa      	ldrb	r2, [r7, #3]
 800bafe:	4611      	mov	r1, r2
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	4798      	blx	r3
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	460b      	mov	r3, r1
 800bb22:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	78fa      	ldrb	r2, [r7, #3]
 800bb2e:	4611      	mov	r1, r2
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	4798      	blx	r3
  return USBD_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b082      	sub	sp, #8
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f000 fdb4 	bl	800c6be <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800bb64:	461a      	mov	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800bb72:	f003 031f 	and.w	r3, r3, #31
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d00b      	beq.n	800bb92 <USBD_LL_SetupStage+0x54>
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d011      	beq.n	800bba2 <USBD_LL_SetupStage+0x64>
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d117      	bne.n	800bbb2 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f9c6 	bl	800bf1c <USBD_StdDevReq>
    break;
 800bb90:	e01a      	b.n	800bbc8 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bb98:	4619      	mov	r1, r3
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 fa0e 	bl	800bfbc <USBD_StdItfReq>
    break;
 800bba0:	e012      	b.n	800bbc8 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fa39 	bl	800c022 <USBD_StdEPReq>
    break;
 800bbb0:	e00a      	b.n	800bbc8 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800bbb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f003 fbc3 	bl	800f34c <USBD_LL_StallEP>
    break;
 800bbc6:	bf00      	nop
  }  
  return USBD_OK;  
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b086      	sub	sp, #24
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	460b      	mov	r3, r1
 800bbdc:	607a      	str	r2, [r7, #4]
 800bbde:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800bbe0:	7afb      	ldrb	r3, [r7, #11]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d138      	bne.n	800bc58 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800bbec:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800bbf4:	2b03      	cmp	r3, #3
 800bbf6:	d142      	bne.n	800bc7e <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	689a      	ldr	r2, [r3, #8]
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d914      	bls.n	800bc2e <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	689a      	ldr	r2, [r3, #8]
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	1ad2      	subs	r2, r2, r3
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	68da      	ldr	r2, [r3, #12]
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	bf28      	it	cs
 800bc1e:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	461a      	mov	r2, r3
 800bc24:	6879      	ldr	r1, [r7, #4]
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f000 fe3e 	bl	800c8a8 <USBD_CtlContinueRx>
 800bc2c:	e027      	b.n	800bc7e <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00a      	beq.n	800bc50 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800bc40:	2b03      	cmp	r3, #3
 800bc42:	d105      	bne.n	800bc50 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f000 fe3b 	bl	800c8cc <USBD_CtlSendStatus>
 800bc56:	e012      	b.n	800bc7e <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00c      	beq.n	800bc7e <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 800bc6a:	2b03      	cmp	r3, #3
 800bc6c:	d107      	bne.n	800bc7e <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	7afa      	ldrb	r2, [r7, #11]
 800bc78:	4611      	mov	r1, r2
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	4798      	blx	r3
  }  
  return USBD_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3718      	adds	r7, #24
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	460b      	mov	r3, r1
 800bc92:	607a      	str	r2, [r7, #4]
 800bc94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800bc96:	7afb      	ldrb	r3, [r7, #11]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d16c      	bne.n	800bd76 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	3314      	adds	r3, #20
 800bca0:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	d157      	bne.n	800bd5c <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	689a      	ldr	r2, [r3, #8]
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d915      	bls.n	800bce4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	689a      	ldr	r2, [r3, #8]
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	1ad2      	subs	r2, r2, r3
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	461a      	mov	r2, r3
 800bcce:	6879      	ldr	r1, [r7, #4]
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f000 fdb9 	bl	800c848 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	2200      	movs	r2, #0
 800bcda:	2100      	movs	r1, #0
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f003 fc3d 	bl	800f55c <USBD_LL_PrepareReceive>
 800bce2:	e03b      	b.n	800bd5c <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	697a      	ldr	r2, [r7, #20]
 800bcea:	68d2      	ldr	r2, [r2, #12]
 800bcec:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcf0:	fb02 f201 	mul.w	r2, r2, r1
 800bcf4:	1a9b      	subs	r3, r3, r2
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d11c      	bne.n	800bd34 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d316      	bcc.n	800bd34 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	685a      	ldr	r2, [r3, #4]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d20f      	bcs.n	800bd34 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800bd14:	2200      	movs	r2, #0
 800bd16:	2100      	movs	r1, #0
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f000 fd95 	bl	800c848 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800bd26:	2300      	movs	r3, #0
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f003 fc15 	bl	800f55c <USBD_LL_PrepareReceive>
 800bd32:	e013      	b.n	800bd5c <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00a      	beq.n	800bd56 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d105      	bne.n	800bd56 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800bd56:	68f8      	ldr	r0, [r7, #12]
 800bd58:	f000 fdcb 	bl	800c8f2 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d11a      	bne.n	800bd9c <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f7ff feac 	bl	800bac4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800bd74:	e012      	b.n	800bd9c <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00c      	beq.n	800bd9c <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800bd88:	2b03      	cmp	r3, #3
 800bd8a:	d107      	bne.n	800bd9c <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd92:	695b      	ldr	r3, [r3, #20]
 800bd94:	7afa      	ldrb	r2, [r7, #11]
 800bd96:	4611      	mov	r1, r2
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	4798      	blx	r3
  }  
  return USBD_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b082      	sub	sp, #8
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800bdae:	2340      	movs	r3, #64	; 0x40
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f003 fa55 	bl	800f264 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2240      	movs	r2, #64	; 0x40
 800bdbe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800bdc2:	2340      	movs	r3, #64	; 0x40
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	2180      	movs	r1, #128	; 0x80
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f003 fa4b 	bl	800f264 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2240      	movs	r2, #64	; 0x40
 800bdd2:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d009      	beq.n	800bdfa <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	6852      	ldr	r2, [r2, #4]
 800bdf2:	b2d2      	uxtb	r2, r2
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	4798      	blx	r3
 
  
  return USBD_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	460b      	mov	r3, r1
 800be0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	78fa      	ldrb	r2, [r7, #3]
 800be14:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2204      	movs	r2, #4
 800be3c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	370c      	adds	r7, #12
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800be4e:	b480      	push	{r7}
 800be50:	b083      	sub	sp, #12
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800be7e:	2b03      	cmp	r3, #3
 800be80:	d10b      	bne.n	800be9a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be88:	69db      	ldr	r3, [r3, #28]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d005      	beq.n	800be9a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be94:	69db      	ldr	r3, [r3, #28]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	460b      	mov	r3, r1
 800beae:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800bebe:	b480      	push	{r7}
 800bec0:	b083      	sub	sp, #12
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	460b      	mov	r3, r1
 800bec8:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	370c      	adds	r7, #12
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b082      	sub	sp, #8
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	6852      	ldr	r2, [r2, #4]
 800bf0a:	b2d2      	uxtb	r2, r2
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	4798      	blx	r3
   
  return USBD_OK;
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800bf26:	2300      	movs	r3, #0
 800bf28:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	785b      	ldrb	r3, [r3, #1]
 800bf2e:	2b09      	cmp	r3, #9
 800bf30:	d839      	bhi.n	800bfa6 <USBD_StdDevReq+0x8a>
 800bf32:	a201      	add	r2, pc, #4	; (adr r2, 800bf38 <USBD_StdDevReq+0x1c>)
 800bf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf38:	0800bf89 	.word	0x0800bf89
 800bf3c:	0800bf9d 	.word	0x0800bf9d
 800bf40:	0800bfa7 	.word	0x0800bfa7
 800bf44:	0800bf93 	.word	0x0800bf93
 800bf48:	0800bfa7 	.word	0x0800bfa7
 800bf4c:	0800bf6b 	.word	0x0800bf6b
 800bf50:	0800bf61 	.word	0x0800bf61
 800bf54:	0800bfa7 	.word	0x0800bfa7
 800bf58:	0800bf7f 	.word	0x0800bf7f
 800bf5c:	0800bf75 	.word	0x0800bf75
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 f936 	bl	800c1d4 <USBD_GetDescriptor>
    break;
 800bf68:	e022      	b.n	800bfb0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800bf6a:	6839      	ldr	r1, [r7, #0]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fa41 	bl	800c3f4 <USBD_SetAddress>
    break;
 800bf72:	e01d      	b.n	800bfb0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800bf74:	6839      	ldr	r1, [r7, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fa7a 	bl	800c470 <USBD_SetConfig>
    break;
 800bf7c:	e018      	b.n	800bfb0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fafd 	bl	800c580 <USBD_GetConfig>
    break;
 800bf86:	e013      	b.n	800bfb0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fb2a 	bl	800c5e4 <USBD_GetStatus>
    break;
 800bf90:	e00e      	b.n	800bfb0 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800bf92:	6839      	ldr	r1, [r7, #0]
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fb4f 	bl	800c638 <USBD_SetFeature>
    break;
 800bf9a:	e009      	b.n	800bfb0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800bf9c:	6839      	ldr	r1, [r7, #0]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 fb65 	bl	800c66e <USBD_ClrFeature>
    break;
 800bfa4:	e004      	b.n	800bfb0 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fbc5 	bl	800c738 <USBD_CtlError>
    break;
 800bfae:	bf00      	nop
  }
  
  return ret;
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop

0800bfbc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800bfd0:	2b03      	cmp	r3, #3
 800bfd2:	d11b      	bne.n	800c00c <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	889b      	ldrh	r3, [r3, #4]
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d811      	bhi.n	800c002 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	6839      	ldr	r1, [r7, #0]
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	88db      	ldrh	r3, [r3, #6]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d110      	bne.n	800c016 <USBD_StdItfReq+0x5a>
 800bff4:	7bfb      	ldrb	r3, [r7, #15]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10d      	bne.n	800c016 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 fc66 	bl	800c8cc <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800c000:	e009      	b.n	800c016 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fb97 	bl	800c738 <USBD_CtlError>
    break;
 800c00a:	e004      	b.n	800c016 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fb92 	bl	800c738 <USBD_CtlError>
    break;
 800c014:	e000      	b.n	800c018 <USBD_StdItfReq+0x5c>
    break;
 800c016:	bf00      	nop
  }
  return USBD_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c022:	b580      	push	{r7, lr}
 800c024:	b084      	sub	sp, #16
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
 800c02a:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800c02c:	2300      	movs	r3, #0
 800c02e:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	889b      	ldrh	r3, [r3, #4]
 800c034:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c03e:	2b20      	cmp	r3, #32
 800c040:	d108      	bne.n	800c054 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	4798      	blx	r3
    
    return USBD_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	e0ba      	b.n	800c1ca <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	785b      	ldrb	r3, [r3, #1]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d039      	beq.n	800c0d0 <USBD_StdEPReq+0xae>
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d002      	beq.n	800c066 <USBD_StdEPReq+0x44>
 800c060:	2b00      	cmp	r3, #0
 800c062:	d06b      	beq.n	800c13c <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 800c064:	e0b0      	b.n	800c1c8 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	d002      	beq.n	800c076 <USBD_StdEPReq+0x54>
 800c070:	2b03      	cmp	r3, #3
 800c072:	d00c      	beq.n	800c08e <USBD_StdEPReq+0x6c>
 800c074:	e025      	b.n	800c0c2 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800c076:	7bbb      	ldrb	r3, [r7, #14]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d027      	beq.n	800c0cc <USBD_StdEPReq+0xaa>
 800c07c:	7bbb      	ldrb	r3, [r7, #14]
 800c07e:	2b80      	cmp	r3, #128	; 0x80
 800c080:	d024      	beq.n	800c0cc <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800c082:	7bbb      	ldrb	r3, [r7, #14]
 800c084:	4619      	mov	r1, r3
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f003 f960 	bl	800f34c <USBD_LL_StallEP>
      break;	
 800c08c:	e01e      	b.n	800c0cc <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	885b      	ldrh	r3, [r3, #2]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10a      	bne.n	800c0ac <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800c096:	7bbb      	ldrb	r3, [r7, #14]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d007      	beq.n	800c0ac <USBD_StdEPReq+0x8a>
 800c09c:	7bbb      	ldrb	r3, [r7, #14]
 800c09e:	2b80      	cmp	r3, #128	; 0x80
 800c0a0:	d004      	beq.n	800c0ac <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800c0a2:	7bbb      	ldrb	r3, [r7, #14]
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f003 f950 	bl	800f34c <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 fc06 	bl	800c8cc <USBD_CtlSendStatus>
      break;
 800c0c0:	e005      	b.n	800c0ce <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 800c0c2:	6839      	ldr	r1, [r7, #0]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fb37 	bl	800c738 <USBD_CtlError>
      break;    
 800c0ca:	e000      	b.n	800c0ce <USBD_StdEPReq+0xac>
      break;	
 800c0cc:	bf00      	nop
    break;
 800c0ce:	e07b      	b.n	800c1c8 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d002      	beq.n	800c0e0 <USBD_StdEPReq+0xbe>
 800c0da:	2b03      	cmp	r3, #3
 800c0dc:	d00c      	beq.n	800c0f8 <USBD_StdEPReq+0xd6>
 800c0de:	e024      	b.n	800c12a <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d026      	beq.n	800c134 <USBD_StdEPReq+0x112>
 800c0e6:	7bbb      	ldrb	r3, [r7, #14]
 800c0e8:	2b80      	cmp	r3, #128	; 0x80
 800c0ea:	d023      	beq.n	800c134 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 800c0ec:	7bbb      	ldrb	r3, [r7, #14]
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f003 f92b 	bl	800f34c <USBD_LL_StallEP>
      break;	
 800c0f6:	e01d      	b.n	800c134 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	885b      	ldrh	r3, [r3, #2]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d11b      	bne.n	800c138 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 800c100:	7bbb      	ldrb	r3, [r7, #14]
 800c102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00b      	beq.n	800c122 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800c10a:	7bbb      	ldrb	r3, [r7, #14]
 800c10c:	4619      	mov	r1, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f003 f952 	bl	800f3b8 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	6839      	ldr	r1, [r7, #0]
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 fbd2 	bl	800c8cc <USBD_CtlSendStatus>
      break;
 800c128:	e006      	b.n	800c138 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 800c12a:	6839      	ldr	r1, [r7, #0]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fb03 	bl	800c738 <USBD_CtlError>
      break;    
 800c132:	e002      	b.n	800c13a <USBD_StdEPReq+0x118>
      break;	
 800c134:	bf00      	nop
 800c136:	e047      	b.n	800c1c8 <USBD_StdEPReq+0x1a6>
      break;
 800c138:	bf00      	nop
    break;
 800c13a:	e045      	b.n	800c1c8 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c142:	2b02      	cmp	r3, #2
 800c144:	d002      	beq.n	800c14c <USBD_StdEPReq+0x12a>
 800c146:	2b03      	cmp	r3, #3
 800c148:	d00b      	beq.n	800c162 <USBD_StdEPReq+0x140>
 800c14a:	e036      	b.n	800c1ba <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 800c14c:	7bbb      	ldrb	r3, [r7, #14]
 800c14e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c152:	2b00      	cmp	r3, #0
 800c154:	d036      	beq.n	800c1c4 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 800c156:	7bbb      	ldrb	r3, [r7, #14]
 800c158:	4619      	mov	r1, r3
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f003 f8f6 	bl	800f34c <USBD_LL_StallEP>
      break;	
 800c160:	e030      	b.n	800c1c4 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800c162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c166:	2b00      	cmp	r3, #0
 800c168:	da08      	bge.n	800c17c <USBD_StdEPReq+0x15a>
 800c16a:	7bbb      	ldrb	r3, [r7, #14]
 800c16c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c170:	3301      	adds	r3, #1
 800c172:	011b      	lsls	r3, r3, #4
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	4413      	add	r3, r2
 800c178:	3304      	adds	r3, #4
 800c17a:	e007      	b.n	800c18c <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800c17c:	7bbb      	ldrb	r3, [r7, #14]
 800c17e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800c182:	3310      	adds	r3, #16
 800c184:	011b      	lsls	r3, r3, #4
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	4413      	add	r3, r2
 800c18a:	3304      	adds	r3, #4
 800c18c:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800c18e:	7bbb      	ldrb	r3, [r7, #14]
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f003 f946 	bl	800f424 <USBD_LL_IsStallEP>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	e002      	b.n	800c1ac <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 800c1ac:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fb2c 	bl	800c810 <USBD_CtlSendData>
      break;
 800c1b8:	e005      	b.n	800c1c6 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fabb 	bl	800c738 <USBD_CtlError>
      break;
 800c1c2:	e000      	b.n	800c1c6 <USBD_StdEPReq+0x1a4>
      break;	
 800c1c4:	bf00      	nop
    break;
 800c1c6:	bf00      	nop
  }
  return ret;
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
	...

0800c1d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	885b      	ldrh	r3, [r3, #2]
 800c1e2:	0a1b      	lsrs	r3, r3, #8
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	2b0e      	cmp	r3, #14
 800c1ea:	f200 80e5 	bhi.w	800c3b8 <USBD_GetDescriptor+0x1e4>
 800c1ee:	a201      	add	r2, pc, #4	; (adr r2, 800c1f4 <USBD_GetDescriptor+0x20>)
 800c1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f4:	0800c249 	.word	0x0800c249
 800c1f8:	0800c261 	.word	0x0800c261
 800c1fc:	0800c2a1 	.word	0x0800c2a1
 800c200:	0800c3b9 	.word	0x0800c3b9
 800c204:	0800c3b9 	.word	0x0800c3b9
 800c208:	0800c365 	.word	0x0800c365
 800c20c:	0800c38b 	.word	0x0800c38b
 800c210:	0800c3b9 	.word	0x0800c3b9
 800c214:	0800c3b9 	.word	0x0800c3b9
 800c218:	0800c3b9 	.word	0x0800c3b9
 800c21c:	0800c3b9 	.word	0x0800c3b9
 800c220:	0800c3b9 	.word	0x0800c3b9
 800c224:	0800c3b9 	.word	0x0800c3b9
 800c228:	0800c3b9 	.word	0x0800c3b9
 800c22c:	0800c231 	.word	0x0800c231
  { 
#if (USBD_LPM_ENABLED == 1)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c236:	69db      	ldr	r3, [r3, #28]
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	7c12      	ldrb	r2, [r2, #16]
 800c23c:	f107 010a 	add.w	r1, r7, #10
 800c240:	4610      	mov	r0, r2
 800c242:	4798      	blx	r3
 800c244:	60f8      	str	r0, [r7, #12]
    break;
 800c246:	e0bc      	b.n	800c3c2 <USBD_GetDescriptor+0x1ee>
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	7c12      	ldrb	r2, [r2, #16]
 800c254:	f107 010a 	add.w	r1, r7, #10
 800c258:	4610      	mov	r0, r2
 800c25a:	4798      	blx	r3
 800c25c:	60f8      	str	r0, [r7, #12]
    break;
 800c25e:	e0b0      	b.n	800c3c2 <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	7c1b      	ldrb	r3, [r3, #16]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d10d      	bne.n	800c284 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c270:	f107 020a 	add.w	r2, r7, #10
 800c274:	4610      	mov	r0, r2
 800c276:	4798      	blx	r3
 800c278:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	3301      	adds	r3, #1
 800c27e:	2202      	movs	r2, #2
 800c280:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c282:	e09e      	b.n	800c3c2 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28c:	f107 020a 	add.w	r2, r7, #10
 800c290:	4610      	mov	r0, r2
 800c292:	4798      	blx	r3
 800c294:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	3301      	adds	r3, #1
 800c29a:	2202      	movs	r2, #2
 800c29c:	701a      	strb	r2, [r3, #0]
    break;
 800c29e:	e090      	b.n	800c3c2 <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	885b      	ldrh	r3, [r3, #2]
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b05      	cmp	r3, #5
 800c2a8:	d856      	bhi.n	800c358 <USBD_GetDescriptor+0x184>
 800c2aa:	a201      	add	r2, pc, #4	; (adr r2, 800c2b0 <USBD_GetDescriptor+0xdc>)
 800c2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b0:	0800c2c9 	.word	0x0800c2c9
 800c2b4:	0800c2e1 	.word	0x0800c2e1
 800c2b8:	0800c2f9 	.word	0x0800c2f9
 800c2bc:	0800c311 	.word	0x0800c311
 800c2c0:	0800c329 	.word	0x0800c329
 800c2c4:	0800c341 	.word	0x0800c341
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	7c12      	ldrb	r2, [r2, #16]
 800c2d4:	f107 010a 	add.w	r1, r7, #10
 800c2d8:	4610      	mov	r0, r2
 800c2da:	4798      	blx	r3
 800c2dc:	60f8      	str	r0, [r7, #12]
      break;
 800c2de:	e040      	b.n	800c362 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	7c12      	ldrb	r2, [r2, #16]
 800c2ec:	f107 010a 	add.w	r1, r7, #10
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	4798      	blx	r3
 800c2f4:	60f8      	str	r0, [r7, #12]
      break;
 800c2f6:	e034      	b.n	800c362 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	7c12      	ldrb	r2, [r2, #16]
 800c304:	f107 010a 	add.w	r1, r7, #10
 800c308:	4610      	mov	r0, r2
 800c30a:	4798      	blx	r3
 800c30c:	60f8      	str	r0, [r7, #12]
      break;
 800c30e:	e028      	b.n	800c362 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	7c12      	ldrb	r2, [r2, #16]
 800c31c:	f107 010a 	add.w	r1, r7, #10
 800c320:	4610      	mov	r0, r2
 800c322:	4798      	blx	r3
 800c324:	60f8      	str	r0, [r7, #12]
      break;
 800c326:	e01c      	b.n	800c362 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	7c12      	ldrb	r2, [r2, #16]
 800c334:	f107 010a 	add.w	r1, r7, #10
 800c338:	4610      	mov	r0, r2
 800c33a:	4798      	blx	r3
 800c33c:	60f8      	str	r0, [r7, #12]
      break;
 800c33e:	e010      	b.n	800c362 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c346:	699b      	ldr	r3, [r3, #24]
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	7c12      	ldrb	r2, [r2, #16]
 800c34c:	f107 010a 	add.w	r1, r7, #10
 800c350:	4610      	mov	r0, r2
 800c352:	4798      	blx	r3
 800c354:	60f8      	str	r0, [r7, #12]
      break;
 800c356:	e004      	b.n	800c362 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800c358:	6839      	ldr	r1, [r7, #0]
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 f9ec 	bl	800c738 <USBD_CtlError>
      return;
 800c360:	e044      	b.n	800c3ec <USBD_GetDescriptor+0x218>
#endif   
    }
    break;
 800c362:	e02e      	b.n	800c3c2 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	7c1b      	ldrb	r3, [r3, #16]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d109      	bne.n	800c380 <USBD_GetDescriptor+0x1ac>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c374:	f107 020a 	add.w	r2, r7, #10
 800c378:	4610      	mov	r0, r2
 800c37a:	4798      	blx	r3
 800c37c:	60f8      	str	r0, [r7, #12]
      break;
 800c37e:	e020      	b.n	800c3c2 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c380:	6839      	ldr	r1, [r7, #0]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 f9d8 	bl	800c738 <USBD_CtlError>
      return;
 800c388:	e030      	b.n	800c3ec <USBD_GetDescriptor+0x218>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	7c1b      	ldrb	r3, [r3, #16]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10d      	bne.n	800c3ae <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c39a:	f107 020a 	add.w	r2, r7, #10
 800c39e:	4610      	mov	r0, r2
 800c3a0:	4798      	blx	r3
 800c3a2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	2207      	movs	r2, #7
 800c3aa:	701a      	strb	r2, [r3, #0]
      break; 
 800c3ac:	e009      	b.n	800c3c2 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c3ae:	6839      	ldr	r1, [r7, #0]
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 f9c1 	bl	800c738 <USBD_CtlError>
      return;
 800c3b6:	e019      	b.n	800c3ec <USBD_GetDescriptor+0x218>
    }

  default: 
     USBD_CtlError(pdev , req);
 800c3b8:	6839      	ldr	r1, [r7, #0]
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 f9bc 	bl	800c738 <USBD_CtlError>
    return;
 800c3c0:	e014      	b.n	800c3ec <USBD_GetDescriptor+0x218>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800c3c2:	897b      	ldrh	r3, [r7, #10]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d011      	beq.n	800c3ec <USBD_GetDescriptor+0x218>
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	88db      	ldrh	r3, [r3, #6]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00d      	beq.n	800c3ec <USBD_GetDescriptor+0x218>
  {
    
    len = MIN(len , req->wLength);
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	88da      	ldrh	r2, [r3, #6]
 800c3d4:	897b      	ldrh	r3, [r7, #10]
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	bf28      	it	cs
 800c3da:	4613      	movcs	r3, r2
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800c3e0:	897b      	ldrh	r3, [r7, #10]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	68f9      	ldr	r1, [r7, #12]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fa12 	bl	800c810 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop

0800c3f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	889b      	ldrh	r3, [r3, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d12c      	bne.n	800c460 <USBD_SetAddress+0x6c>
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	88db      	ldrh	r3, [r3, #6]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d128      	bne.n	800c460 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	885b      	ldrh	r3, [r3, #2]
 800c412:	b2db      	uxtb	r3, r3
 800c414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c418:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c420:	2b03      	cmp	r3, #3
 800c422:	d104      	bne.n	800c42e <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f986 	bl	800c738 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800c42c:	e01c      	b.n	800c468 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	7bfa      	ldrb	r2, [r7, #15]
 800c432:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800c436:	7bfb      	ldrb	r3, [r7, #15]
 800c438:	4619      	mov	r1, r3
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f003 f81e 	bl	800f47c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 fa43 	bl	800c8cc <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800c446:	7bfb      	ldrb	r3, [r7, #15]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d004      	beq.n	800c456 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2202      	movs	r2, #2
 800c450:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800c454:	e008      	b.n	800c468 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800c45e:	e003      	b.n	800c468 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800c460:	6839      	ldr	r1, [r7, #0]
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 f968 	bl	800c738 <USBD_CtlError>
  } 
}
 800c468:	bf00      	nop
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	885b      	ldrh	r3, [r3, #2]
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	4b3e      	ldr	r3, [pc, #248]	; (800c57c <USBD_SetConfig+0x10c>)
 800c482:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800c484:	4b3d      	ldr	r3, [pc, #244]	; (800c57c <USBD_SetConfig+0x10c>)
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d904      	bls.n	800c496 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 800c48c:	6839      	ldr	r1, [r7, #0]
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f952 	bl	800c738 <USBD_CtlError>
 800c494:	e06f      	b.n	800c576 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c49c:	2b02      	cmp	r3, #2
 800c49e:	d002      	beq.n	800c4a6 <USBD_SetConfig+0x36>
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	d023      	beq.n	800c4ec <USBD_SetConfig+0x7c>
 800c4a4:	e062      	b.n	800c56c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800c4a6:	4b35      	ldr	r3, [pc, #212]	; (800c57c <USBD_SetConfig+0x10c>)
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d01a      	beq.n	800c4e4 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800c4ae:	4b33      	ldr	r3, [pc, #204]	; (800c57c <USBD_SetConfig+0x10c>)
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2203      	movs	r2, #3
 800c4bc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800c4c0:	4b2e      	ldr	r3, [pc, #184]	; (800c57c <USBD_SetConfig+0x10c>)
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f7ff fb07 	bl	800bada <USBD_SetClassConfig>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d104      	bne.n	800c4dc <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800c4d2:	6839      	ldr	r1, [r7, #0]
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 f92f 	bl	800c738 <USBD_CtlError>
          return;
 800c4da:	e04c      	b.n	800c576 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 f9f5 	bl	800c8cc <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800c4e2:	e048      	b.n	800c576 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 f9f1 	bl	800c8cc <USBD_CtlSendStatus>
      break;
 800c4ea:	e044      	b.n	800c576 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800c4ec:	4b23      	ldr	r3, [pc, #140]	; (800c57c <USBD_SetConfig+0x10c>)
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d112      	bne.n	800c51a <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2202      	movs	r2, #2
 800c4f8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800c4fc:	4b1f      	ldr	r3, [pc, #124]	; (800c57c <USBD_SetConfig+0x10c>)
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	461a      	mov	r2, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800c506:	4b1d      	ldr	r3, [pc, #116]	; (800c57c <USBD_SetConfig+0x10c>)
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	4619      	mov	r1, r3
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7ff fb03 	bl	800bb18 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 f9da 	bl	800c8cc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c518:	e02d      	b.n	800c576 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 800c51a:	4b18      	ldr	r3, [pc, #96]	; (800c57c <USBD_SetConfig+0x10c>)
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	461a      	mov	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	429a      	cmp	r2, r3
 800c526:	d01d      	beq.n	800c564 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	4619      	mov	r1, r3
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7ff faf1 	bl	800bb18 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c536:	4b11      	ldr	r3, [pc, #68]	; (800c57c <USBD_SetConfig+0x10c>)
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	461a      	mov	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800c540:	4b0e      	ldr	r3, [pc, #56]	; (800c57c <USBD_SetConfig+0x10c>)
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	4619      	mov	r1, r3
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff fac7 	bl	800bada <USBD_SetClassConfig>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b02      	cmp	r3, #2
 800c550:	d104      	bne.n	800c55c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800c552:	6839      	ldr	r1, [r7, #0]
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f8ef 	bl	800c738 <USBD_CtlError>
          return;
 800c55a:	e00c      	b.n	800c576 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 f9b5 	bl	800c8cc <USBD_CtlSendStatus>
      break;
 800c562:	e008      	b.n	800c576 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 f9b1 	bl	800c8cc <USBD_CtlSendStatus>
      break;
 800c56a:	e004      	b.n	800c576 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 f8e2 	bl	800c738 <USBD_CtlError>
      break;
 800c574:	bf00      	nop
    }
  }
}
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	2000047d 	.word	0x2000047d

0800c580 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	88db      	ldrh	r3, [r3, #6]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d004      	beq.n	800c59c <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 f8cf 	bl	800c738 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800c59a:	e01f      	b.n	800c5dc <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d002      	beq.n	800c5ac <USBD_GetConfig+0x2c>
 800c5a6:	2b03      	cmp	r3, #3
 800c5a8:	d00b      	beq.n	800c5c2 <USBD_GetConfig+0x42>
 800c5aa:	e012      	b.n	800c5d2 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f928 	bl	800c810 <USBD_CtlSendData>
      break;
 800c5c0:	e00c      	b.n	800c5dc <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 f920 	bl	800c810 <USBD_CtlSendData>
      break;
 800c5d0:	e004      	b.n	800c5dc <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800c5d2:	6839      	ldr	r1, [r7, #0]
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 f8af 	bl	800c738 <USBD_CtlError>
      break;
 800c5da:	bf00      	nop
}
 800c5dc:	bf00      	nop
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c5f4:	3b02      	subs	r3, #2
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d815      	bhi.n	800c626 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c606:	2b00      	cmp	r3, #0
 800c608:	d005      	beq.n	800c616 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	f043 0202 	orr.w	r2, r3, #2
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800c61a:	2202      	movs	r2, #2
 800c61c:	4619      	mov	r1, r3
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f8f6 	bl	800c810 <USBD_CtlSendData>
                      2);
    break;
 800c624:	e004      	b.n	800c630 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 f885 	bl	800c738 <USBD_CtlError>
    break;
 800c62e:	bf00      	nop
  }
}
 800c630:	bf00      	nop
 800c632:	3708      	adds	r7, #8
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	885b      	ldrh	r3, [r3, #2]
 800c646:	2b01      	cmp	r3, #1
 800c648:	d10d      	bne.n	800c666 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2201      	movs	r2, #1
 800c64e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f933 	bl	800c8cc <USBD_CtlSendStatus>
  }

}
 800c666:	bf00      	nop
 800c668:	3708      	adds	r7, #8
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800c66e:	b580      	push	{r7, lr}
 800c670:	b082      	sub	sp, #8
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c67e:	3b02      	subs	r3, #2
 800c680:	2b01      	cmp	r3, #1
 800c682:	d812      	bhi.n	800c6aa <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	885b      	ldrh	r3, [r3, #2]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d113      	bne.n	800c6b4 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	6839      	ldr	r1, [r7, #0]
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 f912 	bl	800c8cc <USBD_CtlSendStatus>
    }
    break;
 800c6a8:	e004      	b.n	800c6b4 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800c6aa:	6839      	ldr	r1, [r7, #0]
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 f843 	bl	800c738 <USBD_CtlError>
    break;
 800c6b2:	e000      	b.n	800c6b6 <USBD_ClrFeature+0x48>
    break;
 800c6b4:	bf00      	nop
  }
}
 800c6b6:	bf00      	nop
 800c6b8:	3708      	adds	r7, #8
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b083      	sub	sp, #12
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
 800c6c6:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	781a      	ldrb	r2, [r3, #0]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	785a      	ldrb	r2, [r3, #1]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	3302      	adds	r3, #2
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	3303      	adds	r3, #3
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	021b      	lsls	r3, r3, #8
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	4413      	add	r3, r2
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	3305      	adds	r3, #5
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	b29b      	uxth	r3, r3
 800c704:	021b      	lsls	r3, r3, #8
 800c706:	b29b      	uxth	r3, r3
 800c708:	4413      	add	r3, r2
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	3306      	adds	r3, #6
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	b29a      	uxth	r2, r3
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	3307      	adds	r3, #7
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	b29b      	uxth	r3, r3
 800c720:	021b      	lsls	r3, r3, #8
 800c722:	b29b      	uxth	r3, r3
 800c724:	4413      	add	r3, r2
 800c726:	b29a      	uxth	r2, r3
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	80da      	strh	r2, [r3, #6]

}
 800c72c:	bf00      	nop
 800c72e:	370c      	adds	r7, #12
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800c742:	2180      	movs	r1, #128	; 0x80
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f002 fe01 	bl	800f34c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800c74a:	2100      	movs	r1, #0
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f002 fdfd 	bl	800f34c <USBD_LL_StallEP>
}
 800c752:	bf00      	nop
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b086      	sub	sp, #24
 800c75e:	af00      	add	r7, sp, #0
 800c760:	60f8      	str	r0, [r7, #12]
 800c762:	60b9      	str	r1, [r7, #8]
 800c764:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800c766:	2300      	movs	r3, #0
 800c768:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d033      	beq.n	800c7d8 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f000 f835 	bl	800c7e0 <USBD_GetLen>
 800c776:	4603      	mov	r3, r0
 800c778:	3301      	adds	r3, #1
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	005b      	lsls	r3, r3, #1
 800c77e:	b29a      	uxth	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800c784:	7dfb      	ldrb	r3, [r7, #23]
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	75fa      	strb	r2, [r7, #23]
 800c78a:	461a      	mov	r2, r3
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	4413      	add	r3, r2
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	8812      	ldrh	r2, [r2, #0]
 800c794:	b2d2      	uxtb	r2, r2
 800c796:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800c798:	7dfb      	ldrb	r3, [r7, #23]
 800c79a:	1c5a      	adds	r2, r3, #1
 800c79c:	75fa      	strb	r2, [r7, #23]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	2203      	movs	r2, #3
 800c7a6:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 800c7a8:	e012      	b.n	800c7d0 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 800c7aa:	7dfb      	ldrb	r3, [r7, #23]
 800c7ac:	1c5a      	adds	r2, r3, #1
 800c7ae:	75fa      	strb	r2, [r7, #23]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	441a      	add	r2, r3
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	1c59      	adds	r1, r3, #1
 800c7ba:	60f9      	str	r1, [r7, #12]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800c7c0:	7dfb      	ldrb	r3, [r7, #23]
 800c7c2:	1c5a      	adds	r2, r3, #1
 800c7c4:	75fa      	strb	r2, [r7, #23]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1e8      	bne.n	800c7aa <USBD_GetString+0x50>
    }
  } 
}
 800c7d8:	bf00      	nop
 800c7da:	3718      	adds	r7, #24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 800c7ec:	e005      	b.n	800c7fa <USBD_GetLen+0x1a>
    {
        len++;
 800c7ee:	7bfb      	ldrb	r3, [r7, #15]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	73fb      	strb	r3, [r7, #15]
        buf++;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1f5      	bne.n	800c7ee <USBD_GetLen+0xe>
    }

    return len;
 800c802:	7bfb      	ldrb	r3, [r7, #15]
}
 800c804:	4618      	mov	r0, r3
 800c806:	3714      	adds	r7, #20
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	4613      	mov	r3, r2
 800c81c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2202      	movs	r2, #2
 800c822:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800c826:	88fa      	ldrh	r2, [r7, #6]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800c82c:	88fa      	ldrh	r2, [r7, #6]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800c832:	88fb      	ldrh	r3, [r7, #6]
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	2100      	movs	r1, #0
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f002 fe55 	bl	800f4e8 <USBD_LL_Transmit>
  
  return USBD_OK;
 800c83e:	2300      	movs	r3, #0
}
 800c840:	4618      	mov	r0, r3
 800c842:	3710      	adds	r7, #16
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	4613      	mov	r3, r2
 800c854:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800c856:	88fb      	ldrh	r3, [r7, #6]
 800c858:	68ba      	ldr	r2, [r7, #8]
 800c85a:	2100      	movs	r1, #0
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f002 fe43 	bl	800f4e8 <USBD_LL_Transmit>
  
  return USBD_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	4613      	mov	r3, r2
 800c878:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2203      	movs	r2, #3
 800c87e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800c882:	88fa      	ldrh	r2, [r7, #6]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800c88a:	88fa      	ldrh	r2, [r7, #6]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800c892:	88fb      	ldrh	r3, [r7, #6]
 800c894:	68ba      	ldr	r2, [r7, #8]
 800c896:	2100      	movs	r1, #0
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f002 fe5f 	bl	800f55c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 800c8b6:	88fb      	ldrh	r3, [r7, #6]
 800c8b8:	68ba      	ldr	r2, [r7, #8]
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f002 fe4d 	bl	800f55c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2204      	movs	r2, #4
 800c8d8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800c8dc:	2300      	movs	r3, #0
 800c8de:	2200      	movs	r2, #0
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f002 fe00 	bl	800f4e8 <USBD_LL_Transmit>
  
  return USBD_OK;
 800c8e8:	2300      	movs	r3, #0
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2205      	movs	r2, #5
 800c8fe:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800c902:	2300      	movs	r3, #0
 800c904:	2200      	movs	r2, #0
 800c906:	2100      	movs	r1, #0
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f002 fe27 	bl	800f55c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device 
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
  uint8_t sdramstatus = SDRAM_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	71fb      	strb	r3, [r7, #7]
  
  /* place for custom code */
  
  return sdramstatus;
 800c922:	79fb      	ldrb	r3, [r7, #7]
}
 800c924:	4618      	mov	r0, r3
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{ 
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 800c93c:	2300      	movs	r3, #0
 800c93e:	75fb      	strb	r3, [r7, #23]
  
  if(HAL_SDRAM_Read_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 800c940:	68f9      	ldr	r1, [r7, #12]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	4806      	ldr	r0, [pc, #24]	; (800c960 <BSP_SDRAM_ReadData+0x30>)
 800c948:	f7f9 fc6e 	bl	8006228 <HAL_SDRAM_Read_32b>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <BSP_SDRAM_ReadData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 800c952:	2301      	movs	r3, #1
 800c954:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 800c956:	7dfb      	ldrb	r3, [r7, #23]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3718      	adds	r7, #24
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	2000132c 	.word	0x2000132c

0800c964 <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{ 
 800c964:	b580      	push	{r7, lr}
 800c966:	b086      	sub	sp, #24
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 800c970:	2300      	movs	r3, #0
 800c972:	75fb      	strb	r3, [r7, #23]
  
  if(HAL_SDRAM_Write_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 800c974:	68f9      	ldr	r1, [r7, #12]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	4806      	ldr	r0, [pc, #24]	; (800c994 <BSP_SDRAM_WriteData+0x30>)
 800c97c:	f7f9 fc93 	bl	80062a6 <HAL_SDRAM_Write_32b>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d001      	beq.n	800c98a <BSP_SDRAM_WriteData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3718      	adds	r7, #24
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	2000132c 	.word	0x2000132c

0800c998 <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2210      	movs	r2, #16
 800c9b0:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800c9be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9c2:	6839      	ldr	r1, [r7, #0]
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7f9 fcb1 	bl	800632c <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800c9ca:	2001      	movs	r0, #1
 800c9cc:	f7f5 f93c 	bl	8001c48 <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	2202      	movs	r2, #2
 800c9d4:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	2210      	movs	r2, #16
 800c9da:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800c9e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9ec:	6839      	ldr	r1, [r7, #0]
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f7f9 fc9c 	bl	800632c <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	2203      	movs	r2, #3
 800c9f8:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	2210      	movs	r2, #16
 800c9fe:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	2208      	movs	r2, #8
 800ca04:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800ca0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca10:	6839      	ldr	r1, [r7, #0]
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7f9 fc8a 	bl	800632c <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800ca18:	f44f 7308 	mov.w	r3, #544	; 0x220
 800ca1c:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	2204      	movs	r2, #4
 800ca22:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	2210      	movs	r2, #16
 800ca28:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 800ca30:	68fa      	ldr	r2, [r7, #12]
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800ca36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f7f9 fc75 	bl	800632c <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  hsdram->Instance->SDRTR = REFRESH_COUNT;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f240 6203 	movw	r2, #1539	; 0x603
 800ca4a:	615a      	str	r2, [r3, #20]

}
 800ca4c:	bf00      	nop
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800ca54:	b480      	push	{r7}
 800ca56:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800ca58:	4a14      	ldr	r2, [pc, #80]	; (800caac <DWT_Delay_Init+0x58>)
 800ca5a:	4b14      	ldr	r3, [pc, #80]	; (800caac <DWT_Delay_Init+0x58>)
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca62:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800ca64:	4a11      	ldr	r2, [pc, #68]	; (800caac <DWT_Delay_Init+0x58>)
 800ca66:	4b11      	ldr	r3, [pc, #68]	; (800caac <DWT_Delay_Init+0x58>)
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca6e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800ca70:	4a0f      	ldr	r2, [pc, #60]	; (800cab0 <DWT_Delay_Init+0x5c>)
 800ca72:	4b0f      	ldr	r3, [pc, #60]	; (800cab0 <DWT_Delay_Init+0x5c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f023 0301 	bic.w	r3, r3, #1
 800ca7a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800ca7c:	4a0c      	ldr	r2, [pc, #48]	; (800cab0 <DWT_Delay_Init+0x5c>)
 800ca7e:	4b0c      	ldr	r3, [pc, #48]	; (800cab0 <DWT_Delay_Init+0x5c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f043 0301 	orr.w	r3, r3, #1
 800ca86:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800ca88:	4b09      	ldr	r3, [pc, #36]	; (800cab0 <DWT_Delay_Init+0x5c>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800ca8e:	bf00      	nop
     __ASM volatile ("NOP");
 800ca90:	bf00      	nop
  __ASM volatile ("NOP");
 800ca92:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800ca94:	4b06      	ldr	r3, [pc, #24]	; (800cab0 <DWT_Delay_Init+0x5c>)
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	e000      	b.n	800caa2 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800caa0:	2301      	movs	r3, #1
  }
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	e000edf0 	.word	0xe000edf0
 800cab0:	e0001000 	.word	0xe0001000

0800cab4 <MX_FATFS_Init>:

/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void) {
 800cab4:	b580      	push	{r7, lr}
 800cab6:	af00      	add	r7, sp, #0
	/*## FatFS: Link the SDRAMDISK driver ###########################*/
	retSDRAMDISK = FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMDISKPath);
 800cab8:	4904      	ldr	r1, [pc, #16]	; (800cacc <MX_FATFS_Init+0x18>)
 800caba:	4805      	ldr	r0, [pc, #20]	; (800cad0 <MX_FATFS_Init+0x1c>)
 800cabc:	f7fe fd48 	bl	800b550 <FATFS_LinkDriver>
 800cac0:	4603      	mov	r3, r0
 800cac2:	461a      	mov	r2, r3
 800cac4:	4b03      	ldr	r3, [pc, #12]	; (800cad4 <MX_FATFS_Init+0x20>)
 800cac6:	701a      	strb	r2, [r3, #0]

	/* USER CODE BEGIN Init */
	/* additional user code for init */
	/* USER CODE END Init */
}
 800cac8:	bf00      	nop
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	2000053c 	.word	0x2000053c
 800cad0:	080156d0 	.word	0x080156d0
 800cad4:	200009a0 	.word	0x200009a0

0800cad8 <get_fattime>:
/**
 * @brief  Gets Time from RTC
 * @param  None
 * @retval Time in DWORD
 */
DWORD get_fattime(void) {
 800cad8:	b480      	push	{r7}
 800cada:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN get_fattime */
	return 0;
 800cadc:	2300      	movs	r3, #0
	/* USER CODE END get_fattime */
}
 800cade:	4618      	mov	r0, r3
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800caf0:	4b0c      	ldr	r3, [pc, #48]	; (800cb24 <DWT_Delay_us+0x3c>)
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800caf6:	f7f8 ff0f 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 800cafa:	4602      	mov	r2, r0
 800cafc:	4b0a      	ldr	r3, [pc, #40]	; (800cb28 <DWT_Delay_us+0x40>)
 800cafe:	fba3 2302 	umull	r2, r3, r3, r2
 800cb02:	0c9b      	lsrs	r3, r3, #18
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	fb02 f303 	mul.w	r3, r2, r3
 800cb0a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800cb0c:	bf00      	nop
 800cb0e:	4b05      	ldr	r3, [pc, #20]	; (800cb24 <DWT_Delay_us+0x3c>)
 800cb10:	685a      	ldr	r2, [r3, #4]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	1ad2      	subs	r2, r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d3f8      	bcc.n	800cb0e <DWT_Delay_us+0x26>
}
 800cb1c:	bf00      	nop
 800cb1e:	3710      	adds	r7, #16
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	e0001000 	.word	0xe0001000
 800cb28:	431bde83 	.word	0x431bde83

0800cb2c <initArray>:
#include <ctype.h>

#include "main.h"
#include "dwt_stm32_delay.h"

void initArray(Array *a, size_t initialSize) {
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
	a->array = (uint16_t *) malloc(initialSize * sizeof(uint16_t));
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f002 ff18 	bl	800f970 <malloc>
 800cb40:	4603      	mov	r3, r0
 800cb42:	461a      	mov	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	601a      	str	r2, [r3, #0]
	a->used = 0;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	605a      	str	r2, [r3, #4]
	a->size = initialSize;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	683a      	ldr	r2, [r7, #0]
 800cb52:	609a      	str	r2, [r3, #8]
}
 800cb54:	bf00      	nop
 800cb56:	3708      	adds	r7, #8
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <insertArray>:

void insertArray(Array *a, uint32_t newsize) {
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
	a->size = newsize;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	683a      	ldr	r2, [r7, #0]
 800cb6a:	609a      	str	r2, [r3, #8]
	a->array = (uint16_t *) realloc(a->array, a->size * sizeof(uint16_t));
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	005b      	lsls	r3, r3, #1
 800cb76:	4619      	mov	r1, r3
 800cb78:	4610      	mov	r0, r2
 800cb7a:	f003 fcb7 	bl	80104ec <realloc>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	601a      	str	r2, [r3, #0]
	a->used = 0;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	605a      	str	r2, [r3, #4]
}
 800cb8a:	bf00      	nop
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <freeArray>:

void freeArray(Array *a) {
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b082      	sub	sp, #8
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
	free(a->array);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f002 feee 	bl	800f980 <free>
	a->array = NULL;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	601a      	str	r2, [r3, #0]
	a->used = a->size = 0;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	609a      	str	r2, [r3, #8]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	689a      	ldr	r2, [r3, #8]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	605a      	str	r2, [r3, #4]
}
 800cbb8:	bf00      	nop
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <string_parser>:

size_t string_parser(char *input, char ***word_array) {
 800cbc0:	b590      	push	{r4, r7, lr}
 800cbc2:	b089      	sub	sp, #36	; 0x24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
	size_t n = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	61fb      	str	r3, [r7, #28]
	const char *p = input;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	61bb      	str	r3, [r7, #24]

	while (*p) {
 800cbd2:	e02d      	b.n	800cc30 <string_parser+0x70>
		while (isspace((unsigned char )*p))
			++p;
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	61bb      	str	r3, [r7, #24]
		while (isspace((unsigned char )*p))
 800cbda:	f002 febb 	bl	800f954 <__locale_ctype_ptr>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	4413      	add	r3, r2
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	f003 0308 	and.w	r3, r3, #8
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1f0      	bne.n	800cbd4 <string_parser+0x14>
		n += *p != '\0';
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	bf14      	ite	ne
 800cbfa:	2301      	movne	r3, #1
 800cbfc:	2300      	moveq	r3, #0
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	461a      	mov	r2, r3
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	4413      	add	r3, r2
 800cc06:	61fb      	str	r3, [r7, #28]
		while (*p && !isspace((unsigned char )*p))
 800cc08:	e002      	b.n	800cc10 <string_parser+0x50>
			++p;
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	61bb      	str	r3, [r7, #24]
		while (*p && !isspace((unsigned char )*p))
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00b      	beq.n	800cc30 <string_parser+0x70>
 800cc18:	f002 fe9c 	bl	800f954 <__locale_ctype_ptr>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	3301      	adds	r3, #1
 800cc24:	4413      	add	r3, r2
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	f003 0308 	and.w	r3, r3, #8
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d0ec      	beq.n	800cc0a <string_parser+0x4a>
	while (*p) {
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1d0      	bne.n	800cbda <string_parser+0x1a>
	}

	if (n) {
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d062      	beq.n	800cd04 <string_parser+0x144>
		size_t i = 0;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	617b      	str	r3, [r7, #20]

		*word_array = (char**) malloc(n * sizeof(char *));
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	4618      	mov	r0, r3
 800cc48:	f002 fe92 	bl	800f970 <malloc>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	461a      	mov	r2, r3
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	601a      	str	r2, [r3, #0]

		p = input;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	61bb      	str	r3, [r7, #24]

		while (*p) {
 800cc58:	e050      	b.n	800ccfc <string_parser+0x13c>
			while (isspace((unsigned char )*p))
				++p;
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	61bb      	str	r3, [r7, #24]
			while (isspace((unsigned char )*p))
 800cc60:	f002 fe78 	bl	800f954 <__locale_ctype_ptr>
 800cc64:	4602      	mov	r2, r0
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	4413      	add	r3, r2
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	f003 0308 	and.w	r3, r3, #8
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1f0      	bne.n	800cc5a <string_parser+0x9a>
			if (*p) {
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d03d      	beq.n	800ccfc <string_parser+0x13c>
				const char *q = p;
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	613b      	str	r3, [r7, #16]
				while (*p && !isspace((unsigned char )*p))
 800cc84:	e002      	b.n	800cc8c <string_parser+0xcc>
					++p;
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	61bb      	str	r3, [r7, #24]
				while (*p && !isspace((unsigned char )*p))
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00b      	beq.n	800ccac <string_parser+0xec>
 800cc94:	f002 fe5e 	bl	800f954 <__locale_ctype_ptr>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	4413      	add	r3, r2
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	f003 0308 	and.w	r3, r3, #8
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d0ec      	beq.n	800cc86 <string_parser+0xc6>

				size_t length = p - q;
 800ccac:	69ba      	ldr	r2, [r7, #24]
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	60fb      	str	r3, [r7, #12]

				(*word_array)[i] = (char *) malloc(length + 1);
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	18d4      	adds	r4, r2, r3
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f002 fe54 	bl	800f970 <malloc>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	6023      	str	r3, [r4, #0]

				strncpy((*word_array)[i], q, length);
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4413      	add	r3, r2
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	6939      	ldr	r1, [r7, #16]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f003 fca9 	bl	8010634 <strncpy>
				(*word_array)[i][length] = '\0';
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	701a      	strb	r2, [r3, #0]

				++i;
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	617b      	str	r3, [r7, #20]
		while (*p) {
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d1ad      	bne.n	800cc60 <string_parser+0xa0>
			}
		}
	}

	return n;
 800cd04:	69fb      	ldr	r3, [r7, #28]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3724      	adds	r7, #36	; 0x24
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd90      	pop	{r4, r7, pc}

0800cd0e <PlotData>:

void PlotData(uint32_t XCoordinate, uint32_t YCoordinate) {
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b082      	sub	sp, #8
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
 800cd16:	6039      	str	r1, [r7, #0]
	// Plot at x,y
	BSP_LCD_DrawPixel((uint16_t) XCoordinate, (uint16_t) YCoordinate, 1);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	683a      	ldr	r2, [r7, #0]
 800cd1e:	b291      	uxth	r1, r2
 800cd20:	2201      	movs	r2, #1
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7f4 fc7a 	bl	800161c <BSP_LCD_DrawPixel>
}
 800cd28:	bf00      	nop
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <InitScreen>:

void InitScreen(uint32_t BackGroundColor, uint32_t ForeGroundColor) {
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
// #define LCD_COLOR_BLACK         ((uint32_t)0xFF000000)
// #define LCD_COLOR_BROWN         ((uint32_t)0xFFA52A2A)
// #define LCD_COLOR_ORANGE        ((uint32_t)0xFFFFA500)
// #define LCD_COLOR_TRANSPARENT   ((uint32_t)0xFF000000)

	BSP_LCD_Clear(BackGroundColor);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7f4 fac2 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(BackGroundColor);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f7f4 fa75 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(ForeGroundColor);
 800cd46:	6838      	ldr	r0, [r7, #0]
 800cd48:	f7f4 fa5a 	bl	8001200 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 800cd4c:	4803      	ldr	r0, [pc, #12]	; (800cd5c <InitScreen+0x2c>)
 800cd4e:	f7f4 fa89 	bl	8001264 <BSP_LCD_SetFont>
}
 800cd52:	bf00      	nop
 800cd54:	3708      	adds	r7, #8
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	20000008 	.word	0x20000008

0800cd60 <LCDWrite>:

void LCDWrite(uint32_t Line, char Str[]) {
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b090      	sub	sp, #64	; 0x40
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
	char IntStr[50];

	// InitScreen(LCD_COLOR_BLACK,LCD_COLOR_WHITE,Font20);

	BSP_LCD_ClearStringLine(Line);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f7f4 fad2 	bl	8001314 <BSP_LCD_ClearStringLine>
	snprintf(IntStr, 50, Str);
 800cd70:	f107 030c 	add.w	r3, r7, #12
 800cd74:	683a      	ldr	r2, [r7, #0]
 800cd76:	2132      	movs	r1, #50	; 0x32
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f003 fbfb 	bl	8010574 <sniprintf>
	BSP_LCD_DisplayStringAtLine((uint16_t) Line, (uint8_t *) IntStr);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	f107 020c 	add.w	r2, r7, #12
 800cd86:	4611      	mov	r1, r2
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7f4 fc2f 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
}
 800cd8e:	bf00      	nop
 800cd90:	3740      	adds	r7, #64	; 0x40
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
	...

0800cd98 <CountDown>:

void CountDown(uint32_t millisecs) {
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800cda0:	f04f 31ff 	mov.w	r1, #4294967295
 800cda4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800cda8:	f7ff ffc2 	bl	800cd30 <InitScreen>

	LCDWrite(5, " ");
 800cdac:	491c      	ldr	r1, [pc, #112]	; (800ce20 <CountDown+0x88>)
 800cdae:	2005      	movs	r0, #5
 800cdb0:	f7ff ffd6 	bl	800cd60 <LCDWrite>
	DWT_Delay_us(1000);
 800cdb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cdb8:	f7ff fe96 	bl	800cae8 <DWT_Delay_us>

	LCDWrite(5, "Starting in 3... ");
 800cdbc:	4919      	ldr	r1, [pc, #100]	; (800ce24 <CountDown+0x8c>)
 800cdbe:	2005      	movs	r0, #5
 800cdc0:	f7ff ffce 	bl	800cd60 <LCDWrite>
	DWT_Delay_us(millisecs * 1000);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cdca:	fb02 f303 	mul.w	r3, r2, r3
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7ff fe8a 	bl	800cae8 <DWT_Delay_us>

	LCDWrite(5, "Starting in 2... ");
 800cdd4:	4914      	ldr	r1, [pc, #80]	; (800ce28 <CountDown+0x90>)
 800cdd6:	2005      	movs	r0, #5
 800cdd8:	f7ff ffc2 	bl	800cd60 <LCDWrite>
	DWT_Delay_us(millisecs * 1000);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cde2:	fb02 f303 	mul.w	r3, r2, r3
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7ff fe7e 	bl	800cae8 <DWT_Delay_us>

	LCDWrite(5, "Starting in 1... ");
 800cdec:	490f      	ldr	r1, [pc, #60]	; (800ce2c <CountDown+0x94>)
 800cdee:	2005      	movs	r0, #5
 800cdf0:	f7ff ffb6 	bl	800cd60 <LCDWrite>
	DWT_Delay_us(millisecs * 1000);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cdfa:	fb02 f303 	mul.w	r3, r2, r3
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7ff fe72 	bl	800cae8 <DWT_Delay_us>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800ce04:	f04f 31ff 	mov.w	r1, #4294967295
 800ce08:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ce0c:	f7ff ff90 	bl	800cd30 <InitScreen>
	LCDWrite(5, "GO!");
 800ce10:	4907      	ldr	r1, [pc, #28]	; (800ce30 <CountDown+0x98>)
 800ce12:	2005      	movs	r0, #5
 800ce14:	f7ff ffa4 	bl	800cd60 <LCDWrite>
}
 800ce18:	bf00      	nop
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	080128fc 	.word	0x080128fc
 800ce24:	08012900 	.word	0x08012900
 800ce28:	08012914 	.word	0x08012914
 800ce2c:	08012928 	.word	0x08012928
 800ce30:	0801293c 	.word	0x0801293c

0800ce34 <SamplePoints>:

void SamplePoints(Array *Data, uint32_t NoOfPoints, uint32_t Period_us) {
 800ce34:	b590      	push	{r4, r7, lr}
 800ce36:	b087      	sub	sp, #28
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
	uint32_t i;

	HAL_ADC_Start(&hadc3);
 800ce40:	4815      	ldr	r0, [pc, #84]	; (800ce98 <SamplePoints+0x64>)
 800ce42:	f7f4 ff67 	bl	8001d14 <HAL_ADC_Start>

	// Measure NoOfPoints values (f.ex. 19200)
	for (i = 0; i < NoOfPoints; i++) {
 800ce46:	2300      	movs	r3, #0
 800ce48:	617b      	str	r3, [r7, #20]
 800ce4a:	e010      	b.n	800ce6e <SamplePoints+0x3a>
		Data->array[i] = (uint16_t) HAL_ADC_GetValue(&hadc3);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	005b      	lsls	r3, r3, #1
 800ce54:	18d4      	adds	r4, r2, r3
 800ce56:	4810      	ldr	r0, [pc, #64]	; (800ce98 <SamplePoints+0x64>)
 800ce58:	f7f5 f800 	bl	8001e5c <HAL_ADC_GetValue>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	8023      	strh	r3, [r4, #0]
		DWT_Delay_us(Period_us);
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7ff fe40 	bl	800cae8 <DWT_Delay_us>
	for (i = 0; i < NoOfPoints; i++) {
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	617b      	str	r3, [r7, #20]
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d3ea      	bcc.n	800ce4c <SamplePoints+0x18>
	}

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800ce76:	f04f 31ff 	mov.w	r1, #4294967295
 800ce7a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ce7e:	f7ff ff57 	bl	800cd30 <InitScreen>
	LCDWrite(5, "DONE!");
 800ce82:	4906      	ldr	r1, [pc, #24]	; (800ce9c <SamplePoints+0x68>)
 800ce84:	2005      	movs	r0, #5
 800ce86:	f7ff ff6b 	bl	800cd60 <LCDWrite>

	printf("Sampling done.\r\n");
 800ce8a:	4805      	ldr	r0, [pc, #20]	; (800cea0 <SamplePoints+0x6c>)
 800ce8c:	f003 fb26 	bl	80104dc <puts>
}
 800ce90:	bf00      	nop
 800ce92:	371c      	adds	r7, #28
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd90      	pop	{r4, r7, pc}
 800ce98:	20001000 	.word	0x20001000
 800ce9c:	08012940 	.word	0x08012940
 800cea0:	08012948 	.word	0x08012948

0800cea4 <AvgAndPlotPoints>:

void AvgAndPlotPoints(Array *Data, uint32_t NoOfPoints, uint32_t AvgSize) {
 800cea4:	b5b0      	push	{r4, r5, r7, lr}
 800cea6:	b09a      	sub	sp, #104	; 0x68
 800cea8:	af02      	add	r7, sp, #8
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]

	uint32_t BufferSum, BufferAvg;
	uint32_t XCoord, YCoord;
	char MyStr[50];

	printf("Start reading... \r\n");
 800ceb0:	4842      	ldr	r0, [pc, #264]	; (800cfbc <AvgAndPlotPoints+0x118>)
 800ceb2:	f003 fb13 	bl	80104dc <puts>
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 800ceb6:	4942      	ldr	r1, [pc, #264]	; (800cfc0 <AvgAndPlotPoints+0x11c>)
 800ceb8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800cebc:	f7ff ff38 	bl	800cd30 <InitScreen>

	for (i1 = 0; i1 < NoOfPoints; i1++) {
 800cec0:	2300      	movs	r3, #0
 800cec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cec4:	e059      	b.n	800cf7a <AvgAndPlotPoints+0xd6>
		BufferSum = 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	657b      	str	r3, [r7, #84]	; 0x54

		// Read AvgSize samples
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 800ceca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cecc:	65bb      	str	r3, [r7, #88]	; 0x58
 800cece:	e00c      	b.n	800ceea <AvgAndPlotPoints+0x46>
			BufferSum = BufferSum + (uint32_t) Data->array[i2];
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ced6:	005b      	lsls	r3, r3, #1
 800ced8:	4413      	add	r3, r2
 800ceda:	881b      	ldrh	r3, [r3, #0]
 800cedc:	461a      	mov	r2, r3
 800cede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cee0:	4413      	add	r3, r2
 800cee2:	657b      	str	r3, [r7, #84]	; 0x54
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 800cee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cee6:	3301      	adds	r3, #1
 800cee8:	65bb      	str	r3, [r7, #88]	; 0x58
 800ceea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	441a      	add	r2, r3
 800cef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d8ec      	bhi.n	800ced0 <AvgAndPlotPoints+0x2c>
		}

		BufferAvg = BufferSum / AvgSize;
 800cef6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cefe:	653b      	str	r3, [r7, #80]	; 0x50

		// Calculate two coords and plot
		XCoord = ((i1 * 480.0) / NoOfPoints);
 800cf00:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cf02:	f7f3 fb2f 	bl	8000564 <__aeabi_ui2d>
 800cf06:	f04f 0200 	mov.w	r2, #0
 800cf0a:	4b2e      	ldr	r3, [pc, #184]	; (800cfc4 <AvgAndPlotPoints+0x120>)
 800cf0c:	f7f3 fba0 	bl	8000650 <__aeabi_dmul>
 800cf10:	4603      	mov	r3, r0
 800cf12:	460c      	mov	r4, r1
 800cf14:	4625      	mov	r5, r4
 800cf16:	461c      	mov	r4, r3
 800cf18:	68b8      	ldr	r0, [r7, #8]
 800cf1a:	f7f3 fb23 	bl	8000564 <__aeabi_ui2d>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	4620      	mov	r0, r4
 800cf24:	4629      	mov	r1, r5
 800cf26:	f7f3 fcbd 	bl	80008a4 <__aeabi_ddiv>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	460c      	mov	r4, r1
 800cf2e:	4618      	mov	r0, r3
 800cf30:	4621      	mov	r1, r4
 800cf32:	f7f3 fe65 	bl	8000c00 <__aeabi_d2uiz>
 800cf36:	4603      	mov	r3, r0
 800cf38:	64fb      	str	r3, [r7, #76]	; 0x4c
		YCoord = (272.0 * (BufferAvg / 65536.0));
 800cf3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cf3c:	f7f3 fb12 	bl	8000564 <__aeabi_ui2d>
 800cf40:	f04f 0200 	mov.w	r2, #0
 800cf44:	4b20      	ldr	r3, [pc, #128]	; (800cfc8 <AvgAndPlotPoints+0x124>)
 800cf46:	f7f3 fcad 	bl	80008a4 <__aeabi_ddiv>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	4618      	mov	r0, r3
 800cf50:	4621      	mov	r1, r4
 800cf52:	f04f 0200 	mov.w	r2, #0
 800cf56:	4b1d      	ldr	r3, [pc, #116]	; (800cfcc <AvgAndPlotPoints+0x128>)
 800cf58:	f7f3 fb7a 	bl	8000650 <__aeabi_dmul>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	460c      	mov	r4, r1
 800cf60:	4618      	mov	r0, r3
 800cf62:	4621      	mov	r1, r4
 800cf64:	f7f3 fe4c 	bl	8000c00 <__aeabi_d2uiz>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	64bb      	str	r3, [r7, #72]	; 0x48

		PlotData(XCoord, YCoord);
 800cf6c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cf6e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800cf70:	f7ff fecd 	bl	800cd0e <PlotData>
	for (i1 = 0; i1 < NoOfPoints; i1++) {
 800cf74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf76:	3301      	adds	r3, #1
 800cf78:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d3a1      	bcc.n	800cec6 <AvgAndPlotPoints+0x22>
	}

	printf("Done all, Points = %lu Avg = %lu \r\n", i1, AvgSize);
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cf86:	4812      	ldr	r0, [pc, #72]	; (800cfd0 <AvgAndPlotPoints+0x12c>)
 800cf88:	f003 fa34 	bl	80103f4 <iprintf>

	LCDWrite(0, "");
 800cf8c:	4911      	ldr	r1, [pc, #68]	; (800cfd4 <AvgAndPlotPoints+0x130>)
 800cf8e:	2000      	movs	r0, #0
 800cf90:	f7ff fee6 	bl	800cd60 <LCDWrite>
	snprintf(MyStr, 50, "Pnts = %lu Avg = %lu", NoOfPoints, AvgSize);
 800cf94:	f107 0014 	add.w	r0, r7, #20
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	4a0e      	ldr	r2, [pc, #56]	; (800cfd8 <AvgAndPlotPoints+0x134>)
 800cfa0:	2132      	movs	r1, #50	; 0x32
 800cfa2:	f003 fae7 	bl	8010574 <sniprintf>
	LCDWrite(0, MyStr);
 800cfa6:	f107 0314 	add.w	r3, r7, #20
 800cfaa:	4619      	mov	r1, r3
 800cfac:	2000      	movs	r0, #0
 800cfae:	f7ff fed7 	bl	800cd60 <LCDWrite>
}
 800cfb2:	bf00      	nop
 800cfb4:	3760      	adds	r7, #96	; 0x60
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bdb0      	pop	{r4, r5, r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	08012958 	.word	0x08012958
 800cfc0:	ffff0000 	.word	0xffff0000
 800cfc4:	407e0000 	.word	0x407e0000
 800cfc8:	40f00000 	.word	0x40f00000
 800cfcc:	40710000 	.word	0x40710000
 800cfd0:	0801296c 	.word	0x0801296c
 800cfd4:	08012990 	.word	0x08012990
 800cfd8:	08012994 	.word	0x08012994

0800cfdc <SCB_EnableICache>:
{
 800cfdc:	b480      	push	{r7}
 800cfde:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cfe0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cfe4:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800cfe8:	4b09      	ldr	r3, [pc, #36]	; (800d010 <SCB_EnableICache+0x34>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800cff0:	4a07      	ldr	r2, [pc, #28]	; (800d010 <SCB_EnableICache+0x34>)
 800cff2:	4b07      	ldr	r3, [pc, #28]	; (800d010 <SCB_EnableICache+0x34>)
 800cff4:	695b      	ldr	r3, [r3, #20]
 800cff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cffa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800cffc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d000:	f3bf 8f6f 	isb	sy
}
 800d004:	bf00      	nop
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop
 800d010:	e000ed00 	.word	0xe000ed00

0800d014 <SCB_EnableDCache>:
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800d01a:	4b1d      	ldr	r3, [pc, #116]	; (800d090 <SCB_EnableDCache+0x7c>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800d022:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800d026:	4b1a      	ldr	r3, [pc, #104]	; (800d090 <SCB_EnableDCache+0x7c>)
 800d028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d02c:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	0b5b      	lsrs	r3, r3, #13
 800d032:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d036:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	08db      	lsrs	r3, r3, #3
 800d03c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d040:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d042:	4913      	ldr	r1, [pc, #76]	; (800d090 <SCB_EnableDCache+0x7c>)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	015a      	lsls	r2, r3, #5
 800d048:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800d04c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d052:	4313      	orrs	r3, r2
 800d054:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	1e5a      	subs	r2, r3, #1
 800d05c:	60ba      	str	r2, [r7, #8]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d1ef      	bne.n	800d042 <SCB_EnableDCache+0x2e>
    } while(sets--);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	1e5a      	subs	r2, r3, #1
 800d066:	60fa      	str	r2, [r7, #12]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1e5      	bne.n	800d038 <SCB_EnableDCache+0x24>
 800d06c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800d070:	4a07      	ldr	r2, [pc, #28]	; (800d090 <SCB_EnableDCache+0x7c>)
 800d072:	4b07      	ldr	r3, [pc, #28]	; (800d090 <SCB_EnableDCache+0x7c>)
 800d074:	695b      	ldr	r3, [r3, #20]
 800d076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d07a:	6153      	str	r3, [r2, #20]
 800d07c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d080:	f3bf 8f6f 	isb	sy
}
 800d084:	bf00      	nop
 800d086:	3714      	adds	r7, #20
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr
 800d090:	e000ed00 	.word	0xe000ed00
 800d094:	00000000 	.word	0x00000000

0800d098 <main>:
/**
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void) {
 800d098:	b5b0      	push	{r4, r5, r7, lr}
 800d09a:	f5ad 6da8 	sub.w	sp, sp, #1344	; 0x540
 800d09e:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 800d0a0:	4bc1      	ldr	r3, [pc, #772]	; (800d3a8 <main+0x310>)
 800d0a2:	f207 44dc 	addw	r4, r7, #1244	; 0x4dc
 800d0a6:	461d      	mov	r5, r3
 800d0a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0b0:	682b      	ldr	r3, [r5, #0]
 800d0b2:	7023      	strb	r3, [r4, #0]
	uint8_t rtext[100]; /* File read buffer */

	char buffer[1000] = " ";
 800d0b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d0b8:	2220      	movs	r2, #32
 800d0ba:	601a      	str	r2, [r3, #0]
 800d0bc:	3304      	adds	r3, #4
 800d0be:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f002 fc75 	bl	800f9b4 <memset>

	/* USER CODE END 1 */

	/* Enable I-Cache-------------------------------------------------------------*/
	SCB_EnableICache();
 800d0ca:	f7ff ff87 	bl	800cfdc <SCB_EnableICache>

	/* Enable D-Cache-------------------------------------------------------------*/
	SCB_EnableDCache();
 800d0ce:	f7ff ffa1 	bl	800d014 <SCB_EnableDCache>

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800d0d2:	f7f4 fd7d 	bl	8001bd0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800d0d6:	f000 fb83 	bl	800d7e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800d0da:	f000 fe9b 	bl	800de14 <MX_GPIO_Init>
	MX_DMA_Init();
 800d0de:	f000 fde1 	bl	800dca4 <MX_DMA_Init>
	MX_FMC_Init();
 800d0e2:	f000 fe4b 	bl	800dd7c <MX_FMC_Init>
	MX_ADC3_Init();
 800d0e6:	f000 fc29 	bl	800d93c <MX_ADC3_Init>
	MX_USART1_UART_Init();
 800d0ea:	f000 fda7 	bl	800dc3c <MX_USART1_UART_Init>
	MX_LTDC_Init();
 800d0ee:	f000 fd23 	bl	800db38 <MX_LTDC_Init>
	MX_FATFS_Init();
 800d0f2:	f7ff fcdf 	bl	800cab4 <MX_FATFS_Init>
	MX_I2C3_Init();
 800d0f6:	f000 fcd5 	bl	800daa4 <MX_I2C3_Init>
	MX_DMA2D_Init();
 800d0fa:	f000 fc99 	bl	800da30 <MX_DMA2D_Init>
	MX_CRC_Init();
 800d0fe:	f000 fc6f 	bl	800d9e0 <MX_CRC_Init>
	MX_USB_DEVICE_Init();
 800d102:	f001 fe0d 	bl	800ed20 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	// Start SDRAM
	FMC_SDRAM_CommandTypeDef hsdram1Command;
	BSP_SDRAM_Initialization_Sequence(&hsdram1, &hsdram1Command);
 800d106:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d10a:	4619      	mov	r1, r3
 800d10c:	48a7      	ldr	r0, [pc, #668]	; (800d3ac <main+0x314>)
 800d10e:	f7ff fc43 	bl	800c998 <BSP_SDRAM_Initialization_Sequence>

	// Start LCD
	BSP_LCD_Init();
 800d112:	f7f3 ff6d 	bl	8000ff0 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800d116:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800d11a:	2000      	movs	r0, #0
 800d11c:	f7f4 f800 	bl	8001120 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 800d120:	2000      	movs	r0, #0
 800d122:	f7f4 f85d 	bl	80011e0 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 800d126:	f7f4 fb3b 	bl	80017a0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800d12a:	f04f 30ff 	mov.w	r0, #4294967295
 800d12e:	f7f4 f8c9 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800d132:	f04f 30ff 	mov.w	r0, #4294967295
 800d136:	f7f4 f87b 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800d13a:	489d      	ldr	r0, [pc, #628]	; (800d3b0 <main+0x318>)
 800d13c:	f7f4 f860 	bl	8001200 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 1!");
 800d140:	499c      	ldr	r1, [pc, #624]	; (800d3b4 <main+0x31c>)
 800d142:	2005      	movs	r0, #5
 800d144:	f7f4 fa52 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 800d148:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d14c:	f7f4 fd7c 	bl	8001c48 <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLUE);
 800d150:	4897      	ldr	r0, [pc, #604]	; (800d3b0 <main+0x318>)
 800d152:	f7f4 f8b7 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800d156:	4896      	ldr	r0, [pc, #600]	; (800d3b0 <main+0x318>)
 800d158:	f7f4 f86a 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d15c:	f04f 30ff 	mov.w	r0, #4294967295
 800d160:	f7f4 f84e 	bl	8001200 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 2!");
 800d164:	4994      	ldr	r1, [pc, #592]	; (800d3b8 <main+0x320>)
 800d166:	2005      	movs	r0, #5
 800d168:	f7f4 fa40 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 800d16c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d170:	f7f4 fd6a 	bl	8001c48 <HAL_Delay>

	if (DWT_Delay_Init()) {
 800d174:	f7ff fc6e 	bl	800ca54 <DWT_Delay_Init>
		//_Error_Handler(__FILE__, __LINE__); /* Call Error Handler */
	}

	/* USER CODE START 2 */

	BYTE lun = 0;
 800d178:	2300      	movs	r3, #0
 800d17a:	f887 3513 	strb.w	r3, [r7, #1299]	; 0x513
	BYTE RES;
	BYTE *DataBuffer = NULL;
 800d17e:	2300      	movs	r3, #0
 800d180:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c

	DRESULT DRES;


	RES = SDRAMDISK_Driver.disk_initialize(lun);
 800d184:	4b8d      	ldr	r3, [pc, #564]	; (800d3bc <main+0x324>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f897 2513 	ldrb.w	r2, [r7, #1299]	; 0x513
 800d18c:	4610      	mov	r0, r2
 800d18e:	4798      	blx	r3
 800d190:	4603      	mov	r3, r0
 800d192:	f887 350b 	strb.w	r3, [r7, #1291]	; 0x50b
	sprintf(buffer, "disk_initialize = %d \r\n", RES);
 800d196:	f897 250b 	ldrb.w	r2, [r7, #1291]	; 0x50b
 800d19a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d19e:	4988      	ldr	r1, [pc, #544]	; (800d3c0 <main+0x328>)
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f003 fa1b 	bl	80105dc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, 1000, 0xFFFF);
 800d1a6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800d1aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d1b2:	4884      	ldr	r0, [pc, #528]	; (800d3c4 <main+0x32c>)
 800d1b4:	f7f9 fb91 	bl	80068da <HAL_UART_Transmit>

	RES = SDRAMDISK_Driver.disk_status(lun);
 800d1b8:	4b80      	ldr	r3, [pc, #512]	; (800d3bc <main+0x324>)
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	f897 2513 	ldrb.w	r2, [r7, #1299]	; 0x513
 800d1c0:	4610      	mov	r0, r2
 800d1c2:	4798      	blx	r3
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	f887 350b 	strb.w	r3, [r7, #1291]	; 0x50b
	sprintf(buffer, "disk_status = %d  \r\n", RES);
 800d1ca:	f897 250b 	ldrb.w	r2, [r7, #1291]	; 0x50b
 800d1ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d1d2:	497d      	ldr	r1, [pc, #500]	; (800d3c8 <main+0x330>)
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f003 fa01 	bl	80105dc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, 1000, 0xFFFF);
 800d1da:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800d1de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d1e6:	4877      	ldr	r0, [pc, #476]	; (800d3c4 <main+0x32c>)
 800d1e8:	f7f9 fb77 	bl	80068da <HAL_UART_Transmit>

	DRES = SDRAMDISK_Driver.disk_read(lun, DataBuffer, 0, 10);
 800d1ec:	4b73      	ldr	r3, [pc, #460]	; (800d3bc <main+0x324>)
 800d1ee:	689c      	ldr	r4, [r3, #8]
 800d1f0:	f897 0513 	ldrb.w	r0, [r7, #1299]	; 0x513
 800d1f4:	230a      	movs	r3, #10
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 800d1fc:	47a0      	blx	r4
 800d1fe:	4603      	mov	r3, r0
 800d200:	f887 350a 	strb.w	r3, [r7, #1290]	; 0x50a
	sprintf(buffer, "disk_initialize = %d  \r\n", (int) DRES);
 800d204:	f897 250a 	ldrb.w	r2, [r7, #1290]	; 0x50a
 800d208:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d20c:	496f      	ldr	r1, [pc, #444]	; (800d3cc <main+0x334>)
 800d20e:	4618      	mov	r0, r3
 800d210:	f003 f9e4 	bl	80105dc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, 1000, 0xFFFF);
 800d214:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800d218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d21c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d220:	4868      	ldr	r0, [pc, #416]	; (800d3c4 <main+0x32c>)
 800d222:	f7f9 fb5a 	bl	80068da <HAL_UART_Transmit>

	DRES = SDRAMDISK_Driver.disk_write(lun, DataBuffer, 0, 10);
 800d226:	4b65      	ldr	r3, [pc, #404]	; (800d3bc <main+0x324>)
 800d228:	68dc      	ldr	r4, [r3, #12]
 800d22a:	f897 0513 	ldrb.w	r0, [r7, #1299]	; 0x513
 800d22e:	230a      	movs	r3, #10
 800d230:	2200      	movs	r2, #0
 800d232:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 800d236:	47a0      	blx	r4
 800d238:	4603      	mov	r3, r0
 800d23a:	f887 350a 	strb.w	r3, [r7, #1290]	; 0x50a
	sprintf(buffer, "disk_status = %d \r\n", (int) DRES);
 800d23e:	f897 250a 	ldrb.w	r2, [r7, #1290]	; 0x50a
 800d242:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d246:	4962      	ldr	r1, [pc, #392]	; (800d3d0 <main+0x338>)
 800d248:	4618      	mov	r0, r3
 800d24a:	f003 f9c7 	bl	80105dc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *) buffer, 1000, 0xFFFF);
 800d24e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800d252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d25a:	485a      	ldr	r0, [pc, #360]	; (800d3c4 <main+0x32c>)
 800d25c:	f7f9 fb3d 	bl	80068da <HAL_UART_Transmit>


	/*##-1- Link the SDRAM disk I/O driver ##################################*/
	if (FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMPath) == 0) {
 800d260:	495c      	ldr	r1, [pc, #368]	; (800d3d4 <main+0x33c>)
 800d262:	4856      	ldr	r0, [pc, #344]	; (800d3bc <main+0x324>)
 800d264:	f7fe f974 	bl	800b550 <FATFS_LinkDriver>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	f040 80d6 	bne.w	800d41c <main+0x384>
		sprintf(buffer, "SDRAM FATFS 1 Success. \r\n");
 800d270:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d274:	4a58      	ldr	r2, [pc, #352]	; (800d3d8 <main+0x340>)
 800d276:	461c      	mov	r4, r3
 800d278:	4615      	mov	r5, r2
 800d27a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d27c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d27e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d282:	c403      	stmia	r4!, {r0, r1}
 800d284:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) buffer, 1000, 0xFFFF);
 800d286:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800d28a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d28e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d292:	484c      	ldr	r0, [pc, #304]	; (800d3c4 <main+0x32c>)
 800d294:	f7f9 fb21 	bl	80068da <HAL_UART_Transmit>
		/*##-2- Register the file system object to the FatFs module ##############*/
		if (f_mount(&SDRAMFatFs, (TCHAR const*) SDRAMPath, 0) != FR_OK) {
 800d298:	2200      	movs	r2, #0
 800d29a:	494e      	ldr	r1, [pc, #312]	; (800d3d4 <main+0x33c>)
 800d29c:	484f      	ldr	r0, [pc, #316]	; (800d3dc <main+0x344>)
 800d29e:	f7fc ff7f 	bl	800a1a0 <f_mount>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d004      	beq.n	800d2b2 <main+0x21a>
			/* FatFs Initialization Error */
			_Error_Handler(__FILE__, __LINE__);
 800d2a8:	21e9      	movs	r1, #233	; 0xe9
 800d2aa:	484d      	ldr	r0, [pc, #308]	; (800d3e0 <main+0x348>)
 800d2ac:	f001 f904 	bl	800e4b8 <_Error_Handler>
 800d2b0:	e0b4      	b.n	800d41c <main+0x384>
		} else {
			sprintf(buffer, "SDRAM FATFS 2 Success. \r\n");
 800d2b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d2b6:	4a4b      	ldr	r2, [pc, #300]	; (800d3e4 <main+0x34c>)
 800d2b8:	461c      	mov	r4, r3
 800d2ba:	4615      	mov	r5, r2
 800d2bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d2c4:	c403      	stmia	r4!, {r0, r1}
 800d2c6:	8022      	strh	r2, [r4, #0]
			/*##-3- Create a FAT file system (format) on the logical drive #########*/
			/* WARNING: Formatting the uSD card will delete all content on the device */
			if (f_mkfs((TCHAR const*) SDRAMPath, FM_ANY, 0, workBuffer,
 800d2c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	4b46      	ldr	r3, [pc, #280]	; (800d3e8 <main+0x350>)
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	2107      	movs	r1, #7
 800d2d4:	483f      	ldr	r0, [pc, #252]	; (800d3d4 <main+0x33c>)
 800d2d6:	f7fd fcc3 	bl	800ac60 <f_mkfs>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d004      	beq.n	800d2ea <main+0x252>
					sizeof(workBuffer)) != FR_OK) {
				/* FatFs Format Error */
				_Error_Handler(__FILE__, __LINE__);
 800d2e0:	21f1      	movs	r1, #241	; 0xf1
 800d2e2:	483f      	ldr	r0, [pc, #252]	; (800d3e0 <main+0x348>)
 800d2e4:	f001 f8e8 	bl	800e4b8 <_Error_Handler>
 800d2e8:	e098      	b.n	800d41c <main+0x384>
			} else {
				/*##-4- Create and Open a new text file object with write access #####*/
				if (f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE)
 800d2ea:	220a      	movs	r2, #10
 800d2ec:	493f      	ldr	r1, [pc, #252]	; (800d3ec <main+0x354>)
 800d2ee:	4840      	ldr	r0, [pc, #256]	; (800d3f0 <main+0x358>)
 800d2f0:	f7fc ff9c 	bl	800a22c <f_open>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d004      	beq.n	800d304 <main+0x26c>
						!= FR_OK) {
					/* 'STM32.TXT' file Open for write Error */
					_Error_Handler(__FILE__, __LINE__);
 800d2fa:	21f7      	movs	r1, #247	; 0xf7
 800d2fc:	4838      	ldr	r0, [pc, #224]	; (800d3e0 <main+0x348>)
 800d2fe:	f001 f8db 	bl	800e4b8 <_Error_Handler>
 800d302:	e08b      	b.n	800d41c <main+0x384>
				} else {
					/*##-5- Write data to the text file ################################*/
					res = f_write(&MyFile, wtext, sizeof(wtext),
 800d304:	f207 5304 	addw	r3, r7, #1284	; 0x504
 800d308:	f207 41dc 	addw	r1, r7, #1244	; 0x4dc
 800d30c:	2221      	movs	r2, #33	; 0x21
 800d30e:	4838      	ldr	r0, [pc, #224]	; (800d3f0 <main+0x358>)
 800d310:	f7fd fa89 	bl	800a826 <f_write>
 800d314:	4603      	mov	r3, r0
 800d316:	f887 3509 	strb.w	r3, [r7, #1289]	; 0x509
							(void *) &byteswritten);

					if ((byteswritten == 0) || (res != FR_OK)) {
 800d31a:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d003      	beq.n	800d32a <main+0x292>
 800d322:	f897 3509 	ldrb.w	r3, [r7, #1289]	; 0x509
 800d326:	2b00      	cmp	r3, #0
 800d328:	d004      	beq.n	800d334 <main+0x29c>
						/* 'STM32.TXT' file Write or EOF Error */
						_Error_Handler(__FILE__, __LINE__);
 800d32a:	21ff      	movs	r1, #255	; 0xff
 800d32c:	482c      	ldr	r0, [pc, #176]	; (800d3e0 <main+0x348>)
 800d32e:	f001 f8c3 	bl	800e4b8 <_Error_Handler>
 800d332:	e073      	b.n	800d41c <main+0x384>
					} else {
						/*##-6- Close the open text file #################################*/
						f_close(&MyFile);
 800d334:	482e      	ldr	r0, [pc, #184]	; (800d3f0 <main+0x358>)
 800d336:	f7fd fc69 	bl	800ac0c <f_close>

						/*##-7- Open the text file object with read access ###############*/
						if (f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK) {
 800d33a:	2201      	movs	r2, #1
 800d33c:	492b      	ldr	r1, [pc, #172]	; (800d3ec <main+0x354>)
 800d33e:	482c      	ldr	r0, [pc, #176]	; (800d3f0 <main+0x358>)
 800d340:	f7fc ff74 	bl	800a22c <f_open>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d005      	beq.n	800d356 <main+0x2be>
							/* 'STM32.TXT' file Open for read Error */
							_Error_Handler(__FILE__, __LINE__);
 800d34a:	f240 1107 	movw	r1, #263	; 0x107
 800d34e:	4824      	ldr	r0, [pc, #144]	; (800d3e0 <main+0x348>)
 800d350:	f001 f8b2 	bl	800e4b8 <_Error_Handler>
 800d354:	e062      	b.n	800d41c <main+0x384>
						} else {
							/*##-8- Read data from the text file ###########################*/
							res = f_read(&MyFile, rtext, sizeof(rtext),
 800d356:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800d35a:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 800d35e:	2264      	movs	r2, #100	; 0x64
 800d360:	4823      	ldr	r0, [pc, #140]	; (800d3f0 <main+0x358>)
 800d362:	f7fd f921 	bl	800a5a8 <f_read>
 800d366:	4603      	mov	r3, r0
 800d368:	f887 3509 	strb.w	r3, [r7, #1289]	; 0x509
									(UINT*) &bytesread);

							if ((bytesread == 0) || (res != FR_OK)) {
 800d36c:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800d370:	2b00      	cmp	r3, #0
 800d372:	d003      	beq.n	800d37c <main+0x2e4>
 800d374:	f897 3509 	ldrb.w	r3, [r7, #1289]	; 0x509
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d005      	beq.n	800d388 <main+0x2f0>
								/* 'STM32.TXT' file Read or EOF Error */
								_Error_Handler(__FILE__, __LINE__);
 800d37c:	f240 110f 	movw	r1, #271	; 0x10f
 800d380:	4817      	ldr	r0, [pc, #92]	; (800d3e0 <main+0x348>)
 800d382:	f001 f899 	bl	800e4b8 <_Error_Handler>
 800d386:	e049      	b.n	800d41c <main+0x384>
							} else {
								/*##-9- Close the open text file #############################*/
								f_close(&MyFile);
 800d388:	4819      	ldr	r0, [pc, #100]	; (800d3f0 <main+0x358>)
 800d38a:	f7fd fc3f 	bl	800ac0c <f_close>

								/*##-10- Compare read data with the expected data ############*/
								if ((bytesread != byteswritten)) {
 800d38e:	f8d7 2500 	ldr.w	r2, [r7, #1280]	; 0x500
 800d392:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 800d396:	429a      	cmp	r2, r3
 800d398:	d02c      	beq.n	800d3f4 <main+0x35c>
									/* Read data is different from the expected data */
									_Error_Handler(__FILE__, __LINE__);
 800d39a:	f240 1117 	movw	r1, #279	; 0x117
 800d39e:	4810      	ldr	r0, [pc, #64]	; (800d3e0 <main+0x348>)
 800d3a0:	f001 f88a 	bl	800e4b8 <_Error_Handler>
 800d3a4:	e03a      	b.n	800d41c <main+0x384>
 800d3a6:	bf00      	nop
 800d3a8:	08012bc0 	.word	0x08012bc0
 800d3ac:	2000132c 	.word	0x2000132c
 800d3b0:	ff0000ff 	.word	0xff0000ff
 800d3b4:	080129ac 	.word	0x080129ac
 800d3b8:	080129c4 	.word	0x080129c4
 800d3bc:	080156d0 	.word	0x080156d0
 800d3c0:	080129dc 	.word	0x080129dc
 800d3c4:	20001048 	.word	0x20001048
 800d3c8:	080129f4 	.word	0x080129f4
 800d3cc:	08012a0c 	.word	0x08012a0c
 800d3d0:	08012a28 	.word	0x08012a28
 800d3d4:	200010b8 	.word	0x200010b8
 800d3d8:	08012a3c 	.word	0x08012a3c
 800d3dc:	20001360 	.word	0x20001360
 800d3e0:	08012a58 	.word	0x08012a58
 800d3e4:	08012a68 	.word	0x08012a68
 800d3e8:	20000e00 	.word	0x20000e00
 800d3ec:	08012a84 	.word	0x08012a84
 800d3f0:	200010bc 	.word	0x200010bc
								} else {
									/* Success of the demo: no error occurrence */
									sprintf(buffer,
 800d3f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d3f8:	4acf      	ldr	r2, [pc, #828]	; (800d738 <main+0x6a0>)
 800d3fa:	461c      	mov	r4, r3
 800d3fc:	4615      	mov	r5, r2
 800d3fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d402:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d406:	e884 0003 	stmia.w	r4, {r0, r1}
											"SDRAM FATFS Success. \r\n");
									HAL_UART_Transmit(&huart1,
 800d40a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800d40e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d416:	48c9      	ldr	r0, [pc, #804]	; (800d73c <main+0x6a4>)
 800d418:	f7f9 fa5f 	bl	80068da <HAL_UART_Transmit>
			}
		}
	}

	/*##-11- Unlink the micro SD disk I/O driver ###############################*/
	FATFS_UnLinkDriver(SDRAMPath);
 800d41c:	48c8      	ldr	r0, [pc, #800]	; (800d740 <main+0x6a8>)
 800d41e:	f7fe f8df 	bl	800b5e0 <FATFS_UnLinkDriver>

	char CmdBuffer[30];
	char Arg[30] = " ";
 800d422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d426:	2220      	movs	r2, #32
 800d428:	601a      	str	r2, [r3, #0]
 800d42a:	3304      	adds	r3, #4
 800d42c:	2200      	movs	r2, #0
 800d42e:	601a      	str	r2, [r3, #0]
 800d430:	605a      	str	r2, [r3, #4]
 800d432:	609a      	str	r2, [r3, #8]
 800d434:	60da      	str	r2, [r3, #12]
 800d436:	611a      	str	r2, [r3, #16]
 800d438:	615a      	str	r2, [r3, #20]
 800d43a:	831a      	strh	r2, [r3, #24]
	char Cmd[30] = " ";
 800d43c:	f107 0320 	add.w	r3, r7, #32
 800d440:	2220      	movs	r2, #32
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	3304      	adds	r3, #4
 800d446:	2200      	movs	r2, #0
 800d448:	601a      	str	r2, [r3, #0]
 800d44a:	605a      	str	r2, [r3, #4]
 800d44c:	609a      	str	r2, [r3, #8]
 800d44e:	60da      	str	r2, [r3, #12]
 800d450:	611a      	str	r2, [r3, #16]
 800d452:	615a      	str	r2, [r3, #20]
 800d454:	831a      	strh	r2, [r3, #24]
	size_t n = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c

	uint32_t NoOfPoints = 19200;
 800d45c:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800d460:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
	uint32_t AvgSize = 10;
 800d464:	230a      	movs	r3, #10
 800d466:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	uint32_t Period_us = 100;
 800d46a:	2364      	movs	r3, #100	; 0x64
 800d46c:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
	uint32_t Count_ms = 1000;
 800d470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d474:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

	// Clear screen, set it up
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800d478:	f04f 31ff 	mov.w	r1, #4294967295
 800d47c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d480:	f7ff fc56 	bl	800cd30 <InitScreen>

	// Initialize data storage
	// https://stackoverflow.com/questions/3536153/c-dynamically-growing-array
	Array Data;
	initArray(&Data, NoOfPoints);  // initially 19200 elements
 800d484:	f107 0314 	add.w	r3, r7, #20
 800d488:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7ff fb4d 	bl	800cb2c <initArray>

	LCDWrite(5, "Ready.");
 800d492:	49ac      	ldr	r1, [pc, #688]	; (800d744 <main+0x6ac>)
 800d494:	2005      	movs	r0, #5
 800d496:	f7ff fc63 	bl	800cd60 <LCDWrite>

	while (!((strcmp(Cmd, "quit") == 0) && (n == 1))) {
 800d49a:	e177      	b.n	800d78c <main+0x6f4>

		sprintf(buffer,
				"Ready. Settings are Points=%lu, Avg=%lu, Period_us=%lu, Count_ms=%lu. "
						"Sampling will take apprx %f secs \r\n", NoOfPoints,
				AvgSize, Period_us, Count_ms,
				((float) (NoOfPoints * Period_us / 1000000.0)));
 800d49c:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800d4a0:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 800d4a4:	fb02 f303 	mul.w	r3, r2, r3
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7f3 f85b 	bl	8000564 <__aeabi_ui2d>
 800d4ae:	a3a0      	add	r3, pc, #640	; (adr r3, 800d730 <main+0x698>)
 800d4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b4:	f7f3 f9f6 	bl	80008a4 <__aeabi_ddiv>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	4618      	mov	r0, r3
 800d4be:	4621      	mov	r1, r4
 800d4c0:	f7f3 fbbe 	bl	8000c40 <__aeabi_d2f>
 800d4c4:	4603      	mov	r3, r0
		sprintf(buffer,
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7f3 f86e 	bl	80005a8 <__aeabi_f2d>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	460c      	mov	r4, r1
 800d4d0:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800d4d4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d4d8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800d4dc:	9301      	str	r3, [sp, #4]
 800d4de:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800d4e8:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800d4ec:	4996      	ldr	r1, [pc, #600]	; (800d748 <main+0x6b0>)
 800d4ee:	f003 f875 	bl	80105dc <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) buffer, 1000, 0xFFFF);
 800d4f2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800d4f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d4fe:	488f      	ldr	r0, [pc, #572]	; (800d73c <main+0x6a4>)
 800d500:	f7f9 f9eb 	bl	80068da <HAL_UART_Transmit>

		gets(CmdBuffer);
 800d504:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d508:	4618      	mov	r0, r3
 800d50a:	f002 f9f3 	bl	800f8f4 <gets>
		printf("I got %s \r\n", CmdBuffer);
 800d50e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d512:	4619      	mov	r1, r3
 800d514:	488d      	ldr	r0, [pc, #564]	; (800d74c <main+0x6b4>)
 800d516:	f002 ff6d 	bl	80103f4 <iprintf>
		strcpy(Cmd, " ");
 800d51a:	f107 0320 	add.w	r3, r7, #32
 800d51e:	2220      	movs	r2, #32
 800d520:	801a      	strh	r2, [r3, #0]
		strcpy(Arg, " ");
 800d522:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d526:	2220      	movs	r2, #32
 800d528:	801a      	strh	r2, [r3, #0]

		// Parse command and possible numeric arg
		char s[] = "Initial string";
 800d52a:	1d3b      	adds	r3, r7, #4
 800d52c:	4a88      	ldr	r2, [pc, #544]	; (800d750 <main+0x6b8>)
 800d52e:	461c      	mov	r4, r3
 800d530:	4613      	mov	r3, r2
 800d532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d534:	c407      	stmia	r4!, {r0, r1, r2}
 800d536:	8023      	strh	r3, [r4, #0]
 800d538:	3402      	adds	r4, #2
 800d53a:	0c1b      	lsrs	r3, r3, #16
 800d53c:	7023      	strb	r3, [r4, #0]
		char ** word_array = NULL;
 800d53e:	463b      	mov	r3, r7
 800d540:	2200      	movs	r2, #0
 800d542:	601a      	str	r2, [r3, #0]

		strcpy(s, CmdBuffer);
 800d544:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d548:	1d3b      	adds	r3, r7, #4
 800d54a:	4611      	mov	r1, r2
 800d54c:	4618      	mov	r0, r3
 800d54e:	f003 f869 	bl	8010624 <strcpy>
		n = string_parser(s, &word_array);
 800d552:	463a      	mov	r2, r7
 800d554:	1d3b      	adds	r3, r7, #4
 800d556:	4611      	mov	r1, r2
 800d558:	4618      	mov	r0, r3
 800d55a:	f7ff fb31 	bl	800cbc0 <string_parser>
 800d55e:	f8c7 052c 	str.w	r0, [r7, #1324]	; 0x52c

		for (size_t i = 0; i < n; i++) {
 800d562:	2300      	movs	r3, #0
 800d564:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 800d568:	e02d      	b.n	800d5c6 <main+0x52e>
			if (i == 0) {
 800d56a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d10c      	bne.n	800d58c <main+0x4f4>
				strcpy(Cmd, word_array[i]);
 800d572:	463b      	mov	r3, r7
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4413      	add	r3, r2
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	f107 0320 	add.w	r3, r7, #32
 800d584:	4611      	mov	r1, r2
 800d586:	4618      	mov	r0, r3
 800d588:	f003 f84c 	bl	8010624 <strcpy>
			}
			if (i == 1) {
 800d58c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 800d590:	2b01      	cmp	r3, #1
 800d592:	d10c      	bne.n	800d5ae <main+0x516>
				strcpy(Arg, word_array[i]);
 800d594:	463b      	mov	r3, r7
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4413      	add	r3, r2
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d5a6:	4611      	mov	r1, r2
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f003 f83b 	bl	8010624 <strcpy>
			}
			if (i > 1) {
 800d5ae:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d902      	bls.n	800d5bc <main+0x524>
				printf("Wrong number of arguments \r\n");
 800d5b6:	4867      	ldr	r0, [pc, #412]	; (800d754 <main+0x6bc>)
 800d5b8:	f002 ff90 	bl	80104dc <puts>
		for (size_t i = 0; i < n; i++) {
 800d5bc:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 800d5c6:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 800d5ca:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d3cb      	bcc.n	800d56a <main+0x4d2>
			}
		}

		// pc1.printf("Cmd = %s Arg = %s \r\n",Cmd,Arg);
		for (size_t i = 0; i < n; i++)
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800d5d8:	e00e      	b.n	800d5f8 <main+0x560>
			free(word_array[i]);
 800d5da:	463b      	mov	r3, r7
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4413      	add	r3, r2
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f002 f9c9 	bl	800f980 <free>
		for (size_t i = 0; i < n; i++)
 800d5ee:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800d5f8:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
 800d5fc:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800d600:	429a      	cmp	r2, r3
 800d602:	d3ea      	bcc.n	800d5da <main+0x542>
		free(word_array);
 800d604:	463b      	mov	r3, r7
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4618      	mov	r0, r3
 800d60a:	f002 f9b9 	bl	800f980 <free>

		//strcpy(Cmd,"quit");
		//n=1;
		HAL_Delay(3000);
 800d60e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d612:	f7f4 fb19 	bl	8001c48 <HAL_Delay>

		// Branch based on command
		// meas: Sample and plot a data set
		if ((strcmp(Cmd, "meas") == 0) && (n == 1)) {
 800d616:	f107 0320 	add.w	r3, r7, #32
 800d61a:	494f      	ldr	r1, [pc, #316]	; (800d758 <main+0x6c0>)
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7f2 fdf7 	bl	8000210 <strcmp>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d11a      	bne.n	800d65e <main+0x5c6>
 800d628:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d116      	bne.n	800d65e <main+0x5c6>

			// Countdown
			CountDown(Count_ms);
 800d630:	f8d7 051c 	ldr.w	r0, [r7, #1308]	; 0x51c
 800d634:	f7ff fbb0 	bl	800cd98 <CountDown>

			// Sample & plot data one time
			SamplePoints(&Data, NoOfPoints, Period_us);
 800d638:	f107 0314 	add.w	r3, r7, #20
 800d63c:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 800d640:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 800d644:	4618      	mov	r0, r3
 800d646:	f7ff fbf5 	bl	800ce34 <SamplePoints>
			AvgAndPlotPoints(&Data, NoOfPoints, AvgSize);
 800d64a:	f107 0314 	add.w	r3, r7, #20
 800d64e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800d652:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 800d656:	4618      	mov	r0, r3
 800d658:	f7ff fc24 	bl	800cea4 <AvgAndPlotPoints>
 800d65c:	e096      	b.n	800d78c <main+0x6f4>
		}

		// setpoints: Adjust sampled points
		else if ((strcmp(Cmd, "setpoints") == 0) && (n == 2)) {
 800d65e:	f107 0320 	add.w	r3, r7, #32
 800d662:	493e      	ldr	r1, [pc, #248]	; (800d75c <main+0x6c4>)
 800d664:	4618      	mov	r0, r3
 800d666:	f7f2 fdd3 	bl	8000210 <strcmp>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d115      	bne.n	800d69c <main+0x604>
 800d670:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800d674:	2b02      	cmp	r3, #2
 800d676:	d111      	bne.n	800d69c <main+0x604>
			// Allocate more or less data space
			NoOfPoints = (uint32_t) strtol(Arg, NULL, 10);
 800d678:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d67c:	220a      	movs	r2, #10
 800d67e:	2100      	movs	r1, #0
 800d680:	4618      	mov	r0, r3
 800d682:	f003 f86d 	bl	8010760 <strtol>
 800d686:	4603      	mov	r3, r0
 800d688:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			//pc1.printf("Old Data size is %u New NoOfPOints = %u \r\n",Data.size,NoOfPoints);
			insertArray(&Data, NoOfPoints);
 800d68c:	f107 0314 	add.w	r3, r7, #20
 800d690:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff fa61 	bl	800cb5c <insertArray>
 800d69a:	e077      	b.n	800d78c <main+0x6f4>
			//pc1.printf("New Array size is %u \r\n",Data.size);
		}

		// setavg: Adjust average amount in samples
		else if ((strcmp(Cmd, "setavg") == 0) && (n == 2)) {
 800d69c:	f107 0320 	add.w	r3, r7, #32
 800d6a0:	492f      	ldr	r1, [pc, #188]	; (800d760 <main+0x6c8>)
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7f2 fdb4 	bl	8000210 <strcmp>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10e      	bne.n	800d6cc <main+0x634>
 800d6ae:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	d10a      	bne.n	800d6cc <main+0x634>
			AvgSize = (uint32_t) strtol(Arg, NULL, 10);
 800d6b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d6ba:	220a      	movs	r2, #10
 800d6bc:	2100      	movs	r1, #0
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f003 f84e 	bl	8010760 <strtol>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800d6ca:	e05f      	b.n	800d78c <main+0x6f4>
		}

		// setperiod: Adjust sample period in us
		else if ((strcmp(Cmd, "setperiod") == 0) && (n == 2)) {
 800d6cc:	f107 0320 	add.w	r3, r7, #32
 800d6d0:	4924      	ldr	r1, [pc, #144]	; (800d764 <main+0x6cc>)
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7f2 fd9c 	bl	8000210 <strcmp>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d10e      	bne.n	800d6fc <main+0x664>
 800d6de:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800d6e2:	2b02      	cmp	r3, #2
 800d6e4:	d10a      	bne.n	800d6fc <main+0x664>
			Period_us = (uint32_t) strtol(Arg, NULL, 10);
 800d6e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d6ea:	220a      	movs	r2, #10
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f003 f836 	bl	8010760 <strtol>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800d6fa:	e047      	b.n	800d78c <main+0x6f4>
		}

		// setcount: Adjust countdown period in ms
		else if ((strcmp(Cmd, "setcount") == 0) && (n == 2)) {
 800d6fc:	f107 0320 	add.w	r3, r7, #32
 800d700:	4919      	ldr	r1, [pc, #100]	; (800d768 <main+0x6d0>)
 800d702:	4618      	mov	r0, r3
 800d704:	f7f2 fd84 	bl	8000210 <strcmp>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d12e      	bne.n	800d76c <main+0x6d4>
 800d70e:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800d712:	2b02      	cmp	r3, #2
 800d714:	d12a      	bne.n	800d76c <main+0x6d4>
			Count_ms = (uint32_t) strtol(Arg, NULL, 10);
 800d716:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d71a:	220a      	movs	r2, #10
 800d71c:	2100      	movs	r1, #0
 800d71e:	4618      	mov	r0, r3
 800d720:	f003 f81e 	bl	8010760 <strtol>
 800d724:	4603      	mov	r3, r0
 800d726:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800d72a:	e02f      	b.n	800d78c <main+0x6f4>
 800d72c:	f3af 8000 	nop.w
 800d730:	00000000 	.word	0x00000000
 800d734:	412e8480 	.word	0x412e8480
 800d738:	08012a90 	.word	0x08012a90
 800d73c:	20001048 	.word	0x20001048
 800d740:	200010b8 	.word	0x200010b8
 800d744:	08012aa8 	.word	0x08012aa8
 800d748:	08012ab0 	.word	0x08012ab0
 800d74c:	08012b1c 	.word	0x08012b1c
 800d750:	08012be4 	.word	0x08012be4
 800d754:	08012b28 	.word	0x08012b28
 800d758:	08012b44 	.word	0x08012b44
 800d75c:	08012b4c 	.word	0x08012b4c
 800d760:	08012b58 	.word	0x08012b58
 800d764:	08012b60 	.word	0x08012b60
 800d768:	08012b6c 	.word	0x08012b6c
		}

		// quit: Exit on next while
		else if ((strcmp(Cmd, "quit") == 0) && (n == 1)) {
 800d76c:	f107 0320 	add.w	r3, r7, #32
 800d770:	4917      	ldr	r1, [pc, #92]	; (800d7d0 <main+0x738>)
 800d772:	4618      	mov	r0, r3
 800d774:	f7f2 fd4c 	bl	8000210 <strcmp>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d103      	bne.n	800d786 <main+0x6ee>
 800d77e:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800d782:	2b01      	cmp	r3, #1
 800d784:	d002      	beq.n	800d78c <main+0x6f4>
			// Do nothing yet
		} else {
			printf("Wrong command or argument \r\n");
 800d786:	4813      	ldr	r0, [pc, #76]	; (800d7d4 <main+0x73c>)
 800d788:	f002 fea8 	bl	80104dc <puts>
	while (!((strcmp(Cmd, "quit") == 0) && (n == 1))) {
 800d78c:	f107 0320 	add.w	r3, r7, #32
 800d790:	490f      	ldr	r1, [pc, #60]	; (800d7d0 <main+0x738>)
 800d792:	4618      	mov	r0, r3
 800d794:	f7f2 fd3c 	bl	8000210 <strcmp>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	f47f ae7e 	bne.w	800d49c <main+0x404>
 800d7a0:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	f47f ae79 	bne.w	800d49c <main+0x404>
		}
	}

	// Free memory after quit
	freeArray(&Data);
 800d7aa:	f107 0314 	add.w	r3, r7, #20
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7ff f9ef 	bl	800cb92 <freeArray>

	// Print informative messages
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800d7b4:	f04f 31ff 	mov.w	r1, #4294967295
 800d7b8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d7bc:	f7ff fab8 	bl	800cd30 <InitScreen>
	LCDWrite(5, "Stop.");
 800d7c0:	4905      	ldr	r1, [pc, #20]	; (800d7d8 <main+0x740>)
 800d7c2:	2005      	movs	r0, #5
 800d7c4:	f7ff facc 	bl	800cd60 <LCDWrite>
	printf("Exit. Data freed. Stop. \r\n");
 800d7c8:	4804      	ldr	r0, [pc, #16]	; (800d7dc <main+0x744>)
 800d7ca:	f002 fe87 	bl	80104dc <puts>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800d7ce:	e7fe      	b.n	800d7ce <main+0x736>
 800d7d0:	08012b78 	.word	0x08012b78
 800d7d4:	08012b80 	.word	0x08012b80
 800d7d8:	08012b9c 	.word	0x08012b9c
 800d7dc:	08012ba4 	.word	0x08012ba4

0800d7e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b0b4      	sub	sp, #208	; 0xd0
 800d7e4:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 800d7e6:	4a50      	ldr	r2, [pc, #320]	; (800d928 <SystemClock_Config+0x148>)
 800d7e8:	4b4f      	ldr	r3, [pc, #316]	; (800d928 <SystemClock_Config+0x148>)
 800d7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7f0:	6413      	str	r3, [r2, #64]	; 0x40
 800d7f2:	4b4d      	ldr	r3, [pc, #308]	; (800d928 <SystemClock_Config+0x148>)
 800d7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7fa:	607b      	str	r3, [r7, #4]
 800d7fc:	687b      	ldr	r3, [r7, #4]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d7fe:	4a4b      	ldr	r2, [pc, #300]	; (800d92c <SystemClock_Config+0x14c>)
 800d800:	4b4a      	ldr	r3, [pc, #296]	; (800d92c <SystemClock_Config+0x14c>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d808:	6013      	str	r3, [r2, #0]
 800d80a:	4b48      	ldr	r3, [pc, #288]	; (800d92c <SystemClock_Config+0x14c>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d812:	603b      	str	r3, [r7, #0]
 800d814:	683b      	ldr	r3, [r7, #0]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d816:	2301      	movs	r3, #1
 800d818:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d81c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d820:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d824:	2302      	movs	r3, #2
 800d826:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d82a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d82e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 800d832:	2319      	movs	r3, #25
 800d834:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 800d838:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800d83c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d840:	2302      	movs	r3, #2
 800d842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 800d846:	2309      	movs	r3, #9
 800d848:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800d84c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d850:	4618      	mov	r0, r3
 800d852:	f7f7 fc53 	bl	80050fc <HAL_RCC_OscConfig>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d004      	beq.n	800d866 <SystemClock_Config+0x86>
		_Error_Handler(__FILE__, __LINE__);
 800d85c:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800d860:	4833      	ldr	r0, [pc, #204]	; (800d930 <SystemClock_Config+0x150>)
 800d862:	f000 fe29 	bl	800e4b8 <_Error_Handler>
	}

	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800d866:	f7f7 fbf9 	bl	800505c <HAL_PWREx_EnableOverDrive>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d004      	beq.n	800d87a <SystemClock_Config+0x9a>
		_Error_Handler(__FILE__, __LINE__);
 800d870:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800d874:	482e      	ldr	r0, [pc, #184]	; (800d930 <SystemClock_Config+0x150>)
 800d876:	f000 fe1f 	bl	800e4b8 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800d87a:	230f      	movs	r3, #15
 800d87c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d880:	2302      	movs	r3, #2
 800d882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d886:	2300      	movs	r3, #0
 800d888:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d88c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 800d89c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d8a0:	2106      	movs	r1, #6
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7f7 fe9a 	bl	80055dc <HAL_RCC_ClockConfig>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d004      	beq.n	800d8b8 <SystemClock_Config+0xd8>
		_Error_Handler(__FILE__, __LINE__);
 800d8ae:	f240 11dd 	movw	r1, #477	; 0x1dd
 800d8b2:	481f      	ldr	r0, [pc, #124]	; (800d930 <SystemClock_Config+0x150>)
 800d8b4:	f000 fe00 	bl	800e4b8 <_Error_Handler>
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 800d8b8:	4b1e      	ldr	r3, [pc, #120]	; (800d934 <SystemClock_Config+0x154>)
 800d8ba:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800d8bc:	23c0      	movs	r3, #192	; 0xc0
 800d8be:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800d8c0:	2305      	movs	r3, #5
 800d8c2:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800d8c4:	2302      	movs	r3, #2
 800d8c6:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800d8d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d8d4:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800d8de:	f107 0308 	add.w	r3, r7, #8
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7f8 f87e 	bl	80059e4 <HAL_RCCEx_PeriphCLKConfig>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d004      	beq.n	800d8f8 <SystemClock_Config+0x118>
		_Error_Handler(__FILE__, __LINE__);
 800d8ee:	f240 11eb 	movw	r1, #491	; 0x1eb
 800d8f2:	480f      	ldr	r0, [pc, #60]	; (800d930 <SystemClock_Config+0x150>)
 800d8f4:	f000 fde0 	bl	800e4b8 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800d8f8:	f7f8 f80e 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	4b0e      	ldr	r3, [pc, #56]	; (800d938 <SystemClock_Config+0x158>)
 800d900:	fba3 2302 	umull	r2, r3, r3, r2
 800d904:	099b      	lsrs	r3, r3, #6
 800d906:	4618      	mov	r0, r3
 800d908:	f7f4 fde3 	bl	80024d2 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800d90c:	2004      	movs	r0, #4
 800d90e:	f7f4 fded 	bl	80024ec <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800d912:	2200      	movs	r2, #0
 800d914:	2100      	movs	r1, #0
 800d916:	f04f 30ff 	mov.w	r0, #4294967295
 800d91a:	f7f4 fdb0 	bl	800247e <HAL_NVIC_SetPriority>
}
 800d91e:	bf00      	nop
 800d920:	37d0      	adds	r7, #208	; 0xd0
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	40023800 	.word	0x40023800
 800d92c:	40007000 	.word	0x40007000
 800d930:	08012a58 	.word	0x08012a58
 800d934:	00010048 	.word	0x00010048
 800d938:	10624dd3 	.word	0x10624dd3

0800d93c <MX_ADC3_Init>:

/* ADC3 init function */
static void MX_ADC3_Init(void) {
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig;

	/**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800d942:	4b23      	ldr	r3, [pc, #140]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d944:	4a23      	ldr	r2, [pc, #140]	; (800d9d4 <MX_ADC3_Init+0x98>)
 800d946:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800d948:	4b21      	ldr	r3, [pc, #132]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d94a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d94e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800d950:	4b1f      	ldr	r3, [pc, #124]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d952:	2200      	movs	r2, #0
 800d954:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 800d956:	4b1e      	ldr	r3, [pc, #120]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d958:	2200      	movs	r2, #0
 800d95a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800d95c:	4b1c      	ldr	r3, [pc, #112]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d95e:	2200      	movs	r2, #0
 800d960:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800d962:	4b1b      	ldr	r3, [pc, #108]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d964:	2200      	movs	r2, #0
 800d966:	621a      	str	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d968:	4b19      	ldr	r3, [pc, #100]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d96a:	2200      	movs	r2, #0
 800d96c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d96e:	4b18      	ldr	r3, [pc, #96]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d970:	4a19      	ldr	r2, [pc, #100]	; (800d9d8 <MX_ADC3_Init+0x9c>)
 800d972:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d974:	4b16      	ldr	r3, [pc, #88]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d976:	2200      	movs	r2, #0
 800d978:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 800d97a:	4b15      	ldr	r3, [pc, #84]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d97c:	2201      	movs	r2, #1
 800d97e:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800d980:	4b13      	ldr	r3, [pc, #76]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d982:	2200      	movs	r2, #0
 800d984:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d986:	4b12      	ldr	r3, [pc, #72]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d988:	2201      	movs	r2, #1
 800d98a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 800d98c:	4810      	ldr	r0, [pc, #64]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d98e:	f7f4 f97d 	bl	8001c8c <HAL_ADC_Init>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d004      	beq.n	800d9a2 <MX_ADC3_Init+0x66>
		_Error_Handler(__FILE__, __LINE__);
 800d998:	f240 210e 	movw	r1, #526	; 0x20e
 800d99c:	480f      	ldr	r0, [pc, #60]	; (800d9dc <MX_ADC3_Init+0xa0>)
 800d99e:	f000 fd8b 	bl	800e4b8 <_Error_Handler>
	}

	/**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800d9ae:	463b      	mov	r3, r7
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	4807      	ldr	r0, [pc, #28]	; (800d9d0 <MX_ADC3_Init+0x94>)
 800d9b4:	f7f4 fa60 	bl	8001e78 <HAL_ADC_ConfigChannel>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d004      	beq.n	800d9c8 <MX_ADC3_Init+0x8c>
		_Error_Handler(__FILE__, __LINE__);
 800d9be:	f240 2117 	movw	r1, #535	; 0x217
 800d9c2:	4806      	ldr	r0, [pc, #24]	; (800d9dc <MX_ADC3_Init+0xa0>)
 800d9c4:	f000 fd78 	bl	800e4b8 <_Error_Handler>
	}

}
 800d9c8:	bf00      	nop
 800d9ca:	3710      	adds	r7, #16
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	20001000 	.word	0x20001000
 800d9d4:	40012200 	.word	0x40012200
 800d9d8:	0f000001 	.word	0x0f000001
 800d9dc:	08012a58 	.word	0x08012a58

0800d9e0 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void) {
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	af00      	add	r7, sp, #0

	hcrc.Instance = CRC;
 800d9e4:	4b0f      	ldr	r3, [pc, #60]	; (800da24 <MX_CRC_Init+0x44>)
 800d9e6:	4a10      	ldr	r2, [pc, #64]	; (800da28 <MX_CRC_Init+0x48>)
 800d9e8:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800d9ea:	4b0e      	ldr	r3, [pc, #56]	; (800da24 <MX_CRC_Init+0x44>)
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800d9f0:	4b0c      	ldr	r3, [pc, #48]	; (800da24 <MX_CRC_Init+0x44>)
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800d9f6:	4b0b      	ldr	r3, [pc, #44]	; (800da24 <MX_CRC_Init+0x44>)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800d9fc:	4b09      	ldr	r3, [pc, #36]	; (800da24 <MX_CRC_Init+0x44>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800da02:	4b08      	ldr	r3, [pc, #32]	; (800da24 <MX_CRC_Init+0x44>)
 800da04:	2201      	movs	r2, #1
 800da06:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800da08:	4806      	ldr	r0, [pc, #24]	; (800da24 <MX_CRC_Init+0x44>)
 800da0a:	f7f4 fd99 	bl	8002540 <HAL_CRC_Init>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d004      	beq.n	800da1e <MX_CRC_Init+0x3e>
		_Error_Handler(__FILE__, __LINE__);
 800da14:	f240 2126 	movw	r1, #550	; 0x226
 800da18:	4804      	ldr	r0, [pc, #16]	; (800da2c <MX_CRC_Init+0x4c>)
 800da1a:	f000 fd4d 	bl	800e4b8 <_Error_Handler>
	}

}
 800da1e:	bf00      	nop
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	20000d34 	.word	0x20000d34
 800da28:	40023000 	.word	0x40023000
 800da2c:	08012a58 	.word	0x08012a58

0800da30 <MX_DMA2D_Init>:

/* DMA2D init function */
static void MX_DMA2D_Init(void) {
 800da30:	b580      	push	{r7, lr}
 800da32:	af00      	add	r7, sp, #0

	hdma2d.Instance = DMA2D;
 800da34:	4b18      	ldr	r3, [pc, #96]	; (800da98 <MX_DMA2D_Init+0x68>)
 800da36:	4a19      	ldr	r2, [pc, #100]	; (800da9c <MX_DMA2D_Init+0x6c>)
 800da38:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 800da3a:	4b17      	ldr	r3, [pc, #92]	; (800da98 <MX_DMA2D_Init+0x68>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800da40:	4b15      	ldr	r3, [pc, #84]	; (800da98 <MX_DMA2D_Init+0x68>)
 800da42:	2200      	movs	r2, #0
 800da44:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 800da46:	4b14      	ldr	r3, [pc, #80]	; (800da98 <MX_DMA2D_Init+0x68>)
 800da48:	2200      	movs	r2, #0
 800da4a:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 800da4c:	4b12      	ldr	r3, [pc, #72]	; (800da98 <MX_DMA2D_Init+0x68>)
 800da4e:	2200      	movs	r2, #0
 800da50:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800da52:	4b11      	ldr	r3, [pc, #68]	; (800da98 <MX_DMA2D_Init+0x68>)
 800da54:	2200      	movs	r2, #0
 800da56:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800da58:	4b0f      	ldr	r3, [pc, #60]	; (800da98 <MX_DMA2D_Init+0x68>)
 800da5a:	2200      	movs	r2, #0
 800da5c:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800da5e:	4b0e      	ldr	r3, [pc, #56]	; (800da98 <MX_DMA2D_Init+0x68>)
 800da60:	2200      	movs	r2, #0
 800da62:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 800da64:	480c      	ldr	r0, [pc, #48]	; (800da98 <MX_DMA2D_Init+0x68>)
 800da66:	f7f5 f931 	bl	8002ccc <HAL_DMA2D_Init>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d004      	beq.n	800da7a <MX_DMA2D_Init+0x4a>
		_Error_Handler(__FILE__, __LINE__);
 800da70:	f240 2137 	movw	r1, #567	; 0x237
 800da74:	480a      	ldr	r0, [pc, #40]	; (800daa0 <MX_DMA2D_Init+0x70>)
 800da76:	f000 fd1f 	bl	800e4b8 <_Error_Handler>
	}

	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 800da7a:	2101      	movs	r1, #1
 800da7c:	4806      	ldr	r0, [pc, #24]	; (800da98 <MX_DMA2D_Init+0x68>)
 800da7e:	f7f5 fa83 	bl	8002f88 <HAL_DMA2D_ConfigLayer>
 800da82:	4603      	mov	r3, r0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d004      	beq.n	800da92 <MX_DMA2D_Init+0x62>
		_Error_Handler(__FILE__, __LINE__);
 800da88:	f240 213b 	movw	r1, #571	; 0x23b
 800da8c:	4804      	ldr	r0, [pc, #16]	; (800daa0 <MX_DMA2D_Init+0x70>)
 800da8e:	f000 fd13 	bl	800e4b8 <_Error_Handler>
	}

}
 800da92:	bf00      	nop
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	200012ec 	.word	0x200012ec
 800da9c:	4002b000 	.word	0x4002b000
 800daa0:	08012a58 	.word	0x08012a58

0800daa4 <MX_I2C3_Init>:

/* I2C3 init function */
static void MX_I2C3_Init(void) {
 800daa4:	b580      	push	{r7, lr}
 800daa6:	af00      	add	r7, sp, #0

	hi2c3.Instance = I2C3;
 800daa8:	4b1f      	ldr	r3, [pc, #124]	; (800db28 <MX_I2C3_Init+0x84>)
 800daaa:	4a20      	ldr	r2, [pc, #128]	; (800db2c <MX_I2C3_Init+0x88>)
 800daac:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 800daae:	4b1e      	ldr	r3, [pc, #120]	; (800db28 <MX_I2C3_Init+0x84>)
 800dab0:	4a1f      	ldr	r2, [pc, #124]	; (800db30 <MX_I2C3_Init+0x8c>)
 800dab2:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 224;
 800dab4:	4b1c      	ldr	r3, [pc, #112]	; (800db28 <MX_I2C3_Init+0x84>)
 800dab6:	22e0      	movs	r2, #224	; 0xe0
 800dab8:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800daba:	4b1b      	ldr	r3, [pc, #108]	; (800db28 <MX_I2C3_Init+0x84>)
 800dabc:	2201      	movs	r2, #1
 800dabe:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800dac0:	4b19      	ldr	r3, [pc, #100]	; (800db28 <MX_I2C3_Init+0x84>)
 800dac2:	2200      	movs	r2, #0
 800dac4:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800dac6:	4b18      	ldr	r3, [pc, #96]	; (800db28 <MX_I2C3_Init+0x84>)
 800dac8:	2200      	movs	r2, #0
 800daca:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800dacc:	4b16      	ldr	r3, [pc, #88]	; (800db28 <MX_I2C3_Init+0x84>)
 800dace:	2200      	movs	r2, #0
 800dad0:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800dad2:	4b15      	ldr	r3, [pc, #84]	; (800db28 <MX_I2C3_Init+0x84>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800dad8:	4b13      	ldr	r3, [pc, #76]	; (800db28 <MX_I2C3_Init+0x84>)
 800dada:	2200      	movs	r2, #0
 800dadc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800dade:	4812      	ldr	r0, [pc, #72]	; (800db28 <MX_I2C3_Init+0x84>)
 800dae0:	f7f5 fd50 	bl	8003584 <HAL_I2C_Init>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d004      	beq.n	800daf4 <MX_I2C3_Init+0x50>
		_Error_Handler(__FILE__, __LINE__);
 800daea:	f240 214d 	movw	r1, #589	; 0x24d
 800daee:	4811      	ldr	r0, [pc, #68]	; (800db34 <MX_I2C3_Init+0x90>)
 800daf0:	f000 fce2 	bl	800e4b8 <_Error_Handler>
	}

	/**Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 800daf4:	2100      	movs	r1, #0
 800daf6:	480c      	ldr	r0, [pc, #48]	; (800db28 <MX_I2C3_Init+0x84>)
 800daf8:	f7f5 fdd2 	bl	80036a0 <HAL_I2CEx_ConfigAnalogFilter>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d004      	beq.n	800db0c <MX_I2C3_Init+0x68>
			!= HAL_OK) {
		_Error_Handler(__FILE__, __LINE__);
 800db02:	f44f 7115 	mov.w	r1, #596	; 0x254
 800db06:	480b      	ldr	r0, [pc, #44]	; (800db34 <MX_I2C3_Init+0x90>)
 800db08:	f000 fcd6 	bl	800e4b8 <_Error_Handler>
	}

	/**Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 800db0c:	2100      	movs	r1, #0
 800db0e:	4806      	ldr	r0, [pc, #24]	; (800db28 <MX_I2C3_Init+0x84>)
 800db10:	f7f5 fe11 	bl	8003736 <HAL_I2CEx_ConfigDigitalFilter>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d004      	beq.n	800db24 <MX_I2C3_Init+0x80>
		_Error_Handler(__FILE__, __LINE__);
 800db1a:	f240 215a 	movw	r1, #602	; 0x25a
 800db1e:	4805      	ldr	r0, [pc, #20]	; (800db34 <MX_I2C3_Init+0x90>)
 800db20:	f000 fcca 	bl	800e4b8 <_Error_Handler>
	}

}
 800db24:	bf00      	nop
 800db26:	bd80      	pop	{r7, pc}
 800db28:	20000c28 	.word	0x20000c28
 800db2c:	40005c00 	.word	0x40005c00
 800db30:	00c0eaff 	.word	0x00c0eaff
 800db34:	08012a58 	.word	0x08012a58

0800db38 <MX_LTDC_Init>:

/* LTDC init function */
static void MX_LTDC_Init(void) {
 800db38:	b580      	push	{r7, lr}
 800db3a:	b08e      	sub	sp, #56	; 0x38
 800db3c:	af00      	add	r7, sp, #0

	LTDC_LayerCfgTypeDef pLayerCfg;

	hltdc.Instance = LTDC;
 800db3e:	4b3c      	ldr	r3, [pc, #240]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db40:	4a3c      	ldr	r2, [pc, #240]	; (800dc34 <MX_LTDC_Init+0xfc>)
 800db42:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800db44:	4b3a      	ldr	r3, [pc, #232]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db46:	2200      	movs	r2, #0
 800db48:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800db4a:	4b39      	ldr	r3, [pc, #228]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db4c:	2200      	movs	r2, #0
 800db4e:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800db50:	4b37      	ldr	r3, [pc, #220]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db52:	2200      	movs	r2, #0
 800db54:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800db56:	4b36      	ldr	r3, [pc, #216]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db58:	2200      	movs	r2, #0
 800db5a:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 800db5c:	4b34      	ldr	r3, [pc, #208]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db5e:	2228      	movs	r2, #40	; 0x28
 800db60:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 800db62:	4b33      	ldr	r3, [pc, #204]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db64:	2209      	movs	r2, #9
 800db66:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 800db68:	4b31      	ldr	r3, [pc, #196]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db6a:	2235      	movs	r2, #53	; 0x35
 800db6c:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 800db6e:	4b30      	ldr	r3, [pc, #192]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db70:	220b      	movs	r2, #11
 800db72:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 800db74:	4b2e      	ldr	r3, [pc, #184]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db76:	f240 2215 	movw	r2, #533	; 0x215
 800db7a:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 800db7c:	4b2c      	ldr	r3, [pc, #176]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db7e:	f240 121b 	movw	r2, #283	; 0x11b
 800db82:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 800db84:	4b2a      	ldr	r3, [pc, #168]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db86:	f240 2235 	movw	r2, #565	; 0x235
 800db8a:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 800db8c:	4b28      	ldr	r3, [pc, #160]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db8e:	f240 121d 	movw	r2, #285	; 0x11d
 800db92:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 800db94:	4b26      	ldr	r3, [pc, #152]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db96:	2200      	movs	r2, #0
 800db98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 800db9c:	4b24      	ldr	r3, [pc, #144]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 800dba4:	4b22      	ldr	r3, [pc, #136]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800dba6:	2200      	movs	r2, #0
 800dba8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 800dbac:	4820      	ldr	r0, [pc, #128]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800dbae:	f7f5 fe11 	bl	80037d4 <HAL_LTDC_Init>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d004      	beq.n	800dbc2 <MX_LTDC_Init+0x8a>
		_Error_Handler(__FILE__, __LINE__);
 800dbb8:	f240 2175 	movw	r1, #629	; 0x275
 800dbbc:	481e      	ldr	r0, [pc, #120]	; (800dc38 <MX_LTDC_Init+0x100>)
 800dbbe:	f000 fc7b 	bl	800e4b8 <_Error_Handler>
	}

	pLayerCfg.WindowX0 = 0;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 800dbc6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800dbca:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 800dbd0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800dbd4:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 800dbda:	23ff      	movs	r3, #255	; 0xff
 800dbdc:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800dbe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbe6:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800dbe8:	2305      	movs	r3, #5
 800dbea:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = LCD_FB_START_ADDRESS;
 800dbec:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800dbf0:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 0;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 0;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 800dc00:	2300      	movs	r3, #0
 800dc02:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 800dc06:	2300      	movs	r3, #0
 800dc08:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800dc0c:	1d3b      	adds	r3, r7, #4
 800dc0e:	2200      	movs	r2, #0
 800dc10:	4619      	mov	r1, r3
 800dc12:	4807      	ldr	r0, [pc, #28]	; (800dc30 <MX_LTDC_Init+0xf8>)
 800dc14:	f7f5 feba 	bl	800398c <HAL_LTDC_ConfigLayer>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d004      	beq.n	800dc28 <MX_LTDC_Init+0xf0>
		_Error_Handler(__FILE__, __LINE__);
 800dc1e:	f44f 7122 	mov.w	r1, #648	; 0x288
 800dc22:	4805      	ldr	r0, [pc, #20]	; (800dc38 <MX_LTDC_Init+0x100>)
 800dc24:	f000 fc48 	bl	800e4b8 <_Error_Handler>
	}

}
 800dc28:	bf00      	nop
 800dc2a:	3738      	adds	r7, #56	; 0x38
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	20000d58 	.word	0x20000d58
 800dc34:	40016800 	.word	0x40016800
 800dc38:	08012a58 	.word	0x08012a58

0800dc3c <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void) {
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 800dc40:	4b15      	ldr	r3, [pc, #84]	; (800dc98 <MX_USART1_UART_Init+0x5c>)
 800dc42:	4a16      	ldr	r2, [pc, #88]	; (800dc9c <MX_USART1_UART_Init+0x60>)
 800dc44:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800dc46:	4b14      	ldr	r3, [pc, #80]	; (800dc98 <MX_USART1_UART_Init+0x5c>)
 800dc48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800dc4c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dc4e:	4b12      	ldr	r3, [pc, #72]	; (800dc98 <MX_USART1_UART_Init+0x5c>)
 800dc50:	2200      	movs	r2, #0
 800dc52:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800dc54:	4b10      	ldr	r3, [pc, #64]	; (800dc98 <MX_USART1_UART_Init+0x5c>)
 800dc56:	2200      	movs	r2, #0
 800dc58:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800dc5a:	4b0f      	ldr	r3, [pc, #60]	; (800dc98 <MX_USART1_UART_Init+0x5c>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800dc60:	4b0d      	ldr	r3, [pc, #52]	; (800dc98 <MX_USART1_UART_Init+0x5c>)
 800dc62:	220c      	movs	r2, #12
 800dc64:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc66:	4b0c      	ldr	r3, [pc, #48]	; (800dc98 <MX_USART1_UART_Init+0x5c>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc6c:	4b0a      	ldr	r3, [pc, #40]	; (800dc98 <MX_USART1_UART_Init+0x5c>)
 800dc6e:	2200      	movs	r2, #0
 800dc70:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800dc72:	4b09      	ldr	r3, [pc, #36]	; (800dc98 <MX_USART1_UART_Init+0x5c>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dc78:	4b07      	ldr	r3, [pc, #28]	; (800dc98 <MX_USART1_UART_Init+0x5c>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800dc7e:	4806      	ldr	r0, [pc, #24]	; (800dc98 <MX_USART1_UART_Init+0x5c>)
 800dc80:	f7f8 fdda 	bl	8006838 <HAL_UART_Init>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d004      	beq.n	800dc94 <MX_USART1_UART_Init+0x58>
		_Error_Handler(__FILE__, __LINE__);
 800dc8a:	f240 219b 	movw	r1, #667	; 0x29b
 800dc8e:	4804      	ldr	r0, [pc, #16]	; (800dca0 <MX_USART1_UART_Init+0x64>)
 800dc90:	f000 fc12 	bl	800e4b8 <_Error_Handler>
	}

}
 800dc94:	bf00      	nop
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	20001048 	.word	0x20001048
 800dc9c:	40011000 	.word	0x40011000
 800dca0:	08012a58 	.word	0x08012a58

0800dca4 <MX_DMA_Init>:
/**
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void) {
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE()
 800dcaa:	4a30      	ldr	r2, [pc, #192]	; (800dd6c <MX_DMA_Init+0xc8>)
 800dcac:	4b2f      	ldr	r3, [pc, #188]	; (800dd6c <MX_DMA_Init+0xc8>)
 800dcae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dcb4:	6313      	str	r3, [r2, #48]	; 0x30
 800dcb6:	4b2d      	ldr	r3, [pc, #180]	; (800dd6c <MX_DMA_Init+0xc8>)
 800dcb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dcbe:	607b      	str	r3, [r7, #4]
 800dcc0:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_DMA1_CLK_ENABLE()
 800dcc2:	4a2a      	ldr	r2, [pc, #168]	; (800dd6c <MX_DMA_Init+0xc8>)
 800dcc4:	4b29      	ldr	r3, [pc, #164]	; (800dd6c <MX_DMA_Init+0xc8>)
 800dcc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dccc:	6313      	str	r3, [r2, #48]	; 0x30
 800dcce:	4b27      	ldr	r3, [pc, #156]	; (800dd6c <MX_DMA_Init+0xc8>)
 800dcd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dcd6:	603b      	str	r3, [r7, #0]
 800dcd8:	683b      	ldr	r3, [r7, #0]
	;

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800dcda:	4b25      	ldr	r3, [pc, #148]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dcdc:	4a25      	ldr	r2, [pc, #148]	; (800dd74 <MX_DMA_Init+0xd0>)
 800dcde:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 800dce0:	4b23      	ldr	r3, [pc, #140]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800dce6:	4b22      	ldr	r3, [pc, #136]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dce8:	2280      	movs	r2, #128	; 0x80
 800dcea:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800dcec:	4b20      	ldr	r3, [pc, #128]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dcee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dcf2:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800dcf4:	4b1e      	ldr	r3, [pc, #120]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dcf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dcfa:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800dcfc:	4b1c      	ldr	r3, [pc, #112]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dcfe:	2200      	movs	r2, #0
 800dd00:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800dd02:	4b1b      	ldr	r3, [pc, #108]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dd04:	2200      	movs	r2, #0
 800dd06:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800dd08:	4b19      	ldr	r3, [pc, #100]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800dd0e:	4b18      	ldr	r3, [pc, #96]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dd10:	2200      	movs	r2, #0
 800dd12:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800dd14:	4b16      	ldr	r3, [pc, #88]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dd16:	2204      	movs	r2, #4
 800dd18:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800dd1a:	4b15      	ldr	r3, [pc, #84]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dd1c:	2203      	movs	r2, #3
 800dd1e:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800dd20:	4b13      	ldr	r3, [pc, #76]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dd22:	2200      	movs	r2, #0
 800dd24:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800dd26:	4b12      	ldr	r3, [pc, #72]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dd28:	2200      	movs	r2, #0
 800dd2a:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK) {
 800dd2c:	4810      	ldr	r0, [pc, #64]	; (800dd70 <MX_DMA_Init+0xcc>)
 800dd2e:	f7f4 fce5 	bl	80026fc <HAL_DMA_Init>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d004      	beq.n	800dd42 <MX_DMA_Init+0x9e>
		_Error_Handler(__FILE__, __LINE__);
 800dd38:	f240 21bb 	movw	r1, #699	; 0x2bb
 800dd3c:	480e      	ldr	r0, [pc, #56]	; (800dd78 <MX_DMA_Init+0xd4>)
 800dd3e:	f000 fbbb 	bl	800e4b8 <_Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800dd42:	2200      	movs	r2, #0
 800dd44:	2100      	movs	r1, #0
 800dd46:	200c      	movs	r0, #12
 800dd48:	f7f4 fb99 	bl	800247e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800dd4c:	200c      	movs	r0, #12
 800dd4e:	f7f4 fbb2 	bl	80024b6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800dd52:	2200      	movs	r2, #0
 800dd54:	2100      	movs	r1, #0
 800dd56:	200f      	movs	r0, #15
 800dd58:	f7f4 fb91 	bl	800247e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800dd5c:	200f      	movs	r0, #15
 800dd5e:	f7f4 fbaa 	bl	80024b6 <HAL_NVIC_EnableIRQ>

}
 800dd62:	bf00      	nop
 800dd64:	3708      	adds	r7, #8
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	40023800 	.word	0x40023800
 800dd70:	20000cd4 	.word	0x20000cd4
 800dd74:	40026410 	.word	0x40026410
 800dd78:	08012a58 	.word	0x08012a58

0800dd7c <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void) {
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b088      	sub	sp, #32
 800dd80:	af00      	add	r7, sp, #0
	FMC_SDRAM_TimingTypeDef SdramTiming;

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 800dd82:	4b21      	ldr	r3, [pc, #132]	; (800de08 <MX_FMC_Init+0x8c>)
 800dd84:	4a21      	ldr	r2, [pc, #132]	; (800de0c <MX_FMC_Init+0x90>)
 800dd86:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800dd88:	4b1f      	ldr	r3, [pc, #124]	; (800de08 <MX_FMC_Init+0x8c>)
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800dd8e:	4b1e      	ldr	r3, [pc, #120]	; (800de08 <MX_FMC_Init+0x8c>)
 800dd90:	2200      	movs	r2, #0
 800dd92:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800dd94:	4b1c      	ldr	r3, [pc, #112]	; (800de08 <MX_FMC_Init+0x8c>)
 800dd96:	2204      	movs	r2, #4
 800dd98:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800dd9a:	4b1b      	ldr	r3, [pc, #108]	; (800de08 <MX_FMC_Init+0x8c>)
 800dd9c:	2210      	movs	r2, #16
 800dd9e:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800dda0:	4b19      	ldr	r3, [pc, #100]	; (800de08 <MX_FMC_Init+0x8c>)
 800dda2:	2240      	movs	r2, #64	; 0x40
 800dda4:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800dda6:	4b18      	ldr	r3, [pc, #96]	; (800de08 <MX_FMC_Init+0x8c>)
 800dda8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ddac:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800ddae:	4b16      	ldr	r3, [pc, #88]	; (800de08 <MX_FMC_Init+0x8c>)
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800ddb4:	4b14      	ldr	r3, [pc, #80]	; (800de08 <MX_FMC_Init+0x8c>)
 800ddb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ddba:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800ddbc:	4b12      	ldr	r3, [pc, #72]	; (800de08 <MX_FMC_Init+0x8c>)
 800ddbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ddc2:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800ddc4:	4b10      	ldr	r3, [pc, #64]	; (800de08 <MX_FMC_Init+0x8c>)
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 800ddca:	2302      	movs	r3, #2
 800ddcc:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 800ddce:	2307      	movs	r3, #7
 800ddd0:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 800ddd2:	2304      	movs	r3, #4
 800ddd4:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 6;
 800ddd6:	2306      	movs	r3, #6
 800ddd8:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 2;
 800ddda:	2302      	movs	r3, #2
 800dddc:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 800ddde:	2302      	movs	r3, #2
 800dde0:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 800dde2:	2302      	movs	r3, #2
 800dde4:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 800dde6:	1d3b      	adds	r3, r7, #4
 800dde8:	4619      	mov	r1, r3
 800ddea:	4807      	ldr	r0, [pc, #28]	; (800de08 <MX_FMC_Init+0x8c>)
 800ddec:	f7f8 f9e8 	bl	80061c0 <HAL_SDRAM_Init>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d004      	beq.n	800de00 <MX_FMC_Init+0x84>
		_Error_Handler(__FILE__, __LINE__);
 800ddf6:	f240 21e3 	movw	r1, #739	; 0x2e3
 800ddfa:	4805      	ldr	r0, [pc, #20]	; (800de10 <MX_FMC_Init+0x94>)
 800ddfc:	f000 fb5c 	bl	800e4b8 <_Error_Handler>
	}

}
 800de00:	bf00      	nop
 800de02:	3720      	adds	r7, #32
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	2000132c 	.word	0x2000132c
 800de0c:	a0000140 	.word	0xa0000140
 800de10:	08012a58 	.word	0x08012a58

0800de14 <MX_GPIO_Init>:
 PH10   ------> DCMI_D1
 PA7   ------> ETH_CRS_DV
 PB14   ------> SPI2_MISO
 PB15   ------> SPI2_MOSI
 */
static void MX_GPIO_Init(void) {
 800de14:	b580      	push	{r7, lr}
 800de16:	b090      	sub	sp, #64	; 0x40
 800de18:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800de1a:	4aae      	ldr	r2, [pc, #696]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de1c:	4bad      	ldr	r3, [pc, #692]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de20:	f043 0310 	orr.w	r3, r3, #16
 800de24:	6313      	str	r3, [r2, #48]	; 0x30
 800de26:	4bab      	ldr	r3, [pc, #684]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de2a:	f003 0310 	and.w	r3, r3, #16
 800de2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800de30:	6abb      	ldr	r3, [r7, #40]	; 0x28
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800de32:	4aa8      	ldr	r2, [pc, #672]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de34:	4ba7      	ldr	r3, [pc, #668]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de3c:	6313      	str	r3, [r2, #48]	; 0x30
 800de3e:	4ba5      	ldr	r3, [pc, #660]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de46:	627b      	str	r3, [r7, #36]	; 0x24
 800de48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800de4a:	4aa2      	ldr	r2, [pc, #648]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de4c:	4ba1      	ldr	r3, [pc, #644]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de50:	f043 0302 	orr.w	r3, r3, #2
 800de54:	6313      	str	r3, [r2, #48]	; 0x30
 800de56:	4b9f      	ldr	r3, [pc, #636]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de5a:	f003 0302 	and.w	r3, r3, #2
 800de5e:	623b      	str	r3, [r7, #32]
 800de60:	6a3b      	ldr	r3, [r7, #32]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800de62:	4a9c      	ldr	r2, [pc, #624]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de64:	4b9b      	ldr	r3, [pc, #620]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de68:	f043 0308 	orr.w	r3, r3, #8
 800de6c:	6313      	str	r3, [r2, #48]	; 0x30
 800de6e:	4b99      	ldr	r3, [pc, #612]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de72:	f003 0308 	and.w	r3, r3, #8
 800de76:	61fb      	str	r3, [r7, #28]
 800de78:	69fb      	ldr	r3, [r7, #28]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800de7a:	4a96      	ldr	r2, [pc, #600]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de7c:	4b95      	ldr	r3, [pc, #596]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de80:	f043 0304 	orr.w	r3, r3, #4
 800de84:	6313      	str	r3, [r2, #48]	; 0x30
 800de86:	4b93      	ldr	r3, [pc, #588]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de8a:	f003 0304 	and.w	r3, r3, #4
 800de8e:	61bb      	str	r3, [r7, #24]
 800de90:	69bb      	ldr	r3, [r7, #24]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800de92:	4a90      	ldr	r2, [pc, #576]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de94:	4b8f      	ldr	r3, [pc, #572]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800de96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de98:	f043 0301 	orr.w	r3, r3, #1
 800de9c:	6313      	str	r3, [r2, #48]	; 0x30
 800de9e:	4b8d      	ldr	r3, [pc, #564]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800dea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dea2:	f003 0301 	and.w	r3, r3, #1
 800dea6:	617b      	str	r3, [r7, #20]
 800dea8:	697b      	ldr	r3, [r7, #20]
	;
	__HAL_RCC_GPIOJ_CLK_ENABLE()
 800deaa:	4a8a      	ldr	r2, [pc, #552]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800deac:	4b89      	ldr	r3, [pc, #548]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800deae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800deb4:	6313      	str	r3, [r2, #48]	; 0x30
 800deb6:	4b87      	ldr	r3, [pc, #540]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800deb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800debe:	613b      	str	r3, [r7, #16]
 800dec0:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOI_CLK_ENABLE()
 800dec2:	4a84      	ldr	r2, [pc, #528]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800dec4:	4b83      	ldr	r3, [pc, #524]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800dec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800decc:	6313      	str	r3, [r2, #48]	; 0x30
 800dece:	4b81      	ldr	r3, [pc, #516]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800ded0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ded2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ded6:	60fb      	str	r3, [r7, #12]
 800ded8:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOK_CLK_ENABLE()
 800deda:	4a7e      	ldr	r2, [pc, #504]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800dedc:	4b7d      	ldr	r3, [pc, #500]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800dede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dee0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dee4:	6313      	str	r3, [r2, #48]	; 0x30
 800dee6:	4b7b      	ldr	r3, [pc, #492]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800dee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800deee:	60bb      	str	r3, [r7, #8]
 800def0:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
 800def2:	4a78      	ldr	r2, [pc, #480]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800def4:	4b77      	ldr	r3, [pc, #476]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800def6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800def8:	f043 0320 	orr.w	r3, r3, #32
 800defc:	6313      	str	r3, [r2, #48]	; 0x30
 800defe:	4b75      	ldr	r3, [pc, #468]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800df00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df02:	f003 0320 	and.w	r3, r3, #32
 800df06:	607b      	str	r3, [r7, #4]
 800df08:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800df0a:	4a72      	ldr	r2, [pc, #456]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800df0c:	4b71      	ldr	r3, [pc, #452]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800df0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df14:	6313      	str	r3, [r2, #48]	; 0x30
 800df16:	4b6f      	ldr	r3, [pc, #444]	; (800e0d4 <MX_GPIO_Init+0x2c0>)
 800df18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df1e:	603b      	str	r3, [r7, #0]
 800df20:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800df22:	2201      	movs	r2, #1
 800df24:	2120      	movs	r1, #32
 800df26:	486c      	ldr	r0, [pc, #432]	; (800e0d8 <MX_GPIO_Init+0x2c4>)
 800df28:	f7f5 fb12 	bl	8003550 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin,
 800df2c:	2200      	movs	r2, #0
 800df2e:	f241 010c 	movw	r1, #4108	; 0x100c
 800df32:	486a      	ldr	r0, [pc, #424]	; (800e0dc <MX_GPIO_Init+0x2c8>)
 800df34:	f7f5 fb0c 	bl	8003550 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800df38:	2200      	movs	r2, #0
 800df3a:	2108      	movs	r1, #8
 800df3c:	4868      	ldr	r0, [pc, #416]	; (800e0e0 <MX_GPIO_Init+0x2cc>)
 800df3e:	f7f5 fb07 	bl	8003550 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800df42:	2200      	movs	r2, #0
 800df44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800df48:	4866      	ldr	r0, [pc, #408]	; (800e0e4 <MX_GPIO_Init+0x2d0>)
 800df4a:	f7f5 fb01 	bl	8003550 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 800df4e:	2200      	movs	r2, #0
 800df50:	21c8      	movs	r1, #200	; 0xc8
 800df52:	4865      	ldr	r0, [pc, #404]	; (800e0e8 <MX_GPIO_Init+0x2d4>)
 800df54:	f7f5 fafc 	bl	8003550 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800df58:	2308      	movs	r3, #8
 800df5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800df5c:	2300      	movs	r3, #0
 800df5e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df60:	2300      	movs	r3, #0
 800df62:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800df64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800df68:	4619      	mov	r1, r3
 800df6a:	4860      	ldr	r0, [pc, #384]	; (800e0ec <MX_GPIO_Init+0x2d8>)
 800df6c:	f7f5 f946 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800df70:	2304      	movs	r3, #4
 800df72:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df74:	2302      	movs	r3, #2
 800df76:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df78:	2300      	movs	r3, #0
 800df7a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df7c:	2303      	movs	r3, #3
 800df7e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800df80:	2309      	movs	r3, #9
 800df82:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800df84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800df88:	4619      	mov	r1, r3
 800df8a:	4858      	ldr	r0, [pc, #352]	; (800e0ec <MX_GPIO_Init+0x2d8>)
 800df8c:	f7f5 f936 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 800df90:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800df94:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df96:	2302      	movs	r3, #2
 800df98:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df9a:	2300      	movs	r3, #0
 800df9c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df9e:	2303      	movs	r3, #3
 800dfa0:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dfa2:	230b      	movs	r3, #11
 800dfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800dfa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dfaa:	4619      	mov	r1, r3
 800dfac:	484e      	ldr	r0, [pc, #312]	; (800e0e8 <MX_GPIO_Init+0x2d4>)
 800dfae:	f7f5 f925 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 800dfb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dfb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800dfb8:	2312      	movs	r3, #18
 800dfba:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800dfc4:	2304      	movs	r3, #4
 800dfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dfc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dfcc:	4619      	mov	r1, r3
 800dfce:	4848      	ldr	r0, [pc, #288]	; (800e0f0 <MX_GPIO_Init+0x2dc>)
 800dfd0:	f7f5 f914 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800dfd4:	2310      	movs	r3, #16
 800dfd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfd8:	2302      	movs	r3, #2
 800dfda:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800dfe4:	2302      	movs	r3, #2
 800dfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800dfe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dfec:	4619      	mov	r1, r3
 800dfee:	4840      	ldr	r0, [pc, #256]	; (800e0f0 <MX_GPIO_Init+0x2dc>)
 800dff0:	f7f5 f904 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800dff4:	2380      	movs	r3, #128	; 0x80
 800dff6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dff8:	2302      	movs	r3, #2
 800dffa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dffc:	2300      	movs	r3, #0
 800dffe:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e000:	2300      	movs	r3, #0
 800e002:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800e004:	2308      	movs	r3, #8
 800e006:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800e008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e00c:	4619      	mov	r1, r3
 800e00e:	4832      	ldr	r0, [pc, #200]	; (800e0d8 <MX_GPIO_Init+0x2c4>)
 800e010:	f7f5 f8f4 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
	 PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
 800e014:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800e018:	62fb      	str	r3, [r7, #44]	; 0x2c
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e01a:	2302      	movs	r3, #2
 800e01c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e01e:	2300      	movs	r3, #0
 800e020:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e022:	2303      	movs	r3, #3
 800e024:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800e026:	230c      	movs	r3, #12
 800e028:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e02a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e02e:	4619      	mov	r1, r3
 800e030:	4830      	ldr	r0, [pc, #192]	; (800e0f4 <MX_GPIO_Init+0x2e0>)
 800e032:	f7f5 f8e3 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800e036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e03a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e03c:	2302      	movs	r3, #2
 800e03e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e040:	2300      	movs	r3, #0
 800e042:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e044:	2300      	movs	r3, #0
 800e046:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e048:	2301      	movs	r3, #1
 800e04a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800e04c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e050:	4619      	mov	r1, r3
 800e052:	4829      	ldr	r0, [pc, #164]	; (800e0f8 <MX_GPIO_Init+0x2e4>)
 800e054:	f7f5 f8d2 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin | DCMI_D7_Pin;
 800e058:	2360      	movs	r3, #96	; 0x60
 800e05a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e05c:	2302      	movs	r3, #2
 800e05e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e060:	2300      	movs	r3, #0
 800e062:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e064:	2300      	movs	r3, #0
 800e066:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800e068:	230d      	movs	r3, #13
 800e06a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e06c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e070:	4619      	mov	r1, r3
 800e072:	481e      	ldr	r0, [pc, #120]	; (800e0ec <MX_GPIO_Init+0x2d8>)
 800e074:	f7f5 f8c2 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800e078:	2340      	movs	r3, #64	; 0x40
 800e07a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e07c:	2302      	movs	r3, #2
 800e07e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e080:	2300      	movs	r3, #0
 800e082:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e084:	2303      	movs	r3, #3
 800e086:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800e088:	230a      	movs	r3, #10
 800e08a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800e08c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e090:	4619      	mov	r1, r3
 800e092:	4817      	ldr	r0, [pc, #92]	; (800e0f0 <MX_GPIO_Init+0x2dc>)
 800e094:	f7f5 f8b2 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800e098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e09c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800e0a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	4813      	ldr	r0, [pc, #76]	; (800e0fc <MX_GPIO_Init+0x2e8>)
 800e0ae:	f7f5 f8a5 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800e0b2:	2340      	movs	r3, #64	; 0x40
 800e0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800e0b6:	4b12      	ldr	r3, [pc, #72]	; (800e100 <MX_GPIO_Init+0x2ec>)
 800e0b8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800e0be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	4804      	ldr	r0, [pc, #16]	; (800e0d8 <MX_GPIO_Init+0x2c4>)
 800e0c6:	f7f5 f899 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800e0ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0d0:	e018      	b.n	800e104 <MX_GPIO_Init+0x2f0>
 800e0d2:	bf00      	nop
 800e0d4:	40023800 	.word	0x40023800
 800e0d8:	40020c00 	.word	0x40020c00
 800e0dc:	40022000 	.word	0x40022000
 800e0e0:	40022800 	.word	0x40022800
 800e0e4:	40021c00 	.word	0x40021c00
 800e0e8:	40021800 	.word	0x40021800
 800e0ec:	40021000 	.word	0x40021000
 800e0f0:	40020400 	.word	0x40020400
 800e0f4:	40020800 	.word	0x40020800
 800e0f8:	40020000 	.word	0x40020000
 800e0fc:	40022400 	.word	0x40022400
 800e100:	10120000 	.word	0x10120000
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e104:	2302      	movs	r3, #2
 800e106:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e108:	2300      	movs	r3, #0
 800e10a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e10c:	2303      	movs	r3, #3
 800e10e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e110:	230a      	movs	r3, #10
 800e112:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e118:	4619      	mov	r1, r3
 800e11a:	48bb      	ldr	r0, [pc, #748]	; (800e408 <MX_GPIO_Init+0x5f4>)
 800e11c:	f7f5 f86e 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
	GPIO_InitStruct.Pin = SAI2_MCLKA_Pin | SAI2_SCKA_Pin | SAI2_FSA_Pin
 800e120:	23f0      	movs	r3, #240	; 0xf0
 800e122:	62fb      	str	r3, [r7, #44]	; 0x2c
			| SAI2_SDA_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e124:	2302      	movs	r3, #2
 800e126:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e128:	2300      	movs	r3, #0
 800e12a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e12c:	2300      	movs	r3, #0
 800e12e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800e130:	230a      	movs	r3, #10
 800e132:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e138:	4619      	mov	r1, r3
 800e13a:	48b4      	ldr	r0, [pc, #720]	; (800e40c <MX_GPIO_Init+0x5f8>)
 800e13c:	f7f5 f85e 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : SAI2_SDB_Pin */
	GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800e140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e144:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e146:	2302      	movs	r3, #2
 800e148:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e14a:	2300      	movs	r3, #0
 800e14c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e14e:	2300      	movs	r3, #0
 800e150:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800e152:	230a      	movs	r3, #10
 800e154:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800e156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e15a:	4619      	mov	r1, r3
 800e15c:	48ac      	ldr	r0, [pc, #688]	; (800e410 <MX_GPIO_Init+0x5fc>)
 800e15e:	f7f5 f84d 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800e162:	2320      	movs	r3, #32
 800e164:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e166:	2301      	movs	r3, #1
 800e168:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e16a:	2300      	movs	r3, #0
 800e16c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e16e:	2300      	movs	r3, #0
 800e170:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800e172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e176:	4619      	mov	r1, r3
 800e178:	48a6      	ldr	r0, [pc, #664]	; (800e414 <MX_GPIO_Init+0x600>)
 800e17a:	f7f5 f83f 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800e17e:	2308      	movs	r3, #8
 800e180:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e182:	2302      	movs	r3, #2
 800e184:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e186:	2300      	movs	r3, #0
 800e188:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e18a:	2300      	movs	r3, #0
 800e18c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800e18e:	230d      	movs	r3, #13
 800e190:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800e192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e196:	4619      	mov	r1, r3
 800e198:	489e      	ldr	r0, [pc, #632]	; (800e414 <MX_GPIO_Init+0x600>)
 800e19a:	f7f5 f82f 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800e19e:	f241 030c 	movw	r3, #4108	; 0x100c
 800e1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e1b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	4895      	ldr	r0, [pc, #596]	; (800e40c <MX_GPIO_Init+0x5f8>)
 800e1b8:	f7f5 f820 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800e1bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800e1ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4891      	ldr	r0, [pc, #580]	; (800e418 <MX_GPIO_Init+0x604>)
 800e1d2:	f7f5 f813 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800e1d6:	2308      	movs	r3, #8
 800e1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800e1e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	488b      	ldr	r0, [pc, #556]	; (800e41c <MX_GPIO_Init+0x608>)
 800e1ee:	f7f5 f805 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800e1f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1f8:	2302      	movs	r3, #2
 800e1fa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e200:	2300      	movs	r3, #0
 800e202:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800e204:	230d      	movs	r3, #13
 800e206:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800e208:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e20c:	4619      	mov	r1, r3
 800e20e:	4880      	ldr	r0, [pc, #512]	; (800e410 <MX_GPIO_Init+0x5fc>)
 800e210:	f7f4 fff4 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800e214:	2310      	movs	r3, #16
 800e216:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e218:	2300      	movs	r3, #0
 800e21a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e21c:	2300      	movs	r3, #0
 800e21e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800e220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e224:	4619      	mov	r1, r3
 800e226:	487b      	ldr	r0, [pc, #492]	; (800e414 <MX_GPIO_Init+0x600>)
 800e228:	f7f4 ffe8 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800e22c:	2304      	movs	r3, #4
 800e22e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e230:	2302      	movs	r3, #2
 800e232:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e234:	2300      	movs	r3, #0
 800e236:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e238:	2303      	movs	r3, #3
 800e23a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800e23c:	230c      	movs	r3, #12
 800e23e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800e240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e244:	4619      	mov	r1, r3
 800e246:	4873      	ldr	r0, [pc, #460]	; (800e414 <MX_GPIO_Init+0x600>)
 800e248:	f7f4 ffd8 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800e24c:	f248 0304 	movw	r3, #32772	; 0x8004
 800e250:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e252:	2300      	movs	r3, #0
 800e254:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e256:	2300      	movs	r3, #0
 800e258:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e25a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e25e:	4619      	mov	r1, r3
 800e260:	486f      	ldr	r0, [pc, #444]	; (800e420 <MX_GPIO_Init+0x60c>)
 800e262:	f7f4 ffcb 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800e266:	2302      	movs	r3, #2
 800e268:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e26a:	2302      	movs	r3, #2
 800e26c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e26e:	2300      	movs	r3, #0
 800e270:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e272:	2300      	movs	r3, #0
 800e274:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e276:	2305      	movs	r3, #5
 800e278:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800e27a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e27e:	4619      	mov	r1, r3
 800e280:	4862      	ldr	r0, [pc, #392]	; (800e40c <MX_GPIO_Init+0x5f8>)
 800e282:	f7f4 ffbb 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800e286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e28a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e28c:	2301      	movs	r3, #1
 800e28e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e290:	2300      	movs	r3, #0
 800e292:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e294:	2300      	movs	r3, #0
 800e296:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800e298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e29c:	4619      	mov	r1, r3
 800e29e:	4860      	ldr	r0, [pc, #384]	; (800e420 <MX_GPIO_Init+0x60c>)
 800e2a0:	f7f4 ffac 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
	 DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin | DCMI_D3_Pin | DCMI_D0_Pin | DCMI_D2_Pin
 800e2a4:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800e2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
			| DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2aa:	2302      	movs	r3, #2
 800e2ac:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800e2b6:	230d      	movs	r3, #13
 800e2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e2ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e2be:	4619      	mov	r1, r3
 800e2c0:	4857      	ldr	r0, [pc, #348]	; (800e420 <MX_GPIO_Init+0x60c>)
 800e2c2:	f7f4 ff9b 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_CS_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2ca:	2302      	movs	r3, #2
 800e2cc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800e2d6:	2302      	movs	r3, #2
 800e2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 800e2da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e2de:	4619      	mov	r1, r3
 800e2e0:	484a      	ldr	r0, [pc, #296]	; (800e40c <MX_GPIO_Init+0x5f8>)
 800e2e2:	f7f4 ff8b 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 800e2e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2ec:	2302      	movs	r3, #2
 800e2ee:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 800e2fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e300:	4619      	mov	r1, r3
 800e302:	4841      	ldr	r0, [pc, #260]	; (800e408 <MX_GPIO_Init+0x5f4>)
 800e304:	f7f4 ff7a 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800e308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e30c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800e30e:	4b45      	ldr	r3, [pc, #276]	; (800e424 <MX_GPIO_Init+0x610>)
 800e310:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e312:	2300      	movs	r3, #0
 800e314:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800e316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e31a:	4619      	mov	r1, r3
 800e31c:	483b      	ldr	r0, [pc, #236]	; (800e40c <MX_GPIO_Init+0x5f8>)
 800e31e:	f7f4 ff6d 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 800e322:	23c0      	movs	r3, #192	; 0xc0
 800e324:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e326:	2302      	movs	r3, #2
 800e328:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e32a:	2300      	movs	r3, #0
 800e32c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e32e:	2303      	movs	r3, #3
 800e330:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800e332:	2308      	movs	r3, #8
 800e334:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e33a:	4619      	mov	r1, r3
 800e33c:	4836      	ldr	r0, [pc, #216]	; (800e418 <MX_GPIO_Init+0x604>)
 800e33e:	f7f4 ff5d 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800e342:	23c8      	movs	r3, #200	; 0xc8
 800e344:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e346:	2301      	movs	r3, #1
 800e348:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e34a:	2300      	movs	r3, #0
 800e34c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e34e:	2300      	movs	r3, #0
 800e350:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e356:	4619      	mov	r1, r3
 800e358:	482d      	ldr	r0, [pc, #180]	; (800e410 <MX_GPIO_Init+0x5fc>)
 800e35a:	f7f4 ff4f 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800e35e:	2332      	movs	r3, #50	; 0x32
 800e360:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e362:	2302      	movs	r3, #2
 800e364:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e366:	2300      	movs	r3, #0
 800e368:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e36a:	2303      	movs	r3, #3
 800e36c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e36e:	230b      	movs	r3, #11
 800e370:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e376:	4619      	mov	r1, r3
 800e378:	4827      	ldr	r0, [pc, #156]	; (800e418 <MX_GPIO_Init+0x604>)
 800e37a:	f7f4 ff3f 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e37e:	2304      	movs	r3, #4
 800e380:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e382:	2302      	movs	r3, #2
 800e384:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e386:	2300      	movs	r3, #0
 800e388:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e38a:	2303      	movs	r3, #3
 800e38c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800e38e:	2309      	movs	r3, #9
 800e390:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e396:	4619      	mov	r1, r3
 800e398:	4823      	ldr	r0, [pc, #140]	; (800e428 <MX_GPIO_Init+0x614>)
 800e39a:	f7f4 ff2f 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 800e39e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3a4:	2302      	movs	r3, #2
 800e3a6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3ac:	2303      	movs	r3, #3
 800e3ae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800e3b0:	2309      	movs	r3, #9
 800e3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e3b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	4816      	ldr	r0, [pc, #88]	; (800e414 <MX_GPIO_Init+0x600>)
 800e3bc:	f7f4 ff1e 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800e3c0:	2304      	movs	r3, #4
 800e3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800e3cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	480f      	ldr	r0, [pc, #60]	; (800e410 <MX_GPIO_Init+0x5fc>)
 800e3d4:	f7f4 ff12 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800e3d8:	2386      	movs	r3, #134	; 0x86
 800e3da:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3dc:	2302      	movs	r3, #2
 800e3de:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3e4:	2303      	movs	r3, #3
 800e3e6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e3e8:	230b      	movs	r3, #11
 800e3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	4805      	ldr	r0, [pc, #20]	; (800e408 <MX_GPIO_Init+0x5f4>)
 800e3f4:	f7f4 ff02 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin | GPIO_PIN_6;
 800e3f8:	2350      	movs	r3, #80	; 0x50
 800e3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3fc:	2302      	movs	r3, #2
 800e3fe:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e400:	2300      	movs	r3, #0
 800e402:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e404:	2300      	movs	r3, #0
 800e406:	e011      	b.n	800e42c <MX_GPIO_Init+0x618>
 800e408:	40020000 	.word	0x40020000
 800e40c:	40022000 	.word	0x40022000
 800e410:	40021800 	.word	0x40021800
 800e414:	40020c00 	.word	0x40020c00
 800e418:	40020800 	.word	0x40020800
 800e41c:	40022800 	.word	0x40022800
 800e420:	40021c00 	.word	0x40021c00
 800e424:	10120000 	.word	0x10120000
 800e428:	40020400 	.word	0x40020400
 800e42c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800e42e:	230d      	movs	r3, #13
 800e430:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e436:	4619      	mov	r1, r3
 800e438:	4813      	ldr	r0, [pc, #76]	; (800e488 <MX_GPIO_Init+0x674>)
 800e43a:	f7f4 fedf 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800e43e:	2340      	movs	r3, #64	; 0x40
 800e440:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e442:	2302      	movs	r3, #2
 800e444:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e446:	2300      	movs	r3, #0
 800e448:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e44a:	2300      	movs	r3, #0
 800e44c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800e44e:	2309      	movs	r3, #9
 800e450:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800e452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e456:	4619      	mov	r1, r3
 800e458:	480c      	ldr	r0, [pc, #48]	; (800e48c <MX_GPIO_Init+0x678>)
 800e45a:	f7f4 fecf 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800e45e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800e462:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e464:	2302      	movs	r3, #2
 800e466:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e468:	2300      	movs	r3, #0
 800e46a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e46c:	2300      	movs	r3, #0
 800e46e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e470:	2305      	movs	r3, #5
 800e472:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e478:	4619      	mov	r1, r3
 800e47a:	4805      	ldr	r0, [pc, #20]	; (800e490 <MX_GPIO_Init+0x67c>)
 800e47c:	f7f4 febe 	bl	80031fc <HAL_GPIO_Init>

}
 800e480:	bf00      	nop
 800e482:	3740      	adds	r7, #64	; 0x40
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	40020000 	.word	0x40020000
 800e48c:	40021c00 	.word	0x40021c00
 800e490:	40020400 	.word	0x40020400

0800e494 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a04      	ldr	r2, [pc, #16]	; (800e4b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d101      	bne.n	800e4aa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800e4a6:	f7f3 fbaf 	bl	8001c08 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800e4aa:	bf00      	nop
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	40010000 	.word	0x40010000

0800e4b8 <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	printf("Error file = %s Line = %d ", file, line);
 800e4c2:	683a      	ldr	r2, [r7, #0]
 800e4c4:	6879      	ldr	r1, [r7, #4]
 800e4c6:	4802      	ldr	r0, [pc, #8]	; (800e4d0 <_Error_Handler+0x18>)
 800e4c8:	f001 ff94 	bl	80103f4 <iprintf>

	while (1) {
 800e4cc:	e7fe      	b.n	800e4cc <_Error_Handler+0x14>
 800e4ce:	bf00      	nop
 800e4d0:	08012bf4 	.word	0x08012bf4

0800e4d4 <SDRAMDISK_initialize>:
/**
 * @brief  Initializes a Drive
 * @param  lun : not used
 * @retval DSTATUS: Operation status
 */
DSTATUS SDRAMDISK_initialize(BYTE lun) {
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	4603      	mov	r3, r0
 800e4dc:	71fb      	strb	r3, [r7, #7]
	Stat = STA_NOINIT;
 800e4de:	4b0b      	ldr	r3, [pc, #44]	; (800e50c <SDRAMDISK_initialize+0x38>)
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	701a      	strb	r2, [r3, #0]

	/* Configure the SDRAM device */

	//TV: Assumed ready after main init
	if (BSP_SDRAM_Init() == SDRAM_OK) {
 800e4e4:	f7fe fa18 	bl	800c918 <BSP_SDRAM_Init>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d107      	bne.n	800e4fe <SDRAMDISK_initialize+0x2a>
		Stat &= ~STA_NOINIT;
 800e4ee:	4b07      	ldr	r3, [pc, #28]	; (800e50c <SDRAMDISK_initialize+0x38>)
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	f023 0301 	bic.w	r3, r3, #1
 800e4f8:	b2da      	uxtb	r2, r3
 800e4fa:	4b04      	ldr	r3, [pc, #16]	; (800e50c <SDRAMDISK_initialize+0x38>)
 800e4fc:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800e4fe:	4b03      	ldr	r3, [pc, #12]	; (800e50c <SDRAMDISK_initialize+0x38>)
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	b2db      	uxtb	r3, r3
}
 800e504:	4618      	mov	r0, r3
 800e506:	3708      	adds	r7, #8
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	20000123 	.word	0x20000123

0800e510 <SDRAMDISK_status>:
/**
 * @brief  Gets Disk Status
 * @param  lun : not used
 * @retval DSTATUS: Operation status
 */
DSTATUS SDRAMDISK_status(BYTE lun) {
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
 800e516:	4603      	mov	r3, r0
 800e518:	71fb      	strb	r3, [r7, #7]

	//TV: Assumed ready after main init
	Stat &= ~STA_NOINIT;
 800e51a:	4b08      	ldr	r3, [pc, #32]	; (800e53c <SDRAMDISK_status+0x2c>)
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	b2db      	uxtb	r3, r3
 800e520:	f023 0301 	bic.w	r3, r3, #1
 800e524:	b2da      	uxtb	r2, r3
 800e526:	4b05      	ldr	r3, [pc, #20]	; (800e53c <SDRAMDISK_status+0x2c>)
 800e528:	701a      	strb	r2, [r3, #0]

	return Stat;
 800e52a:	4b04      	ldr	r3, [pc, #16]	; (800e53c <SDRAMDISK_status+0x2c>)
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	b2db      	uxtb	r3, r3
}
 800e530:	4618      	mov	r0, r3
 800e532:	370c      	adds	r7, #12
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr
 800e53c:	20000123 	.word	0x20000123

0800e540 <SDRAMDISK_read>:
 * @param  *buff: Data buffer to store read data
 * @param  sector: Sector address (LBA)
 * @param  count: Number of sectors to read (1..128)
 * @retval DRESULT: Operation result
 */
DRESULT SDRAMDISK_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 800e540:	b580      	push	{r7, lr}
 800e542:	b088      	sub	sp, #32
 800e544:	af00      	add	r7, sp, #0
 800e546:	60b9      	str	r1, [r7, #8]
 800e548:	607a      	str	r2, [r7, #4]
 800e54a:	603b      	str	r3, [r7, #0]
 800e54c:	4603      	mov	r3, r0
 800e54e:	73fb      	strb	r3, [r7, #15]
	uint32_t *pSrcBuffer = (uint32_t *) buff;
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	025b      	lsls	r3, r3, #9
 800e558:	089b      	lsrs	r3, r3, #2
 800e55a:	61bb      	str	r3, [r7, #24]
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	4b09      	ldr	r3, [pc, #36]	; (800e584 <SDRAMDISK_read+0x44>)
 800e560:	4413      	add	r3, r2
 800e562:	025b      	lsls	r3, r3, #9
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 800e564:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_ReadData((uint32_t) *pSdramAddress, pSrcBuffer,
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	69ba      	ldr	r2, [r7, #24]
 800e56c:	69f9      	ldr	r1, [r7, #28]
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fe f9de 	bl	800c930 <BSP_SDRAM_ReadData>
 800e574:	4603      	mov	r3, r0
 800e576:	74fb      	strb	r3, [r7, #19]

	//for (; BufferSize != 0; BufferSize--) {
	//	*pSrcBuffer++ = *(__IO uint32_t *) pSdramAddress++;
	//}

	return RES_OK;
 800e578:	7cfb      	ldrb	r3, [r7, #19]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3720      	adds	r7, #32
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	00600800 	.word	0x00600800

0800e588 <SDRAMDISK_write>:
 * @param  sector: Sector address (LBA)
 * @param  count: Number of sectors to write (1..128)
 * @retval DRESULT: Operation result
 */
#if _USE_WRITE == 1
DRESULT SDRAMDISK_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 800e588:	b580      	push	{r7, lr}
 800e58a:	b088      	sub	sp, #32
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60b9      	str	r1, [r7, #8]
 800e590:	607a      	str	r2, [r7, #4]
 800e592:	603b      	str	r3, [r7, #0]
 800e594:	4603      	mov	r3, r0
 800e596:	73fb      	strb	r3, [r7, #15]
	uint32_t *pDstBuffer = (uint32_t *) buff;
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	025b      	lsls	r3, r3, #9
 800e5a0:	089b      	lsrs	r3, r3, #2
 800e5a2:	61bb      	str	r3, [r7, #24]
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	4b09      	ldr	r3, [pc, #36]	; (800e5cc <SDRAMDISK_write+0x44>)
 800e5a8:	4413      	add	r3, r2
 800e5aa:	025b      	lsls	r3, r3, #9
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 800e5ac:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_WriteData((uint32_t) *pSramAddress, pDstBuffer,
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	69ba      	ldr	r2, [r7, #24]
 800e5b4:	69f9      	ldr	r1, [r7, #28]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fe f9d4 	bl	800c964 <BSP_SDRAM_WriteData>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	74fb      	strb	r3, [r7, #19]

	//for (; BufferSize != 0; BufferSize--) {
	//	*(__IO uint32_t *) pSramAddress++ = *pDstBuffer++;
	//}

	return RES_OK;
 800e5c0:	7cfb      	ldrb	r3, [r7, #19]
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3720      	adds	r7, #32
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	00600800 	.word	0x00600800

0800e5d0 <SDRAMDISK_ioctl>:
 * @param  cmd: Control code
 * @param  *buff: Buffer to send/receive control data
 * @retval DRESULT: Operation result
 */
#if _USE_IOCTL == 1
DRESULT SDRAMDISK_ioctl(BYTE lun, BYTE cmd, void *buff) {
 800e5d0:	b480      	push	{r7}
 800e5d2:	b085      	sub	sp, #20
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	603a      	str	r2, [r7, #0]
 800e5da:	71fb      	strb	r3, [r7, #7]
 800e5dc:	460b      	mov	r3, r1
 800e5de:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_ERROR;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	73fb      	strb	r3, [r7, #15]

	if (Stat & STA_NOINIT)
 800e5e4:	4b1b      	ldr	r3, [pc, #108]	; (800e654 <SDRAMDISK_ioctl+0x84>)
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	f003 0301 	and.w	r3, r3, #1
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d001      	beq.n	800e5f6 <SDRAMDISK_ioctl+0x26>
		return RES_NOTRDY;
 800e5f2:	2303      	movs	r3, #3
 800e5f4:	e027      	b.n	800e646 <SDRAMDISK_ioctl+0x76>

	switch (cmd) {
 800e5f6:	79bb      	ldrb	r3, [r7, #6]
 800e5f8:	2b03      	cmp	r3, #3
 800e5fa:	d821      	bhi.n	800e640 <SDRAMDISK_ioctl+0x70>
 800e5fc:	a201      	add	r2, pc, #4	; (adr r2, 800e604 <SDRAMDISK_ioctl+0x34>)
 800e5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e602:	bf00      	nop
 800e604:	0800e615 	.word	0x0800e615
 800e608:	0800e61b 	.word	0x0800e61b
 800e60c:	0800e627 	.word	0x0800e627
 800e610:	0800e635 	.word	0x0800e635
	/* Make sure that no pending write process */
	case CTRL_SYNC:
		res = RES_OK;
 800e614:	2300      	movs	r3, #0
 800e616:	73fb      	strb	r3, [r7, #15]
		break;
 800e618:	e014      	b.n	800e644 <SDRAMDISK_ioctl+0x74>

		/* Get number of sectors on the disk (DWORD) */
	case GET_SECTOR_COUNT:
		*(DWORD*) buff = SDRAM_DISK_SIZE / BLOCK_SIZE;
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	4a0e      	ldr	r2, [pc, #56]	; (800e658 <SDRAMDISK_ioctl+0x88>)
 800e61e:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 800e620:	2300      	movs	r3, #0
 800e622:	73fb      	strb	r3, [r7, #15]
		break;
 800e624:	e00e      	b.n	800e644 <SDRAMDISK_ioctl+0x74>

		/* Get R/W sector size (WORD) */
	case GET_SECTOR_SIZE:
		*(WORD*) buff = BLOCK_SIZE;
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e62c:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 800e62e:	2300      	movs	r3, #0
 800e630:	73fb      	strb	r3, [r7, #15]
		break;
 800e632:	e007      	b.n	800e644 <SDRAMDISK_ioctl+0x74>

		/* Get erase block size in unit of sector (DWORD) */
	case GET_BLOCK_SIZE:
		*(DWORD*) buff = 1;
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	2201      	movs	r2, #1
 800e638:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 800e63a:	2300      	movs	r3, #0
 800e63c:	73fb      	strb	r3, [r7, #15]
		break;
 800e63e:	e001      	b.n	800e644 <SDRAMDISK_ioctl+0x74>

	default:
		res = RES_PARERR;
 800e640:	2304      	movs	r3, #4
 800e642:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e644:	7bfb      	ldrb	r3, [r7, #15]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3714      	adds	r7, #20
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	20000123 	.word	0x20000123
 800e658:	007ff800 	.word	0x007ff800

0800e65c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e660:	2003      	movs	r0, #3
 800e662:	f7f3 ff01 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800e666:	2200      	movs	r2, #0
 800e668:	2100      	movs	r1, #0
 800e66a:	f06f 000b 	mvn.w	r0, #11
 800e66e:	f7f3 ff06 	bl	800247e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800e672:	2200      	movs	r2, #0
 800e674:	2100      	movs	r1, #0
 800e676:	f06f 000a 	mvn.w	r0, #10
 800e67a:	f7f3 ff00 	bl	800247e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800e67e:	2200      	movs	r2, #0
 800e680:	2100      	movs	r1, #0
 800e682:	f06f 0009 	mvn.w	r0, #9
 800e686:	f7f3 fefa 	bl	800247e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800e68a:	2200      	movs	r2, #0
 800e68c:	2100      	movs	r1, #0
 800e68e:	f06f 0004 	mvn.w	r0, #4
 800e692:	f7f3 fef4 	bl	800247e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800e696:	2200      	movs	r2, #0
 800e698:	2100      	movs	r1, #0
 800e69a:	f06f 0003 	mvn.w	r0, #3
 800e69e:	f7f3 feee 	bl	800247e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	f06f 0001 	mvn.w	r0, #1
 800e6aa:	f7f3 fee8 	bl	800247e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b6:	f7f3 fee2 	bl	800247e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e6ba:	bf00      	nop
 800e6bc:	bd80      	pop	{r7, pc}
	...

0800e6c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b088      	sub	sp, #32
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a15      	ldr	r2, [pc, #84]	; (800e724 <HAL_ADC_MspInit+0x64>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d124      	bne.n	800e71c <HAL_ADC_MspInit+0x5c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800e6d2:	4a15      	ldr	r2, [pc, #84]	; (800e728 <HAL_ADC_MspInit+0x68>)
 800e6d4:	4b14      	ldr	r3, [pc, #80]	; (800e728 <HAL_ADC_MspInit+0x68>)
 800e6d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e6dc:	6453      	str	r3, [r2, #68]	; 0x44
 800e6de:	4b12      	ldr	r3, [pc, #72]	; (800e728 <HAL_ADC_MspInit+0x68>)
 800e6e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6e6:	60bb      	str	r3, [r7, #8]
 800e6e8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800e6ea:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800e6ee:	60fb      	str	r3, [r7, #12]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e6f0:	2303      	movs	r3, #3
 800e6f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800e6f8:	f107 030c 	add.w	r3, r7, #12
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	480b      	ldr	r0, [pc, #44]	; (800e72c <HAL_ADC_MspInit+0x6c>)
 800e700:	f7f4 fd7c 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800e704:	2301      	movs	r3, #1
 800e706:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e708:	2303      	movs	r3, #3
 800e70a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e70c:	2300      	movs	r3, #0
 800e70e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800e710:	f107 030c 	add.w	r3, r7, #12
 800e714:	4619      	mov	r1, r3
 800e716:	4806      	ldr	r0, [pc, #24]	; (800e730 <HAL_ADC_MspInit+0x70>)
 800e718:	f7f4 fd70 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800e71c:	bf00      	nop
 800e71e:	3720      	adds	r7, #32
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}
 800e724:	40012200 	.word	0x40012200
 800e728:	40023800 	.word	0x40023800
 800e72c:	40021400 	.word	0x40021400
 800e730:	40020000 	.word	0x40020000

0800e734 <HAL_CRC_MspInit>:
  }

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4a0a      	ldr	r2, [pc, #40]	; (800e76c <HAL_CRC_MspInit+0x38>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d10b      	bne.n	800e75e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800e746:	4a0a      	ldr	r2, [pc, #40]	; (800e770 <HAL_CRC_MspInit+0x3c>)
 800e748:	4b09      	ldr	r3, [pc, #36]	; (800e770 <HAL_CRC_MspInit+0x3c>)
 800e74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e74c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e750:	6313      	str	r3, [r2, #48]	; 0x30
 800e752:	4b07      	ldr	r3, [pc, #28]	; (800e770 <HAL_CRC_MspInit+0x3c>)
 800e754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e75a:	60fb      	str	r3, [r7, #12]
 800e75c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800e75e:	bf00      	nop
 800e760:	3714      	adds	r7, #20
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop
 800e76c:	40023000 	.word	0x40023000
 800e770:	40023800 	.word	0x40023800

0800e774 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800e774:	b480      	push	{r7}
 800e776:	b085      	sub	sp, #20
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4a0a      	ldr	r2, [pc, #40]	; (800e7ac <HAL_DMA2D_MspInit+0x38>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d10b      	bne.n	800e79e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800e786:	4a0a      	ldr	r2, [pc, #40]	; (800e7b0 <HAL_DMA2D_MspInit+0x3c>)
 800e788:	4b09      	ldr	r3, [pc, #36]	; (800e7b0 <HAL_DMA2D_MspInit+0x3c>)
 800e78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e78c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e790:	6313      	str	r3, [r2, #48]	; 0x30
 800e792:	4b07      	ldr	r3, [pc, #28]	; (800e7b0 <HAL_DMA2D_MspInit+0x3c>)
 800e794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e79a:	60fb      	str	r3, [r7, #12]
 800e79c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800e79e:	bf00      	nop
 800e7a0:	3714      	adds	r7, #20
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	4002b000 	.word	0x4002b000
 800e7b0:	40023800 	.word	0x40023800

0800e7b4 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b088      	sub	sp, #32
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a42      	ldr	r2, [pc, #264]	; (800e8cc <HAL_I2C_MspInit+0x118>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d17d      	bne.n	800e8c2 <HAL_I2C_MspInit+0x10e>
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800e7c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800e7ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e7cc:	2312      	movs	r3, #18
 800e7ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7d4:	2303      	movs	r3, #3
 800e7d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800e7d8:	2304      	movs	r3, #4
 800e7da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e7dc:	f107 030c 	add.w	r3, r7, #12
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	483b      	ldr	r0, [pc, #236]	; (800e8d0 <HAL_I2C_MspInit+0x11c>)
 800e7e4:	f7f4 fd0a 	bl	80031fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800e7e8:	4a3a      	ldr	r2, [pc, #232]	; (800e8d4 <HAL_I2C_MspInit+0x120>)
 800e7ea:	4b3a      	ldr	r3, [pc, #232]	; (800e8d4 <HAL_I2C_MspInit+0x120>)
 800e7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e7f2:	6413      	str	r3, [r2, #64]	; 0x40
 800e7f4:	4b37      	ldr	r3, [pc, #220]	; (800e8d4 <HAL_I2C_MspInit+0x120>)
 800e7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e7fc:	60bb      	str	r3, [r7, #8]
 800e7fe:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 800e800:	4b35      	ldr	r3, [pc, #212]	; (800e8d8 <HAL_I2C_MspInit+0x124>)
 800e802:	4a36      	ldr	r2, [pc, #216]	; (800e8dc <HAL_I2C_MspInit+0x128>)
 800e804:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 800e806:	4b34      	ldr	r3, [pc, #208]	; (800e8d8 <HAL_I2C_MspInit+0x124>)
 800e808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e80c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e80e:	4b32      	ldr	r3, [pc, #200]	; (800e8d8 <HAL_I2C_MspInit+0x124>)
 800e810:	2200      	movs	r2, #0
 800e812:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e814:	4b30      	ldr	r3, [pc, #192]	; (800e8d8 <HAL_I2C_MspInit+0x124>)
 800e816:	2200      	movs	r2, #0
 800e818:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e81a:	4b2f      	ldr	r3, [pc, #188]	; (800e8d8 <HAL_I2C_MspInit+0x124>)
 800e81c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e820:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e822:	4b2d      	ldr	r3, [pc, #180]	; (800e8d8 <HAL_I2C_MspInit+0x124>)
 800e824:	2200      	movs	r2, #0
 800e826:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e828:	4b2b      	ldr	r3, [pc, #172]	; (800e8d8 <HAL_I2C_MspInit+0x124>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800e82e:	4b2a      	ldr	r3, [pc, #168]	; (800e8d8 <HAL_I2C_MspInit+0x124>)
 800e830:	2200      	movs	r2, #0
 800e832:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e834:	4b28      	ldr	r3, [pc, #160]	; (800e8d8 <HAL_I2C_MspInit+0x124>)
 800e836:	2200      	movs	r2, #0
 800e838:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e83a:	4b27      	ldr	r3, [pc, #156]	; (800e8d8 <HAL_I2C_MspInit+0x124>)
 800e83c:	2200      	movs	r2, #0
 800e83e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800e840:	4825      	ldr	r0, [pc, #148]	; (800e8d8 <HAL_I2C_MspInit+0x124>)
 800e842:	f7f3 ff5b 	bl	80026fc <HAL_DMA_Init>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d004      	beq.n	800e856 <HAL_I2C_MspInit+0xa2>
    {
      _Error_Handler(__FILE__, __LINE__);
 800e84c:	f240 110d 	movw	r1, #269	; 0x10d
 800e850:	4823      	ldr	r0, [pc, #140]	; (800e8e0 <HAL_I2C_MspInit+0x12c>)
 800e852:	f7ff fe31 	bl	800e4b8 <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4a1f      	ldr	r2, [pc, #124]	; (800e8d8 <HAL_I2C_MspInit+0x124>)
 800e85a:	63da      	str	r2, [r3, #60]	; 0x3c
 800e85c:	4a1e      	ldr	r2, [pc, #120]	; (800e8d8 <HAL_I2C_MspInit+0x124>)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 800e862:	4b20      	ldr	r3, [pc, #128]	; (800e8e4 <HAL_I2C_MspInit+0x130>)
 800e864:	4a20      	ldr	r2, [pc, #128]	; (800e8e8 <HAL_I2C_MspInit+0x134>)
 800e866:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 800e868:	4b1e      	ldr	r3, [pc, #120]	; (800e8e4 <HAL_I2C_MspInit+0x130>)
 800e86a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800e86e:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e870:	4b1c      	ldr	r3, [pc, #112]	; (800e8e4 <HAL_I2C_MspInit+0x130>)
 800e872:	2240      	movs	r2, #64	; 0x40
 800e874:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e876:	4b1b      	ldr	r3, [pc, #108]	; (800e8e4 <HAL_I2C_MspInit+0x130>)
 800e878:	2200      	movs	r2, #0
 800e87a:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_DISABLE;
 800e87c:	4b19      	ldr	r3, [pc, #100]	; (800e8e4 <HAL_I2C_MspInit+0x130>)
 800e87e:	2200      	movs	r2, #0
 800e880:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e882:	4b18      	ldr	r3, [pc, #96]	; (800e8e4 <HAL_I2C_MspInit+0x130>)
 800e884:	2200      	movs	r2, #0
 800e886:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e888:	4b16      	ldr	r3, [pc, #88]	; (800e8e4 <HAL_I2C_MspInit+0x130>)
 800e88a:	2200      	movs	r2, #0
 800e88c:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800e88e:	4b15      	ldr	r3, [pc, #84]	; (800e8e4 <HAL_I2C_MspInit+0x130>)
 800e890:	2200      	movs	r2, #0
 800e892:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e894:	4b13      	ldr	r3, [pc, #76]	; (800e8e4 <HAL_I2C_MspInit+0x130>)
 800e896:	2200      	movs	r2, #0
 800e898:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e89a:	4b12      	ldr	r3, [pc, #72]	; (800e8e4 <HAL_I2C_MspInit+0x130>)
 800e89c:	2200      	movs	r2, #0
 800e89e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 800e8a0:	4810      	ldr	r0, [pc, #64]	; (800e8e4 <HAL_I2C_MspInit+0x130>)
 800e8a2:	f7f3 ff2b 	bl	80026fc <HAL_DMA_Init>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d004      	beq.n	800e8b6 <HAL_I2C_MspInit+0x102>
    {
      _Error_Handler(__FILE__, __LINE__);
 800e8ac:	f240 111f 	movw	r1, #287	; 0x11f
 800e8b0:	480b      	ldr	r0, [pc, #44]	; (800e8e0 <HAL_I2C_MspInit+0x12c>)
 800e8b2:	f7ff fe01 	bl	800e4b8 <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	4a0a      	ldr	r2, [pc, #40]	; (800e8e4 <HAL_I2C_MspInit+0x130>)
 800e8ba:	639a      	str	r2, [r3, #56]	; 0x38
 800e8bc:	4a09      	ldr	r2, [pc, #36]	; (800e8e4 <HAL_I2C_MspInit+0x130>)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800e8c2:	bf00      	nop
 800e8c4:	3720      	adds	r7, #32
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	40005c00 	.word	0x40005c00
 800e8d0:	40021c00 	.word	0x40021c00
 800e8d4:	40023800 	.word	0x40023800
 800e8d8:	20000c74 	.word	0x20000c74
 800e8dc:	40026028 	.word	0x40026028
 800e8e0:	08012c10 	.word	0x08012c10
 800e8e4:	200009a4 	.word	0x200009a4
 800e8e8:	40026070 	.word	0x40026070

0800e8ec <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b088      	sub	sp, #32
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a32      	ldr	r2, [pc, #200]	; (800e9c4 <HAL_LTDC_MspInit+0xd8>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d15e      	bne.n	800e9bc <HAL_LTDC_MspInit+0xd0>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e8fe:	4a32      	ldr	r2, [pc, #200]	; (800e9c8 <HAL_LTDC_MspInit+0xdc>)
 800e900:	4b31      	ldr	r3, [pc, #196]	; (800e9c8 <HAL_LTDC_MspInit+0xdc>)
 800e902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e904:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e908:	6453      	str	r3, [r2, #68]	; 0x44
 800e90a:	4b2f      	ldr	r3, [pc, #188]	; (800e9c8 <HAL_LTDC_MspInit+0xdc>)
 800e90c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e90e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e912:	60bb      	str	r3, [r7, #8]
 800e914:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800e916:	2310      	movs	r3, #16
 800e918:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e91a:	2302      	movs	r3, #2
 800e91c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e91e:	2300      	movs	r3, #0
 800e920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e922:	2300      	movs	r3, #0
 800e924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e926:	230e      	movs	r3, #14
 800e928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800e92a:	f107 030c 	add.w	r3, r7, #12
 800e92e:	4619      	mov	r1, r3
 800e930:	4826      	ldr	r0, [pc, #152]	; (800e9cc <HAL_LTDC_MspInit+0xe0>)
 800e932:	f7f4 fc63 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800e936:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800e93a:	60fb      	str	r3, [r7, #12]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e93c:	2302      	movs	r3, #2
 800e93e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e940:	2300      	movs	r3, #0
 800e942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e944:	2300      	movs	r3, #0
 800e946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e948:	230e      	movs	r3, #14
 800e94a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800e94c:	f107 030c 	add.w	r3, r7, #12
 800e950:	4619      	mov	r1, r3
 800e952:	481f      	ldr	r0, [pc, #124]	; (800e9d0 <HAL_LTDC_MspInit+0xe4>)
 800e954:	f7f4 fc52 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800e958:	23f7      	movs	r3, #247	; 0xf7
 800e95a:	60fb      	str	r3, [r7, #12]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e95c:	2302      	movs	r3, #2
 800e95e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e960:	2300      	movs	r3, #0
 800e962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e964:	2300      	movs	r3, #0
 800e966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e968:	230e      	movs	r3, #14
 800e96a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800e96c:	f107 030c 	add.w	r3, r7, #12
 800e970:	4619      	mov	r1, r3
 800e972:	4818      	ldr	r0, [pc, #96]	; (800e9d4 <HAL_LTDC_MspInit+0xe8>)
 800e974:	f7f4 fc42 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800e978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e97c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e97e:	2302      	movs	r3, #2
 800e980:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e982:	2300      	movs	r3, #0
 800e984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e986:	2300      	movs	r3, #0
 800e988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800e98a:	2309      	movs	r3, #9
 800e98c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800e98e:	f107 030c 	add.w	r3, r7, #12
 800e992:	4619      	mov	r1, r3
 800e994:	4810      	ldr	r0, [pc, #64]	; (800e9d8 <HAL_LTDC_MspInit+0xec>)
 800e996:	f7f4 fc31 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800e99a:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800e99e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9a0:	2302      	movs	r3, #2
 800e9a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e9ac:	230e      	movs	r3, #14
 800e9ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e9b0:	f107 030c 	add.w	r3, r7, #12
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	4809      	ldr	r0, [pc, #36]	; (800e9dc <HAL_LTDC_MspInit+0xf0>)
 800e9b8:	f7f4 fc20 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800e9bc:	bf00      	nop
 800e9be:	3720      	adds	r7, #32
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	40016800 	.word	0x40016800
 800e9c8:	40023800 	.word	0x40023800
 800e9cc:	40021000 	.word	0x40021000
 800e9d0:	40022400 	.word	0x40022400
 800e9d4:	40022800 	.word	0x40022800
 800e9d8:	40021800 	.word	0x40021800
 800e9dc:	40022000 	.word	0x40022000

0800e9e0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b088      	sub	sp, #32
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4a19      	ldr	r2, [pc, #100]	; (800ea54 <HAL_UART_MspInit+0x74>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d12c      	bne.n	800ea4c <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e9f2:	4a19      	ldr	r2, [pc, #100]	; (800ea58 <HAL_UART_MspInit+0x78>)
 800e9f4:	4b18      	ldr	r3, [pc, #96]	; (800ea58 <HAL_UART_MspInit+0x78>)
 800e9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9f8:	f043 0310 	orr.w	r3, r3, #16
 800e9fc:	6453      	str	r3, [r2, #68]	; 0x44
 800e9fe:	4b16      	ldr	r3, [pc, #88]	; (800ea58 <HAL_UART_MspInit+0x78>)
 800ea00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea02:	f003 0310 	and.w	r3, r3, #16
 800ea06:	60bb      	str	r3, [r7, #8]
 800ea08:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800ea0a:	2380      	movs	r3, #128	; 0x80
 800ea0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea0e:	2302      	movs	r3, #2
 800ea10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea12:	2300      	movs	r3, #0
 800ea14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea16:	2300      	movs	r3, #0
 800ea18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ea1a:	2307      	movs	r3, #7
 800ea1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800ea1e:	f107 030c 	add.w	r3, r7, #12
 800ea22:	4619      	mov	r1, r3
 800ea24:	480d      	ldr	r0, [pc, #52]	; (800ea5c <HAL_UART_MspInit+0x7c>)
 800ea26:	f7f4 fbe9 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800ea2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea30:	2302      	movs	r3, #2
 800ea32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea34:	2300      	movs	r3, #0
 800ea36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ea3c:	2307      	movs	r3, #7
 800ea3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800ea40:	f107 030c 	add.w	r3, r7, #12
 800ea44:	4619      	mov	r1, r3
 800ea46:	4806      	ldr	r0, [pc, #24]	; (800ea60 <HAL_UART_MspInit+0x80>)
 800ea48:	f7f4 fbd8 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800ea4c:	bf00      	nop
 800ea4e:	3720      	adds	r7, #32
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	40011000 	.word	0x40011000
 800ea58:	40023800 	.word	0x40023800
 800ea5c:	40020400 	.word	0x40020400
 800ea60:	40020000 	.word	0x40020000

0800ea64 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b086      	sub	sp, #24
 800ea68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800ea6a:	4b3b      	ldr	r3, [pc, #236]	; (800eb58 <HAL_FMC_MspInit+0xf4>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d16d      	bne.n	800eb4e <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 800ea72:	4b39      	ldr	r3, [pc, #228]	; (800eb58 <HAL_FMC_MspInit+0xf4>)
 800ea74:	2201      	movs	r2, #1
 800ea76:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ea78:	4a38      	ldr	r2, [pc, #224]	; (800eb5c <HAL_FMC_MspInit+0xf8>)
 800ea7a:	4b38      	ldr	r3, [pc, #224]	; (800eb5c <HAL_FMC_MspInit+0xf8>)
 800ea7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea7e:	f043 0301 	orr.w	r3, r3, #1
 800ea82:	6393      	str	r3, [r2, #56]	; 0x38
 800ea84:	4b35      	ldr	r3, [pc, #212]	; (800eb5c <HAL_FMC_MspInit+0xf8>)
 800ea86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea88:	f003 0301 	and.w	r3, r3, #1
 800ea8c:	603b      	str	r3, [r7, #0]
 800ea8e:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800ea90:	f64f 7383 	movw	r3, #65411	; 0xff83
 800ea94:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea96:	2302      	movs	r3, #2
 800ea98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea9e:	2303      	movs	r3, #3
 800eaa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800eaa2:	230c      	movs	r3, #12
 800eaa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800eaa6:	1d3b      	adds	r3, r7, #4
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	482d      	ldr	r0, [pc, #180]	; (800eb60 <HAL_FMC_MspInit+0xfc>)
 800eaac:	f7f4 fba6 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800eab0:	f248 1333 	movw	r3, #33075	; 0x8133
 800eab4:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eab6:	2302      	movs	r3, #2
 800eab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eaba:	2300      	movs	r3, #0
 800eabc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eabe:	2303      	movs	r3, #3
 800eac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800eac2:	230c      	movs	r3, #12
 800eac4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800eac6:	1d3b      	adds	r3, r7, #4
 800eac8:	4619      	mov	r1, r3
 800eaca:	4826      	ldr	r0, [pc, #152]	; (800eb64 <HAL_FMC_MspInit+0x100>)
 800eacc:	f7f4 fb96 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800ead0:	f24c 7303 	movw	r3, #50947	; 0xc703
 800ead4:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ead6:	2302      	movs	r3, #2
 800ead8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eada:	2300      	movs	r3, #0
 800eadc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eade:	2303      	movs	r3, #3
 800eae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800eae2:	230c      	movs	r3, #12
 800eae4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800eae6:	1d3b      	adds	r3, r7, #4
 800eae8:	4619      	mov	r1, r3
 800eaea:	481f      	ldr	r0, [pc, #124]	; (800eb68 <HAL_FMC_MspInit+0x104>)
 800eaec:	f7f4 fb86 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800eaf0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800eaf4:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eaf6:	2302      	movs	r3, #2
 800eaf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eafa:	2300      	movs	r3, #0
 800eafc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eafe:	2303      	movs	r3, #3
 800eb00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800eb02:	230c      	movs	r3, #12
 800eb04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800eb06:	1d3b      	adds	r3, r7, #4
 800eb08:	4619      	mov	r1, r3
 800eb0a:	4818      	ldr	r0, [pc, #96]	; (800eb6c <HAL_FMC_MspInit+0x108>)
 800eb0c:	f7f4 fb76 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800eb10:	2328      	movs	r3, #40	; 0x28
 800eb12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb14:	2302      	movs	r3, #2
 800eb16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb1c:	2303      	movs	r3, #3
 800eb1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800eb20:	230c      	movs	r3, #12
 800eb22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800eb24:	1d3b      	adds	r3, r7, #4
 800eb26:	4619      	mov	r1, r3
 800eb28:	4811      	ldr	r0, [pc, #68]	; (800eb70 <HAL_FMC_MspInit+0x10c>)
 800eb2a:	f7f4 fb67 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800eb2e:	2308      	movs	r3, #8
 800eb30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb32:	2302      	movs	r3, #2
 800eb34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb36:	2300      	movs	r3, #0
 800eb38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb3a:	2303      	movs	r3, #3
 800eb3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800eb3e:	230c      	movs	r3, #12
 800eb40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800eb42:	1d3b      	adds	r3, r7, #4
 800eb44:	4619      	mov	r1, r3
 800eb46:	480b      	ldr	r0, [pc, #44]	; (800eb74 <HAL_FMC_MspInit+0x110>)
 800eb48:	f7f4 fb58 	bl	80031fc <HAL_GPIO_Init>
 800eb4c:	e000      	b.n	800eb50 <HAL_FMC_MspInit+0xec>
    return;
 800eb4e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800eb50:	3718      	adds	r7, #24
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	20000480 	.word	0x20000480
 800eb5c:	40023800 	.word	0x40023800
 800eb60:	40021000 	.word	0x40021000
 800eb64:	40021800 	.word	0x40021800
 800eb68:	40020c00 	.word	0x40020c00
 800eb6c:	40021400 	.word	0x40021400
 800eb70:	40021c00 	.word	0x40021c00
 800eb74:	40020800 	.word	0x40020800

0800eb78 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800eb80:	f7ff ff70 	bl	800ea64 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800eb84:	bf00      	nop
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b08c      	sub	sp, #48	; 0x30
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800eb94:	2300      	movs	r3, #0
 800eb96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	6879      	ldr	r1, [r7, #4]
 800eba0:	2019      	movs	r0, #25
 800eba2:	f7f3 fc6c 	bl	800247e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800eba6:	2019      	movs	r0, #25
 800eba8:	f7f3 fc85 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800ebac:	4a1f      	ldr	r2, [pc, #124]	; (800ec2c <HAL_InitTick+0xa0>)
 800ebae:	4b1f      	ldr	r3, [pc, #124]	; (800ec2c <HAL_InitTick+0xa0>)
 800ebb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebb2:	f043 0301 	orr.w	r3, r3, #1
 800ebb6:	6453      	str	r3, [r2, #68]	; 0x44
 800ebb8:	4b1c      	ldr	r3, [pc, #112]	; (800ec2c <HAL_InitTick+0xa0>)
 800ebba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebbc:	f003 0301 	and.w	r3, r3, #1
 800ebc0:	60fb      	str	r3, [r7, #12]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ebc4:	f107 0210 	add.w	r2, r7, #16
 800ebc8:	f107 0314 	add.w	r3, r7, #20
 800ebcc:	4611      	mov	r1, r2
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7f6 fed6 	bl	8005980 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800ebd4:	f7f6 fec0 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	005b      	lsls	r3, r3, #1
 800ebdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800ebde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe0:	4a13      	ldr	r2, [pc, #76]	; (800ec30 <HAL_InitTick+0xa4>)
 800ebe2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebe6:	0c9b      	lsrs	r3, r3, #18
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800ebec:	4b11      	ldr	r3, [pc, #68]	; (800ec34 <HAL_InitTick+0xa8>)
 800ebee:	4a12      	ldr	r2, [pc, #72]	; (800ec38 <HAL_InitTick+0xac>)
 800ebf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800ebf2:	4b10      	ldr	r3, [pc, #64]	; (800ec34 <HAL_InitTick+0xa8>)
 800ebf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ebf8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800ebfa:	4a0e      	ldr	r2, [pc, #56]	; (800ec34 <HAL_InitTick+0xa8>)
 800ebfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800ec00:	4b0c      	ldr	r3, [pc, #48]	; (800ec34 <HAL_InitTick+0xa8>)
 800ec02:	2200      	movs	r2, #0
 800ec04:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ec06:	4b0b      	ldr	r3, [pc, #44]	; (800ec34 <HAL_InitTick+0xa8>)
 800ec08:	2200      	movs	r2, #0
 800ec0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800ec0c:	4809      	ldr	r0, [pc, #36]	; (800ec34 <HAL_InitTick+0xa8>)
 800ec0e:	f7f7 fbb8 	bl	8006382 <HAL_TIM_Base_Init>
 800ec12:	4603      	mov	r3, r0
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d104      	bne.n	800ec22 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800ec18:	4806      	ldr	r0, [pc, #24]	; (800ec34 <HAL_InitTick+0xa8>)
 800ec1a:	f7f7 fbe7 	bl	80063ec <HAL_TIM_Base_Start_IT>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	e000      	b.n	800ec24 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800ec22:	2301      	movs	r3, #1
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3730      	adds	r7, #48	; 0x30
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}
 800ec2c:	40023800 	.word	0x40023800
 800ec30:	431bde83 	.word	0x431bde83
 800ec34:	20001590 	.word	0x20001590
 800ec38:	40010000 	.word	0x40010000

0800ec3c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ec40:	bf00      	nop
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr

0800ec4a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800ec4a:	b480      	push	{r7}
 800ec4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ec4e:	bf00      	nop
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr

0800ec58 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 800ec5c:	f7f3 fc62 	bl	8002524 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ec60:	bf00      	nop
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <DMA1_Stream1_IRQHandler>:

/**
* @brief This function handles DMA1 stream1 global interrupt.
*/
void DMA1_Stream1_IRQHandler(void)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800ec68:	4802      	ldr	r0, [pc, #8]	; (800ec74 <DMA1_Stream1_IRQHandler+0x10>)
 800ec6a:	f7f3 fdf5 	bl	8002858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800ec6e:	bf00      	nop
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	20000c74 	.word	0x20000c74

0800ec78 <DMA1_Stream4_IRQHandler>:

/**
* @brief This function handles DMA1 stream4 global interrupt.
*/
void DMA1_Stream4_IRQHandler(void)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800ec7c:	4802      	ldr	r0, [pc, #8]	; (800ec88 <DMA1_Stream4_IRQHandler+0x10>)
 800ec7e:	f7f3 fdeb 	bl	8002858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800ec82:	bf00      	nop
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	200009a4 	.word	0x200009a4

0800ec8c <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ec90:	4802      	ldr	r0, [pc, #8]	; (800ec9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 800ec92:	f7f7 fbc6 	bl	8006422 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800ec96:	bf00      	nop
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	bf00      	nop
 800ec9c:	20001590 	.word	0x20001590

0800eca0 <OTG_HS_IRQHandler>:

/**
* @brief This function handles USB On The Go HS global interrupt.
*/
void OTG_HS_IRQHandler(void)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800eca4:	4802      	ldr	r0, [pc, #8]	; (800ecb0 <OTG_HS_IRQHandler+0x10>)
 800eca6:	f7f5 f995 	bl	8003fd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800ecaa:	bf00      	nop
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	200027f4 	.word	0x200027f4

0800ecb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ecb8:	4a15      	ldr	r2, [pc, #84]	; (800ed10 <SystemInit+0x5c>)
 800ecba:	4b15      	ldr	r3, [pc, #84]	; (800ed10 <SystemInit+0x5c>)
 800ecbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ecc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ecc8:	4a12      	ldr	r2, [pc, #72]	; (800ed14 <SystemInit+0x60>)
 800ecca:	4b12      	ldr	r3, [pc, #72]	; (800ed14 <SystemInit+0x60>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f043 0301 	orr.w	r3, r3, #1
 800ecd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ecd4:	4b0f      	ldr	r3, [pc, #60]	; (800ed14 <SystemInit+0x60>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ecda:	490e      	ldr	r1, [pc, #56]	; (800ed14 <SystemInit+0x60>)
 800ecdc:	4b0d      	ldr	r3, [pc, #52]	; (800ed14 <SystemInit+0x60>)
 800ecde:	681a      	ldr	r2, [r3, #0]
 800ece0:	4b0d      	ldr	r3, [pc, #52]	; (800ed18 <SystemInit+0x64>)
 800ece2:	4013      	ands	r3, r2
 800ece4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ece6:	4b0b      	ldr	r3, [pc, #44]	; (800ed14 <SystemInit+0x60>)
 800ece8:	4a0c      	ldr	r2, [pc, #48]	; (800ed1c <SystemInit+0x68>)
 800ecea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ecec:	4a09      	ldr	r2, [pc, #36]	; (800ed14 <SystemInit+0x60>)
 800ecee:	4b09      	ldr	r3, [pc, #36]	; (800ed14 <SystemInit+0x60>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ecf6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ecf8:	4b06      	ldr	r3, [pc, #24]	; (800ed14 <SystemInit+0x60>)
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ecfe:	4b04      	ldr	r3, [pc, #16]	; (800ed10 <SystemInit+0x5c>)
 800ed00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ed04:	609a      	str	r2, [r3, #8]
#endif
}
 800ed06:	bf00      	nop
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr
 800ed10:	e000ed00 	.word	0xe000ed00
 800ed14:	40023800 	.word	0x40023800
 800ed18:	fef6ffff 	.word	0xfef6ffff
 800ed1c:	24003010 	.word	0x24003010

0800ed20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS);
 800ed24:	2201      	movs	r2, #1
 800ed26:	4908      	ldr	r1, [pc, #32]	; (800ed48 <MX_USB_DEVICE_Init+0x28>)
 800ed28:	4808      	ldr	r0, [pc, #32]	; (800ed4c <MX_USB_DEVICE_Init+0x2c>)
 800ed2a:	f7fc fe7a 	bl	800ba22 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC);
 800ed2e:	4908      	ldr	r1, [pc, #32]	; (800ed50 <MX_USB_DEVICE_Init+0x30>)
 800ed30:	4806      	ldr	r0, [pc, #24]	; (800ed4c <MX_USB_DEVICE_Init+0x2c>)
 800ed32:	f7fc fea1 	bl	800ba78 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS);
 800ed36:	4907      	ldr	r1, [pc, #28]	; (800ed54 <MX_USB_DEVICE_Init+0x34>)
 800ed38:	4804      	ldr	r0, [pc, #16]	; (800ed4c <MX_USB_DEVICE_Init+0x2c>)
 800ed3a:	f7fc fe03 	bl	800b944 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceHS);
 800ed3e:	4803      	ldr	r0, [pc, #12]	; (800ed4c <MX_USB_DEVICE_Init+0x2c>)
 800ed40:	f7fc feb4 	bl	800baac <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ed44:	bf00      	nop
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	20000138 	.word	0x20000138
 800ed4c:	200015d0 	.word	0x200015d0
 800ed50:	20000020 	.word	0x20000020
 800ed54:	20000128 	.word	0x20000128

0800ed58 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	4905      	ldr	r1, [pc, #20]	; (800ed74 <CDC_Init_HS+0x1c>)
 800ed60:	4805      	ldr	r0, [pc, #20]	; (800ed78 <CDC_Init_HS+0x20>)
 800ed62:	f7fc fe06 	bl	800b972 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800ed66:	4905      	ldr	r1, [pc, #20]	; (800ed7c <CDC_Init_HS+0x24>)
 800ed68:	4803      	ldr	r0, [pc, #12]	; (800ed78 <CDC_Init_HS+0x20>)
 800ed6a:	f7fc fe1c 	bl	800b9a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ed6e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	20001ff4 	.word	0x20001ff4
 800ed78:	200015d0 	.word	0x200015d0
 800ed7c:	200017f4 	.word	0x200017f4

0800ed80 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ed80:	b480      	push	{r7}
 800ed82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ed84:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr

0800ed90 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	4603      	mov	r3, r0
 800ed98:	6039      	str	r1, [r7, #0]
 800ed9a:	71fb      	strb	r3, [r7, #7]
 800ed9c:	4613      	mov	r3, r2
 800ed9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800eda0:	79fb      	ldrb	r3, [r7, #7]
 800eda2:	2b23      	cmp	r3, #35	; 0x23
 800eda4:	d84a      	bhi.n	800ee3c <CDC_Control_HS+0xac>
 800eda6:	a201      	add	r2, pc, #4	; (adr r2, 800edac <CDC_Control_HS+0x1c>)
 800eda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edac:	0800ee3d 	.word	0x0800ee3d
 800edb0:	0800ee3d 	.word	0x0800ee3d
 800edb4:	0800ee3d 	.word	0x0800ee3d
 800edb8:	0800ee3d 	.word	0x0800ee3d
 800edbc:	0800ee3d 	.word	0x0800ee3d
 800edc0:	0800ee3d 	.word	0x0800ee3d
 800edc4:	0800ee3d 	.word	0x0800ee3d
 800edc8:	0800ee3d 	.word	0x0800ee3d
 800edcc:	0800ee3d 	.word	0x0800ee3d
 800edd0:	0800ee3d 	.word	0x0800ee3d
 800edd4:	0800ee3d 	.word	0x0800ee3d
 800edd8:	0800ee3d 	.word	0x0800ee3d
 800eddc:	0800ee3d 	.word	0x0800ee3d
 800ede0:	0800ee3d 	.word	0x0800ee3d
 800ede4:	0800ee3d 	.word	0x0800ee3d
 800ede8:	0800ee3d 	.word	0x0800ee3d
 800edec:	0800ee3d 	.word	0x0800ee3d
 800edf0:	0800ee3d 	.word	0x0800ee3d
 800edf4:	0800ee3d 	.word	0x0800ee3d
 800edf8:	0800ee3d 	.word	0x0800ee3d
 800edfc:	0800ee3d 	.word	0x0800ee3d
 800ee00:	0800ee3d 	.word	0x0800ee3d
 800ee04:	0800ee3d 	.word	0x0800ee3d
 800ee08:	0800ee3d 	.word	0x0800ee3d
 800ee0c:	0800ee3d 	.word	0x0800ee3d
 800ee10:	0800ee3d 	.word	0x0800ee3d
 800ee14:	0800ee3d 	.word	0x0800ee3d
 800ee18:	0800ee3d 	.word	0x0800ee3d
 800ee1c:	0800ee3d 	.word	0x0800ee3d
 800ee20:	0800ee3d 	.word	0x0800ee3d
 800ee24:	0800ee3d 	.word	0x0800ee3d
 800ee28:	0800ee3d 	.word	0x0800ee3d
 800ee2c:	0800ee3d 	.word	0x0800ee3d
 800ee30:	0800ee3d 	.word	0x0800ee3d
 800ee34:	0800ee3d 	.word	0x0800ee3d
 800ee38:	0800ee3d 	.word	0x0800ee3d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ee3c:	bf00      	nop
  }

  return (USBD_OK);
 800ee3e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	370c      	adds	r7, #12
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr

0800ee4c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800ee56:	6879      	ldr	r1, [r7, #4]
 800ee58:	4805      	ldr	r0, [pc, #20]	; (800ee70 <CDC_Receive_HS+0x24>)
 800ee5a:	f7fc fda4 	bl	800b9a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800ee5e:	4804      	ldr	r0, [pc, #16]	; (800ee70 <CDC_Receive_HS+0x24>)
 800ee60:	f7fc fdb5 	bl	800b9ce <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ee64:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3708      	adds	r7, #8
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	200015d0 	.word	0x200015d0

0800ee74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b08a      	sub	sp, #40	; 0x28
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4a33      	ldr	r2, [pc, #204]	; (800ef50 <HAL_PCD_MspInit+0xdc>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d160      	bne.n	800ef48 <HAL_PCD_MspInit+0xd4>
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4 
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800ee86:	f643 4323 	movw	r3, #15395	; 0x3c23
 800ee8a:	617b      	str	r3, [r7, #20]
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee8c:	2302      	movs	r3, #2
 800ee8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee90:	2300      	movs	r3, #0
 800ee92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee94:	2303      	movs	r3, #3
 800ee96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800ee98:	230a      	movs	r3, #10
 800ee9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ee9c:	f107 0314 	add.w	r3, r7, #20
 800eea0:	4619      	mov	r1, r3
 800eea2:	482c      	ldr	r0, [pc, #176]	; (800ef54 <HAL_PCD_MspInit+0xe0>)
 800eea4:	f7f4 f9aa 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800eea8:	2310      	movs	r3, #16
 800eeaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eeac:	2302      	movs	r3, #2
 800eeae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eeb4:	2303      	movs	r3, #3
 800eeb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800eeb8:	230a      	movs	r3, #10
 800eeba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800eebc:	f107 0314 	add.w	r3, r7, #20
 800eec0:	4619      	mov	r1, r3
 800eec2:	4825      	ldr	r0, [pc, #148]	; (800ef58 <HAL_PCD_MspInit+0xe4>)
 800eec4:	f7f4 f99a 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800eec8:	2305      	movs	r3, #5
 800eeca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eecc:	2302      	movs	r3, #2
 800eece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eed0:	2300      	movs	r3, #0
 800eed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eed4:	2303      	movs	r3, #3
 800eed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800eed8:	230a      	movs	r3, #10
 800eeda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800eedc:	f107 0314 	add.w	r3, r7, #20
 800eee0:	4619      	mov	r1, r3
 800eee2:	481e      	ldr	r0, [pc, #120]	; (800ef5c <HAL_PCD_MspInit+0xe8>)
 800eee4:	f7f4 f98a 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800eee8:	2328      	movs	r3, #40	; 0x28
 800eeea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eeec:	2302      	movs	r3, #2
 800eeee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eef0:	2300      	movs	r3, #0
 800eef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eef4:	2303      	movs	r3, #3
 800eef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800eef8:	230a      	movs	r3, #10
 800eefa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eefc:	f107 0314 	add.w	r3, r7, #20
 800ef00:	4619      	mov	r1, r3
 800ef02:	4817      	ldr	r0, [pc, #92]	; (800ef60 <HAL_PCD_MspInit+0xec>)
 800ef04:	f7f4 f97a 	bl	80031fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ef08:	4a16      	ldr	r2, [pc, #88]	; (800ef64 <HAL_PCD_MspInit+0xf0>)
 800ef0a:	4b16      	ldr	r3, [pc, #88]	; (800ef64 <HAL_PCD_MspInit+0xf0>)
 800ef0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef12:	6313      	str	r3, [r2, #48]	; 0x30
 800ef14:	4b13      	ldr	r3, [pc, #76]	; (800ef64 <HAL_PCD_MspInit+0xf0>)
 800ef16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ef1c:	613b      	str	r3, [r7, #16]
 800ef1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800ef20:	4a10      	ldr	r2, [pc, #64]	; (800ef64 <HAL_PCD_MspInit+0xf0>)
 800ef22:	4b10      	ldr	r3, [pc, #64]	; (800ef64 <HAL_PCD_MspInit+0xf0>)
 800ef24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef2a:	6313      	str	r3, [r2, #48]	; 0x30
 800ef2c:	4b0d      	ldr	r3, [pc, #52]	; (800ef64 <HAL_PCD_MspInit+0xf0>)
 800ef2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ef34:	60fb      	str	r3, [r7, #12]
 800ef36:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800ef38:	2200      	movs	r2, #0
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	204d      	movs	r0, #77	; 0x4d
 800ef3e:	f7f3 fa9e 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ef42:	204d      	movs	r0, #77	; 0x4d
 800ef44:	f7f3 fab7 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ef48:	bf00      	nop
 800ef4a:	3728      	adds	r7, #40	; 0x28
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	40040000 	.word	0x40040000
 800ef54:	40020400 	.word	0x40020400
 800ef58:	40021c00 	.word	0x40021c00
 800ef5c:	40020800 	.word	0x40020800
 800ef60:	40020000 	.word	0x40020000
 800ef64:	40023800 	.word	0x40023800

0800ef68 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	4610      	mov	r0, r2
 800ef80:	f7fc fddd 	bl	800bb3e <USBD_LL_SetupStage>
}
 800ef84:	bf00      	nop
 800ef86:	3708      	adds	r7, #8
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	460b      	mov	r3, r1
 800ef96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800ef9e:	78fa      	ldrb	r2, [r7, #3]
 800efa0:	6879      	ldr	r1, [r7, #4]
 800efa2:	4613      	mov	r3, r2
 800efa4:	00db      	lsls	r3, r3, #3
 800efa6:	1a9b      	subs	r3, r3, r2
 800efa8:	009b      	lsls	r3, r3, #2
 800efaa:	440b      	add	r3, r1
 800efac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	78fb      	ldrb	r3, [r7, #3]
 800efb4:	4619      	mov	r1, r3
 800efb6:	f7fc fe0c 	bl	800bbd2 <USBD_LL_DataOutStage>
}
 800efba:	bf00      	nop
 800efbc:	3708      	adds	r7, #8
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800efc2:	b580      	push	{r7, lr}
 800efc4:	b082      	sub	sp, #8
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	6078      	str	r0, [r7, #4]
 800efca:	460b      	mov	r3, r1
 800efcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800efd4:	78fa      	ldrb	r2, [r7, #3]
 800efd6:	6879      	ldr	r1, [r7, #4]
 800efd8:	4613      	mov	r3, r2
 800efda:	00db      	lsls	r3, r3, #3
 800efdc:	1a9b      	subs	r3, r3, r2
 800efde:	009b      	lsls	r3, r3, #2
 800efe0:	440b      	add	r3, r1
 800efe2:	3344      	adds	r3, #68	; 0x44
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	78fb      	ldrb	r3, [r7, #3]
 800efe8:	4619      	mov	r1, r3
 800efea:	f7fc fe4d 	bl	800bc88 <USBD_LL_DataInStage>
}
 800efee:	bf00      	nop
 800eff0:	3708      	adds	r7, #8
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b082      	sub	sp, #8
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f004:	4618      	mov	r0, r3
 800f006:	f7fc ff33 	bl	800be70 <USBD_LL_SOF>
}
 800f00a:	bf00      	nop
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800f012:	b580      	push	{r7, lr}
 800f014:	b084      	sub	sp, #16
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f01a:	2301      	movs	r3, #1
 800f01c:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	68db      	ldr	r3, [r3, #12]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d002      	beq.n	800f02c <HAL_PCD_ResetCallback+0x1a>
 800f026:	2b02      	cmp	r3, #2
 800f028:	d003      	beq.n	800f032 <HAL_PCD_ResetCallback+0x20>
 800f02a:	e005      	b.n	800f038 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 800f02c:	2300      	movs	r3, #0
 800f02e:	73fb      	strb	r3, [r7, #15]
    break;
 800f030:	e005      	b.n	800f03e <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800f032:	2301      	movs	r3, #1
 800f034:	73fb      	strb	r3, [r7, #15]
    break;
 800f036:	e002      	b.n	800f03e <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 800f038:	2301      	movs	r3, #1
 800f03a:	73fb      	strb	r3, [r7, #15]
    break;    
 800f03c:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f044:	7bfa      	ldrb	r2, [r7, #15]
 800f046:	4611      	mov	r1, r2
 800f048:	4618      	mov	r0, r3
 800f04a:	f7fc fedb 	bl	800be04 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f054:	4618      	mov	r0, r3
 800f056:	f7fc fea6 	bl	800bda6 <USBD_LL_Reset>
}
 800f05a:	bf00      	nop
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
	...

0800f064 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f072:	4618      	mov	r0, r3
 800f074:	f7fc fed6 	bl	800be24 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f080:	461a      	mov	r2, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f043 0301 	orr.w	r3, r3, #1
 800f090:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6a1b      	ldr	r3, [r3, #32]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d005      	beq.n	800f0a6 <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f09a:	4a05      	ldr	r2, [pc, #20]	; (800f0b0 <HAL_PCD_SuspendCallback+0x4c>)
 800f09c:	4b04      	ldr	r3, [pc, #16]	; (800f0b0 <HAL_PCD_SuspendCallback+0x4c>)
 800f09e:	691b      	ldr	r3, [r3, #16]
 800f0a0:	f043 0306 	orr.w	r3, r3, #6
 800f0a4:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f0a6:	bf00      	nop
 800f0a8:	3708      	adds	r7, #8
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	e000ed00 	.word	0xe000ed00

0800f0b4 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fc fec3 	bl	800be4e <USBD_LL_Resume>
}
 800f0c8:	bf00      	nop
 800f0ca:	3708      	adds	r7, #8
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	460b      	mov	r3, r1
 800f0da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f0e2:	78fa      	ldrb	r2, [r7, #3]
 800f0e4:	4611      	mov	r1, r2
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7fc fee9 	bl	800bebe <USBD_LL_IsoOUTIncomplete>
}
 800f0ec:	bf00      	nop
 800f0ee:	3708      	adds	r7, #8
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f106:	78fa      	ldrb	r2, [r7, #3]
 800f108:	4611      	mov	r1, r2
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fc feca 	bl	800bea4 <USBD_LL_IsoINIncomplete>
}
 800f110:	bf00      	nop
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f126:	4618      	mov	r0, r3
 800f128:	f7fc fed6 	bl	800bed8 <USBD_LL_DevConnected>
}
 800f12c:	bf00      	nop
 800f12e:	3708      	adds	r7, #8
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f142:	4618      	mov	r0, r3
 800f144:	f7fc fed3 	bl	800beee <USBD_LL_DevDisconnected>
}
 800f148:	bf00      	nop
 800f14a:	3708      	adds	r7, #8
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d143      	bne.n	800f1e8 <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800f160:	4a24      	ldr	r2, [pc, #144]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_HS;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	4a22      	ldr	r2, [pc, #136]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f16c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f170:	4b20      	ldr	r3, [pc, #128]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f172:	4a21      	ldr	r2, [pc, #132]	; (800f1f8 <USBD_LL_Init+0xa8>)
 800f174:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 800f176:	4b1f      	ldr	r3, [pc, #124]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f178:	2208      	movs	r2, #8
 800f17a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f17c:	4b1d      	ldr	r3, [pc, #116]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f17e:	2200      	movs	r2, #0
 800f180:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 800f182:	4b1c      	ldr	r3, [pc, #112]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f184:	2200      	movs	r2, #0
 800f186:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800f188:	4b1a      	ldr	r3, [pc, #104]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f18a:	2201      	movs	r2, #1
 800f18c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f18e:	4b19      	ldr	r3, [pc, #100]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f190:	2200      	movs	r2, #0
 800f192:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f194:	4b17      	ldr	r3, [pc, #92]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f196:	2200      	movs	r2, #0
 800f198:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800f19a:	4b16      	ldr	r3, [pc, #88]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f19c:	2200      	movs	r2, #0
 800f19e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800f1a0:	4b14      	ldr	r3, [pc, #80]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800f1a6:	4b13      	ldr	r3, [pc, #76]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f1ac:	4b11      	ldr	r3, [pc, #68]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800f1b2:	4810      	ldr	r0, [pc, #64]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f1b4:	f7f4 fdde 	bl	8003d74 <HAL_PCD_Init>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d004      	beq.n	800f1c8 <USBD_LL_Init+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 800f1be:	f240 117f 	movw	r1, #383	; 0x17f
 800f1c2:	480e      	ldr	r0, [pc, #56]	; (800f1fc <USBD_LL_Init+0xac>)
 800f1c4:	f7ff f978 	bl	800e4b8 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f1c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1cc:	4809      	ldr	r0, [pc, #36]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f1ce:	f7f5 ff0f 	bl	8004ff0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800f1d2:	2280      	movs	r2, #128	; 0x80
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	4807      	ldr	r0, [pc, #28]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f1d8:	f7f5 febf 	bl	8004f5a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800f1dc:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800f1e0:	2101      	movs	r1, #1
 800f1e2:	4804      	ldr	r0, [pc, #16]	; (800f1f4 <USBD_LL_Init+0xa4>)
 800f1e4:	f7f5 feb9 	bl	8004f5a <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f1e8:	2300      	movs	r3, #0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3708      	adds	r7, #8
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	200027f4 	.word	0x200027f4
 800f1f8:	40040000 	.word	0x40040000
 800f1fc:	08012c2c 	.word	0x08012c2c

0800f200 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f208:	2300      	movs	r3, #0
 800f20a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f20c:	2300      	movs	r3, #0
 800f20e:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f216:	4618      	mov	r0, r3
 800f218:	f7f4 feba 	bl	8003f90 <HAL_PCD_Start>
 800f21c:	4603      	mov	r3, r0
 800f21e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800f220:	7bbb      	ldrb	r3, [r7, #14]
 800f222:	2b03      	cmp	r3, #3
 800f224:	d816      	bhi.n	800f254 <USBD_LL_Start+0x54>
 800f226:	a201      	add	r2, pc, #4	; (adr r2, 800f22c <USBD_LL_Start+0x2c>)
 800f228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f22c:	0800f23d 	.word	0x0800f23d
 800f230:	0800f243 	.word	0x0800f243
 800f234:	0800f249 	.word	0x0800f249
 800f238:	0800f24f 	.word	0x0800f24f
    case HAL_OK :
      usb_status = USBD_OK;
 800f23c:	2300      	movs	r3, #0
 800f23e:	73fb      	strb	r3, [r7, #15]
    break;
 800f240:	e00b      	b.n	800f25a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f242:	2302      	movs	r3, #2
 800f244:	73fb      	strb	r3, [r7, #15]
    break;
 800f246:	e008      	b.n	800f25a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f248:	2301      	movs	r3, #1
 800f24a:	73fb      	strb	r3, [r7, #15]
    break;
 800f24c:	e005      	b.n	800f25a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f24e:	2302      	movs	r3, #2
 800f250:	73fb      	strb	r3, [r7, #15]
    break;
 800f252:	e002      	b.n	800f25a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f254:	2302      	movs	r3, #2
 800f256:	73fb      	strb	r3, [r7, #15]
    break;
 800f258:	bf00      	nop
  }
  return usb_status;
 800f25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3710      	adds	r7, #16
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	4608      	mov	r0, r1
 800f26e:	4611      	mov	r1, r2
 800f270:	461a      	mov	r2, r3
 800f272:	4603      	mov	r3, r0
 800f274:	70fb      	strb	r3, [r7, #3]
 800f276:	460b      	mov	r3, r1
 800f278:	70bb      	strb	r3, [r7, #2]
 800f27a:	4613      	mov	r3, r2
 800f27c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f27e:	2300      	movs	r3, #0
 800f280:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f282:	2300      	movs	r3, #0
 800f284:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800f28c:	78bb      	ldrb	r3, [r7, #2]
 800f28e:	883a      	ldrh	r2, [r7, #0]
 800f290:	78f9      	ldrb	r1, [r7, #3]
 800f292:	f7f5 fbc4 	bl	8004a1e <HAL_PCD_EP_Open>
 800f296:	4603      	mov	r3, r0
 800f298:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f29a:	7bbb      	ldrb	r3, [r7, #14]
 800f29c:	2b03      	cmp	r3, #3
 800f29e:	d817      	bhi.n	800f2d0 <USBD_LL_OpenEP+0x6c>
 800f2a0:	a201      	add	r2, pc, #4	; (adr r2, 800f2a8 <USBD_LL_OpenEP+0x44>)
 800f2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a6:	bf00      	nop
 800f2a8:	0800f2b9 	.word	0x0800f2b9
 800f2ac:	0800f2bf 	.word	0x0800f2bf
 800f2b0:	0800f2c5 	.word	0x0800f2c5
 800f2b4:	0800f2cb 	.word	0x0800f2cb
    case HAL_OK :
      usb_status = USBD_OK;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800f2bc:	e00b      	b.n	800f2d6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f2be:	2302      	movs	r3, #2
 800f2c0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2c2:	e008      	b.n	800f2d6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2c8:	e005      	b.n	800f2d6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f2ca:	2302      	movs	r3, #2
 800f2cc:	73fb      	strb	r3, [r7, #15]
    break;
 800f2ce:	e002      	b.n	800f2d6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f2d0:	2302      	movs	r3, #2
 800f2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d4:	bf00      	nop
  }
  return usb_status;
 800f2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3710      	adds	r7, #16
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	460b      	mov	r3, r1
 800f2ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f2fa:	78fa      	ldrb	r2, [r7, #3]
 800f2fc:	4611      	mov	r1, r2
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7f5 fbf5 	bl	8004aee <HAL_PCD_EP_Close>
 800f304:	4603      	mov	r3, r0
 800f306:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800f308:	7bbb      	ldrb	r3, [r7, #14]
 800f30a:	2b03      	cmp	r3, #3
 800f30c:	d816      	bhi.n	800f33c <USBD_LL_CloseEP+0x5c>
 800f30e:	a201      	add	r2, pc, #4	; (adr r2, 800f314 <USBD_LL_CloseEP+0x34>)
 800f310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f314:	0800f325 	.word	0x0800f325
 800f318:	0800f32b 	.word	0x0800f32b
 800f31c:	0800f331 	.word	0x0800f331
 800f320:	0800f337 	.word	0x0800f337
    case HAL_OK :
      usb_status = USBD_OK;
 800f324:	2300      	movs	r3, #0
 800f326:	73fb      	strb	r3, [r7, #15]
    break;
 800f328:	e00b      	b.n	800f342 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f32a:	2302      	movs	r3, #2
 800f32c:	73fb      	strb	r3, [r7, #15]
    break;
 800f32e:	e008      	b.n	800f342 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f330:	2301      	movs	r3, #1
 800f332:	73fb      	strb	r3, [r7, #15]
    break;
 800f334:	e005      	b.n	800f342 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f336:	2302      	movs	r3, #2
 800f338:	73fb      	strb	r3, [r7, #15]
    break;
 800f33a:	e002      	b.n	800f342 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f33c:	2302      	movs	r3, #2
 800f33e:	73fb      	strb	r3, [r7, #15]
    break;
 800f340:	bf00      	nop
  }
  return usb_status;  
 800f342:	7bfb      	ldrb	r3, [r7, #15]
}
 800f344:	4618      	mov	r0, r3
 800f346:	3710      	adds	r7, #16
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	460b      	mov	r3, r1
 800f356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f358:	2300      	movs	r3, #0
 800f35a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f35c:	2300      	movs	r3, #0
 800f35e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f366:	78fa      	ldrb	r2, [r7, #3]
 800f368:	4611      	mov	r1, r2
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7f5 fcb5 	bl	8004cda <HAL_PCD_EP_SetStall>
 800f370:	4603      	mov	r3, r0
 800f372:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f374:	7bbb      	ldrb	r3, [r7, #14]
 800f376:	2b03      	cmp	r3, #3
 800f378:	d816      	bhi.n	800f3a8 <USBD_LL_StallEP+0x5c>
 800f37a:	a201      	add	r2, pc, #4	; (adr r2, 800f380 <USBD_LL_StallEP+0x34>)
 800f37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f380:	0800f391 	.word	0x0800f391
 800f384:	0800f397 	.word	0x0800f397
 800f388:	0800f39d 	.word	0x0800f39d
 800f38c:	0800f3a3 	.word	0x0800f3a3
    case HAL_OK :
      usb_status = USBD_OK;
 800f390:	2300      	movs	r3, #0
 800f392:	73fb      	strb	r3, [r7, #15]
    break;
 800f394:	e00b      	b.n	800f3ae <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f396:	2302      	movs	r3, #2
 800f398:	73fb      	strb	r3, [r7, #15]
    break;
 800f39a:	e008      	b.n	800f3ae <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f39c:	2301      	movs	r3, #1
 800f39e:	73fb      	strb	r3, [r7, #15]
    break;
 800f3a0:	e005      	b.n	800f3ae <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f3a2:	2302      	movs	r3, #2
 800f3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800f3a6:	e002      	b.n	800f3ae <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f3a8:	2302      	movs	r3, #2
 800f3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800f3ac:	bf00      	nop
  }
  return usb_status;  
 800f3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3710      	adds	r7, #16
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f3d2:	78fa      	ldrb	r2, [r7, #3]
 800f3d4:	4611      	mov	r1, r2
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7f5 fce3 	bl	8004da2 <HAL_PCD_EP_ClrStall>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800f3e0:	7bbb      	ldrb	r3, [r7, #14]
 800f3e2:	2b03      	cmp	r3, #3
 800f3e4:	d816      	bhi.n	800f414 <USBD_LL_ClearStallEP+0x5c>
 800f3e6:	a201      	add	r2, pc, #4	; (adr r2, 800f3ec <USBD_LL_ClearStallEP+0x34>)
 800f3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ec:	0800f3fd 	.word	0x0800f3fd
 800f3f0:	0800f403 	.word	0x0800f403
 800f3f4:	0800f409 	.word	0x0800f409
 800f3f8:	0800f40f 	.word	0x0800f40f
    case HAL_OK :
      usb_status = USBD_OK;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f400:	e00b      	b.n	800f41a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f402:	2302      	movs	r3, #2
 800f404:	73fb      	strb	r3, [r7, #15]
    break;
 800f406:	e008      	b.n	800f41a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f408:	2301      	movs	r3, #1
 800f40a:	73fb      	strb	r3, [r7, #15]
    break;
 800f40c:	e005      	b.n	800f41a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f40e:	2302      	movs	r3, #2
 800f410:	73fb      	strb	r3, [r7, #15]
    break;
 800f412:	e002      	b.n	800f41a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800f414:	2302      	movs	r3, #2
 800f416:	73fb      	strb	r3, [r7, #15]
    break;
 800f418:	bf00      	nop
  }
  return usb_status; 
 800f41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3710      	adds	r7, #16
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f424:	b480      	push	{r7}
 800f426:	b085      	sub	sp, #20
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	460b      	mov	r3, r1
 800f42e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f436:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800f438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	da0b      	bge.n	800f458 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800f440:	78fb      	ldrb	r3, [r7, #3]
 800f442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f446:	68f9      	ldr	r1, [r7, #12]
 800f448:	4613      	mov	r3, r2
 800f44a:	00db      	lsls	r3, r3, #3
 800f44c:	1a9b      	subs	r3, r3, r2
 800f44e:	009b      	lsls	r3, r3, #2
 800f450:	440b      	add	r3, r1
 800f452:	333a      	adds	r3, #58	; 0x3a
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	e00b      	b.n	800f470 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800f458:	78fb      	ldrb	r3, [r7, #3]
 800f45a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f45e:	68f9      	ldr	r1, [r7, #12]
 800f460:	4613      	mov	r3, r2
 800f462:	00db      	lsls	r3, r3, #3
 800f464:	1a9b      	subs	r3, r3, r2
 800f466:	009b      	lsls	r3, r3, #2
 800f468:	440b      	add	r3, r1
 800f46a:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800f46e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f470:	4618      	mov	r0, r3
 800f472:	3714      	adds	r7, #20
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr

0800f47c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b084      	sub	sp, #16
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	460b      	mov	r3, r1
 800f486:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f488:	2300      	movs	r3, #0
 800f48a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f48c:	2300      	movs	r3, #0
 800f48e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f496:	78fa      	ldrb	r2, [r7, #3]
 800f498:	4611      	mov	r1, r2
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7f5 fa9e 	bl	80049dc <HAL_PCD_SetAddress>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800f4a4:	7bbb      	ldrb	r3, [r7, #14]
 800f4a6:	2b03      	cmp	r3, #3
 800f4a8:	d816      	bhi.n	800f4d8 <USBD_LL_SetUSBAddress+0x5c>
 800f4aa:	a201      	add	r2, pc, #4	; (adr r2, 800f4b0 <USBD_LL_SetUSBAddress+0x34>)
 800f4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4b0:	0800f4c1 	.word	0x0800f4c1
 800f4b4:	0800f4c7 	.word	0x0800f4c7
 800f4b8:	0800f4cd 	.word	0x0800f4cd
 800f4bc:	0800f4d3 	.word	0x0800f4d3
    case HAL_OK :
      usb_status = USBD_OK;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f4c4:	e00b      	b.n	800f4de <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f4c6:	2302      	movs	r3, #2
 800f4c8:	73fb      	strb	r3, [r7, #15]
    break;
 800f4ca:	e008      	b.n	800f4de <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f4d0:	e005      	b.n	800f4de <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f4d2:	2302      	movs	r3, #2
 800f4d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f4d6:	e002      	b.n	800f4de <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800f4d8:	2302      	movs	r3, #2
 800f4da:	73fb      	strb	r3, [r7, #15]
    break;
 800f4dc:	bf00      	nop
  }
  return usb_status;  
 800f4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3710      	adds	r7, #16
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b086      	sub	sp, #24
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	607a      	str	r2, [r7, #4]
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	72fb      	strb	r3, [r7, #11]
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f500:	2300      	movs	r3, #0
 800f502:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800f50a:	893b      	ldrh	r3, [r7, #8]
 800f50c:	7af9      	ldrb	r1, [r7, #11]
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	f7f5 fb9a 	bl	8004c48 <HAL_PCD_EP_Transmit>
 800f514:	4603      	mov	r3, r0
 800f516:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800f518:	7dbb      	ldrb	r3, [r7, #22]
 800f51a:	2b03      	cmp	r3, #3
 800f51c:	d816      	bhi.n	800f54c <USBD_LL_Transmit+0x64>
 800f51e:	a201      	add	r2, pc, #4	; (adr r2, 800f524 <USBD_LL_Transmit+0x3c>)
 800f520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f524:	0800f535 	.word	0x0800f535
 800f528:	0800f53b 	.word	0x0800f53b
 800f52c:	0800f541 	.word	0x0800f541
 800f530:	0800f547 	.word	0x0800f547
    case HAL_OK :
      usb_status = USBD_OK;
 800f534:	2300      	movs	r3, #0
 800f536:	75fb      	strb	r3, [r7, #23]
    break;
 800f538:	e00b      	b.n	800f552 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f53a:	2302      	movs	r3, #2
 800f53c:	75fb      	strb	r3, [r7, #23]
    break;
 800f53e:	e008      	b.n	800f552 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f540:	2301      	movs	r3, #1
 800f542:	75fb      	strb	r3, [r7, #23]
    break;
 800f544:	e005      	b.n	800f552 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f546:	2302      	movs	r3, #2
 800f548:	75fb      	strb	r3, [r7, #23]
    break;
 800f54a:	e002      	b.n	800f552 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800f54c:	2302      	movs	r3, #2
 800f54e:	75fb      	strb	r3, [r7, #23]
    break;
 800f550:	bf00      	nop
  }
  return usb_status;    
 800f552:	7dfb      	ldrb	r3, [r7, #23]
}
 800f554:	4618      	mov	r0, r3
 800f556:	3718      	adds	r7, #24
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b086      	sub	sp, #24
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	607a      	str	r2, [r7, #4]
 800f566:	461a      	mov	r2, r3
 800f568:	460b      	mov	r3, r1
 800f56a:	72fb      	strb	r3, [r7, #11]
 800f56c:	4613      	mov	r3, r2
 800f56e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f570:	2300      	movs	r3, #0
 800f572:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f574:	2300      	movs	r3, #0
 800f576:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800f57e:	893b      	ldrh	r3, [r7, #8]
 800f580:	7af9      	ldrb	r1, [r7, #11]
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	f7f5 fafd 	bl	8004b82 <HAL_PCD_EP_Receive>
 800f588:	4603      	mov	r3, r0
 800f58a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800f58c:	7dbb      	ldrb	r3, [r7, #22]
 800f58e:	2b03      	cmp	r3, #3
 800f590:	d816      	bhi.n	800f5c0 <USBD_LL_PrepareReceive+0x64>
 800f592:	a201      	add	r2, pc, #4	; (adr r2, 800f598 <USBD_LL_PrepareReceive+0x3c>)
 800f594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f598:	0800f5a9 	.word	0x0800f5a9
 800f59c:	0800f5af 	.word	0x0800f5af
 800f5a0:	0800f5b5 	.word	0x0800f5b5
 800f5a4:	0800f5bb 	.word	0x0800f5bb
    case HAL_OK :
      usb_status = USBD_OK;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	75fb      	strb	r3, [r7, #23]
    break;
 800f5ac:	e00b      	b.n	800f5c6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f5ae:	2302      	movs	r3, #2
 800f5b0:	75fb      	strb	r3, [r7, #23]
    break;
 800f5b2:	e008      	b.n	800f5c6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	75fb      	strb	r3, [r7, #23]
    break;
 800f5b8:	e005      	b.n	800f5c6 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f5ba:	2302      	movs	r3, #2
 800f5bc:	75fb      	strb	r3, [r7, #23]
    break;
 800f5be:	e002      	b.n	800f5c6 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800f5c0:	2302      	movs	r3, #2
 800f5c2:	75fb      	strb	r3, [r7, #23]
    break;
 800f5c4:	bf00      	nop
  }
  return usb_status; 
 800f5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3718      	adds	r7, #24
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f5e2:	78fa      	ldrb	r2, [r7, #3]
 800f5e4:	4611      	mov	r1, r2
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7f5 fb15 	bl	8004c16 <HAL_PCD_EP_GetRxCount>
 800f5ec:	4603      	mov	r3, r0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
	...

0800f5f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	460b      	mov	r3, r1
 800f602:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800f604:	78fb      	ldrb	r3, [r7, #3]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d002      	beq.n	800f610 <HAL_PCDEx_LPM_Callback+0x18>
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d020      	beq.n	800f650 <HAL_PCDEx_LPM_Callback+0x58>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800f60e:	e03d      	b.n	800f68c <HAL_PCDEx_LPM_Callback+0x94>
    if (hpcd->Init.low_power_enable)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6a1b      	ldr	r3, [r3, #32]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d007      	beq.n	800f628 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800f618:	f7fe f8e2 	bl	800d7e0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f61c:	4a1d      	ldr	r2, [pc, #116]	; (800f694 <HAL_PCDEx_LPM_Callback+0x9c>)
 800f61e:	4b1d      	ldr	r3, [pc, #116]	; (800f694 <HAL_PCDEx_LPM_Callback+0x9c>)
 800f620:	691b      	ldr	r3, [r3, #16]
 800f622:	f023 0306 	bic.w	r3, r3, #6
 800f626:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f630:	461a      	mov	r2, r3
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f023 0301 	bic.w	r3, r3, #1
 800f640:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fc fc00 	bl	800be4e <USBD_LL_Resume>
    break;
 800f64e:	e01d      	b.n	800f68c <HAL_PCDEx_LPM_Callback+0x94>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f658:	461a      	mov	r2, r3
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f043 0301 	orr.w	r3, r3, #1
 800f668:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f670:	4618      	mov	r0, r3
 800f672:	f7fc fbd7 	bl	800be24 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6a1b      	ldr	r3, [r3, #32]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d005      	beq.n	800f68a <HAL_PCDEx_LPM_Callback+0x92>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f67e:	4a05      	ldr	r2, [pc, #20]	; (800f694 <HAL_PCDEx_LPM_Callback+0x9c>)
 800f680:	4b04      	ldr	r3, [pc, #16]	; (800f694 <HAL_PCDEx_LPM_Callback+0x9c>)
 800f682:	691b      	ldr	r3, [r3, #16]
 800f684:	f043 0306 	orr.w	r3, r3, #6
 800f688:	6113      	str	r3, [r2, #16]
    break;   
 800f68a:	bf00      	nop
}
 800f68c:	bf00      	nop
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}
 800f694:	e000ed00 	.word	0xe000ed00

0800f698 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	4603      	mov	r3, r0
 800f6a0:	6039      	str	r1, [r7, #0]
 800f6a2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_HS_DeviceDesc);
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	2212      	movs	r2, #18
 800f6a8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800f6aa:	4b03      	ldr	r3, [pc, #12]	; (800f6b8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr
 800f6b8:	20000158 	.word	0x20000158

0800f6bc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	6039      	str	r1, [r7, #0]
 800f6c6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	2204      	movs	r2, #4
 800f6cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f6ce:	4b03      	ldr	r3, [pc, #12]	; (800f6dc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	370c      	adds	r7, #12
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr
 800f6dc:	20000178 	.word	0x20000178

0800f6e0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b082      	sub	sp, #8
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	6039      	str	r1, [r7, #0]
 800f6ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6ec:	79fb      	ldrb	r3, [r7, #7]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d105      	bne.n	800f6fe <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f6f2:	683a      	ldr	r2, [r7, #0]
 800f6f4:	4907      	ldr	r1, [pc, #28]	; (800f714 <USBD_HS_ProductStrDescriptor+0x34>)
 800f6f6:	4808      	ldr	r0, [pc, #32]	; (800f718 <USBD_HS_ProductStrDescriptor+0x38>)
 800f6f8:	f7fd f82f 	bl	800c75a <USBD_GetString>
 800f6fc:	e004      	b.n	800f708 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f6fe:	683a      	ldr	r2, [r7, #0]
 800f700:	4904      	ldr	r1, [pc, #16]	; (800f714 <USBD_HS_ProductStrDescriptor+0x34>)
 800f702:	4805      	ldr	r0, [pc, #20]	; (800f718 <USBD_HS_ProductStrDescriptor+0x38>)
 800f704:	f7fd f829 	bl	800c75a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f708:	4b02      	ldr	r3, [pc, #8]	; (800f714 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3708      	adds	r7, #8
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	20002bf4 	.word	0x20002bf4
 800f718:	08012c40 	.word	0x08012c40

0800f71c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	4603      	mov	r3, r0
 800f724:	6039      	str	r1, [r7, #0]
 800f726:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f728:	683a      	ldr	r2, [r7, #0]
 800f72a:	4904      	ldr	r1, [pc, #16]	; (800f73c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800f72c:	4804      	ldr	r0, [pc, #16]	; (800f740 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800f72e:	f7fd f814 	bl	800c75a <USBD_GetString>
  return USBD_StrDesc;
 800f732:	4b02      	ldr	r3, [pc, #8]	; (800f73c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800f734:	4618      	mov	r0, r3
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	20002bf4 	.word	0x20002bf4
 800f740:	08012c58 	.word	0x08012c58

0800f744 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	4603      	mov	r3, r0
 800f74c:	6039      	str	r1, [r7, #0]
 800f74e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f750:	79fb      	ldrb	r3, [r7, #7]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d105      	bne.n	800f762 <USBD_HS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 800f756:	683a      	ldr	r2, [r7, #0]
 800f758:	4907      	ldr	r1, [pc, #28]	; (800f778 <USBD_HS_SerialStrDescriptor+0x34>)
 800f75a:	4808      	ldr	r0, [pc, #32]	; (800f77c <USBD_HS_SerialStrDescriptor+0x38>)
 800f75c:	f7fc fffd 	bl	800c75a <USBD_GetString>
 800f760:	e004      	b.n	800f76c <USBD_HS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 800f762:	683a      	ldr	r2, [r7, #0]
 800f764:	4904      	ldr	r1, [pc, #16]	; (800f778 <USBD_HS_SerialStrDescriptor+0x34>)
 800f766:	4805      	ldr	r0, [pc, #20]	; (800f77c <USBD_HS_SerialStrDescriptor+0x38>)
 800f768:	f7fc fff7 	bl	800c75a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f76c:	4b02      	ldr	r3, [pc, #8]	; (800f778 <USBD_HS_SerialStrDescriptor+0x34>)
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3708      	adds	r7, #8
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
 800f776:	bf00      	nop
 800f778:	20002bf4 	.word	0x20002bf4
 800f77c:	08012c6c 	.word	0x08012c6c

0800f780 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	4603      	mov	r3, r0
 800f788:	6039      	str	r1, [r7, #0]
 800f78a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f78c:	79fb      	ldrb	r3, [r7, #7]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d105      	bne.n	800f79e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f792:	683a      	ldr	r2, [r7, #0]
 800f794:	4907      	ldr	r1, [pc, #28]	; (800f7b4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f796:	4808      	ldr	r0, [pc, #32]	; (800f7b8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f798:	f7fc ffdf 	bl	800c75a <USBD_GetString>
 800f79c:	e004      	b.n	800f7a8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f79e:	683a      	ldr	r2, [r7, #0]
 800f7a0:	4904      	ldr	r1, [pc, #16]	; (800f7b4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f7a2:	4805      	ldr	r0, [pc, #20]	; (800f7b8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800f7a4:	f7fc ffd9 	bl	800c75a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7a8:	4b02      	ldr	r3, [pc, #8]	; (800f7b4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3708      	adds	r7, #8
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	20002bf4 	.word	0x20002bf4
 800f7b8:	08012c7c 	.word	0x08012c7c

0800f7bc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	6039      	str	r1, [r7, #0]
 800f7c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f7c8:	79fb      	ldrb	r3, [r7, #7]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d105      	bne.n	800f7da <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f7ce:	683a      	ldr	r2, [r7, #0]
 800f7d0:	4907      	ldr	r1, [pc, #28]	; (800f7f0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f7d2:	4808      	ldr	r0, [pc, #32]	; (800f7f4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f7d4:	f7fc ffc1 	bl	800c75a <USBD_GetString>
 800f7d8:	e004      	b.n	800f7e4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f7da:	683a      	ldr	r2, [r7, #0]
 800f7dc:	4904      	ldr	r1, [pc, #16]	; (800f7f0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f7de:	4805      	ldr	r0, [pc, #20]	; (800f7f4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f7e0:	f7fc ffbb 	bl	800c75a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7e4:	4b02      	ldr	r3, [pc, #8]	; (800f7f0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	20002bf4 	.word	0x20002bf4
 800f7f4:	08012c88 	.word	0x08012c88

0800f7f8 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b083      	sub	sp, #12
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	4603      	mov	r3, r0
 800f800:	6039      	str	r1, [r7, #0]
 800f802:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_HS_BOSDesc);
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	220c      	movs	r2, #12
 800f808:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800f80a:	4b03      	ldr	r3, [pc, #12]	; (800f818 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	370c      	adds	r7, #12
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr
 800f818:	2000016c 	.word	0x2000016c

0800f81c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800f81c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f854 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f820:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f822:	e003      	b.n	800f82c <LoopCopyDataInit>

0800f824 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f824:	4b0c      	ldr	r3, [pc, #48]	; (800f858 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f826:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f828:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f82a:	3104      	adds	r1, #4

0800f82c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f82c:	480b      	ldr	r0, [pc, #44]	; (800f85c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f82e:	4b0c      	ldr	r3, [pc, #48]	; (800f860 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f830:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f832:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f834:	d3f6      	bcc.n	800f824 <CopyDataInit>
  ldr  r2, =_sbss
 800f836:	4a0b      	ldr	r2, [pc, #44]	; (800f864 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f838:	e002      	b.n	800f840 <LoopFillZerobss>

0800f83a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f83a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f83c:	f842 3b04 	str.w	r3, [r2], #4

0800f840 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f840:	4b09      	ldr	r3, [pc, #36]	; (800f868 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f842:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f844:	d3f9      	bcc.n	800f83a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800f846:	f7ff fa35 	bl	800ecb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f84a:	f000 f85b 	bl	800f904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f84e:	f7fd fc23 	bl	800d098 <main>
  bx  lr    
 800f852:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f854:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800f858:	080159d0 	.word	0x080159d0
  ldr  r0, =_sdata
 800f85c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f860:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 800f864:	2000034c 	.word	0x2000034c
  ldr  r3, = _ebss
 800f868:	20002df8 	.word	0x20002df8

0800f86c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f86c:	e7fe      	b.n	800f86c <ADC_IRQHandler>
	...

0800f870 <_gets_r>:
 800f870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f872:	460e      	mov	r6, r1
 800f874:	4605      	mov	r5, r0
 800f876:	b118      	cbz	r0, 800f880 <_gets_r+0x10>
 800f878:	6983      	ldr	r3, [r0, #24]
 800f87a:	b90b      	cbnz	r3, 800f880 <_gets_r+0x10>
 800f87c:	f001 ffb2 	bl	80117e4 <__sinit>
 800f880:	69ab      	ldr	r3, [r5, #24]
 800f882:	686c      	ldr	r4, [r5, #4]
 800f884:	b913      	cbnz	r3, 800f88c <_gets_r+0x1c>
 800f886:	4628      	mov	r0, r5
 800f888:	f001 ffac 	bl	80117e4 <__sinit>
 800f88c:	4b16      	ldr	r3, [pc, #88]	; (800f8e8 <_gets_r+0x78>)
 800f88e:	429c      	cmp	r4, r3
 800f890:	d114      	bne.n	800f8bc <_gets_r+0x4c>
 800f892:	686c      	ldr	r4, [r5, #4]
 800f894:	4637      	mov	r7, r6
 800f896:	6863      	ldr	r3, [r4, #4]
 800f898:	3b01      	subs	r3, #1
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	6063      	str	r3, [r4, #4]
 800f89e:	da17      	bge.n	800f8d0 <_gets_r+0x60>
 800f8a0:	4621      	mov	r1, r4
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	f000 fe2a 	bl	80104fc <__srget_r>
 800f8a8:	280a      	cmp	r0, #10
 800f8aa:	d003      	beq.n	800f8b4 <_gets_r+0x44>
 800f8ac:	1c43      	adds	r3, r0, #1
 800f8ae:	d115      	bne.n	800f8dc <_gets_r+0x6c>
 800f8b0:	42b7      	cmp	r7, r6
 800f8b2:	d016      	beq.n	800f8e2 <_gets_r+0x72>
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	703b      	strb	r3, [r7, #0]
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8bc:	4b0b      	ldr	r3, [pc, #44]	; (800f8ec <_gets_r+0x7c>)
 800f8be:	429c      	cmp	r4, r3
 800f8c0:	d101      	bne.n	800f8c6 <_gets_r+0x56>
 800f8c2:	68ac      	ldr	r4, [r5, #8]
 800f8c4:	e7e6      	b.n	800f894 <_gets_r+0x24>
 800f8c6:	4b0a      	ldr	r3, [pc, #40]	; (800f8f0 <_gets_r+0x80>)
 800f8c8:	429c      	cmp	r4, r3
 800f8ca:	bf08      	it	eq
 800f8cc:	68ec      	ldreq	r4, [r5, #12]
 800f8ce:	e7e1      	b.n	800f894 <_gets_r+0x24>
 800f8d0:	6823      	ldr	r3, [r4, #0]
 800f8d2:	1c5a      	adds	r2, r3, #1
 800f8d4:	6022      	str	r2, [r4, #0]
 800f8d6:	7818      	ldrb	r0, [r3, #0]
 800f8d8:	280a      	cmp	r0, #10
 800f8da:	d0eb      	beq.n	800f8b4 <_gets_r+0x44>
 800f8dc:	f807 0b01 	strb.w	r0, [r7], #1
 800f8e0:	e7d9      	b.n	800f896 <_gets_r+0x26>
 800f8e2:	2000      	movs	r0, #0
 800f8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8e6:	bf00      	nop
 800f8e8:	0801586c 	.word	0x0801586c
 800f8ec:	0801588c 	.word	0x0801588c
 800f8f0:	0801584c 	.word	0x0801584c

0800f8f4 <gets>:
 800f8f4:	4b02      	ldr	r3, [pc, #8]	; (800f900 <gets+0xc>)
 800f8f6:	4601      	mov	r1, r0
 800f8f8:	6818      	ldr	r0, [r3, #0]
 800f8fa:	f7ff bfb9 	b.w	800f870 <_gets_r>
 800f8fe:	bf00      	nop
 800f900:	2000017c 	.word	0x2000017c

0800f904 <__libc_init_array>:
 800f904:	b570      	push	{r4, r5, r6, lr}
 800f906:	4e0d      	ldr	r6, [pc, #52]	; (800f93c <__libc_init_array+0x38>)
 800f908:	4c0d      	ldr	r4, [pc, #52]	; (800f940 <__libc_init_array+0x3c>)
 800f90a:	1ba4      	subs	r4, r4, r6
 800f90c:	10a4      	asrs	r4, r4, #2
 800f90e:	2500      	movs	r5, #0
 800f910:	42a5      	cmp	r5, r4
 800f912:	d109      	bne.n	800f928 <__libc_init_array+0x24>
 800f914:	4e0b      	ldr	r6, [pc, #44]	; (800f944 <__libc_init_array+0x40>)
 800f916:	4c0c      	ldr	r4, [pc, #48]	; (800f948 <__libc_init_array+0x44>)
 800f918:	f002 ffc0 	bl	801289c <_init>
 800f91c:	1ba4      	subs	r4, r4, r6
 800f91e:	10a4      	asrs	r4, r4, #2
 800f920:	2500      	movs	r5, #0
 800f922:	42a5      	cmp	r5, r4
 800f924:	d105      	bne.n	800f932 <__libc_init_array+0x2e>
 800f926:	bd70      	pop	{r4, r5, r6, pc}
 800f928:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f92c:	4798      	blx	r3
 800f92e:	3501      	adds	r5, #1
 800f930:	e7ee      	b.n	800f910 <__libc_init_array+0xc>
 800f932:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f936:	4798      	blx	r3
 800f938:	3501      	adds	r5, #1
 800f93a:	e7f2      	b.n	800f922 <__libc_init_array+0x1e>
 800f93c:	080159c8 	.word	0x080159c8
 800f940:	080159c8 	.word	0x080159c8
 800f944:	080159c8 	.word	0x080159c8
 800f948:	080159cc 	.word	0x080159cc

0800f94c <__locale_ctype_ptr_l>:
 800f94c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f950:	4770      	bx	lr
	...

0800f954 <__locale_ctype_ptr>:
 800f954:	4b04      	ldr	r3, [pc, #16]	; (800f968 <__locale_ctype_ptr+0x14>)
 800f956:	4a05      	ldr	r2, [pc, #20]	; (800f96c <__locale_ctype_ptr+0x18>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	6a1b      	ldr	r3, [r3, #32]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	bf08      	it	eq
 800f960:	4613      	moveq	r3, r2
 800f962:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800f966:	4770      	bx	lr
 800f968:	2000017c 	.word	0x2000017c
 800f96c:	200001e0 	.word	0x200001e0

0800f970 <malloc>:
 800f970:	4b02      	ldr	r3, [pc, #8]	; (800f97c <malloc+0xc>)
 800f972:	4601      	mov	r1, r0
 800f974:	6818      	ldr	r0, [r3, #0]
 800f976:	f000 b873 	b.w	800fa60 <_malloc_r>
 800f97a:	bf00      	nop
 800f97c:	2000017c 	.word	0x2000017c

0800f980 <free>:
 800f980:	4b02      	ldr	r3, [pc, #8]	; (800f98c <free+0xc>)
 800f982:	4601      	mov	r1, r0
 800f984:	6818      	ldr	r0, [r3, #0]
 800f986:	f000 b81d 	b.w	800f9c4 <_free_r>
 800f98a:	bf00      	nop
 800f98c:	2000017c 	.word	0x2000017c

0800f990 <__ascii_mbtowc>:
 800f990:	b082      	sub	sp, #8
 800f992:	b901      	cbnz	r1, 800f996 <__ascii_mbtowc+0x6>
 800f994:	a901      	add	r1, sp, #4
 800f996:	b142      	cbz	r2, 800f9aa <__ascii_mbtowc+0x1a>
 800f998:	b14b      	cbz	r3, 800f9ae <__ascii_mbtowc+0x1e>
 800f99a:	7813      	ldrb	r3, [r2, #0]
 800f99c:	600b      	str	r3, [r1, #0]
 800f99e:	7812      	ldrb	r2, [r2, #0]
 800f9a0:	1c10      	adds	r0, r2, #0
 800f9a2:	bf18      	it	ne
 800f9a4:	2001      	movne	r0, #1
 800f9a6:	b002      	add	sp, #8
 800f9a8:	4770      	bx	lr
 800f9aa:	4610      	mov	r0, r2
 800f9ac:	e7fb      	b.n	800f9a6 <__ascii_mbtowc+0x16>
 800f9ae:	f06f 0001 	mvn.w	r0, #1
 800f9b2:	e7f8      	b.n	800f9a6 <__ascii_mbtowc+0x16>

0800f9b4 <memset>:
 800f9b4:	4402      	add	r2, r0
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d100      	bne.n	800f9be <memset+0xa>
 800f9bc:	4770      	bx	lr
 800f9be:	f803 1b01 	strb.w	r1, [r3], #1
 800f9c2:	e7f9      	b.n	800f9b8 <memset+0x4>

0800f9c4 <_free_r>:
 800f9c4:	b538      	push	{r3, r4, r5, lr}
 800f9c6:	4605      	mov	r5, r0
 800f9c8:	2900      	cmp	r1, #0
 800f9ca:	d045      	beq.n	800fa58 <_free_r+0x94>
 800f9cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9d0:	1f0c      	subs	r4, r1, #4
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	bfb8      	it	lt
 800f9d6:	18e4      	addlt	r4, r4, r3
 800f9d8:	f002 f827 	bl	8011a2a <__malloc_lock>
 800f9dc:	4a1f      	ldr	r2, [pc, #124]	; (800fa5c <_free_r+0x98>)
 800f9de:	6813      	ldr	r3, [r2, #0]
 800f9e0:	4610      	mov	r0, r2
 800f9e2:	b933      	cbnz	r3, 800f9f2 <_free_r+0x2e>
 800f9e4:	6063      	str	r3, [r4, #4]
 800f9e6:	6014      	str	r4, [r2, #0]
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9ee:	f002 b81d 	b.w	8011a2c <__malloc_unlock>
 800f9f2:	42a3      	cmp	r3, r4
 800f9f4:	d90c      	bls.n	800fa10 <_free_r+0x4c>
 800f9f6:	6821      	ldr	r1, [r4, #0]
 800f9f8:	1862      	adds	r2, r4, r1
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	bf04      	itt	eq
 800f9fe:	681a      	ldreq	r2, [r3, #0]
 800fa00:	685b      	ldreq	r3, [r3, #4]
 800fa02:	6063      	str	r3, [r4, #4]
 800fa04:	bf04      	itt	eq
 800fa06:	1852      	addeq	r2, r2, r1
 800fa08:	6022      	streq	r2, [r4, #0]
 800fa0a:	6004      	str	r4, [r0, #0]
 800fa0c:	e7ec      	b.n	800f9e8 <_free_r+0x24>
 800fa0e:	4613      	mov	r3, r2
 800fa10:	685a      	ldr	r2, [r3, #4]
 800fa12:	b10a      	cbz	r2, 800fa18 <_free_r+0x54>
 800fa14:	42a2      	cmp	r2, r4
 800fa16:	d9fa      	bls.n	800fa0e <_free_r+0x4a>
 800fa18:	6819      	ldr	r1, [r3, #0]
 800fa1a:	1858      	adds	r0, r3, r1
 800fa1c:	42a0      	cmp	r0, r4
 800fa1e:	d10b      	bne.n	800fa38 <_free_r+0x74>
 800fa20:	6820      	ldr	r0, [r4, #0]
 800fa22:	4401      	add	r1, r0
 800fa24:	1858      	adds	r0, r3, r1
 800fa26:	4282      	cmp	r2, r0
 800fa28:	6019      	str	r1, [r3, #0]
 800fa2a:	d1dd      	bne.n	800f9e8 <_free_r+0x24>
 800fa2c:	6810      	ldr	r0, [r2, #0]
 800fa2e:	6852      	ldr	r2, [r2, #4]
 800fa30:	605a      	str	r2, [r3, #4]
 800fa32:	4401      	add	r1, r0
 800fa34:	6019      	str	r1, [r3, #0]
 800fa36:	e7d7      	b.n	800f9e8 <_free_r+0x24>
 800fa38:	d902      	bls.n	800fa40 <_free_r+0x7c>
 800fa3a:	230c      	movs	r3, #12
 800fa3c:	602b      	str	r3, [r5, #0]
 800fa3e:	e7d3      	b.n	800f9e8 <_free_r+0x24>
 800fa40:	6820      	ldr	r0, [r4, #0]
 800fa42:	1821      	adds	r1, r4, r0
 800fa44:	428a      	cmp	r2, r1
 800fa46:	bf04      	itt	eq
 800fa48:	6811      	ldreq	r1, [r2, #0]
 800fa4a:	6852      	ldreq	r2, [r2, #4]
 800fa4c:	6062      	str	r2, [r4, #4]
 800fa4e:	bf04      	itt	eq
 800fa50:	1809      	addeq	r1, r1, r0
 800fa52:	6021      	streq	r1, [r4, #0]
 800fa54:	605c      	str	r4, [r3, #4]
 800fa56:	e7c7      	b.n	800f9e8 <_free_r+0x24>
 800fa58:	bd38      	pop	{r3, r4, r5, pc}
 800fa5a:	bf00      	nop
 800fa5c:	20000484 	.word	0x20000484

0800fa60 <_malloc_r>:
 800fa60:	b570      	push	{r4, r5, r6, lr}
 800fa62:	1ccd      	adds	r5, r1, #3
 800fa64:	f025 0503 	bic.w	r5, r5, #3
 800fa68:	3508      	adds	r5, #8
 800fa6a:	2d0c      	cmp	r5, #12
 800fa6c:	bf38      	it	cc
 800fa6e:	250c      	movcc	r5, #12
 800fa70:	2d00      	cmp	r5, #0
 800fa72:	4606      	mov	r6, r0
 800fa74:	db01      	blt.n	800fa7a <_malloc_r+0x1a>
 800fa76:	42a9      	cmp	r1, r5
 800fa78:	d903      	bls.n	800fa82 <_malloc_r+0x22>
 800fa7a:	230c      	movs	r3, #12
 800fa7c:	6033      	str	r3, [r6, #0]
 800fa7e:	2000      	movs	r0, #0
 800fa80:	bd70      	pop	{r4, r5, r6, pc}
 800fa82:	f001 ffd2 	bl	8011a2a <__malloc_lock>
 800fa86:	4a23      	ldr	r2, [pc, #140]	; (800fb14 <_malloc_r+0xb4>)
 800fa88:	6814      	ldr	r4, [r2, #0]
 800fa8a:	4621      	mov	r1, r4
 800fa8c:	b991      	cbnz	r1, 800fab4 <_malloc_r+0x54>
 800fa8e:	4c22      	ldr	r4, [pc, #136]	; (800fb18 <_malloc_r+0xb8>)
 800fa90:	6823      	ldr	r3, [r4, #0]
 800fa92:	b91b      	cbnz	r3, 800fa9c <_malloc_r+0x3c>
 800fa94:	4630      	mov	r0, r6
 800fa96:	f000 fd5d 	bl	8010554 <_sbrk_r>
 800fa9a:	6020      	str	r0, [r4, #0]
 800fa9c:	4629      	mov	r1, r5
 800fa9e:	4630      	mov	r0, r6
 800faa0:	f000 fd58 	bl	8010554 <_sbrk_r>
 800faa4:	1c43      	adds	r3, r0, #1
 800faa6:	d126      	bne.n	800faf6 <_malloc_r+0x96>
 800faa8:	230c      	movs	r3, #12
 800faaa:	6033      	str	r3, [r6, #0]
 800faac:	4630      	mov	r0, r6
 800faae:	f001 ffbd 	bl	8011a2c <__malloc_unlock>
 800fab2:	e7e4      	b.n	800fa7e <_malloc_r+0x1e>
 800fab4:	680b      	ldr	r3, [r1, #0]
 800fab6:	1b5b      	subs	r3, r3, r5
 800fab8:	d41a      	bmi.n	800faf0 <_malloc_r+0x90>
 800faba:	2b0b      	cmp	r3, #11
 800fabc:	d90f      	bls.n	800fade <_malloc_r+0x7e>
 800fabe:	600b      	str	r3, [r1, #0]
 800fac0:	50cd      	str	r5, [r1, r3]
 800fac2:	18cc      	adds	r4, r1, r3
 800fac4:	4630      	mov	r0, r6
 800fac6:	f001 ffb1 	bl	8011a2c <__malloc_unlock>
 800faca:	f104 000b 	add.w	r0, r4, #11
 800face:	1d23      	adds	r3, r4, #4
 800fad0:	f020 0007 	bic.w	r0, r0, #7
 800fad4:	1ac3      	subs	r3, r0, r3
 800fad6:	d01b      	beq.n	800fb10 <_malloc_r+0xb0>
 800fad8:	425a      	negs	r2, r3
 800fada:	50e2      	str	r2, [r4, r3]
 800fadc:	bd70      	pop	{r4, r5, r6, pc}
 800fade:	428c      	cmp	r4, r1
 800fae0:	bf0d      	iteet	eq
 800fae2:	6863      	ldreq	r3, [r4, #4]
 800fae4:	684b      	ldrne	r3, [r1, #4]
 800fae6:	6063      	strne	r3, [r4, #4]
 800fae8:	6013      	streq	r3, [r2, #0]
 800faea:	bf18      	it	ne
 800faec:	460c      	movne	r4, r1
 800faee:	e7e9      	b.n	800fac4 <_malloc_r+0x64>
 800faf0:	460c      	mov	r4, r1
 800faf2:	6849      	ldr	r1, [r1, #4]
 800faf4:	e7ca      	b.n	800fa8c <_malloc_r+0x2c>
 800faf6:	1cc4      	adds	r4, r0, #3
 800faf8:	f024 0403 	bic.w	r4, r4, #3
 800fafc:	42a0      	cmp	r0, r4
 800fafe:	d005      	beq.n	800fb0c <_malloc_r+0xac>
 800fb00:	1a21      	subs	r1, r4, r0
 800fb02:	4630      	mov	r0, r6
 800fb04:	f000 fd26 	bl	8010554 <_sbrk_r>
 800fb08:	3001      	adds	r0, #1
 800fb0a:	d0cd      	beq.n	800faa8 <_malloc_r+0x48>
 800fb0c:	6025      	str	r5, [r4, #0]
 800fb0e:	e7d9      	b.n	800fac4 <_malloc_r+0x64>
 800fb10:	bd70      	pop	{r4, r5, r6, pc}
 800fb12:	bf00      	nop
 800fb14:	20000484 	.word	0x20000484
 800fb18:	20000488 	.word	0x20000488

0800fb1c <__cvt>:
 800fb1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb20:	ec55 4b10 	vmov	r4, r5, d0
 800fb24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800fb26:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fb2a:	2d00      	cmp	r5, #0
 800fb2c:	460e      	mov	r6, r1
 800fb2e:	4691      	mov	r9, r2
 800fb30:	4619      	mov	r1, r3
 800fb32:	bfb8      	it	lt
 800fb34:	4622      	movlt	r2, r4
 800fb36:	462b      	mov	r3, r5
 800fb38:	f027 0720 	bic.w	r7, r7, #32
 800fb3c:	bfbb      	ittet	lt
 800fb3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fb42:	461d      	movlt	r5, r3
 800fb44:	2300      	movge	r3, #0
 800fb46:	232d      	movlt	r3, #45	; 0x2d
 800fb48:	bfb8      	it	lt
 800fb4a:	4614      	movlt	r4, r2
 800fb4c:	2f46      	cmp	r7, #70	; 0x46
 800fb4e:	700b      	strb	r3, [r1, #0]
 800fb50:	d004      	beq.n	800fb5c <__cvt+0x40>
 800fb52:	2f45      	cmp	r7, #69	; 0x45
 800fb54:	d100      	bne.n	800fb58 <__cvt+0x3c>
 800fb56:	3601      	adds	r6, #1
 800fb58:	2102      	movs	r1, #2
 800fb5a:	e000      	b.n	800fb5e <__cvt+0x42>
 800fb5c:	2103      	movs	r1, #3
 800fb5e:	ab03      	add	r3, sp, #12
 800fb60:	9301      	str	r3, [sp, #4]
 800fb62:	ab02      	add	r3, sp, #8
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	4632      	mov	r2, r6
 800fb68:	4653      	mov	r3, sl
 800fb6a:	ec45 4b10 	vmov	d0, r4, r5
 800fb6e:	f000 ff67 	bl	8010a40 <_dtoa_r>
 800fb72:	2f47      	cmp	r7, #71	; 0x47
 800fb74:	4680      	mov	r8, r0
 800fb76:	d102      	bne.n	800fb7e <__cvt+0x62>
 800fb78:	f019 0f01 	tst.w	r9, #1
 800fb7c:	d026      	beq.n	800fbcc <__cvt+0xb0>
 800fb7e:	2f46      	cmp	r7, #70	; 0x46
 800fb80:	eb08 0906 	add.w	r9, r8, r6
 800fb84:	d111      	bne.n	800fbaa <__cvt+0x8e>
 800fb86:	f898 3000 	ldrb.w	r3, [r8]
 800fb8a:	2b30      	cmp	r3, #48	; 0x30
 800fb8c:	d10a      	bne.n	800fba4 <__cvt+0x88>
 800fb8e:	2200      	movs	r2, #0
 800fb90:	2300      	movs	r3, #0
 800fb92:	4620      	mov	r0, r4
 800fb94:	4629      	mov	r1, r5
 800fb96:	f7f0 ffc3 	bl	8000b20 <__aeabi_dcmpeq>
 800fb9a:	b918      	cbnz	r0, 800fba4 <__cvt+0x88>
 800fb9c:	f1c6 0601 	rsb	r6, r6, #1
 800fba0:	f8ca 6000 	str.w	r6, [sl]
 800fba4:	f8da 3000 	ldr.w	r3, [sl]
 800fba8:	4499      	add	r9, r3
 800fbaa:	2200      	movs	r2, #0
 800fbac:	2300      	movs	r3, #0
 800fbae:	4620      	mov	r0, r4
 800fbb0:	4629      	mov	r1, r5
 800fbb2:	f7f0 ffb5 	bl	8000b20 <__aeabi_dcmpeq>
 800fbb6:	b938      	cbnz	r0, 800fbc8 <__cvt+0xac>
 800fbb8:	2230      	movs	r2, #48	; 0x30
 800fbba:	9b03      	ldr	r3, [sp, #12]
 800fbbc:	4599      	cmp	r9, r3
 800fbbe:	d905      	bls.n	800fbcc <__cvt+0xb0>
 800fbc0:	1c59      	adds	r1, r3, #1
 800fbc2:	9103      	str	r1, [sp, #12]
 800fbc4:	701a      	strb	r2, [r3, #0]
 800fbc6:	e7f8      	b.n	800fbba <__cvt+0x9e>
 800fbc8:	f8cd 900c 	str.w	r9, [sp, #12]
 800fbcc:	9b03      	ldr	r3, [sp, #12]
 800fbce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fbd0:	eba3 0308 	sub.w	r3, r3, r8
 800fbd4:	4640      	mov	r0, r8
 800fbd6:	6013      	str	r3, [r2, #0]
 800fbd8:	b004      	add	sp, #16
 800fbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fbde <__exponent>:
 800fbde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2900      	cmp	r1, #0
 800fbe4:	bfb8      	it	lt
 800fbe6:	4249      	neglt	r1, r1
 800fbe8:	f803 2b02 	strb.w	r2, [r3], #2
 800fbec:	bfb4      	ite	lt
 800fbee:	222d      	movlt	r2, #45	; 0x2d
 800fbf0:	222b      	movge	r2, #43	; 0x2b
 800fbf2:	2909      	cmp	r1, #9
 800fbf4:	7042      	strb	r2, [r0, #1]
 800fbf6:	dd20      	ble.n	800fc3a <__exponent+0x5c>
 800fbf8:	f10d 0207 	add.w	r2, sp, #7
 800fbfc:	4617      	mov	r7, r2
 800fbfe:	260a      	movs	r6, #10
 800fc00:	fb91 f5f6 	sdiv	r5, r1, r6
 800fc04:	fb06 1115 	mls	r1, r6, r5, r1
 800fc08:	3130      	adds	r1, #48	; 0x30
 800fc0a:	2d09      	cmp	r5, #9
 800fc0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fc10:	f102 34ff 	add.w	r4, r2, #4294967295
 800fc14:	4629      	mov	r1, r5
 800fc16:	dc09      	bgt.n	800fc2c <__exponent+0x4e>
 800fc18:	3130      	adds	r1, #48	; 0x30
 800fc1a:	3a02      	subs	r2, #2
 800fc1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fc20:	42ba      	cmp	r2, r7
 800fc22:	461c      	mov	r4, r3
 800fc24:	d304      	bcc.n	800fc30 <__exponent+0x52>
 800fc26:	1a20      	subs	r0, r4, r0
 800fc28:	b003      	add	sp, #12
 800fc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc2c:	4622      	mov	r2, r4
 800fc2e:	e7e7      	b.n	800fc00 <__exponent+0x22>
 800fc30:	f812 1b01 	ldrb.w	r1, [r2], #1
 800fc34:	f803 1b01 	strb.w	r1, [r3], #1
 800fc38:	e7f2      	b.n	800fc20 <__exponent+0x42>
 800fc3a:	2230      	movs	r2, #48	; 0x30
 800fc3c:	461c      	mov	r4, r3
 800fc3e:	4411      	add	r1, r2
 800fc40:	f804 2b02 	strb.w	r2, [r4], #2
 800fc44:	7059      	strb	r1, [r3, #1]
 800fc46:	e7ee      	b.n	800fc26 <__exponent+0x48>

0800fc48 <_printf_float>:
 800fc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc4c:	b08d      	sub	sp, #52	; 0x34
 800fc4e:	460c      	mov	r4, r1
 800fc50:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800fc54:	4616      	mov	r6, r2
 800fc56:	461f      	mov	r7, r3
 800fc58:	4605      	mov	r5, r0
 800fc5a:	f001 fe69 	bl	8011930 <_localeconv_r>
 800fc5e:	6803      	ldr	r3, [r0, #0]
 800fc60:	9304      	str	r3, [sp, #16]
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7f0 fade 	bl	8000224 <strlen>
 800fc68:	2300      	movs	r3, #0
 800fc6a:	930a      	str	r3, [sp, #40]	; 0x28
 800fc6c:	f8d8 3000 	ldr.w	r3, [r8]
 800fc70:	9005      	str	r0, [sp, #20]
 800fc72:	3307      	adds	r3, #7
 800fc74:	f023 0307 	bic.w	r3, r3, #7
 800fc78:	f103 0208 	add.w	r2, r3, #8
 800fc7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fc80:	f8d4 b000 	ldr.w	fp, [r4]
 800fc84:	f8c8 2000 	str.w	r2, [r8]
 800fc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fc90:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fc94:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fc98:	9307      	str	r3, [sp, #28]
 800fc9a:	f8cd 8018 	str.w	r8, [sp, #24]
 800fc9e:	f04f 32ff 	mov.w	r2, #4294967295
 800fca2:	4ba5      	ldr	r3, [pc, #660]	; (800ff38 <_printf_float+0x2f0>)
 800fca4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fca8:	f7f0 ff6c 	bl	8000b84 <__aeabi_dcmpun>
 800fcac:	2800      	cmp	r0, #0
 800fcae:	f040 81fb 	bne.w	80100a8 <_printf_float+0x460>
 800fcb2:	f04f 32ff 	mov.w	r2, #4294967295
 800fcb6:	4ba0      	ldr	r3, [pc, #640]	; (800ff38 <_printf_float+0x2f0>)
 800fcb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fcbc:	f7f0 ff44 	bl	8000b48 <__aeabi_dcmple>
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	f040 81f1 	bne.w	80100a8 <_printf_float+0x460>
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	2300      	movs	r3, #0
 800fcca:	4640      	mov	r0, r8
 800fccc:	4649      	mov	r1, r9
 800fcce:	f7f0 ff31 	bl	8000b34 <__aeabi_dcmplt>
 800fcd2:	b110      	cbz	r0, 800fcda <_printf_float+0x92>
 800fcd4:	232d      	movs	r3, #45	; 0x2d
 800fcd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcda:	4b98      	ldr	r3, [pc, #608]	; (800ff3c <_printf_float+0x2f4>)
 800fcdc:	4a98      	ldr	r2, [pc, #608]	; (800ff40 <_printf_float+0x2f8>)
 800fcde:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fce2:	bf8c      	ite	hi
 800fce4:	4690      	movhi	r8, r2
 800fce6:	4698      	movls	r8, r3
 800fce8:	2303      	movs	r3, #3
 800fcea:	f02b 0204 	bic.w	r2, fp, #4
 800fcee:	6123      	str	r3, [r4, #16]
 800fcf0:	6022      	str	r2, [r4, #0]
 800fcf2:	f04f 0900 	mov.w	r9, #0
 800fcf6:	9700      	str	r7, [sp, #0]
 800fcf8:	4633      	mov	r3, r6
 800fcfa:	aa0b      	add	r2, sp, #44	; 0x2c
 800fcfc:	4621      	mov	r1, r4
 800fcfe:	4628      	mov	r0, r5
 800fd00:	f000 f9e2 	bl	80100c8 <_printf_common>
 800fd04:	3001      	adds	r0, #1
 800fd06:	f040 8093 	bne.w	800fe30 <_printf_float+0x1e8>
 800fd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd0e:	b00d      	add	sp, #52	; 0x34
 800fd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd14:	6861      	ldr	r1, [r4, #4]
 800fd16:	1c4b      	adds	r3, r1, #1
 800fd18:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800fd1c:	d13f      	bne.n	800fd9e <_printf_float+0x156>
 800fd1e:	2306      	movs	r3, #6
 800fd20:	6063      	str	r3, [r4, #4]
 800fd22:	2300      	movs	r3, #0
 800fd24:	9303      	str	r3, [sp, #12]
 800fd26:	ab0a      	add	r3, sp, #40	; 0x28
 800fd28:	9302      	str	r3, [sp, #8]
 800fd2a:	ab09      	add	r3, sp, #36	; 0x24
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	ec49 8b10 	vmov	d0, r8, r9
 800fd32:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fd36:	6022      	str	r2, [r4, #0]
 800fd38:	f8cd a004 	str.w	sl, [sp, #4]
 800fd3c:	6861      	ldr	r1, [r4, #4]
 800fd3e:	4628      	mov	r0, r5
 800fd40:	f7ff feec 	bl	800fb1c <__cvt>
 800fd44:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800fd48:	2b47      	cmp	r3, #71	; 0x47
 800fd4a:	4680      	mov	r8, r0
 800fd4c:	d109      	bne.n	800fd62 <_printf_float+0x11a>
 800fd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd50:	1cd8      	adds	r0, r3, #3
 800fd52:	db02      	blt.n	800fd5a <_printf_float+0x112>
 800fd54:	6862      	ldr	r2, [r4, #4]
 800fd56:	4293      	cmp	r3, r2
 800fd58:	dd57      	ble.n	800fe0a <_printf_float+0x1c2>
 800fd5a:	f1aa 0a02 	sub.w	sl, sl, #2
 800fd5e:	fa5f fa8a 	uxtb.w	sl, sl
 800fd62:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fd66:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd68:	d834      	bhi.n	800fdd4 <_printf_float+0x18c>
 800fd6a:	3901      	subs	r1, #1
 800fd6c:	4652      	mov	r2, sl
 800fd6e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fd72:	9109      	str	r1, [sp, #36]	; 0x24
 800fd74:	f7ff ff33 	bl	800fbde <__exponent>
 800fd78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd7a:	1883      	adds	r3, r0, r2
 800fd7c:	2a01      	cmp	r2, #1
 800fd7e:	4681      	mov	r9, r0
 800fd80:	6123      	str	r3, [r4, #16]
 800fd82:	dc02      	bgt.n	800fd8a <_printf_float+0x142>
 800fd84:	6822      	ldr	r2, [r4, #0]
 800fd86:	07d1      	lsls	r1, r2, #31
 800fd88:	d501      	bpl.n	800fd8e <_printf_float+0x146>
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	6123      	str	r3, [r4, #16]
 800fd8e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d0af      	beq.n	800fcf6 <_printf_float+0xae>
 800fd96:	232d      	movs	r3, #45	; 0x2d
 800fd98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd9c:	e7ab      	b.n	800fcf6 <_printf_float+0xae>
 800fd9e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800fda2:	d002      	beq.n	800fdaa <_printf_float+0x162>
 800fda4:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fda8:	d1bb      	bne.n	800fd22 <_printf_float+0xda>
 800fdaa:	b189      	cbz	r1, 800fdd0 <_printf_float+0x188>
 800fdac:	2300      	movs	r3, #0
 800fdae:	9303      	str	r3, [sp, #12]
 800fdb0:	ab0a      	add	r3, sp, #40	; 0x28
 800fdb2:	9302      	str	r3, [sp, #8]
 800fdb4:	ab09      	add	r3, sp, #36	; 0x24
 800fdb6:	9300      	str	r3, [sp, #0]
 800fdb8:	ec49 8b10 	vmov	d0, r8, r9
 800fdbc:	6022      	str	r2, [r4, #0]
 800fdbe:	f8cd a004 	str.w	sl, [sp, #4]
 800fdc2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	f7ff fea8 	bl	800fb1c <__cvt>
 800fdcc:	4680      	mov	r8, r0
 800fdce:	e7be      	b.n	800fd4e <_printf_float+0x106>
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e7a5      	b.n	800fd20 <_printf_float+0xd8>
 800fdd4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800fdd8:	d119      	bne.n	800fe0e <_printf_float+0x1c6>
 800fdda:	2900      	cmp	r1, #0
 800fddc:	6863      	ldr	r3, [r4, #4]
 800fdde:	dd0c      	ble.n	800fdfa <_printf_float+0x1b2>
 800fde0:	6121      	str	r1, [r4, #16]
 800fde2:	b913      	cbnz	r3, 800fdea <_printf_float+0x1a2>
 800fde4:	6822      	ldr	r2, [r4, #0]
 800fde6:	07d2      	lsls	r2, r2, #31
 800fde8:	d502      	bpl.n	800fdf0 <_printf_float+0x1a8>
 800fdea:	3301      	adds	r3, #1
 800fdec:	440b      	add	r3, r1
 800fdee:	6123      	str	r3, [r4, #16]
 800fdf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdf2:	65a3      	str	r3, [r4, #88]	; 0x58
 800fdf4:	f04f 0900 	mov.w	r9, #0
 800fdf8:	e7c9      	b.n	800fd8e <_printf_float+0x146>
 800fdfa:	b913      	cbnz	r3, 800fe02 <_printf_float+0x1ba>
 800fdfc:	6822      	ldr	r2, [r4, #0]
 800fdfe:	07d0      	lsls	r0, r2, #31
 800fe00:	d501      	bpl.n	800fe06 <_printf_float+0x1be>
 800fe02:	3302      	adds	r3, #2
 800fe04:	e7f3      	b.n	800fdee <_printf_float+0x1a6>
 800fe06:	2301      	movs	r3, #1
 800fe08:	e7f1      	b.n	800fdee <_printf_float+0x1a6>
 800fe0a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800fe0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe12:	4293      	cmp	r3, r2
 800fe14:	db05      	blt.n	800fe22 <_printf_float+0x1da>
 800fe16:	6822      	ldr	r2, [r4, #0]
 800fe18:	6123      	str	r3, [r4, #16]
 800fe1a:	07d1      	lsls	r1, r2, #31
 800fe1c:	d5e8      	bpl.n	800fdf0 <_printf_float+0x1a8>
 800fe1e:	3301      	adds	r3, #1
 800fe20:	e7e5      	b.n	800fdee <_printf_float+0x1a6>
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	bfd4      	ite	le
 800fe26:	f1c3 0302 	rsble	r3, r3, #2
 800fe2a:	2301      	movgt	r3, #1
 800fe2c:	4413      	add	r3, r2
 800fe2e:	e7de      	b.n	800fdee <_printf_float+0x1a6>
 800fe30:	6823      	ldr	r3, [r4, #0]
 800fe32:	055a      	lsls	r2, r3, #21
 800fe34:	d407      	bmi.n	800fe46 <_printf_float+0x1fe>
 800fe36:	6923      	ldr	r3, [r4, #16]
 800fe38:	4642      	mov	r2, r8
 800fe3a:	4631      	mov	r1, r6
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	47b8      	blx	r7
 800fe40:	3001      	adds	r0, #1
 800fe42:	d12b      	bne.n	800fe9c <_printf_float+0x254>
 800fe44:	e761      	b.n	800fd0a <_printf_float+0xc2>
 800fe46:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fe4a:	f240 80e2 	bls.w	8010012 <_printf_float+0x3ca>
 800fe4e:	2200      	movs	r2, #0
 800fe50:	2300      	movs	r3, #0
 800fe52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fe56:	f7f0 fe63 	bl	8000b20 <__aeabi_dcmpeq>
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	d03c      	beq.n	800fed8 <_printf_float+0x290>
 800fe5e:	2301      	movs	r3, #1
 800fe60:	4a38      	ldr	r2, [pc, #224]	; (800ff44 <_printf_float+0x2fc>)
 800fe62:	4631      	mov	r1, r6
 800fe64:	4628      	mov	r0, r5
 800fe66:	47b8      	blx	r7
 800fe68:	3001      	adds	r0, #1
 800fe6a:	f43f af4e 	beq.w	800fd0a <_printf_float+0xc2>
 800fe6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe72:	429a      	cmp	r2, r3
 800fe74:	db02      	blt.n	800fe7c <_printf_float+0x234>
 800fe76:	6823      	ldr	r3, [r4, #0]
 800fe78:	07d8      	lsls	r0, r3, #31
 800fe7a:	d50f      	bpl.n	800fe9c <_printf_float+0x254>
 800fe7c:	9b05      	ldr	r3, [sp, #20]
 800fe7e:	9a04      	ldr	r2, [sp, #16]
 800fe80:	4631      	mov	r1, r6
 800fe82:	4628      	mov	r0, r5
 800fe84:	47b8      	blx	r7
 800fe86:	3001      	adds	r0, #1
 800fe88:	f43f af3f 	beq.w	800fd0a <_printf_float+0xc2>
 800fe8c:	f04f 0800 	mov.w	r8, #0
 800fe90:	f104 091a 	add.w	r9, r4, #26
 800fe94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe96:	3b01      	subs	r3, #1
 800fe98:	4598      	cmp	r8, r3
 800fe9a:	db12      	blt.n	800fec2 <_printf_float+0x27a>
 800fe9c:	6823      	ldr	r3, [r4, #0]
 800fe9e:	079b      	lsls	r3, r3, #30
 800fea0:	d509      	bpl.n	800feb6 <_printf_float+0x26e>
 800fea2:	f04f 0800 	mov.w	r8, #0
 800fea6:	f104 0919 	add.w	r9, r4, #25
 800feaa:	68e3      	ldr	r3, [r4, #12]
 800feac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800feae:	1a9b      	subs	r3, r3, r2
 800feb0:	4598      	cmp	r8, r3
 800feb2:	f2c0 80ee 	blt.w	8010092 <_printf_float+0x44a>
 800feb6:	68e0      	ldr	r0, [r4, #12]
 800feb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800feba:	4298      	cmp	r0, r3
 800febc:	bfb8      	it	lt
 800febe:	4618      	movlt	r0, r3
 800fec0:	e725      	b.n	800fd0e <_printf_float+0xc6>
 800fec2:	2301      	movs	r3, #1
 800fec4:	464a      	mov	r2, r9
 800fec6:	4631      	mov	r1, r6
 800fec8:	4628      	mov	r0, r5
 800feca:	47b8      	blx	r7
 800fecc:	3001      	adds	r0, #1
 800fece:	f43f af1c 	beq.w	800fd0a <_printf_float+0xc2>
 800fed2:	f108 0801 	add.w	r8, r8, #1
 800fed6:	e7dd      	b.n	800fe94 <_printf_float+0x24c>
 800fed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feda:	2b00      	cmp	r3, #0
 800fedc:	dc34      	bgt.n	800ff48 <_printf_float+0x300>
 800fede:	2301      	movs	r3, #1
 800fee0:	4a18      	ldr	r2, [pc, #96]	; (800ff44 <_printf_float+0x2fc>)
 800fee2:	4631      	mov	r1, r6
 800fee4:	4628      	mov	r0, r5
 800fee6:	47b8      	blx	r7
 800fee8:	3001      	adds	r0, #1
 800feea:	f43f af0e 	beq.w	800fd0a <_printf_float+0xc2>
 800feee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fef0:	b923      	cbnz	r3, 800fefc <_printf_float+0x2b4>
 800fef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fef4:	b913      	cbnz	r3, 800fefc <_printf_float+0x2b4>
 800fef6:	6823      	ldr	r3, [r4, #0]
 800fef8:	07d9      	lsls	r1, r3, #31
 800fefa:	d5cf      	bpl.n	800fe9c <_printf_float+0x254>
 800fefc:	9b05      	ldr	r3, [sp, #20]
 800fefe:	9a04      	ldr	r2, [sp, #16]
 800ff00:	4631      	mov	r1, r6
 800ff02:	4628      	mov	r0, r5
 800ff04:	47b8      	blx	r7
 800ff06:	3001      	adds	r0, #1
 800ff08:	f43f aeff 	beq.w	800fd0a <_printf_float+0xc2>
 800ff0c:	f04f 0900 	mov.w	r9, #0
 800ff10:	f104 0a1a 	add.w	sl, r4, #26
 800ff14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff16:	425b      	negs	r3, r3
 800ff18:	4599      	cmp	r9, r3
 800ff1a:	db01      	blt.n	800ff20 <_printf_float+0x2d8>
 800ff1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff1e:	e78b      	b.n	800fe38 <_printf_float+0x1f0>
 800ff20:	2301      	movs	r3, #1
 800ff22:	4652      	mov	r2, sl
 800ff24:	4631      	mov	r1, r6
 800ff26:	4628      	mov	r0, r5
 800ff28:	47b8      	blx	r7
 800ff2a:	3001      	adds	r0, #1
 800ff2c:	f43f aeed 	beq.w	800fd0a <_printf_float+0xc2>
 800ff30:	f109 0901 	add.w	r9, r9, #1
 800ff34:	e7ee      	b.n	800ff14 <_printf_float+0x2cc>
 800ff36:	bf00      	nop
 800ff38:	7fefffff 	.word	0x7fefffff
 800ff3c:	0801570a 	.word	0x0801570a
 800ff40:	0801570e 	.word	0x0801570e
 800ff44:	0801571a 	.word	0x0801571a
 800ff48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	bfa8      	it	ge
 800ff50:	461a      	movge	r2, r3
 800ff52:	2a00      	cmp	r2, #0
 800ff54:	4691      	mov	r9, r2
 800ff56:	dc38      	bgt.n	800ffca <_printf_float+0x382>
 800ff58:	f104 031a 	add.w	r3, r4, #26
 800ff5c:	f04f 0b00 	mov.w	fp, #0
 800ff60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff64:	9306      	str	r3, [sp, #24]
 800ff66:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ff6a:	ebaa 0309 	sub.w	r3, sl, r9
 800ff6e:	459b      	cmp	fp, r3
 800ff70:	db33      	blt.n	800ffda <_printf_float+0x392>
 800ff72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff76:	429a      	cmp	r2, r3
 800ff78:	db3a      	blt.n	800fff0 <_printf_float+0x3a8>
 800ff7a:	6823      	ldr	r3, [r4, #0]
 800ff7c:	07da      	lsls	r2, r3, #31
 800ff7e:	d437      	bmi.n	800fff0 <_printf_float+0x3a8>
 800ff80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff82:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff84:	eba3 020a 	sub.w	r2, r3, sl
 800ff88:	eba3 0901 	sub.w	r9, r3, r1
 800ff8c:	4591      	cmp	r9, r2
 800ff8e:	bfa8      	it	ge
 800ff90:	4691      	movge	r9, r2
 800ff92:	f1b9 0f00 	cmp.w	r9, #0
 800ff96:	dc33      	bgt.n	8010000 <_printf_float+0x3b8>
 800ff98:	f04f 0800 	mov.w	r8, #0
 800ff9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ffa0:	f104 0a1a 	add.w	sl, r4, #26
 800ffa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffa8:	1a9b      	subs	r3, r3, r2
 800ffaa:	eba3 0309 	sub.w	r3, r3, r9
 800ffae:	4598      	cmp	r8, r3
 800ffb0:	f6bf af74 	bge.w	800fe9c <_printf_float+0x254>
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	4652      	mov	r2, sl
 800ffb8:	4631      	mov	r1, r6
 800ffba:	4628      	mov	r0, r5
 800ffbc:	47b8      	blx	r7
 800ffbe:	3001      	adds	r0, #1
 800ffc0:	f43f aea3 	beq.w	800fd0a <_printf_float+0xc2>
 800ffc4:	f108 0801 	add.w	r8, r8, #1
 800ffc8:	e7ec      	b.n	800ffa4 <_printf_float+0x35c>
 800ffca:	4613      	mov	r3, r2
 800ffcc:	4631      	mov	r1, r6
 800ffce:	4642      	mov	r2, r8
 800ffd0:	4628      	mov	r0, r5
 800ffd2:	47b8      	blx	r7
 800ffd4:	3001      	adds	r0, #1
 800ffd6:	d1bf      	bne.n	800ff58 <_printf_float+0x310>
 800ffd8:	e697      	b.n	800fd0a <_printf_float+0xc2>
 800ffda:	2301      	movs	r3, #1
 800ffdc:	9a06      	ldr	r2, [sp, #24]
 800ffde:	4631      	mov	r1, r6
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	47b8      	blx	r7
 800ffe4:	3001      	adds	r0, #1
 800ffe6:	f43f ae90 	beq.w	800fd0a <_printf_float+0xc2>
 800ffea:	f10b 0b01 	add.w	fp, fp, #1
 800ffee:	e7ba      	b.n	800ff66 <_printf_float+0x31e>
 800fff0:	9b05      	ldr	r3, [sp, #20]
 800fff2:	9a04      	ldr	r2, [sp, #16]
 800fff4:	4631      	mov	r1, r6
 800fff6:	4628      	mov	r0, r5
 800fff8:	47b8      	blx	r7
 800fffa:	3001      	adds	r0, #1
 800fffc:	d1c0      	bne.n	800ff80 <_printf_float+0x338>
 800fffe:	e684      	b.n	800fd0a <_printf_float+0xc2>
 8010000:	464b      	mov	r3, r9
 8010002:	eb08 020a 	add.w	r2, r8, sl
 8010006:	4631      	mov	r1, r6
 8010008:	4628      	mov	r0, r5
 801000a:	47b8      	blx	r7
 801000c:	3001      	adds	r0, #1
 801000e:	d1c3      	bne.n	800ff98 <_printf_float+0x350>
 8010010:	e67b      	b.n	800fd0a <_printf_float+0xc2>
 8010012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010014:	2a01      	cmp	r2, #1
 8010016:	dc01      	bgt.n	801001c <_printf_float+0x3d4>
 8010018:	07db      	lsls	r3, r3, #31
 801001a:	d537      	bpl.n	801008c <_printf_float+0x444>
 801001c:	2301      	movs	r3, #1
 801001e:	4642      	mov	r2, r8
 8010020:	4631      	mov	r1, r6
 8010022:	4628      	mov	r0, r5
 8010024:	47b8      	blx	r7
 8010026:	3001      	adds	r0, #1
 8010028:	f43f ae6f 	beq.w	800fd0a <_printf_float+0xc2>
 801002c:	9b05      	ldr	r3, [sp, #20]
 801002e:	9a04      	ldr	r2, [sp, #16]
 8010030:	4631      	mov	r1, r6
 8010032:	4628      	mov	r0, r5
 8010034:	47b8      	blx	r7
 8010036:	3001      	adds	r0, #1
 8010038:	f43f ae67 	beq.w	800fd0a <_printf_float+0xc2>
 801003c:	2200      	movs	r2, #0
 801003e:	2300      	movs	r3, #0
 8010040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010044:	f7f0 fd6c 	bl	8000b20 <__aeabi_dcmpeq>
 8010048:	b158      	cbz	r0, 8010062 <_printf_float+0x41a>
 801004a:	f04f 0800 	mov.w	r8, #0
 801004e:	f104 0a1a 	add.w	sl, r4, #26
 8010052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010054:	3b01      	subs	r3, #1
 8010056:	4598      	cmp	r8, r3
 8010058:	db0d      	blt.n	8010076 <_printf_float+0x42e>
 801005a:	464b      	mov	r3, r9
 801005c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010060:	e6eb      	b.n	800fe3a <_printf_float+0x1f2>
 8010062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010064:	f108 0201 	add.w	r2, r8, #1
 8010068:	3b01      	subs	r3, #1
 801006a:	4631      	mov	r1, r6
 801006c:	4628      	mov	r0, r5
 801006e:	47b8      	blx	r7
 8010070:	3001      	adds	r0, #1
 8010072:	d1f2      	bne.n	801005a <_printf_float+0x412>
 8010074:	e649      	b.n	800fd0a <_printf_float+0xc2>
 8010076:	2301      	movs	r3, #1
 8010078:	4652      	mov	r2, sl
 801007a:	4631      	mov	r1, r6
 801007c:	4628      	mov	r0, r5
 801007e:	47b8      	blx	r7
 8010080:	3001      	adds	r0, #1
 8010082:	f43f ae42 	beq.w	800fd0a <_printf_float+0xc2>
 8010086:	f108 0801 	add.w	r8, r8, #1
 801008a:	e7e2      	b.n	8010052 <_printf_float+0x40a>
 801008c:	2301      	movs	r3, #1
 801008e:	4642      	mov	r2, r8
 8010090:	e7eb      	b.n	801006a <_printf_float+0x422>
 8010092:	2301      	movs	r3, #1
 8010094:	464a      	mov	r2, r9
 8010096:	4631      	mov	r1, r6
 8010098:	4628      	mov	r0, r5
 801009a:	47b8      	blx	r7
 801009c:	3001      	adds	r0, #1
 801009e:	f43f ae34 	beq.w	800fd0a <_printf_float+0xc2>
 80100a2:	f108 0801 	add.w	r8, r8, #1
 80100a6:	e700      	b.n	800feaa <_printf_float+0x262>
 80100a8:	4642      	mov	r2, r8
 80100aa:	464b      	mov	r3, r9
 80100ac:	4640      	mov	r0, r8
 80100ae:	4649      	mov	r1, r9
 80100b0:	f7f0 fd68 	bl	8000b84 <__aeabi_dcmpun>
 80100b4:	2800      	cmp	r0, #0
 80100b6:	f43f ae2d 	beq.w	800fd14 <_printf_float+0xcc>
 80100ba:	4b01      	ldr	r3, [pc, #4]	; (80100c0 <_printf_float+0x478>)
 80100bc:	4a01      	ldr	r2, [pc, #4]	; (80100c4 <_printf_float+0x47c>)
 80100be:	e60e      	b.n	800fcde <_printf_float+0x96>
 80100c0:	08015712 	.word	0x08015712
 80100c4:	08015716 	.word	0x08015716

080100c8 <_printf_common>:
 80100c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100cc:	4691      	mov	r9, r2
 80100ce:	461f      	mov	r7, r3
 80100d0:	688a      	ldr	r2, [r1, #8]
 80100d2:	690b      	ldr	r3, [r1, #16]
 80100d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100d8:	4293      	cmp	r3, r2
 80100da:	bfb8      	it	lt
 80100dc:	4613      	movlt	r3, r2
 80100de:	f8c9 3000 	str.w	r3, [r9]
 80100e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100e6:	4606      	mov	r6, r0
 80100e8:	460c      	mov	r4, r1
 80100ea:	b112      	cbz	r2, 80100f2 <_printf_common+0x2a>
 80100ec:	3301      	adds	r3, #1
 80100ee:	f8c9 3000 	str.w	r3, [r9]
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	0699      	lsls	r1, r3, #26
 80100f6:	bf42      	ittt	mi
 80100f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80100fc:	3302      	addmi	r3, #2
 80100fe:	f8c9 3000 	strmi.w	r3, [r9]
 8010102:	6825      	ldr	r5, [r4, #0]
 8010104:	f015 0506 	ands.w	r5, r5, #6
 8010108:	d107      	bne.n	801011a <_printf_common+0x52>
 801010a:	f104 0a19 	add.w	sl, r4, #25
 801010e:	68e3      	ldr	r3, [r4, #12]
 8010110:	f8d9 2000 	ldr.w	r2, [r9]
 8010114:	1a9b      	subs	r3, r3, r2
 8010116:	429d      	cmp	r5, r3
 8010118:	db29      	blt.n	801016e <_printf_common+0xa6>
 801011a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801011e:	6822      	ldr	r2, [r4, #0]
 8010120:	3300      	adds	r3, #0
 8010122:	bf18      	it	ne
 8010124:	2301      	movne	r3, #1
 8010126:	0692      	lsls	r2, r2, #26
 8010128:	d42e      	bmi.n	8010188 <_printf_common+0xc0>
 801012a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801012e:	4639      	mov	r1, r7
 8010130:	4630      	mov	r0, r6
 8010132:	47c0      	blx	r8
 8010134:	3001      	adds	r0, #1
 8010136:	d021      	beq.n	801017c <_printf_common+0xb4>
 8010138:	6823      	ldr	r3, [r4, #0]
 801013a:	68e5      	ldr	r5, [r4, #12]
 801013c:	f8d9 2000 	ldr.w	r2, [r9]
 8010140:	f003 0306 	and.w	r3, r3, #6
 8010144:	2b04      	cmp	r3, #4
 8010146:	bf08      	it	eq
 8010148:	1aad      	subeq	r5, r5, r2
 801014a:	68a3      	ldr	r3, [r4, #8]
 801014c:	6922      	ldr	r2, [r4, #16]
 801014e:	bf0c      	ite	eq
 8010150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010154:	2500      	movne	r5, #0
 8010156:	4293      	cmp	r3, r2
 8010158:	bfc4      	itt	gt
 801015a:	1a9b      	subgt	r3, r3, r2
 801015c:	18ed      	addgt	r5, r5, r3
 801015e:	f04f 0900 	mov.w	r9, #0
 8010162:	341a      	adds	r4, #26
 8010164:	454d      	cmp	r5, r9
 8010166:	d11b      	bne.n	80101a0 <_printf_common+0xd8>
 8010168:	2000      	movs	r0, #0
 801016a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801016e:	2301      	movs	r3, #1
 8010170:	4652      	mov	r2, sl
 8010172:	4639      	mov	r1, r7
 8010174:	4630      	mov	r0, r6
 8010176:	47c0      	blx	r8
 8010178:	3001      	adds	r0, #1
 801017a:	d103      	bne.n	8010184 <_printf_common+0xbc>
 801017c:	f04f 30ff 	mov.w	r0, #4294967295
 8010180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010184:	3501      	adds	r5, #1
 8010186:	e7c2      	b.n	801010e <_printf_common+0x46>
 8010188:	18e1      	adds	r1, r4, r3
 801018a:	1c5a      	adds	r2, r3, #1
 801018c:	2030      	movs	r0, #48	; 0x30
 801018e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010192:	4422      	add	r2, r4
 8010194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801019c:	3302      	adds	r3, #2
 801019e:	e7c4      	b.n	801012a <_printf_common+0x62>
 80101a0:	2301      	movs	r3, #1
 80101a2:	4622      	mov	r2, r4
 80101a4:	4639      	mov	r1, r7
 80101a6:	4630      	mov	r0, r6
 80101a8:	47c0      	blx	r8
 80101aa:	3001      	adds	r0, #1
 80101ac:	d0e6      	beq.n	801017c <_printf_common+0xb4>
 80101ae:	f109 0901 	add.w	r9, r9, #1
 80101b2:	e7d7      	b.n	8010164 <_printf_common+0x9c>

080101b4 <_printf_i>:
 80101b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101b8:	4617      	mov	r7, r2
 80101ba:	7e0a      	ldrb	r2, [r1, #24]
 80101bc:	b085      	sub	sp, #20
 80101be:	2a6e      	cmp	r2, #110	; 0x6e
 80101c0:	4698      	mov	r8, r3
 80101c2:	4606      	mov	r6, r0
 80101c4:	460c      	mov	r4, r1
 80101c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101c8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80101cc:	f000 80bc 	beq.w	8010348 <_printf_i+0x194>
 80101d0:	d81a      	bhi.n	8010208 <_printf_i+0x54>
 80101d2:	2a63      	cmp	r2, #99	; 0x63
 80101d4:	d02e      	beq.n	8010234 <_printf_i+0x80>
 80101d6:	d80a      	bhi.n	80101ee <_printf_i+0x3a>
 80101d8:	2a00      	cmp	r2, #0
 80101da:	f000 80c8 	beq.w	801036e <_printf_i+0x1ba>
 80101de:	2a58      	cmp	r2, #88	; 0x58
 80101e0:	f000 808a 	beq.w	80102f8 <_printf_i+0x144>
 80101e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101e8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80101ec:	e02a      	b.n	8010244 <_printf_i+0x90>
 80101ee:	2a64      	cmp	r2, #100	; 0x64
 80101f0:	d001      	beq.n	80101f6 <_printf_i+0x42>
 80101f2:	2a69      	cmp	r2, #105	; 0x69
 80101f4:	d1f6      	bne.n	80101e4 <_printf_i+0x30>
 80101f6:	6821      	ldr	r1, [r4, #0]
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80101fe:	d023      	beq.n	8010248 <_printf_i+0x94>
 8010200:	1d11      	adds	r1, r2, #4
 8010202:	6019      	str	r1, [r3, #0]
 8010204:	6813      	ldr	r3, [r2, #0]
 8010206:	e027      	b.n	8010258 <_printf_i+0xa4>
 8010208:	2a73      	cmp	r2, #115	; 0x73
 801020a:	f000 80b4 	beq.w	8010376 <_printf_i+0x1c2>
 801020e:	d808      	bhi.n	8010222 <_printf_i+0x6e>
 8010210:	2a6f      	cmp	r2, #111	; 0x6f
 8010212:	d02a      	beq.n	801026a <_printf_i+0xb6>
 8010214:	2a70      	cmp	r2, #112	; 0x70
 8010216:	d1e5      	bne.n	80101e4 <_printf_i+0x30>
 8010218:	680a      	ldr	r2, [r1, #0]
 801021a:	f042 0220 	orr.w	r2, r2, #32
 801021e:	600a      	str	r2, [r1, #0]
 8010220:	e003      	b.n	801022a <_printf_i+0x76>
 8010222:	2a75      	cmp	r2, #117	; 0x75
 8010224:	d021      	beq.n	801026a <_printf_i+0xb6>
 8010226:	2a78      	cmp	r2, #120	; 0x78
 8010228:	d1dc      	bne.n	80101e4 <_printf_i+0x30>
 801022a:	2278      	movs	r2, #120	; 0x78
 801022c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8010230:	496e      	ldr	r1, [pc, #440]	; (80103ec <_printf_i+0x238>)
 8010232:	e064      	b.n	80102fe <_printf_i+0x14a>
 8010234:	681a      	ldr	r2, [r3, #0]
 8010236:	f101 0542 	add.w	r5, r1, #66	; 0x42
 801023a:	1d11      	adds	r1, r2, #4
 801023c:	6019      	str	r1, [r3, #0]
 801023e:	6813      	ldr	r3, [r2, #0]
 8010240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010244:	2301      	movs	r3, #1
 8010246:	e0a3      	b.n	8010390 <_printf_i+0x1dc>
 8010248:	f011 0f40 	tst.w	r1, #64	; 0x40
 801024c:	f102 0104 	add.w	r1, r2, #4
 8010250:	6019      	str	r1, [r3, #0]
 8010252:	d0d7      	beq.n	8010204 <_printf_i+0x50>
 8010254:	f9b2 3000 	ldrsh.w	r3, [r2]
 8010258:	2b00      	cmp	r3, #0
 801025a:	da03      	bge.n	8010264 <_printf_i+0xb0>
 801025c:	222d      	movs	r2, #45	; 0x2d
 801025e:	425b      	negs	r3, r3
 8010260:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010264:	4962      	ldr	r1, [pc, #392]	; (80103f0 <_printf_i+0x23c>)
 8010266:	220a      	movs	r2, #10
 8010268:	e017      	b.n	801029a <_printf_i+0xe6>
 801026a:	6820      	ldr	r0, [r4, #0]
 801026c:	6819      	ldr	r1, [r3, #0]
 801026e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010272:	d003      	beq.n	801027c <_printf_i+0xc8>
 8010274:	1d08      	adds	r0, r1, #4
 8010276:	6018      	str	r0, [r3, #0]
 8010278:	680b      	ldr	r3, [r1, #0]
 801027a:	e006      	b.n	801028a <_printf_i+0xd6>
 801027c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010280:	f101 0004 	add.w	r0, r1, #4
 8010284:	6018      	str	r0, [r3, #0]
 8010286:	d0f7      	beq.n	8010278 <_printf_i+0xc4>
 8010288:	880b      	ldrh	r3, [r1, #0]
 801028a:	4959      	ldr	r1, [pc, #356]	; (80103f0 <_printf_i+0x23c>)
 801028c:	2a6f      	cmp	r2, #111	; 0x6f
 801028e:	bf14      	ite	ne
 8010290:	220a      	movne	r2, #10
 8010292:	2208      	moveq	r2, #8
 8010294:	2000      	movs	r0, #0
 8010296:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801029a:	6865      	ldr	r5, [r4, #4]
 801029c:	60a5      	str	r5, [r4, #8]
 801029e:	2d00      	cmp	r5, #0
 80102a0:	f2c0 809c 	blt.w	80103dc <_printf_i+0x228>
 80102a4:	6820      	ldr	r0, [r4, #0]
 80102a6:	f020 0004 	bic.w	r0, r0, #4
 80102aa:	6020      	str	r0, [r4, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d13f      	bne.n	8010330 <_printf_i+0x17c>
 80102b0:	2d00      	cmp	r5, #0
 80102b2:	f040 8095 	bne.w	80103e0 <_printf_i+0x22c>
 80102b6:	4675      	mov	r5, lr
 80102b8:	2a08      	cmp	r2, #8
 80102ba:	d10b      	bne.n	80102d4 <_printf_i+0x120>
 80102bc:	6823      	ldr	r3, [r4, #0]
 80102be:	07da      	lsls	r2, r3, #31
 80102c0:	d508      	bpl.n	80102d4 <_printf_i+0x120>
 80102c2:	6923      	ldr	r3, [r4, #16]
 80102c4:	6862      	ldr	r2, [r4, #4]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	bfde      	ittt	le
 80102ca:	2330      	movle	r3, #48	; 0x30
 80102cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80102d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80102d4:	ebae 0305 	sub.w	r3, lr, r5
 80102d8:	6123      	str	r3, [r4, #16]
 80102da:	f8cd 8000 	str.w	r8, [sp]
 80102de:	463b      	mov	r3, r7
 80102e0:	aa03      	add	r2, sp, #12
 80102e2:	4621      	mov	r1, r4
 80102e4:	4630      	mov	r0, r6
 80102e6:	f7ff feef 	bl	80100c8 <_printf_common>
 80102ea:	3001      	adds	r0, #1
 80102ec:	d155      	bne.n	801039a <_printf_i+0x1e6>
 80102ee:	f04f 30ff 	mov.w	r0, #4294967295
 80102f2:	b005      	add	sp, #20
 80102f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102f8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80102fc:	493c      	ldr	r1, [pc, #240]	; (80103f0 <_printf_i+0x23c>)
 80102fe:	6822      	ldr	r2, [r4, #0]
 8010300:	6818      	ldr	r0, [r3, #0]
 8010302:	f012 0f80 	tst.w	r2, #128	; 0x80
 8010306:	f100 0504 	add.w	r5, r0, #4
 801030a:	601d      	str	r5, [r3, #0]
 801030c:	d001      	beq.n	8010312 <_printf_i+0x15e>
 801030e:	6803      	ldr	r3, [r0, #0]
 8010310:	e002      	b.n	8010318 <_printf_i+0x164>
 8010312:	0655      	lsls	r5, r2, #25
 8010314:	d5fb      	bpl.n	801030e <_printf_i+0x15a>
 8010316:	8803      	ldrh	r3, [r0, #0]
 8010318:	07d0      	lsls	r0, r2, #31
 801031a:	bf44      	itt	mi
 801031c:	f042 0220 	orrmi.w	r2, r2, #32
 8010320:	6022      	strmi	r2, [r4, #0]
 8010322:	b91b      	cbnz	r3, 801032c <_printf_i+0x178>
 8010324:	6822      	ldr	r2, [r4, #0]
 8010326:	f022 0220 	bic.w	r2, r2, #32
 801032a:	6022      	str	r2, [r4, #0]
 801032c:	2210      	movs	r2, #16
 801032e:	e7b1      	b.n	8010294 <_printf_i+0xe0>
 8010330:	4675      	mov	r5, lr
 8010332:	fbb3 f0f2 	udiv	r0, r3, r2
 8010336:	fb02 3310 	mls	r3, r2, r0, r3
 801033a:	5ccb      	ldrb	r3, [r1, r3]
 801033c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010340:	4603      	mov	r3, r0
 8010342:	2800      	cmp	r0, #0
 8010344:	d1f5      	bne.n	8010332 <_printf_i+0x17e>
 8010346:	e7b7      	b.n	80102b8 <_printf_i+0x104>
 8010348:	6808      	ldr	r0, [r1, #0]
 801034a:	681a      	ldr	r2, [r3, #0]
 801034c:	6949      	ldr	r1, [r1, #20]
 801034e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010352:	d004      	beq.n	801035e <_printf_i+0x1aa>
 8010354:	1d10      	adds	r0, r2, #4
 8010356:	6018      	str	r0, [r3, #0]
 8010358:	6813      	ldr	r3, [r2, #0]
 801035a:	6019      	str	r1, [r3, #0]
 801035c:	e007      	b.n	801036e <_printf_i+0x1ba>
 801035e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010362:	f102 0004 	add.w	r0, r2, #4
 8010366:	6018      	str	r0, [r3, #0]
 8010368:	6813      	ldr	r3, [r2, #0]
 801036a:	d0f6      	beq.n	801035a <_printf_i+0x1a6>
 801036c:	8019      	strh	r1, [r3, #0]
 801036e:	2300      	movs	r3, #0
 8010370:	6123      	str	r3, [r4, #16]
 8010372:	4675      	mov	r5, lr
 8010374:	e7b1      	b.n	80102da <_printf_i+0x126>
 8010376:	681a      	ldr	r2, [r3, #0]
 8010378:	1d11      	adds	r1, r2, #4
 801037a:	6019      	str	r1, [r3, #0]
 801037c:	6815      	ldr	r5, [r2, #0]
 801037e:	6862      	ldr	r2, [r4, #4]
 8010380:	2100      	movs	r1, #0
 8010382:	4628      	mov	r0, r5
 8010384:	f7ef ff5c 	bl	8000240 <memchr>
 8010388:	b108      	cbz	r0, 801038e <_printf_i+0x1da>
 801038a:	1b40      	subs	r0, r0, r5
 801038c:	6060      	str	r0, [r4, #4]
 801038e:	6863      	ldr	r3, [r4, #4]
 8010390:	6123      	str	r3, [r4, #16]
 8010392:	2300      	movs	r3, #0
 8010394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010398:	e79f      	b.n	80102da <_printf_i+0x126>
 801039a:	6923      	ldr	r3, [r4, #16]
 801039c:	462a      	mov	r2, r5
 801039e:	4639      	mov	r1, r7
 80103a0:	4630      	mov	r0, r6
 80103a2:	47c0      	blx	r8
 80103a4:	3001      	adds	r0, #1
 80103a6:	d0a2      	beq.n	80102ee <_printf_i+0x13a>
 80103a8:	6823      	ldr	r3, [r4, #0]
 80103aa:	079b      	lsls	r3, r3, #30
 80103ac:	d507      	bpl.n	80103be <_printf_i+0x20a>
 80103ae:	2500      	movs	r5, #0
 80103b0:	f104 0919 	add.w	r9, r4, #25
 80103b4:	68e3      	ldr	r3, [r4, #12]
 80103b6:	9a03      	ldr	r2, [sp, #12]
 80103b8:	1a9b      	subs	r3, r3, r2
 80103ba:	429d      	cmp	r5, r3
 80103bc:	db05      	blt.n	80103ca <_printf_i+0x216>
 80103be:	68e0      	ldr	r0, [r4, #12]
 80103c0:	9b03      	ldr	r3, [sp, #12]
 80103c2:	4298      	cmp	r0, r3
 80103c4:	bfb8      	it	lt
 80103c6:	4618      	movlt	r0, r3
 80103c8:	e793      	b.n	80102f2 <_printf_i+0x13e>
 80103ca:	2301      	movs	r3, #1
 80103cc:	464a      	mov	r2, r9
 80103ce:	4639      	mov	r1, r7
 80103d0:	4630      	mov	r0, r6
 80103d2:	47c0      	blx	r8
 80103d4:	3001      	adds	r0, #1
 80103d6:	d08a      	beq.n	80102ee <_printf_i+0x13a>
 80103d8:	3501      	adds	r5, #1
 80103da:	e7eb      	b.n	80103b4 <_printf_i+0x200>
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d1a7      	bne.n	8010330 <_printf_i+0x17c>
 80103e0:	780b      	ldrb	r3, [r1, #0]
 80103e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103ea:	e765      	b.n	80102b8 <_printf_i+0x104>
 80103ec:	0801572d 	.word	0x0801572d
 80103f0:	0801571c 	.word	0x0801571c

080103f4 <iprintf>:
 80103f4:	b40f      	push	{r0, r1, r2, r3}
 80103f6:	4b0a      	ldr	r3, [pc, #40]	; (8010420 <iprintf+0x2c>)
 80103f8:	b513      	push	{r0, r1, r4, lr}
 80103fa:	681c      	ldr	r4, [r3, #0]
 80103fc:	b124      	cbz	r4, 8010408 <iprintf+0x14>
 80103fe:	69a3      	ldr	r3, [r4, #24]
 8010400:	b913      	cbnz	r3, 8010408 <iprintf+0x14>
 8010402:	4620      	mov	r0, r4
 8010404:	f001 f9ee 	bl	80117e4 <__sinit>
 8010408:	ab05      	add	r3, sp, #20
 801040a:	9a04      	ldr	r2, [sp, #16]
 801040c:	68a1      	ldr	r1, [r4, #8]
 801040e:	9301      	str	r3, [sp, #4]
 8010410:	4620      	mov	r0, r4
 8010412:	f001 ff8b 	bl	801232c <_vfiprintf_r>
 8010416:	b002      	add	sp, #8
 8010418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801041c:	b004      	add	sp, #16
 801041e:	4770      	bx	lr
 8010420:	2000017c 	.word	0x2000017c

08010424 <_puts_r>:
 8010424:	b570      	push	{r4, r5, r6, lr}
 8010426:	460e      	mov	r6, r1
 8010428:	4605      	mov	r5, r0
 801042a:	b118      	cbz	r0, 8010434 <_puts_r+0x10>
 801042c:	6983      	ldr	r3, [r0, #24]
 801042e:	b90b      	cbnz	r3, 8010434 <_puts_r+0x10>
 8010430:	f001 f9d8 	bl	80117e4 <__sinit>
 8010434:	69ab      	ldr	r3, [r5, #24]
 8010436:	68ac      	ldr	r4, [r5, #8]
 8010438:	b913      	cbnz	r3, 8010440 <_puts_r+0x1c>
 801043a:	4628      	mov	r0, r5
 801043c:	f001 f9d2 	bl	80117e4 <__sinit>
 8010440:	4b23      	ldr	r3, [pc, #140]	; (80104d0 <_puts_r+0xac>)
 8010442:	429c      	cmp	r4, r3
 8010444:	d117      	bne.n	8010476 <_puts_r+0x52>
 8010446:	686c      	ldr	r4, [r5, #4]
 8010448:	89a3      	ldrh	r3, [r4, #12]
 801044a:	071b      	lsls	r3, r3, #28
 801044c:	d51d      	bpl.n	801048a <_puts_r+0x66>
 801044e:	6923      	ldr	r3, [r4, #16]
 8010450:	b1db      	cbz	r3, 801048a <_puts_r+0x66>
 8010452:	3e01      	subs	r6, #1
 8010454:	68a3      	ldr	r3, [r4, #8]
 8010456:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801045a:	3b01      	subs	r3, #1
 801045c:	60a3      	str	r3, [r4, #8]
 801045e:	b9e9      	cbnz	r1, 801049c <_puts_r+0x78>
 8010460:	2b00      	cmp	r3, #0
 8010462:	da2e      	bge.n	80104c2 <_puts_r+0x9e>
 8010464:	4622      	mov	r2, r4
 8010466:	210a      	movs	r1, #10
 8010468:	4628      	mov	r0, r5
 801046a:	f000 f98f 	bl	801078c <__swbuf_r>
 801046e:	3001      	adds	r0, #1
 8010470:	d011      	beq.n	8010496 <_puts_r+0x72>
 8010472:	200a      	movs	r0, #10
 8010474:	bd70      	pop	{r4, r5, r6, pc}
 8010476:	4b17      	ldr	r3, [pc, #92]	; (80104d4 <_puts_r+0xb0>)
 8010478:	429c      	cmp	r4, r3
 801047a:	d101      	bne.n	8010480 <_puts_r+0x5c>
 801047c:	68ac      	ldr	r4, [r5, #8]
 801047e:	e7e3      	b.n	8010448 <_puts_r+0x24>
 8010480:	4b15      	ldr	r3, [pc, #84]	; (80104d8 <_puts_r+0xb4>)
 8010482:	429c      	cmp	r4, r3
 8010484:	bf08      	it	eq
 8010486:	68ec      	ldreq	r4, [r5, #12]
 8010488:	e7de      	b.n	8010448 <_puts_r+0x24>
 801048a:	4621      	mov	r1, r4
 801048c:	4628      	mov	r0, r5
 801048e:	f000 f9dd 	bl	801084c <__swsetup_r>
 8010492:	2800      	cmp	r0, #0
 8010494:	d0dd      	beq.n	8010452 <_puts_r+0x2e>
 8010496:	f04f 30ff 	mov.w	r0, #4294967295
 801049a:	bd70      	pop	{r4, r5, r6, pc}
 801049c:	2b00      	cmp	r3, #0
 801049e:	da04      	bge.n	80104aa <_puts_r+0x86>
 80104a0:	69a2      	ldr	r2, [r4, #24]
 80104a2:	4293      	cmp	r3, r2
 80104a4:	db06      	blt.n	80104b4 <_puts_r+0x90>
 80104a6:	290a      	cmp	r1, #10
 80104a8:	d004      	beq.n	80104b4 <_puts_r+0x90>
 80104aa:	6823      	ldr	r3, [r4, #0]
 80104ac:	1c5a      	adds	r2, r3, #1
 80104ae:	6022      	str	r2, [r4, #0]
 80104b0:	7019      	strb	r1, [r3, #0]
 80104b2:	e7cf      	b.n	8010454 <_puts_r+0x30>
 80104b4:	4622      	mov	r2, r4
 80104b6:	4628      	mov	r0, r5
 80104b8:	f000 f968 	bl	801078c <__swbuf_r>
 80104bc:	3001      	adds	r0, #1
 80104be:	d1c9      	bne.n	8010454 <_puts_r+0x30>
 80104c0:	e7e9      	b.n	8010496 <_puts_r+0x72>
 80104c2:	6823      	ldr	r3, [r4, #0]
 80104c4:	200a      	movs	r0, #10
 80104c6:	1c5a      	adds	r2, r3, #1
 80104c8:	6022      	str	r2, [r4, #0]
 80104ca:	7018      	strb	r0, [r3, #0]
 80104cc:	bd70      	pop	{r4, r5, r6, pc}
 80104ce:	bf00      	nop
 80104d0:	0801586c 	.word	0x0801586c
 80104d4:	0801588c 	.word	0x0801588c
 80104d8:	0801584c 	.word	0x0801584c

080104dc <puts>:
 80104dc:	4b02      	ldr	r3, [pc, #8]	; (80104e8 <puts+0xc>)
 80104de:	4601      	mov	r1, r0
 80104e0:	6818      	ldr	r0, [r3, #0]
 80104e2:	f7ff bf9f 	b.w	8010424 <_puts_r>
 80104e6:	bf00      	nop
 80104e8:	2000017c 	.word	0x2000017c

080104ec <realloc>:
 80104ec:	4b02      	ldr	r3, [pc, #8]	; (80104f8 <realloc+0xc>)
 80104ee:	460a      	mov	r2, r1
 80104f0:	4601      	mov	r1, r0
 80104f2:	6818      	ldr	r0, [r3, #0]
 80104f4:	f001 bd7a 	b.w	8011fec <_realloc_r>
 80104f8:	2000017c 	.word	0x2000017c

080104fc <__srget_r>:
 80104fc:	b538      	push	{r3, r4, r5, lr}
 80104fe:	460c      	mov	r4, r1
 8010500:	4605      	mov	r5, r0
 8010502:	b118      	cbz	r0, 801050c <__srget_r+0x10>
 8010504:	6983      	ldr	r3, [r0, #24]
 8010506:	b90b      	cbnz	r3, 801050c <__srget_r+0x10>
 8010508:	f001 f96c 	bl	80117e4 <__sinit>
 801050c:	4b0e      	ldr	r3, [pc, #56]	; (8010548 <__srget_r+0x4c>)
 801050e:	429c      	cmp	r4, r3
 8010510:	d10d      	bne.n	801052e <__srget_r+0x32>
 8010512:	686c      	ldr	r4, [r5, #4]
 8010514:	4621      	mov	r1, r4
 8010516:	4628      	mov	r0, r5
 8010518:	f002 f828 	bl	801256c <__srefill_r>
 801051c:	b988      	cbnz	r0, 8010542 <__srget_r+0x46>
 801051e:	6863      	ldr	r3, [r4, #4]
 8010520:	3b01      	subs	r3, #1
 8010522:	6063      	str	r3, [r4, #4]
 8010524:	6823      	ldr	r3, [r4, #0]
 8010526:	1c5a      	adds	r2, r3, #1
 8010528:	6022      	str	r2, [r4, #0]
 801052a:	7818      	ldrb	r0, [r3, #0]
 801052c:	bd38      	pop	{r3, r4, r5, pc}
 801052e:	4b07      	ldr	r3, [pc, #28]	; (801054c <__srget_r+0x50>)
 8010530:	429c      	cmp	r4, r3
 8010532:	d101      	bne.n	8010538 <__srget_r+0x3c>
 8010534:	68ac      	ldr	r4, [r5, #8]
 8010536:	e7ed      	b.n	8010514 <__srget_r+0x18>
 8010538:	4b05      	ldr	r3, [pc, #20]	; (8010550 <__srget_r+0x54>)
 801053a:	429c      	cmp	r4, r3
 801053c:	bf08      	it	eq
 801053e:	68ec      	ldreq	r4, [r5, #12]
 8010540:	e7e8      	b.n	8010514 <__srget_r+0x18>
 8010542:	f04f 30ff 	mov.w	r0, #4294967295
 8010546:	bd38      	pop	{r3, r4, r5, pc}
 8010548:	0801586c 	.word	0x0801586c
 801054c:	0801588c 	.word	0x0801588c
 8010550:	0801584c 	.word	0x0801584c

08010554 <_sbrk_r>:
 8010554:	b538      	push	{r3, r4, r5, lr}
 8010556:	4c06      	ldr	r4, [pc, #24]	; (8010570 <_sbrk_r+0x1c>)
 8010558:	2300      	movs	r3, #0
 801055a:	4605      	mov	r5, r0
 801055c:	4608      	mov	r0, r1
 801055e:	6023      	str	r3, [r4, #0]
 8010560:	f002 f986 	bl	8012870 <_sbrk>
 8010564:	1c43      	adds	r3, r0, #1
 8010566:	d102      	bne.n	801056e <_sbrk_r+0x1a>
 8010568:	6823      	ldr	r3, [r4, #0]
 801056a:	b103      	cbz	r3, 801056e <_sbrk_r+0x1a>
 801056c:	602b      	str	r3, [r5, #0]
 801056e:	bd38      	pop	{r3, r4, r5, pc}
 8010570:	20002df4 	.word	0x20002df4

08010574 <sniprintf>:
 8010574:	b40c      	push	{r2, r3}
 8010576:	b530      	push	{r4, r5, lr}
 8010578:	4b17      	ldr	r3, [pc, #92]	; (80105d8 <sniprintf+0x64>)
 801057a:	1e0c      	subs	r4, r1, #0
 801057c:	b09d      	sub	sp, #116	; 0x74
 801057e:	681d      	ldr	r5, [r3, #0]
 8010580:	da08      	bge.n	8010594 <sniprintf+0x20>
 8010582:	238b      	movs	r3, #139	; 0x8b
 8010584:	602b      	str	r3, [r5, #0]
 8010586:	f04f 30ff 	mov.w	r0, #4294967295
 801058a:	b01d      	add	sp, #116	; 0x74
 801058c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010590:	b002      	add	sp, #8
 8010592:	4770      	bx	lr
 8010594:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010598:	f8ad 3014 	strh.w	r3, [sp, #20]
 801059c:	bf14      	ite	ne
 801059e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80105a2:	4623      	moveq	r3, r4
 80105a4:	9304      	str	r3, [sp, #16]
 80105a6:	9307      	str	r3, [sp, #28]
 80105a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105ac:	9002      	str	r0, [sp, #8]
 80105ae:	9006      	str	r0, [sp, #24]
 80105b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80105b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80105b6:	ab21      	add	r3, sp, #132	; 0x84
 80105b8:	a902      	add	r1, sp, #8
 80105ba:	4628      	mov	r0, r5
 80105bc:	9301      	str	r3, [sp, #4]
 80105be:	f001 fd97 	bl	80120f0 <_svfiprintf_r>
 80105c2:	1c43      	adds	r3, r0, #1
 80105c4:	bfbc      	itt	lt
 80105c6:	238b      	movlt	r3, #139	; 0x8b
 80105c8:	602b      	strlt	r3, [r5, #0]
 80105ca:	2c00      	cmp	r4, #0
 80105cc:	d0dd      	beq.n	801058a <sniprintf+0x16>
 80105ce:	9b02      	ldr	r3, [sp, #8]
 80105d0:	2200      	movs	r2, #0
 80105d2:	701a      	strb	r2, [r3, #0]
 80105d4:	e7d9      	b.n	801058a <sniprintf+0x16>
 80105d6:	bf00      	nop
 80105d8:	2000017c 	.word	0x2000017c

080105dc <siprintf>:
 80105dc:	b40e      	push	{r1, r2, r3}
 80105de:	b500      	push	{lr}
 80105e0:	b09c      	sub	sp, #112	; 0x70
 80105e2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80105e6:	ab1d      	add	r3, sp, #116	; 0x74
 80105e8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80105ec:	9002      	str	r0, [sp, #8]
 80105ee:	9006      	str	r0, [sp, #24]
 80105f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105f4:	480a      	ldr	r0, [pc, #40]	; (8010620 <siprintf+0x44>)
 80105f6:	9104      	str	r1, [sp, #16]
 80105f8:	9107      	str	r1, [sp, #28]
 80105fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80105fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010602:	f8ad 1016 	strh.w	r1, [sp, #22]
 8010606:	6800      	ldr	r0, [r0, #0]
 8010608:	9301      	str	r3, [sp, #4]
 801060a:	a902      	add	r1, sp, #8
 801060c:	f001 fd70 	bl	80120f0 <_svfiprintf_r>
 8010610:	9b02      	ldr	r3, [sp, #8]
 8010612:	2200      	movs	r2, #0
 8010614:	701a      	strb	r2, [r3, #0]
 8010616:	b01c      	add	sp, #112	; 0x70
 8010618:	f85d eb04 	ldr.w	lr, [sp], #4
 801061c:	b003      	add	sp, #12
 801061e:	4770      	bx	lr
 8010620:	2000017c 	.word	0x2000017c

08010624 <strcpy>:
 8010624:	4603      	mov	r3, r0
 8010626:	f811 2b01 	ldrb.w	r2, [r1], #1
 801062a:	f803 2b01 	strb.w	r2, [r3], #1
 801062e:	2a00      	cmp	r2, #0
 8010630:	d1f9      	bne.n	8010626 <strcpy+0x2>
 8010632:	4770      	bx	lr

08010634 <strncpy>:
 8010634:	b570      	push	{r4, r5, r6, lr}
 8010636:	4604      	mov	r4, r0
 8010638:	b902      	cbnz	r2, 801063c <strncpy+0x8>
 801063a:	bd70      	pop	{r4, r5, r6, pc}
 801063c:	4623      	mov	r3, r4
 801063e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8010642:	f803 5b01 	strb.w	r5, [r3], #1
 8010646:	1e56      	subs	r6, r2, #1
 8010648:	b91d      	cbnz	r5, 8010652 <strncpy+0x1e>
 801064a:	4414      	add	r4, r2
 801064c:	42a3      	cmp	r3, r4
 801064e:	d103      	bne.n	8010658 <strncpy+0x24>
 8010650:	bd70      	pop	{r4, r5, r6, pc}
 8010652:	461c      	mov	r4, r3
 8010654:	4632      	mov	r2, r6
 8010656:	e7ef      	b.n	8010638 <strncpy+0x4>
 8010658:	f803 5b01 	strb.w	r5, [r3], #1
 801065c:	e7f6      	b.n	801064c <strncpy+0x18>

0801065e <_strtol_l.isra.0>:
 801065e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010662:	4680      	mov	r8, r0
 8010664:	4689      	mov	r9, r1
 8010666:	4692      	mov	sl, r2
 8010668:	461f      	mov	r7, r3
 801066a:	468b      	mov	fp, r1
 801066c:	465d      	mov	r5, fp
 801066e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010670:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010674:	f7ff f96a 	bl	800f94c <__locale_ctype_ptr_l>
 8010678:	4420      	add	r0, r4
 801067a:	7846      	ldrb	r6, [r0, #1]
 801067c:	f016 0608 	ands.w	r6, r6, #8
 8010680:	d10b      	bne.n	801069a <_strtol_l.isra.0+0x3c>
 8010682:	2c2d      	cmp	r4, #45	; 0x2d
 8010684:	d10b      	bne.n	801069e <_strtol_l.isra.0+0x40>
 8010686:	782c      	ldrb	r4, [r5, #0]
 8010688:	2601      	movs	r6, #1
 801068a:	f10b 0502 	add.w	r5, fp, #2
 801068e:	b167      	cbz	r7, 80106aa <_strtol_l.isra.0+0x4c>
 8010690:	2f10      	cmp	r7, #16
 8010692:	d114      	bne.n	80106be <_strtol_l.isra.0+0x60>
 8010694:	2c30      	cmp	r4, #48	; 0x30
 8010696:	d00a      	beq.n	80106ae <_strtol_l.isra.0+0x50>
 8010698:	e011      	b.n	80106be <_strtol_l.isra.0+0x60>
 801069a:	46ab      	mov	fp, r5
 801069c:	e7e6      	b.n	801066c <_strtol_l.isra.0+0xe>
 801069e:	2c2b      	cmp	r4, #43	; 0x2b
 80106a0:	bf04      	itt	eq
 80106a2:	782c      	ldrbeq	r4, [r5, #0]
 80106a4:	f10b 0502 	addeq.w	r5, fp, #2
 80106a8:	e7f1      	b.n	801068e <_strtol_l.isra.0+0x30>
 80106aa:	2c30      	cmp	r4, #48	; 0x30
 80106ac:	d127      	bne.n	80106fe <_strtol_l.isra.0+0xa0>
 80106ae:	782b      	ldrb	r3, [r5, #0]
 80106b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80106b4:	2b58      	cmp	r3, #88	; 0x58
 80106b6:	d14b      	bne.n	8010750 <_strtol_l.isra.0+0xf2>
 80106b8:	786c      	ldrb	r4, [r5, #1]
 80106ba:	2710      	movs	r7, #16
 80106bc:	3502      	adds	r5, #2
 80106be:	2e00      	cmp	r6, #0
 80106c0:	bf0c      	ite	eq
 80106c2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80106c6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80106ca:	2200      	movs	r2, #0
 80106cc:	fbb1 fef7 	udiv	lr, r1, r7
 80106d0:	4610      	mov	r0, r2
 80106d2:	fb07 1c1e 	mls	ip, r7, lr, r1
 80106d6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80106da:	2b09      	cmp	r3, #9
 80106dc:	d811      	bhi.n	8010702 <_strtol_l.isra.0+0xa4>
 80106de:	461c      	mov	r4, r3
 80106e0:	42a7      	cmp	r7, r4
 80106e2:	dd1d      	ble.n	8010720 <_strtol_l.isra.0+0xc2>
 80106e4:	1c53      	adds	r3, r2, #1
 80106e6:	d007      	beq.n	80106f8 <_strtol_l.isra.0+0x9a>
 80106e8:	4586      	cmp	lr, r0
 80106ea:	d316      	bcc.n	801071a <_strtol_l.isra.0+0xbc>
 80106ec:	d101      	bne.n	80106f2 <_strtol_l.isra.0+0x94>
 80106ee:	45a4      	cmp	ip, r4
 80106f0:	db13      	blt.n	801071a <_strtol_l.isra.0+0xbc>
 80106f2:	fb00 4007 	mla	r0, r0, r7, r4
 80106f6:	2201      	movs	r2, #1
 80106f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80106fc:	e7eb      	b.n	80106d6 <_strtol_l.isra.0+0x78>
 80106fe:	270a      	movs	r7, #10
 8010700:	e7dd      	b.n	80106be <_strtol_l.isra.0+0x60>
 8010702:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8010706:	2b19      	cmp	r3, #25
 8010708:	d801      	bhi.n	801070e <_strtol_l.isra.0+0xb0>
 801070a:	3c37      	subs	r4, #55	; 0x37
 801070c:	e7e8      	b.n	80106e0 <_strtol_l.isra.0+0x82>
 801070e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8010712:	2b19      	cmp	r3, #25
 8010714:	d804      	bhi.n	8010720 <_strtol_l.isra.0+0xc2>
 8010716:	3c57      	subs	r4, #87	; 0x57
 8010718:	e7e2      	b.n	80106e0 <_strtol_l.isra.0+0x82>
 801071a:	f04f 32ff 	mov.w	r2, #4294967295
 801071e:	e7eb      	b.n	80106f8 <_strtol_l.isra.0+0x9a>
 8010720:	1c53      	adds	r3, r2, #1
 8010722:	d108      	bne.n	8010736 <_strtol_l.isra.0+0xd8>
 8010724:	2322      	movs	r3, #34	; 0x22
 8010726:	f8c8 3000 	str.w	r3, [r8]
 801072a:	4608      	mov	r0, r1
 801072c:	f1ba 0f00 	cmp.w	sl, #0
 8010730:	d107      	bne.n	8010742 <_strtol_l.isra.0+0xe4>
 8010732:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010736:	b106      	cbz	r6, 801073a <_strtol_l.isra.0+0xdc>
 8010738:	4240      	negs	r0, r0
 801073a:	f1ba 0f00 	cmp.w	sl, #0
 801073e:	d00c      	beq.n	801075a <_strtol_l.isra.0+0xfc>
 8010740:	b122      	cbz	r2, 801074c <_strtol_l.isra.0+0xee>
 8010742:	3d01      	subs	r5, #1
 8010744:	f8ca 5000 	str.w	r5, [sl]
 8010748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801074c:	464d      	mov	r5, r9
 801074e:	e7f9      	b.n	8010744 <_strtol_l.isra.0+0xe6>
 8010750:	2430      	movs	r4, #48	; 0x30
 8010752:	2f00      	cmp	r7, #0
 8010754:	d1b3      	bne.n	80106be <_strtol_l.isra.0+0x60>
 8010756:	2708      	movs	r7, #8
 8010758:	e7b1      	b.n	80106be <_strtol_l.isra.0+0x60>
 801075a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08010760 <strtol>:
 8010760:	4b08      	ldr	r3, [pc, #32]	; (8010784 <strtol+0x24>)
 8010762:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010764:	681c      	ldr	r4, [r3, #0]
 8010766:	4d08      	ldr	r5, [pc, #32]	; (8010788 <strtol+0x28>)
 8010768:	6a23      	ldr	r3, [r4, #32]
 801076a:	2b00      	cmp	r3, #0
 801076c:	bf08      	it	eq
 801076e:	462b      	moveq	r3, r5
 8010770:	9300      	str	r3, [sp, #0]
 8010772:	4613      	mov	r3, r2
 8010774:	460a      	mov	r2, r1
 8010776:	4601      	mov	r1, r0
 8010778:	4620      	mov	r0, r4
 801077a:	f7ff ff70 	bl	801065e <_strtol_l.isra.0>
 801077e:	b003      	add	sp, #12
 8010780:	bd30      	pop	{r4, r5, pc}
 8010782:	bf00      	nop
 8010784:	2000017c 	.word	0x2000017c
 8010788:	200001e0 	.word	0x200001e0

0801078c <__swbuf_r>:
 801078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801078e:	460e      	mov	r6, r1
 8010790:	4614      	mov	r4, r2
 8010792:	4605      	mov	r5, r0
 8010794:	b118      	cbz	r0, 801079e <__swbuf_r+0x12>
 8010796:	6983      	ldr	r3, [r0, #24]
 8010798:	b90b      	cbnz	r3, 801079e <__swbuf_r+0x12>
 801079a:	f001 f823 	bl	80117e4 <__sinit>
 801079e:	4b21      	ldr	r3, [pc, #132]	; (8010824 <__swbuf_r+0x98>)
 80107a0:	429c      	cmp	r4, r3
 80107a2:	d12a      	bne.n	80107fa <__swbuf_r+0x6e>
 80107a4:	686c      	ldr	r4, [r5, #4]
 80107a6:	69a3      	ldr	r3, [r4, #24]
 80107a8:	60a3      	str	r3, [r4, #8]
 80107aa:	89a3      	ldrh	r3, [r4, #12]
 80107ac:	071a      	lsls	r2, r3, #28
 80107ae:	d52e      	bpl.n	801080e <__swbuf_r+0x82>
 80107b0:	6923      	ldr	r3, [r4, #16]
 80107b2:	b363      	cbz	r3, 801080e <__swbuf_r+0x82>
 80107b4:	6923      	ldr	r3, [r4, #16]
 80107b6:	6820      	ldr	r0, [r4, #0]
 80107b8:	1ac0      	subs	r0, r0, r3
 80107ba:	6963      	ldr	r3, [r4, #20]
 80107bc:	b2f6      	uxtb	r6, r6
 80107be:	4298      	cmp	r0, r3
 80107c0:	4637      	mov	r7, r6
 80107c2:	db04      	blt.n	80107ce <__swbuf_r+0x42>
 80107c4:	4621      	mov	r1, r4
 80107c6:	4628      	mov	r0, r5
 80107c8:	f000 ff90 	bl	80116ec <_fflush_r>
 80107cc:	bb28      	cbnz	r0, 801081a <__swbuf_r+0x8e>
 80107ce:	68a3      	ldr	r3, [r4, #8]
 80107d0:	3b01      	subs	r3, #1
 80107d2:	60a3      	str	r3, [r4, #8]
 80107d4:	6823      	ldr	r3, [r4, #0]
 80107d6:	1c5a      	adds	r2, r3, #1
 80107d8:	6022      	str	r2, [r4, #0]
 80107da:	701e      	strb	r6, [r3, #0]
 80107dc:	6963      	ldr	r3, [r4, #20]
 80107de:	3001      	adds	r0, #1
 80107e0:	4298      	cmp	r0, r3
 80107e2:	d004      	beq.n	80107ee <__swbuf_r+0x62>
 80107e4:	89a3      	ldrh	r3, [r4, #12]
 80107e6:	07db      	lsls	r3, r3, #31
 80107e8:	d519      	bpl.n	801081e <__swbuf_r+0x92>
 80107ea:	2e0a      	cmp	r6, #10
 80107ec:	d117      	bne.n	801081e <__swbuf_r+0x92>
 80107ee:	4621      	mov	r1, r4
 80107f0:	4628      	mov	r0, r5
 80107f2:	f000 ff7b 	bl	80116ec <_fflush_r>
 80107f6:	b190      	cbz	r0, 801081e <__swbuf_r+0x92>
 80107f8:	e00f      	b.n	801081a <__swbuf_r+0x8e>
 80107fa:	4b0b      	ldr	r3, [pc, #44]	; (8010828 <__swbuf_r+0x9c>)
 80107fc:	429c      	cmp	r4, r3
 80107fe:	d101      	bne.n	8010804 <__swbuf_r+0x78>
 8010800:	68ac      	ldr	r4, [r5, #8]
 8010802:	e7d0      	b.n	80107a6 <__swbuf_r+0x1a>
 8010804:	4b09      	ldr	r3, [pc, #36]	; (801082c <__swbuf_r+0xa0>)
 8010806:	429c      	cmp	r4, r3
 8010808:	bf08      	it	eq
 801080a:	68ec      	ldreq	r4, [r5, #12]
 801080c:	e7cb      	b.n	80107a6 <__swbuf_r+0x1a>
 801080e:	4621      	mov	r1, r4
 8010810:	4628      	mov	r0, r5
 8010812:	f000 f81b 	bl	801084c <__swsetup_r>
 8010816:	2800      	cmp	r0, #0
 8010818:	d0cc      	beq.n	80107b4 <__swbuf_r+0x28>
 801081a:	f04f 37ff 	mov.w	r7, #4294967295
 801081e:	4638      	mov	r0, r7
 8010820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010822:	bf00      	nop
 8010824:	0801586c 	.word	0x0801586c
 8010828:	0801588c 	.word	0x0801588c
 801082c:	0801584c 	.word	0x0801584c

08010830 <__ascii_wctomb>:
 8010830:	b149      	cbz	r1, 8010846 <__ascii_wctomb+0x16>
 8010832:	2aff      	cmp	r2, #255	; 0xff
 8010834:	bf85      	ittet	hi
 8010836:	238a      	movhi	r3, #138	; 0x8a
 8010838:	6003      	strhi	r3, [r0, #0]
 801083a:	700a      	strbls	r2, [r1, #0]
 801083c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010840:	bf98      	it	ls
 8010842:	2001      	movls	r0, #1
 8010844:	4770      	bx	lr
 8010846:	4608      	mov	r0, r1
 8010848:	4770      	bx	lr
	...

0801084c <__swsetup_r>:
 801084c:	4b32      	ldr	r3, [pc, #200]	; (8010918 <__swsetup_r+0xcc>)
 801084e:	b570      	push	{r4, r5, r6, lr}
 8010850:	681d      	ldr	r5, [r3, #0]
 8010852:	4606      	mov	r6, r0
 8010854:	460c      	mov	r4, r1
 8010856:	b125      	cbz	r5, 8010862 <__swsetup_r+0x16>
 8010858:	69ab      	ldr	r3, [r5, #24]
 801085a:	b913      	cbnz	r3, 8010862 <__swsetup_r+0x16>
 801085c:	4628      	mov	r0, r5
 801085e:	f000 ffc1 	bl	80117e4 <__sinit>
 8010862:	4b2e      	ldr	r3, [pc, #184]	; (801091c <__swsetup_r+0xd0>)
 8010864:	429c      	cmp	r4, r3
 8010866:	d10f      	bne.n	8010888 <__swsetup_r+0x3c>
 8010868:	686c      	ldr	r4, [r5, #4]
 801086a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801086e:	b29a      	uxth	r2, r3
 8010870:	0715      	lsls	r5, r2, #28
 8010872:	d42c      	bmi.n	80108ce <__swsetup_r+0x82>
 8010874:	06d0      	lsls	r0, r2, #27
 8010876:	d411      	bmi.n	801089c <__swsetup_r+0x50>
 8010878:	2209      	movs	r2, #9
 801087a:	6032      	str	r2, [r6, #0]
 801087c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010880:	81a3      	strh	r3, [r4, #12]
 8010882:	f04f 30ff 	mov.w	r0, #4294967295
 8010886:	bd70      	pop	{r4, r5, r6, pc}
 8010888:	4b25      	ldr	r3, [pc, #148]	; (8010920 <__swsetup_r+0xd4>)
 801088a:	429c      	cmp	r4, r3
 801088c:	d101      	bne.n	8010892 <__swsetup_r+0x46>
 801088e:	68ac      	ldr	r4, [r5, #8]
 8010890:	e7eb      	b.n	801086a <__swsetup_r+0x1e>
 8010892:	4b24      	ldr	r3, [pc, #144]	; (8010924 <__swsetup_r+0xd8>)
 8010894:	429c      	cmp	r4, r3
 8010896:	bf08      	it	eq
 8010898:	68ec      	ldreq	r4, [r5, #12]
 801089a:	e7e6      	b.n	801086a <__swsetup_r+0x1e>
 801089c:	0751      	lsls	r1, r2, #29
 801089e:	d512      	bpl.n	80108c6 <__swsetup_r+0x7a>
 80108a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108a2:	b141      	cbz	r1, 80108b6 <__swsetup_r+0x6a>
 80108a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108a8:	4299      	cmp	r1, r3
 80108aa:	d002      	beq.n	80108b2 <__swsetup_r+0x66>
 80108ac:	4630      	mov	r0, r6
 80108ae:	f7ff f889 	bl	800f9c4 <_free_r>
 80108b2:	2300      	movs	r3, #0
 80108b4:	6363      	str	r3, [r4, #52]	; 0x34
 80108b6:	89a3      	ldrh	r3, [r4, #12]
 80108b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80108bc:	81a3      	strh	r3, [r4, #12]
 80108be:	2300      	movs	r3, #0
 80108c0:	6063      	str	r3, [r4, #4]
 80108c2:	6923      	ldr	r3, [r4, #16]
 80108c4:	6023      	str	r3, [r4, #0]
 80108c6:	89a3      	ldrh	r3, [r4, #12]
 80108c8:	f043 0308 	orr.w	r3, r3, #8
 80108cc:	81a3      	strh	r3, [r4, #12]
 80108ce:	6923      	ldr	r3, [r4, #16]
 80108d0:	b94b      	cbnz	r3, 80108e6 <__swsetup_r+0x9a>
 80108d2:	89a3      	ldrh	r3, [r4, #12]
 80108d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80108d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108dc:	d003      	beq.n	80108e6 <__swsetup_r+0x9a>
 80108de:	4621      	mov	r1, r4
 80108e0:	4630      	mov	r0, r6
 80108e2:	f001 f857 	bl	8011994 <__smakebuf_r>
 80108e6:	89a2      	ldrh	r2, [r4, #12]
 80108e8:	f012 0301 	ands.w	r3, r2, #1
 80108ec:	d00c      	beq.n	8010908 <__swsetup_r+0xbc>
 80108ee:	2300      	movs	r3, #0
 80108f0:	60a3      	str	r3, [r4, #8]
 80108f2:	6963      	ldr	r3, [r4, #20]
 80108f4:	425b      	negs	r3, r3
 80108f6:	61a3      	str	r3, [r4, #24]
 80108f8:	6923      	ldr	r3, [r4, #16]
 80108fa:	b953      	cbnz	r3, 8010912 <__swsetup_r+0xc6>
 80108fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010900:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010904:	d1ba      	bne.n	801087c <__swsetup_r+0x30>
 8010906:	bd70      	pop	{r4, r5, r6, pc}
 8010908:	0792      	lsls	r2, r2, #30
 801090a:	bf58      	it	pl
 801090c:	6963      	ldrpl	r3, [r4, #20]
 801090e:	60a3      	str	r3, [r4, #8]
 8010910:	e7f2      	b.n	80108f8 <__swsetup_r+0xac>
 8010912:	2000      	movs	r0, #0
 8010914:	e7f7      	b.n	8010906 <__swsetup_r+0xba>
 8010916:	bf00      	nop
 8010918:	2000017c 	.word	0x2000017c
 801091c:	0801586c 	.word	0x0801586c
 8010920:	0801588c 	.word	0x0801588c
 8010924:	0801584c 	.word	0x0801584c

08010928 <quorem>:
 8010928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801092c:	6903      	ldr	r3, [r0, #16]
 801092e:	690c      	ldr	r4, [r1, #16]
 8010930:	429c      	cmp	r4, r3
 8010932:	4680      	mov	r8, r0
 8010934:	f300 8082 	bgt.w	8010a3c <quorem+0x114>
 8010938:	3c01      	subs	r4, #1
 801093a:	f101 0714 	add.w	r7, r1, #20
 801093e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8010942:	f100 0614 	add.w	r6, r0, #20
 8010946:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801094a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801094e:	eb06 030e 	add.w	r3, r6, lr
 8010952:	3501      	adds	r5, #1
 8010954:	eb07 090e 	add.w	r9, r7, lr
 8010958:	9301      	str	r3, [sp, #4]
 801095a:	fbb0 f5f5 	udiv	r5, r0, r5
 801095e:	b395      	cbz	r5, 80109c6 <quorem+0x9e>
 8010960:	f04f 0a00 	mov.w	sl, #0
 8010964:	4638      	mov	r0, r7
 8010966:	46b4      	mov	ip, r6
 8010968:	46d3      	mov	fp, sl
 801096a:	f850 2b04 	ldr.w	r2, [r0], #4
 801096e:	b293      	uxth	r3, r2
 8010970:	fb05 a303 	mla	r3, r5, r3, sl
 8010974:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010978:	b29b      	uxth	r3, r3
 801097a:	ebab 0303 	sub.w	r3, fp, r3
 801097e:	0c12      	lsrs	r2, r2, #16
 8010980:	f8bc b000 	ldrh.w	fp, [ip]
 8010984:	fb05 a202 	mla	r2, r5, r2, sl
 8010988:	fa13 f38b 	uxtah	r3, r3, fp
 801098c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010990:	fa1f fb82 	uxth.w	fp, r2
 8010994:	f8dc 2000 	ldr.w	r2, [ip]
 8010998:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801099c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109a6:	4581      	cmp	r9, r0
 80109a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80109ac:	f84c 3b04 	str.w	r3, [ip], #4
 80109b0:	d2db      	bcs.n	801096a <quorem+0x42>
 80109b2:	f856 300e 	ldr.w	r3, [r6, lr]
 80109b6:	b933      	cbnz	r3, 80109c6 <quorem+0x9e>
 80109b8:	9b01      	ldr	r3, [sp, #4]
 80109ba:	3b04      	subs	r3, #4
 80109bc:	429e      	cmp	r6, r3
 80109be:	461a      	mov	r2, r3
 80109c0:	d330      	bcc.n	8010a24 <quorem+0xfc>
 80109c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80109c6:	4640      	mov	r0, r8
 80109c8:	f001 fa3b 	bl	8011e42 <__mcmp>
 80109cc:	2800      	cmp	r0, #0
 80109ce:	db25      	blt.n	8010a1c <quorem+0xf4>
 80109d0:	3501      	adds	r5, #1
 80109d2:	4630      	mov	r0, r6
 80109d4:	f04f 0e00 	mov.w	lr, #0
 80109d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80109dc:	f8d0 c000 	ldr.w	ip, [r0]
 80109e0:	b293      	uxth	r3, r2
 80109e2:	ebae 0303 	sub.w	r3, lr, r3
 80109e6:	0c12      	lsrs	r2, r2, #16
 80109e8:	fa13 f38c 	uxtah	r3, r3, ip
 80109ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80109f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109f4:	b29b      	uxth	r3, r3
 80109f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109fa:	45b9      	cmp	r9, r7
 80109fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010a00:	f840 3b04 	str.w	r3, [r0], #4
 8010a04:	d2e8      	bcs.n	80109d8 <quorem+0xb0>
 8010a06:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010a0a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010a0e:	b92a      	cbnz	r2, 8010a1c <quorem+0xf4>
 8010a10:	3b04      	subs	r3, #4
 8010a12:	429e      	cmp	r6, r3
 8010a14:	461a      	mov	r2, r3
 8010a16:	d30b      	bcc.n	8010a30 <quorem+0x108>
 8010a18:	f8c8 4010 	str.w	r4, [r8, #16]
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	b003      	add	sp, #12
 8010a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a24:	6812      	ldr	r2, [r2, #0]
 8010a26:	3b04      	subs	r3, #4
 8010a28:	2a00      	cmp	r2, #0
 8010a2a:	d1ca      	bne.n	80109c2 <quorem+0x9a>
 8010a2c:	3c01      	subs	r4, #1
 8010a2e:	e7c5      	b.n	80109bc <quorem+0x94>
 8010a30:	6812      	ldr	r2, [r2, #0]
 8010a32:	3b04      	subs	r3, #4
 8010a34:	2a00      	cmp	r2, #0
 8010a36:	d1ef      	bne.n	8010a18 <quorem+0xf0>
 8010a38:	3c01      	subs	r4, #1
 8010a3a:	e7ea      	b.n	8010a12 <quorem+0xea>
 8010a3c:	2000      	movs	r0, #0
 8010a3e:	e7ee      	b.n	8010a1e <quorem+0xf6>

08010a40 <_dtoa_r>:
 8010a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a44:	ec57 6b10 	vmov	r6, r7, d0
 8010a48:	b097      	sub	sp, #92	; 0x5c
 8010a4a:	e9cd 6700 	strd	r6, r7, [sp]
 8010a4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a50:	9107      	str	r1, [sp, #28]
 8010a52:	4604      	mov	r4, r0
 8010a54:	920a      	str	r2, [sp, #40]	; 0x28
 8010a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a58:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8010a5a:	b93e      	cbnz	r6, 8010a6c <_dtoa_r+0x2c>
 8010a5c:	2010      	movs	r0, #16
 8010a5e:	f7fe ff87 	bl	800f970 <malloc>
 8010a62:	6260      	str	r0, [r4, #36]	; 0x24
 8010a64:	6046      	str	r6, [r0, #4]
 8010a66:	6086      	str	r6, [r0, #8]
 8010a68:	6006      	str	r6, [r0, #0]
 8010a6a:	60c6      	str	r6, [r0, #12]
 8010a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a6e:	6819      	ldr	r1, [r3, #0]
 8010a70:	b151      	cbz	r1, 8010a88 <_dtoa_r+0x48>
 8010a72:	685a      	ldr	r2, [r3, #4]
 8010a74:	604a      	str	r2, [r1, #4]
 8010a76:	2301      	movs	r3, #1
 8010a78:	4093      	lsls	r3, r2
 8010a7a:	608b      	str	r3, [r1, #8]
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	f001 f80a 	bl	8011a96 <_Bfree>
 8010a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a84:	2200      	movs	r2, #0
 8010a86:	601a      	str	r2, [r3, #0]
 8010a88:	9b01      	ldr	r3, [sp, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	bfbf      	itttt	lt
 8010a8e:	2301      	movlt	r3, #1
 8010a90:	602b      	strlt	r3, [r5, #0]
 8010a92:	9b01      	ldrlt	r3, [sp, #4]
 8010a94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010a98:	bfb2      	itee	lt
 8010a9a:	9301      	strlt	r3, [sp, #4]
 8010a9c:	2300      	movge	r3, #0
 8010a9e:	602b      	strge	r3, [r5, #0]
 8010aa0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010aa4:	4ba8      	ldr	r3, [pc, #672]	; (8010d48 <_dtoa_r+0x308>)
 8010aa6:	ea33 0308 	bics.w	r3, r3, r8
 8010aaa:	d11b      	bne.n	8010ae4 <_dtoa_r+0xa4>
 8010aac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010aae:	f242 730f 	movw	r3, #9999	; 0x270f
 8010ab2:	6013      	str	r3, [r2, #0]
 8010ab4:	9b00      	ldr	r3, [sp, #0]
 8010ab6:	b923      	cbnz	r3, 8010ac2 <_dtoa_r+0x82>
 8010ab8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8010abc:	2800      	cmp	r0, #0
 8010abe:	f000 8578 	beq.w	80115b2 <_dtoa_r+0xb72>
 8010ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ac4:	b953      	cbnz	r3, 8010adc <_dtoa_r+0x9c>
 8010ac6:	4ba1      	ldr	r3, [pc, #644]	; (8010d4c <_dtoa_r+0x30c>)
 8010ac8:	e021      	b.n	8010b0e <_dtoa_r+0xce>
 8010aca:	4ba1      	ldr	r3, [pc, #644]	; (8010d50 <_dtoa_r+0x310>)
 8010acc:	9302      	str	r3, [sp, #8]
 8010ace:	3308      	adds	r3, #8
 8010ad0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010ad2:	6013      	str	r3, [r2, #0]
 8010ad4:	9802      	ldr	r0, [sp, #8]
 8010ad6:	b017      	add	sp, #92	; 0x5c
 8010ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010adc:	4b9b      	ldr	r3, [pc, #620]	; (8010d4c <_dtoa_r+0x30c>)
 8010ade:	9302      	str	r3, [sp, #8]
 8010ae0:	3303      	adds	r3, #3
 8010ae2:	e7f5      	b.n	8010ad0 <_dtoa_r+0x90>
 8010ae4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010ae8:	2200      	movs	r2, #0
 8010aea:	2300      	movs	r3, #0
 8010aec:	4630      	mov	r0, r6
 8010aee:	4639      	mov	r1, r7
 8010af0:	f7f0 f816 	bl	8000b20 <__aeabi_dcmpeq>
 8010af4:	4681      	mov	r9, r0
 8010af6:	b160      	cbz	r0, 8010b12 <_dtoa_r+0xd2>
 8010af8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010afa:	2301      	movs	r3, #1
 8010afc:	6013      	str	r3, [r2, #0]
 8010afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f000 8553 	beq.w	80115ac <_dtoa_r+0xb6c>
 8010b06:	4b93      	ldr	r3, [pc, #588]	; (8010d54 <_dtoa_r+0x314>)
 8010b08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010b0a:	6013      	str	r3, [r2, #0]
 8010b0c:	3b01      	subs	r3, #1
 8010b0e:	9302      	str	r3, [sp, #8]
 8010b10:	e7e0      	b.n	8010ad4 <_dtoa_r+0x94>
 8010b12:	aa14      	add	r2, sp, #80	; 0x50
 8010b14:	a915      	add	r1, sp, #84	; 0x54
 8010b16:	ec47 6b10 	vmov	d0, r6, r7
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	f001 fa09 	bl	8011f32 <__d2b>
 8010b20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010b24:	4682      	mov	sl, r0
 8010b26:	2d00      	cmp	r5, #0
 8010b28:	d07e      	beq.n	8010c28 <_dtoa_r+0x1e8>
 8010b2a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010b2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8010b32:	4630      	mov	r0, r6
 8010b34:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010b38:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010b3c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8010b40:	2200      	movs	r2, #0
 8010b42:	4b85      	ldr	r3, [pc, #532]	; (8010d58 <_dtoa_r+0x318>)
 8010b44:	f7ef fbd0 	bl	80002e8 <__aeabi_dsub>
 8010b48:	a379      	add	r3, pc, #484	; (adr r3, 8010d30 <_dtoa_r+0x2f0>)
 8010b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b4e:	f7ef fd7f 	bl	8000650 <__aeabi_dmul>
 8010b52:	a379      	add	r3, pc, #484	; (adr r3, 8010d38 <_dtoa_r+0x2f8>)
 8010b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b58:	f7ef fbc8 	bl	80002ec <__adddf3>
 8010b5c:	4606      	mov	r6, r0
 8010b5e:	4628      	mov	r0, r5
 8010b60:	460f      	mov	r7, r1
 8010b62:	f7ef fd0f 	bl	8000584 <__aeabi_i2d>
 8010b66:	a376      	add	r3, pc, #472	; (adr r3, 8010d40 <_dtoa_r+0x300>)
 8010b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6c:	f7ef fd70 	bl	8000650 <__aeabi_dmul>
 8010b70:	4602      	mov	r2, r0
 8010b72:	460b      	mov	r3, r1
 8010b74:	4630      	mov	r0, r6
 8010b76:	4639      	mov	r1, r7
 8010b78:	f7ef fbb8 	bl	80002ec <__adddf3>
 8010b7c:	4606      	mov	r6, r0
 8010b7e:	460f      	mov	r7, r1
 8010b80:	f7f0 f816 	bl	8000bb0 <__aeabi_d2iz>
 8010b84:	2200      	movs	r2, #0
 8010b86:	4683      	mov	fp, r0
 8010b88:	2300      	movs	r3, #0
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	4639      	mov	r1, r7
 8010b8e:	f7ef ffd1 	bl	8000b34 <__aeabi_dcmplt>
 8010b92:	b158      	cbz	r0, 8010bac <_dtoa_r+0x16c>
 8010b94:	4658      	mov	r0, fp
 8010b96:	f7ef fcf5 	bl	8000584 <__aeabi_i2d>
 8010b9a:	4602      	mov	r2, r0
 8010b9c:	460b      	mov	r3, r1
 8010b9e:	4630      	mov	r0, r6
 8010ba0:	4639      	mov	r1, r7
 8010ba2:	f7ef ffbd 	bl	8000b20 <__aeabi_dcmpeq>
 8010ba6:	b908      	cbnz	r0, 8010bac <_dtoa_r+0x16c>
 8010ba8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010bac:	f1bb 0f16 	cmp.w	fp, #22
 8010bb0:	d859      	bhi.n	8010c66 <_dtoa_r+0x226>
 8010bb2:	496a      	ldr	r1, [pc, #424]	; (8010d5c <_dtoa_r+0x31c>)
 8010bb4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8010bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bc0:	f7ef ffd6 	bl	8000b70 <__aeabi_dcmpgt>
 8010bc4:	2800      	cmp	r0, #0
 8010bc6:	d050      	beq.n	8010c6a <_dtoa_r+0x22a>
 8010bc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010bcc:	2300      	movs	r3, #0
 8010bce:	930e      	str	r3, [sp, #56]	; 0x38
 8010bd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010bd2:	1b5d      	subs	r5, r3, r5
 8010bd4:	1e6b      	subs	r3, r5, #1
 8010bd6:	9306      	str	r3, [sp, #24]
 8010bd8:	bf45      	ittet	mi
 8010bda:	f1c5 0301 	rsbmi	r3, r5, #1
 8010bde:	9305      	strmi	r3, [sp, #20]
 8010be0:	2300      	movpl	r3, #0
 8010be2:	2300      	movmi	r3, #0
 8010be4:	bf4c      	ite	mi
 8010be6:	9306      	strmi	r3, [sp, #24]
 8010be8:	9305      	strpl	r3, [sp, #20]
 8010bea:	f1bb 0f00 	cmp.w	fp, #0
 8010bee:	db3e      	blt.n	8010c6e <_dtoa_r+0x22e>
 8010bf0:	9b06      	ldr	r3, [sp, #24]
 8010bf2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010bf6:	445b      	add	r3, fp
 8010bf8:	9306      	str	r3, [sp, #24]
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	9308      	str	r3, [sp, #32]
 8010bfe:	9b07      	ldr	r3, [sp, #28]
 8010c00:	2b09      	cmp	r3, #9
 8010c02:	f200 80af 	bhi.w	8010d64 <_dtoa_r+0x324>
 8010c06:	2b05      	cmp	r3, #5
 8010c08:	bfc4      	itt	gt
 8010c0a:	3b04      	subgt	r3, #4
 8010c0c:	9307      	strgt	r3, [sp, #28]
 8010c0e:	9b07      	ldr	r3, [sp, #28]
 8010c10:	f1a3 0302 	sub.w	r3, r3, #2
 8010c14:	bfcc      	ite	gt
 8010c16:	2600      	movgt	r6, #0
 8010c18:	2601      	movle	r6, #1
 8010c1a:	2b03      	cmp	r3, #3
 8010c1c:	f200 80ae 	bhi.w	8010d7c <_dtoa_r+0x33c>
 8010c20:	e8df f003 	tbb	[pc, r3]
 8010c24:	772f8482 	.word	0x772f8482
 8010c28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8010c2c:	441d      	add	r5, r3
 8010c2e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010c32:	2b20      	cmp	r3, #32
 8010c34:	dd11      	ble.n	8010c5a <_dtoa_r+0x21a>
 8010c36:	9a00      	ldr	r2, [sp, #0]
 8010c38:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010c3c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8010c40:	fa22 f000 	lsr.w	r0, r2, r0
 8010c44:	fa08 f303 	lsl.w	r3, r8, r3
 8010c48:	4318      	orrs	r0, r3
 8010c4a:	f7ef fc8b 	bl	8000564 <__aeabi_ui2d>
 8010c4e:	2301      	movs	r3, #1
 8010c50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010c54:	3d01      	subs	r5, #1
 8010c56:	9312      	str	r3, [sp, #72]	; 0x48
 8010c58:	e772      	b.n	8010b40 <_dtoa_r+0x100>
 8010c5a:	f1c3 0020 	rsb	r0, r3, #32
 8010c5e:	9b00      	ldr	r3, [sp, #0]
 8010c60:	fa03 f000 	lsl.w	r0, r3, r0
 8010c64:	e7f1      	b.n	8010c4a <_dtoa_r+0x20a>
 8010c66:	2301      	movs	r3, #1
 8010c68:	e7b1      	b.n	8010bce <_dtoa_r+0x18e>
 8010c6a:	900e      	str	r0, [sp, #56]	; 0x38
 8010c6c:	e7b0      	b.n	8010bd0 <_dtoa_r+0x190>
 8010c6e:	9b05      	ldr	r3, [sp, #20]
 8010c70:	eba3 030b 	sub.w	r3, r3, fp
 8010c74:	9305      	str	r3, [sp, #20]
 8010c76:	f1cb 0300 	rsb	r3, fp, #0
 8010c7a:	9308      	str	r3, [sp, #32]
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c80:	e7bd      	b.n	8010bfe <_dtoa_r+0x1be>
 8010c82:	2301      	movs	r3, #1
 8010c84:	9309      	str	r3, [sp, #36]	; 0x24
 8010c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	dd7a      	ble.n	8010d82 <_dtoa_r+0x342>
 8010c8c:	9304      	str	r3, [sp, #16]
 8010c8e:	9303      	str	r3, [sp, #12]
 8010c90:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010c92:	2200      	movs	r2, #0
 8010c94:	606a      	str	r2, [r5, #4]
 8010c96:	2104      	movs	r1, #4
 8010c98:	f101 0214 	add.w	r2, r1, #20
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d975      	bls.n	8010d8c <_dtoa_r+0x34c>
 8010ca0:	6869      	ldr	r1, [r5, #4]
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	f000 fec3 	bl	8011a2e <_Balloc>
 8010ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010caa:	6028      	str	r0, [r5, #0]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	9302      	str	r3, [sp, #8]
 8010cb0:	9b03      	ldr	r3, [sp, #12]
 8010cb2:	2b0e      	cmp	r3, #14
 8010cb4:	f200 80e5 	bhi.w	8010e82 <_dtoa_r+0x442>
 8010cb8:	2e00      	cmp	r6, #0
 8010cba:	f000 80e2 	beq.w	8010e82 <_dtoa_r+0x442>
 8010cbe:	ed9d 7b00 	vldr	d7, [sp]
 8010cc2:	f1bb 0f00 	cmp.w	fp, #0
 8010cc6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010cca:	dd74      	ble.n	8010db6 <_dtoa_r+0x376>
 8010ccc:	4a23      	ldr	r2, [pc, #140]	; (8010d5c <_dtoa_r+0x31c>)
 8010cce:	f00b 030f 	and.w	r3, fp, #15
 8010cd2:	ea4f 162b 	mov.w	r6, fp, asr #4
 8010cd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010cda:	06f0      	lsls	r0, r6, #27
 8010cdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010ce0:	d559      	bpl.n	8010d96 <_dtoa_r+0x356>
 8010ce2:	4b1f      	ldr	r3, [pc, #124]	; (8010d60 <_dtoa_r+0x320>)
 8010ce4:	ec51 0b17 	vmov	r0, r1, d7
 8010ce8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010cec:	f7ef fdda 	bl	80008a4 <__aeabi_ddiv>
 8010cf0:	e9cd 0100 	strd	r0, r1, [sp]
 8010cf4:	f006 060f 	and.w	r6, r6, #15
 8010cf8:	2503      	movs	r5, #3
 8010cfa:	4f19      	ldr	r7, [pc, #100]	; (8010d60 <_dtoa_r+0x320>)
 8010cfc:	2e00      	cmp	r6, #0
 8010cfe:	d14c      	bne.n	8010d9a <_dtoa_r+0x35a>
 8010d00:	4642      	mov	r2, r8
 8010d02:	464b      	mov	r3, r9
 8010d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d08:	f7ef fdcc 	bl	80008a4 <__aeabi_ddiv>
 8010d0c:	e9cd 0100 	strd	r0, r1, [sp]
 8010d10:	e06a      	b.n	8010de8 <_dtoa_r+0x3a8>
 8010d12:	2301      	movs	r3, #1
 8010d14:	9309      	str	r3, [sp, #36]	; 0x24
 8010d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d18:	445b      	add	r3, fp
 8010d1a:	9304      	str	r3, [sp, #16]
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	2b01      	cmp	r3, #1
 8010d20:	9303      	str	r3, [sp, #12]
 8010d22:	bfb8      	it	lt
 8010d24:	2301      	movlt	r3, #1
 8010d26:	e7b3      	b.n	8010c90 <_dtoa_r+0x250>
 8010d28:	2300      	movs	r3, #0
 8010d2a:	e7ab      	b.n	8010c84 <_dtoa_r+0x244>
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	e7f1      	b.n	8010d14 <_dtoa_r+0x2d4>
 8010d30:	636f4361 	.word	0x636f4361
 8010d34:	3fd287a7 	.word	0x3fd287a7
 8010d38:	8b60c8b3 	.word	0x8b60c8b3
 8010d3c:	3fc68a28 	.word	0x3fc68a28
 8010d40:	509f79fb 	.word	0x509f79fb
 8010d44:	3fd34413 	.word	0x3fd34413
 8010d48:	7ff00000 	.word	0x7ff00000
 8010d4c:	08015848 	.word	0x08015848
 8010d50:	0801583f 	.word	0x0801583f
 8010d54:	0801571b 	.word	0x0801571b
 8010d58:	3ff80000 	.word	0x3ff80000
 8010d5c:	080158d8 	.word	0x080158d8
 8010d60:	080158b0 	.word	0x080158b0
 8010d64:	2601      	movs	r6, #1
 8010d66:	2300      	movs	r3, #0
 8010d68:	9307      	str	r3, [sp, #28]
 8010d6a:	9609      	str	r6, [sp, #36]	; 0x24
 8010d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d70:	9304      	str	r3, [sp, #16]
 8010d72:	9303      	str	r3, [sp, #12]
 8010d74:	2200      	movs	r2, #0
 8010d76:	2312      	movs	r3, #18
 8010d78:	920a      	str	r2, [sp, #40]	; 0x28
 8010d7a:	e789      	b.n	8010c90 <_dtoa_r+0x250>
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8010d80:	e7f4      	b.n	8010d6c <_dtoa_r+0x32c>
 8010d82:	2301      	movs	r3, #1
 8010d84:	9304      	str	r3, [sp, #16]
 8010d86:	9303      	str	r3, [sp, #12]
 8010d88:	461a      	mov	r2, r3
 8010d8a:	e7f5      	b.n	8010d78 <_dtoa_r+0x338>
 8010d8c:	686a      	ldr	r2, [r5, #4]
 8010d8e:	3201      	adds	r2, #1
 8010d90:	606a      	str	r2, [r5, #4]
 8010d92:	0049      	lsls	r1, r1, #1
 8010d94:	e780      	b.n	8010c98 <_dtoa_r+0x258>
 8010d96:	2502      	movs	r5, #2
 8010d98:	e7af      	b.n	8010cfa <_dtoa_r+0x2ba>
 8010d9a:	07f1      	lsls	r1, r6, #31
 8010d9c:	d508      	bpl.n	8010db0 <_dtoa_r+0x370>
 8010d9e:	4640      	mov	r0, r8
 8010da0:	4649      	mov	r1, r9
 8010da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010da6:	f7ef fc53 	bl	8000650 <__aeabi_dmul>
 8010daa:	3501      	adds	r5, #1
 8010dac:	4680      	mov	r8, r0
 8010dae:	4689      	mov	r9, r1
 8010db0:	1076      	asrs	r6, r6, #1
 8010db2:	3708      	adds	r7, #8
 8010db4:	e7a2      	b.n	8010cfc <_dtoa_r+0x2bc>
 8010db6:	f000 809d 	beq.w	8010ef4 <_dtoa_r+0x4b4>
 8010dba:	f1cb 0600 	rsb	r6, fp, #0
 8010dbe:	4b9f      	ldr	r3, [pc, #636]	; (801103c <_dtoa_r+0x5fc>)
 8010dc0:	4f9f      	ldr	r7, [pc, #636]	; (8011040 <_dtoa_r+0x600>)
 8010dc2:	f006 020f 	and.w	r2, r6, #15
 8010dc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010dd2:	f7ef fc3d 	bl	8000650 <__aeabi_dmul>
 8010dd6:	e9cd 0100 	strd	r0, r1, [sp]
 8010dda:	1136      	asrs	r6, r6, #4
 8010ddc:	2300      	movs	r3, #0
 8010dde:	2502      	movs	r5, #2
 8010de0:	2e00      	cmp	r6, #0
 8010de2:	d17c      	bne.n	8010ede <_dtoa_r+0x49e>
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d191      	bne.n	8010d0c <_dtoa_r+0x2cc>
 8010de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	f000 8084 	beq.w	8010ef8 <_dtoa_r+0x4b8>
 8010df0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8010df4:	2200      	movs	r2, #0
 8010df6:	4b93      	ldr	r3, [pc, #588]	; (8011044 <_dtoa_r+0x604>)
 8010df8:	4640      	mov	r0, r8
 8010dfa:	4649      	mov	r1, r9
 8010dfc:	f7ef fe9a 	bl	8000b34 <__aeabi_dcmplt>
 8010e00:	2800      	cmp	r0, #0
 8010e02:	d079      	beq.n	8010ef8 <_dtoa_r+0x4b8>
 8010e04:	9b03      	ldr	r3, [sp, #12]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d076      	beq.n	8010ef8 <_dtoa_r+0x4b8>
 8010e0a:	9b04      	ldr	r3, [sp, #16]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	dd34      	ble.n	8010e7a <_dtoa_r+0x43a>
 8010e10:	2200      	movs	r2, #0
 8010e12:	4b8d      	ldr	r3, [pc, #564]	; (8011048 <_dtoa_r+0x608>)
 8010e14:	4640      	mov	r0, r8
 8010e16:	4649      	mov	r1, r9
 8010e18:	f7ef fc1a 	bl	8000650 <__aeabi_dmul>
 8010e1c:	e9cd 0100 	strd	r0, r1, [sp]
 8010e20:	9e04      	ldr	r6, [sp, #16]
 8010e22:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010e26:	3501      	adds	r5, #1
 8010e28:	4628      	mov	r0, r5
 8010e2a:	f7ef fbab 	bl	8000584 <__aeabi_i2d>
 8010e2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e32:	f7ef fc0d 	bl	8000650 <__aeabi_dmul>
 8010e36:	2200      	movs	r2, #0
 8010e38:	4b84      	ldr	r3, [pc, #528]	; (801104c <_dtoa_r+0x60c>)
 8010e3a:	f7ef fa57 	bl	80002ec <__adddf3>
 8010e3e:	4680      	mov	r8, r0
 8010e40:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8010e44:	2e00      	cmp	r6, #0
 8010e46:	d15a      	bne.n	8010efe <_dtoa_r+0x4be>
 8010e48:	2200      	movs	r2, #0
 8010e4a:	4b81      	ldr	r3, [pc, #516]	; (8011050 <_dtoa_r+0x610>)
 8010e4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e50:	f7ef fa4a 	bl	80002e8 <__aeabi_dsub>
 8010e54:	4642      	mov	r2, r8
 8010e56:	464b      	mov	r3, r9
 8010e58:	e9cd 0100 	strd	r0, r1, [sp]
 8010e5c:	f7ef fe88 	bl	8000b70 <__aeabi_dcmpgt>
 8010e60:	2800      	cmp	r0, #0
 8010e62:	f040 829b 	bne.w	801139c <_dtoa_r+0x95c>
 8010e66:	4642      	mov	r2, r8
 8010e68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e70:	f7ef fe60 	bl	8000b34 <__aeabi_dcmplt>
 8010e74:	2800      	cmp	r0, #0
 8010e76:	f040 828f 	bne.w	8011398 <_dtoa_r+0x958>
 8010e7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010e7e:	e9cd 2300 	strd	r2, r3, [sp]
 8010e82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	f2c0 8150 	blt.w	801112a <_dtoa_r+0x6ea>
 8010e8a:	f1bb 0f0e 	cmp.w	fp, #14
 8010e8e:	f300 814c 	bgt.w	801112a <_dtoa_r+0x6ea>
 8010e92:	4b6a      	ldr	r3, [pc, #424]	; (801103c <_dtoa_r+0x5fc>)
 8010e94:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010e98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	f280 80da 	bge.w	8011058 <_dtoa_r+0x618>
 8010ea4:	9b03      	ldr	r3, [sp, #12]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	f300 80d6 	bgt.w	8011058 <_dtoa_r+0x618>
 8010eac:	f040 8273 	bne.w	8011396 <_dtoa_r+0x956>
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	4b67      	ldr	r3, [pc, #412]	; (8011050 <_dtoa_r+0x610>)
 8010eb4:	4640      	mov	r0, r8
 8010eb6:	4649      	mov	r1, r9
 8010eb8:	f7ef fbca 	bl	8000650 <__aeabi_dmul>
 8010ebc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ec0:	f7ef fe4c 	bl	8000b5c <__aeabi_dcmpge>
 8010ec4:	9e03      	ldr	r6, [sp, #12]
 8010ec6:	4637      	mov	r7, r6
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	f040 824a 	bne.w	8011362 <_dtoa_r+0x922>
 8010ece:	9b02      	ldr	r3, [sp, #8]
 8010ed0:	9a02      	ldr	r2, [sp, #8]
 8010ed2:	1c5d      	adds	r5, r3, #1
 8010ed4:	2331      	movs	r3, #49	; 0x31
 8010ed6:	7013      	strb	r3, [r2, #0]
 8010ed8:	f10b 0b01 	add.w	fp, fp, #1
 8010edc:	e245      	b.n	801136a <_dtoa_r+0x92a>
 8010ede:	07f2      	lsls	r2, r6, #31
 8010ee0:	d505      	bpl.n	8010eee <_dtoa_r+0x4ae>
 8010ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ee6:	f7ef fbb3 	bl	8000650 <__aeabi_dmul>
 8010eea:	3501      	adds	r5, #1
 8010eec:	2301      	movs	r3, #1
 8010eee:	1076      	asrs	r6, r6, #1
 8010ef0:	3708      	adds	r7, #8
 8010ef2:	e775      	b.n	8010de0 <_dtoa_r+0x3a0>
 8010ef4:	2502      	movs	r5, #2
 8010ef6:	e777      	b.n	8010de8 <_dtoa_r+0x3a8>
 8010ef8:	465f      	mov	r7, fp
 8010efa:	9e03      	ldr	r6, [sp, #12]
 8010efc:	e794      	b.n	8010e28 <_dtoa_r+0x3e8>
 8010efe:	9a02      	ldr	r2, [sp, #8]
 8010f00:	4b4e      	ldr	r3, [pc, #312]	; (801103c <_dtoa_r+0x5fc>)
 8010f02:	4432      	add	r2, r6
 8010f04:	9213      	str	r2, [sp, #76]	; 0x4c
 8010f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f08:	1e71      	subs	r1, r6, #1
 8010f0a:	2a00      	cmp	r2, #0
 8010f0c:	d048      	beq.n	8010fa0 <_dtoa_r+0x560>
 8010f0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f16:	2000      	movs	r0, #0
 8010f18:	494e      	ldr	r1, [pc, #312]	; (8011054 <_dtoa_r+0x614>)
 8010f1a:	f7ef fcc3 	bl	80008a4 <__aeabi_ddiv>
 8010f1e:	4642      	mov	r2, r8
 8010f20:	464b      	mov	r3, r9
 8010f22:	f7ef f9e1 	bl	80002e8 <__aeabi_dsub>
 8010f26:	9d02      	ldr	r5, [sp, #8]
 8010f28:	4680      	mov	r8, r0
 8010f2a:	4689      	mov	r9, r1
 8010f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f30:	f7ef fe3e 	bl	8000bb0 <__aeabi_d2iz>
 8010f34:	4606      	mov	r6, r0
 8010f36:	f7ef fb25 	bl	8000584 <__aeabi_i2d>
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	460b      	mov	r3, r1
 8010f3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f42:	f7ef f9d1 	bl	80002e8 <__aeabi_dsub>
 8010f46:	3630      	adds	r6, #48	; 0x30
 8010f48:	f805 6b01 	strb.w	r6, [r5], #1
 8010f4c:	4642      	mov	r2, r8
 8010f4e:	464b      	mov	r3, r9
 8010f50:	e9cd 0100 	strd	r0, r1, [sp]
 8010f54:	f7ef fdee 	bl	8000b34 <__aeabi_dcmplt>
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d165      	bne.n	8011028 <_dtoa_r+0x5e8>
 8010f5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f60:	2000      	movs	r0, #0
 8010f62:	4938      	ldr	r1, [pc, #224]	; (8011044 <_dtoa_r+0x604>)
 8010f64:	f7ef f9c0 	bl	80002e8 <__aeabi_dsub>
 8010f68:	4642      	mov	r2, r8
 8010f6a:	464b      	mov	r3, r9
 8010f6c:	f7ef fde2 	bl	8000b34 <__aeabi_dcmplt>
 8010f70:	2800      	cmp	r0, #0
 8010f72:	f040 80ba 	bne.w	80110ea <_dtoa_r+0x6aa>
 8010f76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010f78:	429d      	cmp	r5, r3
 8010f7a:	f43f af7e 	beq.w	8010e7a <_dtoa_r+0x43a>
 8010f7e:	2200      	movs	r2, #0
 8010f80:	4b31      	ldr	r3, [pc, #196]	; (8011048 <_dtoa_r+0x608>)
 8010f82:	4640      	mov	r0, r8
 8010f84:	4649      	mov	r1, r9
 8010f86:	f7ef fb63 	bl	8000650 <__aeabi_dmul>
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	4680      	mov	r8, r0
 8010f8e:	4689      	mov	r9, r1
 8010f90:	4b2d      	ldr	r3, [pc, #180]	; (8011048 <_dtoa_r+0x608>)
 8010f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f96:	f7ef fb5b 	bl	8000650 <__aeabi_dmul>
 8010f9a:	e9cd 0100 	strd	r0, r1, [sp]
 8010f9e:	e7c5      	b.n	8010f2c <_dtoa_r+0x4ec>
 8010fa0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8010fa4:	4642      	mov	r2, r8
 8010fa6:	464b      	mov	r3, r9
 8010fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fac:	f7ef fb50 	bl	8000650 <__aeabi_dmul>
 8010fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010fb4:	9d02      	ldr	r5, [sp, #8]
 8010fb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fba:	f7ef fdf9 	bl	8000bb0 <__aeabi_d2iz>
 8010fbe:	4606      	mov	r6, r0
 8010fc0:	f7ef fae0 	bl	8000584 <__aeabi_i2d>
 8010fc4:	3630      	adds	r6, #48	; 0x30
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	460b      	mov	r3, r1
 8010fca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fce:	f7ef f98b 	bl	80002e8 <__aeabi_dsub>
 8010fd2:	f805 6b01 	strb.w	r6, [r5], #1
 8010fd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010fd8:	42ab      	cmp	r3, r5
 8010fda:	4680      	mov	r8, r0
 8010fdc:	4689      	mov	r9, r1
 8010fde:	f04f 0200 	mov.w	r2, #0
 8010fe2:	d125      	bne.n	8011030 <_dtoa_r+0x5f0>
 8010fe4:	4b1b      	ldr	r3, [pc, #108]	; (8011054 <_dtoa_r+0x614>)
 8010fe6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010fea:	f7ef f97f 	bl	80002ec <__adddf3>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	4640      	mov	r0, r8
 8010ff4:	4649      	mov	r1, r9
 8010ff6:	f7ef fdbb 	bl	8000b70 <__aeabi_dcmpgt>
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	d175      	bne.n	80110ea <_dtoa_r+0x6aa>
 8010ffe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011002:	2000      	movs	r0, #0
 8011004:	4913      	ldr	r1, [pc, #76]	; (8011054 <_dtoa_r+0x614>)
 8011006:	f7ef f96f 	bl	80002e8 <__aeabi_dsub>
 801100a:	4602      	mov	r2, r0
 801100c:	460b      	mov	r3, r1
 801100e:	4640      	mov	r0, r8
 8011010:	4649      	mov	r1, r9
 8011012:	f7ef fd8f 	bl	8000b34 <__aeabi_dcmplt>
 8011016:	2800      	cmp	r0, #0
 8011018:	f43f af2f 	beq.w	8010e7a <_dtoa_r+0x43a>
 801101c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011020:	2b30      	cmp	r3, #48	; 0x30
 8011022:	f105 32ff 	add.w	r2, r5, #4294967295
 8011026:	d001      	beq.n	801102c <_dtoa_r+0x5ec>
 8011028:	46bb      	mov	fp, r7
 801102a:	e04d      	b.n	80110c8 <_dtoa_r+0x688>
 801102c:	4615      	mov	r5, r2
 801102e:	e7f5      	b.n	801101c <_dtoa_r+0x5dc>
 8011030:	4b05      	ldr	r3, [pc, #20]	; (8011048 <_dtoa_r+0x608>)
 8011032:	f7ef fb0d 	bl	8000650 <__aeabi_dmul>
 8011036:	e9cd 0100 	strd	r0, r1, [sp]
 801103a:	e7bc      	b.n	8010fb6 <_dtoa_r+0x576>
 801103c:	080158d8 	.word	0x080158d8
 8011040:	080158b0 	.word	0x080158b0
 8011044:	3ff00000 	.word	0x3ff00000
 8011048:	40240000 	.word	0x40240000
 801104c:	401c0000 	.word	0x401c0000
 8011050:	40140000 	.word	0x40140000
 8011054:	3fe00000 	.word	0x3fe00000
 8011058:	e9dd 6700 	ldrd	r6, r7, [sp]
 801105c:	9d02      	ldr	r5, [sp, #8]
 801105e:	4642      	mov	r2, r8
 8011060:	464b      	mov	r3, r9
 8011062:	4630      	mov	r0, r6
 8011064:	4639      	mov	r1, r7
 8011066:	f7ef fc1d 	bl	80008a4 <__aeabi_ddiv>
 801106a:	f7ef fda1 	bl	8000bb0 <__aeabi_d2iz>
 801106e:	9000      	str	r0, [sp, #0]
 8011070:	f7ef fa88 	bl	8000584 <__aeabi_i2d>
 8011074:	4642      	mov	r2, r8
 8011076:	464b      	mov	r3, r9
 8011078:	f7ef faea 	bl	8000650 <__aeabi_dmul>
 801107c:	4602      	mov	r2, r0
 801107e:	460b      	mov	r3, r1
 8011080:	4630      	mov	r0, r6
 8011082:	4639      	mov	r1, r7
 8011084:	f7ef f930 	bl	80002e8 <__aeabi_dsub>
 8011088:	9e00      	ldr	r6, [sp, #0]
 801108a:	9f03      	ldr	r7, [sp, #12]
 801108c:	3630      	adds	r6, #48	; 0x30
 801108e:	f805 6b01 	strb.w	r6, [r5], #1
 8011092:	9e02      	ldr	r6, [sp, #8]
 8011094:	1bae      	subs	r6, r5, r6
 8011096:	42b7      	cmp	r7, r6
 8011098:	4602      	mov	r2, r0
 801109a:	460b      	mov	r3, r1
 801109c:	d138      	bne.n	8011110 <_dtoa_r+0x6d0>
 801109e:	f7ef f925 	bl	80002ec <__adddf3>
 80110a2:	4606      	mov	r6, r0
 80110a4:	460f      	mov	r7, r1
 80110a6:	4602      	mov	r2, r0
 80110a8:	460b      	mov	r3, r1
 80110aa:	4640      	mov	r0, r8
 80110ac:	4649      	mov	r1, r9
 80110ae:	f7ef fd41 	bl	8000b34 <__aeabi_dcmplt>
 80110b2:	b9c8      	cbnz	r0, 80110e8 <_dtoa_r+0x6a8>
 80110b4:	4632      	mov	r2, r6
 80110b6:	463b      	mov	r3, r7
 80110b8:	4640      	mov	r0, r8
 80110ba:	4649      	mov	r1, r9
 80110bc:	f7ef fd30 	bl	8000b20 <__aeabi_dcmpeq>
 80110c0:	b110      	cbz	r0, 80110c8 <_dtoa_r+0x688>
 80110c2:	9b00      	ldr	r3, [sp, #0]
 80110c4:	07db      	lsls	r3, r3, #31
 80110c6:	d40f      	bmi.n	80110e8 <_dtoa_r+0x6a8>
 80110c8:	4651      	mov	r1, sl
 80110ca:	4620      	mov	r0, r4
 80110cc:	f000 fce3 	bl	8011a96 <_Bfree>
 80110d0:	2300      	movs	r3, #0
 80110d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80110d4:	702b      	strb	r3, [r5, #0]
 80110d6:	f10b 0301 	add.w	r3, fp, #1
 80110da:	6013      	str	r3, [r2, #0]
 80110dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110de:	2b00      	cmp	r3, #0
 80110e0:	f43f acf8 	beq.w	8010ad4 <_dtoa_r+0x94>
 80110e4:	601d      	str	r5, [r3, #0]
 80110e6:	e4f5      	b.n	8010ad4 <_dtoa_r+0x94>
 80110e8:	465f      	mov	r7, fp
 80110ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80110ee:	2a39      	cmp	r2, #57	; 0x39
 80110f0:	f105 33ff 	add.w	r3, r5, #4294967295
 80110f4:	d106      	bne.n	8011104 <_dtoa_r+0x6c4>
 80110f6:	9a02      	ldr	r2, [sp, #8]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d107      	bne.n	801110c <_dtoa_r+0x6cc>
 80110fc:	2330      	movs	r3, #48	; 0x30
 80110fe:	7013      	strb	r3, [r2, #0]
 8011100:	3701      	adds	r7, #1
 8011102:	4613      	mov	r3, r2
 8011104:	781a      	ldrb	r2, [r3, #0]
 8011106:	3201      	adds	r2, #1
 8011108:	701a      	strb	r2, [r3, #0]
 801110a:	e78d      	b.n	8011028 <_dtoa_r+0x5e8>
 801110c:	461d      	mov	r5, r3
 801110e:	e7ec      	b.n	80110ea <_dtoa_r+0x6aa>
 8011110:	2200      	movs	r2, #0
 8011112:	4ba4      	ldr	r3, [pc, #656]	; (80113a4 <_dtoa_r+0x964>)
 8011114:	f7ef fa9c 	bl	8000650 <__aeabi_dmul>
 8011118:	2200      	movs	r2, #0
 801111a:	2300      	movs	r3, #0
 801111c:	4606      	mov	r6, r0
 801111e:	460f      	mov	r7, r1
 8011120:	f7ef fcfe 	bl	8000b20 <__aeabi_dcmpeq>
 8011124:	2800      	cmp	r0, #0
 8011126:	d09a      	beq.n	801105e <_dtoa_r+0x61e>
 8011128:	e7ce      	b.n	80110c8 <_dtoa_r+0x688>
 801112a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801112c:	2a00      	cmp	r2, #0
 801112e:	f000 80cd 	beq.w	80112cc <_dtoa_r+0x88c>
 8011132:	9a07      	ldr	r2, [sp, #28]
 8011134:	2a01      	cmp	r2, #1
 8011136:	f300 80af 	bgt.w	8011298 <_dtoa_r+0x858>
 801113a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801113c:	2a00      	cmp	r2, #0
 801113e:	f000 80a7 	beq.w	8011290 <_dtoa_r+0x850>
 8011142:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011146:	9e08      	ldr	r6, [sp, #32]
 8011148:	9d05      	ldr	r5, [sp, #20]
 801114a:	9a05      	ldr	r2, [sp, #20]
 801114c:	441a      	add	r2, r3
 801114e:	9205      	str	r2, [sp, #20]
 8011150:	9a06      	ldr	r2, [sp, #24]
 8011152:	2101      	movs	r1, #1
 8011154:	441a      	add	r2, r3
 8011156:	4620      	mov	r0, r4
 8011158:	9206      	str	r2, [sp, #24]
 801115a:	f000 fd3c 	bl	8011bd6 <__i2b>
 801115e:	4607      	mov	r7, r0
 8011160:	2d00      	cmp	r5, #0
 8011162:	dd0c      	ble.n	801117e <_dtoa_r+0x73e>
 8011164:	9b06      	ldr	r3, [sp, #24]
 8011166:	2b00      	cmp	r3, #0
 8011168:	dd09      	ble.n	801117e <_dtoa_r+0x73e>
 801116a:	42ab      	cmp	r3, r5
 801116c:	9a05      	ldr	r2, [sp, #20]
 801116e:	bfa8      	it	ge
 8011170:	462b      	movge	r3, r5
 8011172:	1ad2      	subs	r2, r2, r3
 8011174:	9205      	str	r2, [sp, #20]
 8011176:	9a06      	ldr	r2, [sp, #24]
 8011178:	1aed      	subs	r5, r5, r3
 801117a:	1ad3      	subs	r3, r2, r3
 801117c:	9306      	str	r3, [sp, #24]
 801117e:	9b08      	ldr	r3, [sp, #32]
 8011180:	b1f3      	cbz	r3, 80111c0 <_dtoa_r+0x780>
 8011182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011184:	2b00      	cmp	r3, #0
 8011186:	f000 80a5 	beq.w	80112d4 <_dtoa_r+0x894>
 801118a:	2e00      	cmp	r6, #0
 801118c:	dd10      	ble.n	80111b0 <_dtoa_r+0x770>
 801118e:	4639      	mov	r1, r7
 8011190:	4632      	mov	r2, r6
 8011192:	4620      	mov	r0, r4
 8011194:	f000 fdb6 	bl	8011d04 <__pow5mult>
 8011198:	4652      	mov	r2, sl
 801119a:	4601      	mov	r1, r0
 801119c:	4607      	mov	r7, r0
 801119e:	4620      	mov	r0, r4
 80111a0:	f000 fd22 	bl	8011be8 <__multiply>
 80111a4:	4651      	mov	r1, sl
 80111a6:	4680      	mov	r8, r0
 80111a8:	4620      	mov	r0, r4
 80111aa:	f000 fc74 	bl	8011a96 <_Bfree>
 80111ae:	46c2      	mov	sl, r8
 80111b0:	9b08      	ldr	r3, [sp, #32]
 80111b2:	1b9a      	subs	r2, r3, r6
 80111b4:	d004      	beq.n	80111c0 <_dtoa_r+0x780>
 80111b6:	4651      	mov	r1, sl
 80111b8:	4620      	mov	r0, r4
 80111ba:	f000 fda3 	bl	8011d04 <__pow5mult>
 80111be:	4682      	mov	sl, r0
 80111c0:	2101      	movs	r1, #1
 80111c2:	4620      	mov	r0, r4
 80111c4:	f000 fd07 	bl	8011bd6 <__i2b>
 80111c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	4606      	mov	r6, r0
 80111ce:	f340 8083 	ble.w	80112d8 <_dtoa_r+0x898>
 80111d2:	461a      	mov	r2, r3
 80111d4:	4601      	mov	r1, r0
 80111d6:	4620      	mov	r0, r4
 80111d8:	f000 fd94 	bl	8011d04 <__pow5mult>
 80111dc:	9b07      	ldr	r3, [sp, #28]
 80111de:	2b01      	cmp	r3, #1
 80111e0:	4606      	mov	r6, r0
 80111e2:	dd7c      	ble.n	80112de <_dtoa_r+0x89e>
 80111e4:	f04f 0800 	mov.w	r8, #0
 80111e8:	6933      	ldr	r3, [r6, #16]
 80111ea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80111ee:	6918      	ldr	r0, [r3, #16]
 80111f0:	f000 fca3 	bl	8011b3a <__hi0bits>
 80111f4:	f1c0 0020 	rsb	r0, r0, #32
 80111f8:	9b06      	ldr	r3, [sp, #24]
 80111fa:	4418      	add	r0, r3
 80111fc:	f010 001f 	ands.w	r0, r0, #31
 8011200:	f000 8096 	beq.w	8011330 <_dtoa_r+0x8f0>
 8011204:	f1c0 0320 	rsb	r3, r0, #32
 8011208:	2b04      	cmp	r3, #4
 801120a:	f340 8087 	ble.w	801131c <_dtoa_r+0x8dc>
 801120e:	9b05      	ldr	r3, [sp, #20]
 8011210:	f1c0 001c 	rsb	r0, r0, #28
 8011214:	4403      	add	r3, r0
 8011216:	9305      	str	r3, [sp, #20]
 8011218:	9b06      	ldr	r3, [sp, #24]
 801121a:	4405      	add	r5, r0
 801121c:	4403      	add	r3, r0
 801121e:	9306      	str	r3, [sp, #24]
 8011220:	9b05      	ldr	r3, [sp, #20]
 8011222:	2b00      	cmp	r3, #0
 8011224:	dd05      	ble.n	8011232 <_dtoa_r+0x7f2>
 8011226:	4651      	mov	r1, sl
 8011228:	461a      	mov	r2, r3
 801122a:	4620      	mov	r0, r4
 801122c:	f000 fdb8 	bl	8011da0 <__lshift>
 8011230:	4682      	mov	sl, r0
 8011232:	9b06      	ldr	r3, [sp, #24]
 8011234:	2b00      	cmp	r3, #0
 8011236:	dd05      	ble.n	8011244 <_dtoa_r+0x804>
 8011238:	4631      	mov	r1, r6
 801123a:	461a      	mov	r2, r3
 801123c:	4620      	mov	r0, r4
 801123e:	f000 fdaf 	bl	8011da0 <__lshift>
 8011242:	4606      	mov	r6, r0
 8011244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011246:	2b00      	cmp	r3, #0
 8011248:	d074      	beq.n	8011334 <_dtoa_r+0x8f4>
 801124a:	4631      	mov	r1, r6
 801124c:	4650      	mov	r0, sl
 801124e:	f000 fdf8 	bl	8011e42 <__mcmp>
 8011252:	2800      	cmp	r0, #0
 8011254:	da6e      	bge.n	8011334 <_dtoa_r+0x8f4>
 8011256:	2300      	movs	r3, #0
 8011258:	4651      	mov	r1, sl
 801125a:	220a      	movs	r2, #10
 801125c:	4620      	mov	r0, r4
 801125e:	f000 fc31 	bl	8011ac4 <__multadd>
 8011262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011264:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011268:	4682      	mov	sl, r0
 801126a:	2b00      	cmp	r3, #0
 801126c:	f000 81a8 	beq.w	80115c0 <_dtoa_r+0xb80>
 8011270:	2300      	movs	r3, #0
 8011272:	4639      	mov	r1, r7
 8011274:	220a      	movs	r2, #10
 8011276:	4620      	mov	r0, r4
 8011278:	f000 fc24 	bl	8011ac4 <__multadd>
 801127c:	9b04      	ldr	r3, [sp, #16]
 801127e:	2b00      	cmp	r3, #0
 8011280:	4607      	mov	r7, r0
 8011282:	f300 80c8 	bgt.w	8011416 <_dtoa_r+0x9d6>
 8011286:	9b07      	ldr	r3, [sp, #28]
 8011288:	2b02      	cmp	r3, #2
 801128a:	f340 80c4 	ble.w	8011416 <_dtoa_r+0x9d6>
 801128e:	e059      	b.n	8011344 <_dtoa_r+0x904>
 8011290:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011292:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011296:	e756      	b.n	8011146 <_dtoa_r+0x706>
 8011298:	9b03      	ldr	r3, [sp, #12]
 801129a:	1e5e      	subs	r6, r3, #1
 801129c:	9b08      	ldr	r3, [sp, #32]
 801129e:	42b3      	cmp	r3, r6
 80112a0:	bfbf      	itttt	lt
 80112a2:	9b08      	ldrlt	r3, [sp, #32]
 80112a4:	9608      	strlt	r6, [sp, #32]
 80112a6:	1af2      	sublt	r2, r6, r3
 80112a8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80112aa:	bfb6      	itet	lt
 80112ac:	189b      	addlt	r3, r3, r2
 80112ae:	1b9e      	subge	r6, r3, r6
 80112b0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80112b2:	9b03      	ldr	r3, [sp, #12]
 80112b4:	bfb8      	it	lt
 80112b6:	2600      	movlt	r6, #0
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	bfb9      	ittee	lt
 80112bc:	9b05      	ldrlt	r3, [sp, #20]
 80112be:	9a03      	ldrlt	r2, [sp, #12]
 80112c0:	9d05      	ldrge	r5, [sp, #20]
 80112c2:	9b03      	ldrge	r3, [sp, #12]
 80112c4:	bfbc      	itt	lt
 80112c6:	1a9d      	sublt	r5, r3, r2
 80112c8:	2300      	movlt	r3, #0
 80112ca:	e73e      	b.n	801114a <_dtoa_r+0x70a>
 80112cc:	9e08      	ldr	r6, [sp, #32]
 80112ce:	9d05      	ldr	r5, [sp, #20]
 80112d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80112d2:	e745      	b.n	8011160 <_dtoa_r+0x720>
 80112d4:	9a08      	ldr	r2, [sp, #32]
 80112d6:	e76e      	b.n	80111b6 <_dtoa_r+0x776>
 80112d8:	9b07      	ldr	r3, [sp, #28]
 80112da:	2b01      	cmp	r3, #1
 80112dc:	dc19      	bgt.n	8011312 <_dtoa_r+0x8d2>
 80112de:	9b00      	ldr	r3, [sp, #0]
 80112e0:	b9bb      	cbnz	r3, 8011312 <_dtoa_r+0x8d2>
 80112e2:	9b01      	ldr	r3, [sp, #4]
 80112e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80112e8:	b99b      	cbnz	r3, 8011312 <_dtoa_r+0x8d2>
 80112ea:	9b01      	ldr	r3, [sp, #4]
 80112ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80112f0:	0d1b      	lsrs	r3, r3, #20
 80112f2:	051b      	lsls	r3, r3, #20
 80112f4:	b183      	cbz	r3, 8011318 <_dtoa_r+0x8d8>
 80112f6:	9b05      	ldr	r3, [sp, #20]
 80112f8:	3301      	adds	r3, #1
 80112fa:	9305      	str	r3, [sp, #20]
 80112fc:	9b06      	ldr	r3, [sp, #24]
 80112fe:	3301      	adds	r3, #1
 8011300:	9306      	str	r3, [sp, #24]
 8011302:	f04f 0801 	mov.w	r8, #1
 8011306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011308:	2b00      	cmp	r3, #0
 801130a:	f47f af6d 	bne.w	80111e8 <_dtoa_r+0x7a8>
 801130e:	2001      	movs	r0, #1
 8011310:	e772      	b.n	80111f8 <_dtoa_r+0x7b8>
 8011312:	f04f 0800 	mov.w	r8, #0
 8011316:	e7f6      	b.n	8011306 <_dtoa_r+0x8c6>
 8011318:	4698      	mov	r8, r3
 801131a:	e7f4      	b.n	8011306 <_dtoa_r+0x8c6>
 801131c:	d080      	beq.n	8011220 <_dtoa_r+0x7e0>
 801131e:	9a05      	ldr	r2, [sp, #20]
 8011320:	331c      	adds	r3, #28
 8011322:	441a      	add	r2, r3
 8011324:	9205      	str	r2, [sp, #20]
 8011326:	9a06      	ldr	r2, [sp, #24]
 8011328:	441a      	add	r2, r3
 801132a:	441d      	add	r5, r3
 801132c:	4613      	mov	r3, r2
 801132e:	e776      	b.n	801121e <_dtoa_r+0x7de>
 8011330:	4603      	mov	r3, r0
 8011332:	e7f4      	b.n	801131e <_dtoa_r+0x8de>
 8011334:	9b03      	ldr	r3, [sp, #12]
 8011336:	2b00      	cmp	r3, #0
 8011338:	dc36      	bgt.n	80113a8 <_dtoa_r+0x968>
 801133a:	9b07      	ldr	r3, [sp, #28]
 801133c:	2b02      	cmp	r3, #2
 801133e:	dd33      	ble.n	80113a8 <_dtoa_r+0x968>
 8011340:	9b03      	ldr	r3, [sp, #12]
 8011342:	9304      	str	r3, [sp, #16]
 8011344:	9b04      	ldr	r3, [sp, #16]
 8011346:	b963      	cbnz	r3, 8011362 <_dtoa_r+0x922>
 8011348:	4631      	mov	r1, r6
 801134a:	2205      	movs	r2, #5
 801134c:	4620      	mov	r0, r4
 801134e:	f000 fbb9 	bl	8011ac4 <__multadd>
 8011352:	4601      	mov	r1, r0
 8011354:	4606      	mov	r6, r0
 8011356:	4650      	mov	r0, sl
 8011358:	f000 fd73 	bl	8011e42 <__mcmp>
 801135c:	2800      	cmp	r0, #0
 801135e:	f73f adb6 	bgt.w	8010ece <_dtoa_r+0x48e>
 8011362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011364:	9d02      	ldr	r5, [sp, #8]
 8011366:	ea6f 0b03 	mvn.w	fp, r3
 801136a:	2300      	movs	r3, #0
 801136c:	9303      	str	r3, [sp, #12]
 801136e:	4631      	mov	r1, r6
 8011370:	4620      	mov	r0, r4
 8011372:	f000 fb90 	bl	8011a96 <_Bfree>
 8011376:	2f00      	cmp	r7, #0
 8011378:	f43f aea6 	beq.w	80110c8 <_dtoa_r+0x688>
 801137c:	9b03      	ldr	r3, [sp, #12]
 801137e:	b12b      	cbz	r3, 801138c <_dtoa_r+0x94c>
 8011380:	42bb      	cmp	r3, r7
 8011382:	d003      	beq.n	801138c <_dtoa_r+0x94c>
 8011384:	4619      	mov	r1, r3
 8011386:	4620      	mov	r0, r4
 8011388:	f000 fb85 	bl	8011a96 <_Bfree>
 801138c:	4639      	mov	r1, r7
 801138e:	4620      	mov	r0, r4
 8011390:	f000 fb81 	bl	8011a96 <_Bfree>
 8011394:	e698      	b.n	80110c8 <_dtoa_r+0x688>
 8011396:	2600      	movs	r6, #0
 8011398:	4637      	mov	r7, r6
 801139a:	e7e2      	b.n	8011362 <_dtoa_r+0x922>
 801139c:	46bb      	mov	fp, r7
 801139e:	4637      	mov	r7, r6
 80113a0:	e595      	b.n	8010ece <_dtoa_r+0x48e>
 80113a2:	bf00      	nop
 80113a4:	40240000 	.word	0x40240000
 80113a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113aa:	bb93      	cbnz	r3, 8011412 <_dtoa_r+0x9d2>
 80113ac:	9b03      	ldr	r3, [sp, #12]
 80113ae:	9304      	str	r3, [sp, #16]
 80113b0:	9d02      	ldr	r5, [sp, #8]
 80113b2:	4631      	mov	r1, r6
 80113b4:	4650      	mov	r0, sl
 80113b6:	f7ff fab7 	bl	8010928 <quorem>
 80113ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80113be:	f805 9b01 	strb.w	r9, [r5], #1
 80113c2:	9b02      	ldr	r3, [sp, #8]
 80113c4:	9a04      	ldr	r2, [sp, #16]
 80113c6:	1aeb      	subs	r3, r5, r3
 80113c8:	429a      	cmp	r2, r3
 80113ca:	f300 80dc 	bgt.w	8011586 <_dtoa_r+0xb46>
 80113ce:	9b02      	ldr	r3, [sp, #8]
 80113d0:	2a01      	cmp	r2, #1
 80113d2:	bfac      	ite	ge
 80113d4:	189b      	addge	r3, r3, r2
 80113d6:	3301      	addlt	r3, #1
 80113d8:	4698      	mov	r8, r3
 80113da:	2300      	movs	r3, #0
 80113dc:	9303      	str	r3, [sp, #12]
 80113de:	4651      	mov	r1, sl
 80113e0:	2201      	movs	r2, #1
 80113e2:	4620      	mov	r0, r4
 80113e4:	f000 fcdc 	bl	8011da0 <__lshift>
 80113e8:	4631      	mov	r1, r6
 80113ea:	4682      	mov	sl, r0
 80113ec:	f000 fd29 	bl	8011e42 <__mcmp>
 80113f0:	2800      	cmp	r0, #0
 80113f2:	f300 808d 	bgt.w	8011510 <_dtoa_r+0xad0>
 80113f6:	d103      	bne.n	8011400 <_dtoa_r+0x9c0>
 80113f8:	f019 0f01 	tst.w	r9, #1
 80113fc:	f040 8088 	bne.w	8011510 <_dtoa_r+0xad0>
 8011400:	4645      	mov	r5, r8
 8011402:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011406:	2b30      	cmp	r3, #48	; 0x30
 8011408:	f105 32ff 	add.w	r2, r5, #4294967295
 801140c:	d1af      	bne.n	801136e <_dtoa_r+0x92e>
 801140e:	4615      	mov	r5, r2
 8011410:	e7f7      	b.n	8011402 <_dtoa_r+0x9c2>
 8011412:	9b03      	ldr	r3, [sp, #12]
 8011414:	9304      	str	r3, [sp, #16]
 8011416:	2d00      	cmp	r5, #0
 8011418:	dd05      	ble.n	8011426 <_dtoa_r+0x9e6>
 801141a:	4639      	mov	r1, r7
 801141c:	462a      	mov	r2, r5
 801141e:	4620      	mov	r0, r4
 8011420:	f000 fcbe 	bl	8011da0 <__lshift>
 8011424:	4607      	mov	r7, r0
 8011426:	f1b8 0f00 	cmp.w	r8, #0
 801142a:	d04c      	beq.n	80114c6 <_dtoa_r+0xa86>
 801142c:	6879      	ldr	r1, [r7, #4]
 801142e:	4620      	mov	r0, r4
 8011430:	f000 fafd 	bl	8011a2e <_Balloc>
 8011434:	693a      	ldr	r2, [r7, #16]
 8011436:	3202      	adds	r2, #2
 8011438:	4605      	mov	r5, r0
 801143a:	0092      	lsls	r2, r2, #2
 801143c:	f107 010c 	add.w	r1, r7, #12
 8011440:	300c      	adds	r0, #12
 8011442:	f000 fae7 	bl	8011a14 <memcpy>
 8011446:	2201      	movs	r2, #1
 8011448:	4629      	mov	r1, r5
 801144a:	4620      	mov	r0, r4
 801144c:	f000 fca8 	bl	8011da0 <__lshift>
 8011450:	9b00      	ldr	r3, [sp, #0]
 8011452:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011456:	9703      	str	r7, [sp, #12]
 8011458:	f003 0301 	and.w	r3, r3, #1
 801145c:	4607      	mov	r7, r0
 801145e:	9305      	str	r3, [sp, #20]
 8011460:	4631      	mov	r1, r6
 8011462:	4650      	mov	r0, sl
 8011464:	f7ff fa60 	bl	8010928 <quorem>
 8011468:	9903      	ldr	r1, [sp, #12]
 801146a:	4605      	mov	r5, r0
 801146c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011470:	4650      	mov	r0, sl
 8011472:	f000 fce6 	bl	8011e42 <__mcmp>
 8011476:	463a      	mov	r2, r7
 8011478:	9000      	str	r0, [sp, #0]
 801147a:	4631      	mov	r1, r6
 801147c:	4620      	mov	r0, r4
 801147e:	f000 fcfa 	bl	8011e76 <__mdiff>
 8011482:	68c3      	ldr	r3, [r0, #12]
 8011484:	4602      	mov	r2, r0
 8011486:	bb03      	cbnz	r3, 80114ca <_dtoa_r+0xa8a>
 8011488:	4601      	mov	r1, r0
 801148a:	9006      	str	r0, [sp, #24]
 801148c:	4650      	mov	r0, sl
 801148e:	f000 fcd8 	bl	8011e42 <__mcmp>
 8011492:	9a06      	ldr	r2, [sp, #24]
 8011494:	4603      	mov	r3, r0
 8011496:	4611      	mov	r1, r2
 8011498:	4620      	mov	r0, r4
 801149a:	9306      	str	r3, [sp, #24]
 801149c:	f000 fafb 	bl	8011a96 <_Bfree>
 80114a0:	9b06      	ldr	r3, [sp, #24]
 80114a2:	b9a3      	cbnz	r3, 80114ce <_dtoa_r+0xa8e>
 80114a4:	9a07      	ldr	r2, [sp, #28]
 80114a6:	b992      	cbnz	r2, 80114ce <_dtoa_r+0xa8e>
 80114a8:	9a05      	ldr	r2, [sp, #20]
 80114aa:	b982      	cbnz	r2, 80114ce <_dtoa_r+0xa8e>
 80114ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80114b0:	d029      	beq.n	8011506 <_dtoa_r+0xac6>
 80114b2:	9b00      	ldr	r3, [sp, #0]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	dd01      	ble.n	80114bc <_dtoa_r+0xa7c>
 80114b8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80114bc:	f108 0501 	add.w	r5, r8, #1
 80114c0:	f888 9000 	strb.w	r9, [r8]
 80114c4:	e753      	b.n	801136e <_dtoa_r+0x92e>
 80114c6:	4638      	mov	r0, r7
 80114c8:	e7c2      	b.n	8011450 <_dtoa_r+0xa10>
 80114ca:	2301      	movs	r3, #1
 80114cc:	e7e3      	b.n	8011496 <_dtoa_r+0xa56>
 80114ce:	9a00      	ldr	r2, [sp, #0]
 80114d0:	2a00      	cmp	r2, #0
 80114d2:	db04      	blt.n	80114de <_dtoa_r+0xa9e>
 80114d4:	d125      	bne.n	8011522 <_dtoa_r+0xae2>
 80114d6:	9a07      	ldr	r2, [sp, #28]
 80114d8:	bb1a      	cbnz	r2, 8011522 <_dtoa_r+0xae2>
 80114da:	9a05      	ldr	r2, [sp, #20]
 80114dc:	bb0a      	cbnz	r2, 8011522 <_dtoa_r+0xae2>
 80114de:	2b00      	cmp	r3, #0
 80114e0:	ddec      	ble.n	80114bc <_dtoa_r+0xa7c>
 80114e2:	4651      	mov	r1, sl
 80114e4:	2201      	movs	r2, #1
 80114e6:	4620      	mov	r0, r4
 80114e8:	f000 fc5a 	bl	8011da0 <__lshift>
 80114ec:	4631      	mov	r1, r6
 80114ee:	4682      	mov	sl, r0
 80114f0:	f000 fca7 	bl	8011e42 <__mcmp>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	dc03      	bgt.n	8011500 <_dtoa_r+0xac0>
 80114f8:	d1e0      	bne.n	80114bc <_dtoa_r+0xa7c>
 80114fa:	f019 0f01 	tst.w	r9, #1
 80114fe:	d0dd      	beq.n	80114bc <_dtoa_r+0xa7c>
 8011500:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011504:	d1d8      	bne.n	80114b8 <_dtoa_r+0xa78>
 8011506:	2339      	movs	r3, #57	; 0x39
 8011508:	f888 3000 	strb.w	r3, [r8]
 801150c:	f108 0801 	add.w	r8, r8, #1
 8011510:	4645      	mov	r5, r8
 8011512:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011516:	2b39      	cmp	r3, #57	; 0x39
 8011518:	f105 32ff 	add.w	r2, r5, #4294967295
 801151c:	d03b      	beq.n	8011596 <_dtoa_r+0xb56>
 801151e:	3301      	adds	r3, #1
 8011520:	e040      	b.n	80115a4 <_dtoa_r+0xb64>
 8011522:	2b00      	cmp	r3, #0
 8011524:	f108 0501 	add.w	r5, r8, #1
 8011528:	dd05      	ble.n	8011536 <_dtoa_r+0xaf6>
 801152a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801152e:	d0ea      	beq.n	8011506 <_dtoa_r+0xac6>
 8011530:	f109 0901 	add.w	r9, r9, #1
 8011534:	e7c4      	b.n	80114c0 <_dtoa_r+0xa80>
 8011536:	9b02      	ldr	r3, [sp, #8]
 8011538:	9a04      	ldr	r2, [sp, #16]
 801153a:	f805 9c01 	strb.w	r9, [r5, #-1]
 801153e:	1aeb      	subs	r3, r5, r3
 8011540:	4293      	cmp	r3, r2
 8011542:	46a8      	mov	r8, r5
 8011544:	f43f af4b 	beq.w	80113de <_dtoa_r+0x99e>
 8011548:	4651      	mov	r1, sl
 801154a:	2300      	movs	r3, #0
 801154c:	220a      	movs	r2, #10
 801154e:	4620      	mov	r0, r4
 8011550:	f000 fab8 	bl	8011ac4 <__multadd>
 8011554:	9b03      	ldr	r3, [sp, #12]
 8011556:	9903      	ldr	r1, [sp, #12]
 8011558:	42bb      	cmp	r3, r7
 801155a:	4682      	mov	sl, r0
 801155c:	f04f 0300 	mov.w	r3, #0
 8011560:	f04f 020a 	mov.w	r2, #10
 8011564:	4620      	mov	r0, r4
 8011566:	d104      	bne.n	8011572 <_dtoa_r+0xb32>
 8011568:	f000 faac 	bl	8011ac4 <__multadd>
 801156c:	9003      	str	r0, [sp, #12]
 801156e:	4607      	mov	r7, r0
 8011570:	e776      	b.n	8011460 <_dtoa_r+0xa20>
 8011572:	f000 faa7 	bl	8011ac4 <__multadd>
 8011576:	2300      	movs	r3, #0
 8011578:	9003      	str	r0, [sp, #12]
 801157a:	220a      	movs	r2, #10
 801157c:	4639      	mov	r1, r7
 801157e:	4620      	mov	r0, r4
 8011580:	f000 faa0 	bl	8011ac4 <__multadd>
 8011584:	e7f3      	b.n	801156e <_dtoa_r+0xb2e>
 8011586:	4651      	mov	r1, sl
 8011588:	2300      	movs	r3, #0
 801158a:	220a      	movs	r2, #10
 801158c:	4620      	mov	r0, r4
 801158e:	f000 fa99 	bl	8011ac4 <__multadd>
 8011592:	4682      	mov	sl, r0
 8011594:	e70d      	b.n	80113b2 <_dtoa_r+0x972>
 8011596:	9b02      	ldr	r3, [sp, #8]
 8011598:	4293      	cmp	r3, r2
 801159a:	d105      	bne.n	80115a8 <_dtoa_r+0xb68>
 801159c:	9a02      	ldr	r2, [sp, #8]
 801159e:	f10b 0b01 	add.w	fp, fp, #1
 80115a2:	2331      	movs	r3, #49	; 0x31
 80115a4:	7013      	strb	r3, [r2, #0]
 80115a6:	e6e2      	b.n	801136e <_dtoa_r+0x92e>
 80115a8:	4615      	mov	r5, r2
 80115aa:	e7b2      	b.n	8011512 <_dtoa_r+0xad2>
 80115ac:	4b09      	ldr	r3, [pc, #36]	; (80115d4 <_dtoa_r+0xb94>)
 80115ae:	f7ff baae 	b.w	8010b0e <_dtoa_r+0xce>
 80115b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	f47f aa88 	bne.w	8010aca <_dtoa_r+0x8a>
 80115ba:	4b07      	ldr	r3, [pc, #28]	; (80115d8 <_dtoa_r+0xb98>)
 80115bc:	f7ff baa7 	b.w	8010b0e <_dtoa_r+0xce>
 80115c0:	9b04      	ldr	r3, [sp, #16]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f73f aef4 	bgt.w	80113b0 <_dtoa_r+0x970>
 80115c8:	9b07      	ldr	r3, [sp, #28]
 80115ca:	2b02      	cmp	r3, #2
 80115cc:	f77f aef0 	ble.w	80113b0 <_dtoa_r+0x970>
 80115d0:	e6b8      	b.n	8011344 <_dtoa_r+0x904>
 80115d2:	bf00      	nop
 80115d4:	0801571a 	.word	0x0801571a
 80115d8:	0801583f 	.word	0x0801583f

080115dc <__sflush_r>:
 80115dc:	898a      	ldrh	r2, [r1, #12]
 80115de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115e2:	4605      	mov	r5, r0
 80115e4:	0710      	lsls	r0, r2, #28
 80115e6:	460c      	mov	r4, r1
 80115e8:	d45a      	bmi.n	80116a0 <__sflush_r+0xc4>
 80115ea:	684b      	ldr	r3, [r1, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	dc05      	bgt.n	80115fc <__sflush_r+0x20>
 80115f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	dc02      	bgt.n	80115fc <__sflush_r+0x20>
 80115f6:	2000      	movs	r0, #0
 80115f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115fe:	2e00      	cmp	r6, #0
 8011600:	d0f9      	beq.n	80115f6 <__sflush_r+0x1a>
 8011602:	2300      	movs	r3, #0
 8011604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011608:	682f      	ldr	r7, [r5, #0]
 801160a:	602b      	str	r3, [r5, #0]
 801160c:	d033      	beq.n	8011676 <__sflush_r+0x9a>
 801160e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011610:	89a3      	ldrh	r3, [r4, #12]
 8011612:	075a      	lsls	r2, r3, #29
 8011614:	d505      	bpl.n	8011622 <__sflush_r+0x46>
 8011616:	6863      	ldr	r3, [r4, #4]
 8011618:	1ac0      	subs	r0, r0, r3
 801161a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801161c:	b10b      	cbz	r3, 8011622 <__sflush_r+0x46>
 801161e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011620:	1ac0      	subs	r0, r0, r3
 8011622:	2300      	movs	r3, #0
 8011624:	4602      	mov	r2, r0
 8011626:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011628:	6a21      	ldr	r1, [r4, #32]
 801162a:	4628      	mov	r0, r5
 801162c:	47b0      	blx	r6
 801162e:	1c43      	adds	r3, r0, #1
 8011630:	89a3      	ldrh	r3, [r4, #12]
 8011632:	d106      	bne.n	8011642 <__sflush_r+0x66>
 8011634:	6829      	ldr	r1, [r5, #0]
 8011636:	291d      	cmp	r1, #29
 8011638:	d84b      	bhi.n	80116d2 <__sflush_r+0xf6>
 801163a:	4a2b      	ldr	r2, [pc, #172]	; (80116e8 <__sflush_r+0x10c>)
 801163c:	40ca      	lsrs	r2, r1
 801163e:	07d6      	lsls	r6, r2, #31
 8011640:	d547      	bpl.n	80116d2 <__sflush_r+0xf6>
 8011642:	2200      	movs	r2, #0
 8011644:	6062      	str	r2, [r4, #4]
 8011646:	04d9      	lsls	r1, r3, #19
 8011648:	6922      	ldr	r2, [r4, #16]
 801164a:	6022      	str	r2, [r4, #0]
 801164c:	d504      	bpl.n	8011658 <__sflush_r+0x7c>
 801164e:	1c42      	adds	r2, r0, #1
 8011650:	d101      	bne.n	8011656 <__sflush_r+0x7a>
 8011652:	682b      	ldr	r3, [r5, #0]
 8011654:	b903      	cbnz	r3, 8011658 <__sflush_r+0x7c>
 8011656:	6560      	str	r0, [r4, #84]	; 0x54
 8011658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801165a:	602f      	str	r7, [r5, #0]
 801165c:	2900      	cmp	r1, #0
 801165e:	d0ca      	beq.n	80115f6 <__sflush_r+0x1a>
 8011660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011664:	4299      	cmp	r1, r3
 8011666:	d002      	beq.n	801166e <__sflush_r+0x92>
 8011668:	4628      	mov	r0, r5
 801166a:	f7fe f9ab 	bl	800f9c4 <_free_r>
 801166e:	2000      	movs	r0, #0
 8011670:	6360      	str	r0, [r4, #52]	; 0x34
 8011672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011676:	6a21      	ldr	r1, [r4, #32]
 8011678:	2301      	movs	r3, #1
 801167a:	4628      	mov	r0, r5
 801167c:	47b0      	blx	r6
 801167e:	1c41      	adds	r1, r0, #1
 8011680:	d1c6      	bne.n	8011610 <__sflush_r+0x34>
 8011682:	682b      	ldr	r3, [r5, #0]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d0c3      	beq.n	8011610 <__sflush_r+0x34>
 8011688:	2b1d      	cmp	r3, #29
 801168a:	d001      	beq.n	8011690 <__sflush_r+0xb4>
 801168c:	2b16      	cmp	r3, #22
 801168e:	d101      	bne.n	8011694 <__sflush_r+0xb8>
 8011690:	602f      	str	r7, [r5, #0]
 8011692:	e7b0      	b.n	80115f6 <__sflush_r+0x1a>
 8011694:	89a3      	ldrh	r3, [r4, #12]
 8011696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801169a:	81a3      	strh	r3, [r4, #12]
 801169c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116a0:	690f      	ldr	r7, [r1, #16]
 80116a2:	2f00      	cmp	r7, #0
 80116a4:	d0a7      	beq.n	80115f6 <__sflush_r+0x1a>
 80116a6:	0793      	lsls	r3, r2, #30
 80116a8:	680e      	ldr	r6, [r1, #0]
 80116aa:	bf08      	it	eq
 80116ac:	694b      	ldreq	r3, [r1, #20]
 80116ae:	600f      	str	r7, [r1, #0]
 80116b0:	bf18      	it	ne
 80116b2:	2300      	movne	r3, #0
 80116b4:	eba6 0807 	sub.w	r8, r6, r7
 80116b8:	608b      	str	r3, [r1, #8]
 80116ba:	f1b8 0f00 	cmp.w	r8, #0
 80116be:	dd9a      	ble.n	80115f6 <__sflush_r+0x1a>
 80116c0:	4643      	mov	r3, r8
 80116c2:	463a      	mov	r2, r7
 80116c4:	6a21      	ldr	r1, [r4, #32]
 80116c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80116c8:	4628      	mov	r0, r5
 80116ca:	47b0      	blx	r6
 80116cc:	2800      	cmp	r0, #0
 80116ce:	dc07      	bgt.n	80116e0 <__sflush_r+0x104>
 80116d0:	89a3      	ldrh	r3, [r4, #12]
 80116d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116d6:	81a3      	strh	r3, [r4, #12]
 80116d8:	f04f 30ff 	mov.w	r0, #4294967295
 80116dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116e0:	4407      	add	r7, r0
 80116e2:	eba8 0800 	sub.w	r8, r8, r0
 80116e6:	e7e8      	b.n	80116ba <__sflush_r+0xde>
 80116e8:	20400001 	.word	0x20400001

080116ec <_fflush_r>:
 80116ec:	b538      	push	{r3, r4, r5, lr}
 80116ee:	690b      	ldr	r3, [r1, #16]
 80116f0:	4605      	mov	r5, r0
 80116f2:	460c      	mov	r4, r1
 80116f4:	b1db      	cbz	r3, 801172e <_fflush_r+0x42>
 80116f6:	b118      	cbz	r0, 8011700 <_fflush_r+0x14>
 80116f8:	6983      	ldr	r3, [r0, #24]
 80116fa:	b90b      	cbnz	r3, 8011700 <_fflush_r+0x14>
 80116fc:	f000 f872 	bl	80117e4 <__sinit>
 8011700:	4b0c      	ldr	r3, [pc, #48]	; (8011734 <_fflush_r+0x48>)
 8011702:	429c      	cmp	r4, r3
 8011704:	d109      	bne.n	801171a <_fflush_r+0x2e>
 8011706:	686c      	ldr	r4, [r5, #4]
 8011708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801170c:	b17b      	cbz	r3, 801172e <_fflush_r+0x42>
 801170e:	4621      	mov	r1, r4
 8011710:	4628      	mov	r0, r5
 8011712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011716:	f7ff bf61 	b.w	80115dc <__sflush_r>
 801171a:	4b07      	ldr	r3, [pc, #28]	; (8011738 <_fflush_r+0x4c>)
 801171c:	429c      	cmp	r4, r3
 801171e:	d101      	bne.n	8011724 <_fflush_r+0x38>
 8011720:	68ac      	ldr	r4, [r5, #8]
 8011722:	e7f1      	b.n	8011708 <_fflush_r+0x1c>
 8011724:	4b05      	ldr	r3, [pc, #20]	; (801173c <_fflush_r+0x50>)
 8011726:	429c      	cmp	r4, r3
 8011728:	bf08      	it	eq
 801172a:	68ec      	ldreq	r4, [r5, #12]
 801172c:	e7ec      	b.n	8011708 <_fflush_r+0x1c>
 801172e:	2000      	movs	r0, #0
 8011730:	bd38      	pop	{r3, r4, r5, pc}
 8011732:	bf00      	nop
 8011734:	0801586c 	.word	0x0801586c
 8011738:	0801588c 	.word	0x0801588c
 801173c:	0801584c 	.word	0x0801584c

08011740 <fflush>:
 8011740:	4601      	mov	r1, r0
 8011742:	b920      	cbnz	r0, 801174e <fflush+0xe>
 8011744:	4b04      	ldr	r3, [pc, #16]	; (8011758 <fflush+0x18>)
 8011746:	4905      	ldr	r1, [pc, #20]	; (801175c <fflush+0x1c>)
 8011748:	6818      	ldr	r0, [r3, #0]
 801174a:	f000 b8d3 	b.w	80118f4 <_fwalk_reent>
 801174e:	4b04      	ldr	r3, [pc, #16]	; (8011760 <fflush+0x20>)
 8011750:	6818      	ldr	r0, [r3, #0]
 8011752:	f7ff bfcb 	b.w	80116ec <_fflush_r>
 8011756:	bf00      	nop
 8011758:	080156fc 	.word	0x080156fc
 801175c:	080116ed 	.word	0x080116ed
 8011760:	2000017c 	.word	0x2000017c

08011764 <_cleanup_r>:
 8011764:	4901      	ldr	r1, [pc, #4]	; (801176c <_cleanup_r+0x8>)
 8011766:	f000 b8c5 	b.w	80118f4 <_fwalk_reent>
 801176a:	bf00      	nop
 801176c:	080116ed 	.word	0x080116ed

08011770 <std.isra.0>:
 8011770:	2300      	movs	r3, #0
 8011772:	b510      	push	{r4, lr}
 8011774:	4604      	mov	r4, r0
 8011776:	6003      	str	r3, [r0, #0]
 8011778:	6043      	str	r3, [r0, #4]
 801177a:	6083      	str	r3, [r0, #8]
 801177c:	8181      	strh	r1, [r0, #12]
 801177e:	6643      	str	r3, [r0, #100]	; 0x64
 8011780:	81c2      	strh	r2, [r0, #14]
 8011782:	6103      	str	r3, [r0, #16]
 8011784:	6143      	str	r3, [r0, #20]
 8011786:	6183      	str	r3, [r0, #24]
 8011788:	4619      	mov	r1, r3
 801178a:	2208      	movs	r2, #8
 801178c:	305c      	adds	r0, #92	; 0x5c
 801178e:	f7fe f911 	bl	800f9b4 <memset>
 8011792:	4b05      	ldr	r3, [pc, #20]	; (80117a8 <std.isra.0+0x38>)
 8011794:	6263      	str	r3, [r4, #36]	; 0x24
 8011796:	4b05      	ldr	r3, [pc, #20]	; (80117ac <std.isra.0+0x3c>)
 8011798:	62a3      	str	r3, [r4, #40]	; 0x28
 801179a:	4b05      	ldr	r3, [pc, #20]	; (80117b0 <std.isra.0+0x40>)
 801179c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801179e:	4b05      	ldr	r3, [pc, #20]	; (80117b4 <std.isra.0+0x44>)
 80117a0:	6224      	str	r4, [r4, #32]
 80117a2:	6323      	str	r3, [r4, #48]	; 0x30
 80117a4:	bd10      	pop	{r4, pc}
 80117a6:	bf00      	nop
 80117a8:	08012681 	.word	0x08012681
 80117ac:	080126a3 	.word	0x080126a3
 80117b0:	080126db 	.word	0x080126db
 80117b4:	080126ff 	.word	0x080126ff

080117b8 <__sfmoreglue>:
 80117b8:	b570      	push	{r4, r5, r6, lr}
 80117ba:	1e4a      	subs	r2, r1, #1
 80117bc:	2568      	movs	r5, #104	; 0x68
 80117be:	4355      	muls	r5, r2
 80117c0:	460e      	mov	r6, r1
 80117c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80117c6:	f7fe f94b 	bl	800fa60 <_malloc_r>
 80117ca:	4604      	mov	r4, r0
 80117cc:	b140      	cbz	r0, 80117e0 <__sfmoreglue+0x28>
 80117ce:	2100      	movs	r1, #0
 80117d0:	e880 0042 	stmia.w	r0, {r1, r6}
 80117d4:	300c      	adds	r0, #12
 80117d6:	60a0      	str	r0, [r4, #8]
 80117d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80117dc:	f7fe f8ea 	bl	800f9b4 <memset>
 80117e0:	4620      	mov	r0, r4
 80117e2:	bd70      	pop	{r4, r5, r6, pc}

080117e4 <__sinit>:
 80117e4:	6983      	ldr	r3, [r0, #24]
 80117e6:	b510      	push	{r4, lr}
 80117e8:	4604      	mov	r4, r0
 80117ea:	bb33      	cbnz	r3, 801183a <__sinit+0x56>
 80117ec:	6483      	str	r3, [r0, #72]	; 0x48
 80117ee:	64c3      	str	r3, [r0, #76]	; 0x4c
 80117f0:	6503      	str	r3, [r0, #80]	; 0x50
 80117f2:	4b12      	ldr	r3, [pc, #72]	; (801183c <__sinit+0x58>)
 80117f4:	4a12      	ldr	r2, [pc, #72]	; (8011840 <__sinit+0x5c>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	6282      	str	r2, [r0, #40]	; 0x28
 80117fa:	4298      	cmp	r0, r3
 80117fc:	bf04      	itt	eq
 80117fe:	2301      	moveq	r3, #1
 8011800:	6183      	streq	r3, [r0, #24]
 8011802:	f000 f81f 	bl	8011844 <__sfp>
 8011806:	6060      	str	r0, [r4, #4]
 8011808:	4620      	mov	r0, r4
 801180a:	f000 f81b 	bl	8011844 <__sfp>
 801180e:	60a0      	str	r0, [r4, #8]
 8011810:	4620      	mov	r0, r4
 8011812:	f000 f817 	bl	8011844 <__sfp>
 8011816:	2200      	movs	r2, #0
 8011818:	60e0      	str	r0, [r4, #12]
 801181a:	2104      	movs	r1, #4
 801181c:	6860      	ldr	r0, [r4, #4]
 801181e:	f7ff ffa7 	bl	8011770 <std.isra.0>
 8011822:	2201      	movs	r2, #1
 8011824:	2109      	movs	r1, #9
 8011826:	68a0      	ldr	r0, [r4, #8]
 8011828:	f7ff ffa2 	bl	8011770 <std.isra.0>
 801182c:	2202      	movs	r2, #2
 801182e:	2112      	movs	r1, #18
 8011830:	68e0      	ldr	r0, [r4, #12]
 8011832:	f7ff ff9d 	bl	8011770 <std.isra.0>
 8011836:	2301      	movs	r3, #1
 8011838:	61a3      	str	r3, [r4, #24]
 801183a:	bd10      	pop	{r4, pc}
 801183c:	080156fc 	.word	0x080156fc
 8011840:	08011765 	.word	0x08011765

08011844 <__sfp>:
 8011844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011846:	4b1c      	ldr	r3, [pc, #112]	; (80118b8 <__sfp+0x74>)
 8011848:	681e      	ldr	r6, [r3, #0]
 801184a:	69b3      	ldr	r3, [r6, #24]
 801184c:	4607      	mov	r7, r0
 801184e:	b913      	cbnz	r3, 8011856 <__sfp+0x12>
 8011850:	4630      	mov	r0, r6
 8011852:	f7ff ffc7 	bl	80117e4 <__sinit>
 8011856:	3648      	adds	r6, #72	; 0x48
 8011858:	68b4      	ldr	r4, [r6, #8]
 801185a:	6873      	ldr	r3, [r6, #4]
 801185c:	3b01      	subs	r3, #1
 801185e:	d503      	bpl.n	8011868 <__sfp+0x24>
 8011860:	6833      	ldr	r3, [r6, #0]
 8011862:	b133      	cbz	r3, 8011872 <__sfp+0x2e>
 8011864:	6836      	ldr	r6, [r6, #0]
 8011866:	e7f7      	b.n	8011858 <__sfp+0x14>
 8011868:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801186c:	b16d      	cbz	r5, 801188a <__sfp+0x46>
 801186e:	3468      	adds	r4, #104	; 0x68
 8011870:	e7f4      	b.n	801185c <__sfp+0x18>
 8011872:	2104      	movs	r1, #4
 8011874:	4638      	mov	r0, r7
 8011876:	f7ff ff9f 	bl	80117b8 <__sfmoreglue>
 801187a:	6030      	str	r0, [r6, #0]
 801187c:	2800      	cmp	r0, #0
 801187e:	d1f1      	bne.n	8011864 <__sfp+0x20>
 8011880:	230c      	movs	r3, #12
 8011882:	603b      	str	r3, [r7, #0]
 8011884:	4604      	mov	r4, r0
 8011886:	4620      	mov	r0, r4
 8011888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801188a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801188e:	81e3      	strh	r3, [r4, #14]
 8011890:	2301      	movs	r3, #1
 8011892:	81a3      	strh	r3, [r4, #12]
 8011894:	6665      	str	r5, [r4, #100]	; 0x64
 8011896:	6025      	str	r5, [r4, #0]
 8011898:	60a5      	str	r5, [r4, #8]
 801189a:	6065      	str	r5, [r4, #4]
 801189c:	6125      	str	r5, [r4, #16]
 801189e:	6165      	str	r5, [r4, #20]
 80118a0:	61a5      	str	r5, [r4, #24]
 80118a2:	2208      	movs	r2, #8
 80118a4:	4629      	mov	r1, r5
 80118a6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80118aa:	f7fe f883 	bl	800f9b4 <memset>
 80118ae:	6365      	str	r5, [r4, #52]	; 0x34
 80118b0:	63a5      	str	r5, [r4, #56]	; 0x38
 80118b2:	64a5      	str	r5, [r4, #72]	; 0x48
 80118b4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80118b6:	e7e6      	b.n	8011886 <__sfp+0x42>
 80118b8:	080156fc 	.word	0x080156fc

080118bc <_fwalk>:
 80118bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118c0:	4688      	mov	r8, r1
 80118c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80118c6:	2600      	movs	r6, #0
 80118c8:	b914      	cbnz	r4, 80118d0 <_fwalk+0x14>
 80118ca:	4630      	mov	r0, r6
 80118cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118d0:	68a5      	ldr	r5, [r4, #8]
 80118d2:	6867      	ldr	r7, [r4, #4]
 80118d4:	3f01      	subs	r7, #1
 80118d6:	d501      	bpl.n	80118dc <_fwalk+0x20>
 80118d8:	6824      	ldr	r4, [r4, #0]
 80118da:	e7f5      	b.n	80118c8 <_fwalk+0xc>
 80118dc:	89ab      	ldrh	r3, [r5, #12]
 80118de:	2b01      	cmp	r3, #1
 80118e0:	d906      	bls.n	80118f0 <_fwalk+0x34>
 80118e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80118e6:	3301      	adds	r3, #1
 80118e8:	d002      	beq.n	80118f0 <_fwalk+0x34>
 80118ea:	4628      	mov	r0, r5
 80118ec:	47c0      	blx	r8
 80118ee:	4306      	orrs	r6, r0
 80118f0:	3568      	adds	r5, #104	; 0x68
 80118f2:	e7ef      	b.n	80118d4 <_fwalk+0x18>

080118f4 <_fwalk_reent>:
 80118f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118f8:	4680      	mov	r8, r0
 80118fa:	4689      	mov	r9, r1
 80118fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011900:	2600      	movs	r6, #0
 8011902:	b914      	cbnz	r4, 801190a <_fwalk_reent+0x16>
 8011904:	4630      	mov	r0, r6
 8011906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801190a:	68a5      	ldr	r5, [r4, #8]
 801190c:	6867      	ldr	r7, [r4, #4]
 801190e:	3f01      	subs	r7, #1
 8011910:	d501      	bpl.n	8011916 <_fwalk_reent+0x22>
 8011912:	6824      	ldr	r4, [r4, #0]
 8011914:	e7f5      	b.n	8011902 <_fwalk_reent+0xe>
 8011916:	89ab      	ldrh	r3, [r5, #12]
 8011918:	2b01      	cmp	r3, #1
 801191a:	d907      	bls.n	801192c <_fwalk_reent+0x38>
 801191c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011920:	3301      	adds	r3, #1
 8011922:	d003      	beq.n	801192c <_fwalk_reent+0x38>
 8011924:	4629      	mov	r1, r5
 8011926:	4640      	mov	r0, r8
 8011928:	47c8      	blx	r9
 801192a:	4306      	orrs	r6, r0
 801192c:	3568      	adds	r5, #104	; 0x68
 801192e:	e7ee      	b.n	801190e <_fwalk_reent+0x1a>

08011930 <_localeconv_r>:
 8011930:	4b04      	ldr	r3, [pc, #16]	; (8011944 <_localeconv_r+0x14>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	6a18      	ldr	r0, [r3, #32]
 8011936:	4b04      	ldr	r3, [pc, #16]	; (8011948 <_localeconv_r+0x18>)
 8011938:	2800      	cmp	r0, #0
 801193a:	bf08      	it	eq
 801193c:	4618      	moveq	r0, r3
 801193e:	30f0      	adds	r0, #240	; 0xf0
 8011940:	4770      	bx	lr
 8011942:	bf00      	nop
 8011944:	2000017c 	.word	0x2000017c
 8011948:	200001e0 	.word	0x200001e0

0801194c <__swhatbuf_r>:
 801194c:	b570      	push	{r4, r5, r6, lr}
 801194e:	460e      	mov	r6, r1
 8011950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011954:	2900      	cmp	r1, #0
 8011956:	b090      	sub	sp, #64	; 0x40
 8011958:	4614      	mov	r4, r2
 801195a:	461d      	mov	r5, r3
 801195c:	da07      	bge.n	801196e <__swhatbuf_r+0x22>
 801195e:	2300      	movs	r3, #0
 8011960:	602b      	str	r3, [r5, #0]
 8011962:	89b3      	ldrh	r3, [r6, #12]
 8011964:	061a      	lsls	r2, r3, #24
 8011966:	d410      	bmi.n	801198a <__swhatbuf_r+0x3e>
 8011968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801196c:	e00e      	b.n	801198c <__swhatbuf_r+0x40>
 801196e:	aa01      	add	r2, sp, #4
 8011970:	f000 feec 	bl	801274c <_fstat_r>
 8011974:	2800      	cmp	r0, #0
 8011976:	dbf2      	blt.n	801195e <__swhatbuf_r+0x12>
 8011978:	9a02      	ldr	r2, [sp, #8]
 801197a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801197e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011982:	425a      	negs	r2, r3
 8011984:	415a      	adcs	r2, r3
 8011986:	602a      	str	r2, [r5, #0]
 8011988:	e7ee      	b.n	8011968 <__swhatbuf_r+0x1c>
 801198a:	2340      	movs	r3, #64	; 0x40
 801198c:	2000      	movs	r0, #0
 801198e:	6023      	str	r3, [r4, #0]
 8011990:	b010      	add	sp, #64	; 0x40
 8011992:	bd70      	pop	{r4, r5, r6, pc}

08011994 <__smakebuf_r>:
 8011994:	898b      	ldrh	r3, [r1, #12]
 8011996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011998:	079d      	lsls	r5, r3, #30
 801199a:	4606      	mov	r6, r0
 801199c:	460c      	mov	r4, r1
 801199e:	d507      	bpl.n	80119b0 <__smakebuf_r+0x1c>
 80119a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80119a4:	6023      	str	r3, [r4, #0]
 80119a6:	6123      	str	r3, [r4, #16]
 80119a8:	2301      	movs	r3, #1
 80119aa:	6163      	str	r3, [r4, #20]
 80119ac:	b002      	add	sp, #8
 80119ae:	bd70      	pop	{r4, r5, r6, pc}
 80119b0:	ab01      	add	r3, sp, #4
 80119b2:	466a      	mov	r2, sp
 80119b4:	f7ff ffca 	bl	801194c <__swhatbuf_r>
 80119b8:	9900      	ldr	r1, [sp, #0]
 80119ba:	4605      	mov	r5, r0
 80119bc:	4630      	mov	r0, r6
 80119be:	f7fe f84f 	bl	800fa60 <_malloc_r>
 80119c2:	b948      	cbnz	r0, 80119d8 <__smakebuf_r+0x44>
 80119c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119c8:	059a      	lsls	r2, r3, #22
 80119ca:	d4ef      	bmi.n	80119ac <__smakebuf_r+0x18>
 80119cc:	f023 0303 	bic.w	r3, r3, #3
 80119d0:	f043 0302 	orr.w	r3, r3, #2
 80119d4:	81a3      	strh	r3, [r4, #12]
 80119d6:	e7e3      	b.n	80119a0 <__smakebuf_r+0xc>
 80119d8:	4b0d      	ldr	r3, [pc, #52]	; (8011a10 <__smakebuf_r+0x7c>)
 80119da:	62b3      	str	r3, [r6, #40]	; 0x28
 80119dc:	89a3      	ldrh	r3, [r4, #12]
 80119de:	6020      	str	r0, [r4, #0]
 80119e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119e4:	81a3      	strh	r3, [r4, #12]
 80119e6:	9b00      	ldr	r3, [sp, #0]
 80119e8:	6163      	str	r3, [r4, #20]
 80119ea:	9b01      	ldr	r3, [sp, #4]
 80119ec:	6120      	str	r0, [r4, #16]
 80119ee:	b15b      	cbz	r3, 8011a08 <__smakebuf_r+0x74>
 80119f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119f4:	4630      	mov	r0, r6
 80119f6:	f000 febb 	bl	8012770 <_isatty_r>
 80119fa:	b128      	cbz	r0, 8011a08 <__smakebuf_r+0x74>
 80119fc:	89a3      	ldrh	r3, [r4, #12]
 80119fe:	f023 0303 	bic.w	r3, r3, #3
 8011a02:	f043 0301 	orr.w	r3, r3, #1
 8011a06:	81a3      	strh	r3, [r4, #12]
 8011a08:	89a3      	ldrh	r3, [r4, #12]
 8011a0a:	431d      	orrs	r5, r3
 8011a0c:	81a5      	strh	r5, [r4, #12]
 8011a0e:	e7cd      	b.n	80119ac <__smakebuf_r+0x18>
 8011a10:	08011765 	.word	0x08011765

08011a14 <memcpy>:
 8011a14:	b510      	push	{r4, lr}
 8011a16:	1e43      	subs	r3, r0, #1
 8011a18:	440a      	add	r2, r1
 8011a1a:	4291      	cmp	r1, r2
 8011a1c:	d100      	bne.n	8011a20 <memcpy+0xc>
 8011a1e:	bd10      	pop	{r4, pc}
 8011a20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a28:	e7f7      	b.n	8011a1a <memcpy+0x6>

08011a2a <__malloc_lock>:
 8011a2a:	4770      	bx	lr

08011a2c <__malloc_unlock>:
 8011a2c:	4770      	bx	lr

08011a2e <_Balloc>:
 8011a2e:	b570      	push	{r4, r5, r6, lr}
 8011a30:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011a32:	4604      	mov	r4, r0
 8011a34:	460e      	mov	r6, r1
 8011a36:	b93d      	cbnz	r5, 8011a48 <_Balloc+0x1a>
 8011a38:	2010      	movs	r0, #16
 8011a3a:	f7fd ff99 	bl	800f970 <malloc>
 8011a3e:	6260      	str	r0, [r4, #36]	; 0x24
 8011a40:	6045      	str	r5, [r0, #4]
 8011a42:	6085      	str	r5, [r0, #8]
 8011a44:	6005      	str	r5, [r0, #0]
 8011a46:	60c5      	str	r5, [r0, #12]
 8011a48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011a4a:	68eb      	ldr	r3, [r5, #12]
 8011a4c:	b183      	cbz	r3, 8011a70 <_Balloc+0x42>
 8011a4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a50:	68db      	ldr	r3, [r3, #12]
 8011a52:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011a56:	b9b8      	cbnz	r0, 8011a88 <_Balloc+0x5a>
 8011a58:	2101      	movs	r1, #1
 8011a5a:	fa01 f506 	lsl.w	r5, r1, r6
 8011a5e:	1d6a      	adds	r2, r5, #5
 8011a60:	0092      	lsls	r2, r2, #2
 8011a62:	4620      	mov	r0, r4
 8011a64:	f000 fab4 	bl	8011fd0 <_calloc_r>
 8011a68:	b160      	cbz	r0, 8011a84 <_Balloc+0x56>
 8011a6a:	6046      	str	r6, [r0, #4]
 8011a6c:	6085      	str	r5, [r0, #8]
 8011a6e:	e00e      	b.n	8011a8e <_Balloc+0x60>
 8011a70:	2221      	movs	r2, #33	; 0x21
 8011a72:	2104      	movs	r1, #4
 8011a74:	4620      	mov	r0, r4
 8011a76:	f000 faab 	bl	8011fd0 <_calloc_r>
 8011a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a7c:	60e8      	str	r0, [r5, #12]
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d1e4      	bne.n	8011a4e <_Balloc+0x20>
 8011a84:	2000      	movs	r0, #0
 8011a86:	bd70      	pop	{r4, r5, r6, pc}
 8011a88:	6802      	ldr	r2, [r0, #0]
 8011a8a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011a8e:	2300      	movs	r3, #0
 8011a90:	6103      	str	r3, [r0, #16]
 8011a92:	60c3      	str	r3, [r0, #12]
 8011a94:	bd70      	pop	{r4, r5, r6, pc}

08011a96 <_Bfree>:
 8011a96:	b570      	push	{r4, r5, r6, lr}
 8011a98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011a9a:	4606      	mov	r6, r0
 8011a9c:	460d      	mov	r5, r1
 8011a9e:	b93c      	cbnz	r4, 8011ab0 <_Bfree+0x1a>
 8011aa0:	2010      	movs	r0, #16
 8011aa2:	f7fd ff65 	bl	800f970 <malloc>
 8011aa6:	6270      	str	r0, [r6, #36]	; 0x24
 8011aa8:	6044      	str	r4, [r0, #4]
 8011aaa:	6084      	str	r4, [r0, #8]
 8011aac:	6004      	str	r4, [r0, #0]
 8011aae:	60c4      	str	r4, [r0, #12]
 8011ab0:	b13d      	cbz	r5, 8011ac2 <_Bfree+0x2c>
 8011ab2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011ab4:	686a      	ldr	r2, [r5, #4]
 8011ab6:	68db      	ldr	r3, [r3, #12]
 8011ab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011abc:	6029      	str	r1, [r5, #0]
 8011abe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011ac2:	bd70      	pop	{r4, r5, r6, pc}

08011ac4 <__multadd>:
 8011ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac8:	690d      	ldr	r5, [r1, #16]
 8011aca:	461f      	mov	r7, r3
 8011acc:	4606      	mov	r6, r0
 8011ace:	460c      	mov	r4, r1
 8011ad0:	f101 0e14 	add.w	lr, r1, #20
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	f8de 0000 	ldr.w	r0, [lr]
 8011ada:	b281      	uxth	r1, r0
 8011adc:	fb02 7101 	mla	r1, r2, r1, r7
 8011ae0:	0c0f      	lsrs	r7, r1, #16
 8011ae2:	0c00      	lsrs	r0, r0, #16
 8011ae4:	fb02 7000 	mla	r0, r2, r0, r7
 8011ae8:	b289      	uxth	r1, r1
 8011aea:	3301      	adds	r3, #1
 8011aec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011af0:	429d      	cmp	r5, r3
 8011af2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011af6:	f84e 1b04 	str.w	r1, [lr], #4
 8011afa:	dcec      	bgt.n	8011ad6 <__multadd+0x12>
 8011afc:	b1d7      	cbz	r7, 8011b34 <__multadd+0x70>
 8011afe:	68a3      	ldr	r3, [r4, #8]
 8011b00:	429d      	cmp	r5, r3
 8011b02:	db12      	blt.n	8011b2a <__multadd+0x66>
 8011b04:	6861      	ldr	r1, [r4, #4]
 8011b06:	4630      	mov	r0, r6
 8011b08:	3101      	adds	r1, #1
 8011b0a:	f7ff ff90 	bl	8011a2e <_Balloc>
 8011b0e:	6922      	ldr	r2, [r4, #16]
 8011b10:	3202      	adds	r2, #2
 8011b12:	f104 010c 	add.w	r1, r4, #12
 8011b16:	4680      	mov	r8, r0
 8011b18:	0092      	lsls	r2, r2, #2
 8011b1a:	300c      	adds	r0, #12
 8011b1c:	f7ff ff7a 	bl	8011a14 <memcpy>
 8011b20:	4621      	mov	r1, r4
 8011b22:	4630      	mov	r0, r6
 8011b24:	f7ff ffb7 	bl	8011a96 <_Bfree>
 8011b28:	4644      	mov	r4, r8
 8011b2a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011b2e:	3501      	adds	r5, #1
 8011b30:	615f      	str	r7, [r3, #20]
 8011b32:	6125      	str	r5, [r4, #16]
 8011b34:	4620      	mov	r0, r4
 8011b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b3a <__hi0bits>:
 8011b3a:	0c02      	lsrs	r2, r0, #16
 8011b3c:	0412      	lsls	r2, r2, #16
 8011b3e:	4603      	mov	r3, r0
 8011b40:	b9b2      	cbnz	r2, 8011b70 <__hi0bits+0x36>
 8011b42:	0403      	lsls	r3, r0, #16
 8011b44:	2010      	movs	r0, #16
 8011b46:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011b4a:	bf04      	itt	eq
 8011b4c:	021b      	lsleq	r3, r3, #8
 8011b4e:	3008      	addeq	r0, #8
 8011b50:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011b54:	bf04      	itt	eq
 8011b56:	011b      	lsleq	r3, r3, #4
 8011b58:	3004      	addeq	r0, #4
 8011b5a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011b5e:	bf04      	itt	eq
 8011b60:	009b      	lsleq	r3, r3, #2
 8011b62:	3002      	addeq	r0, #2
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	db06      	blt.n	8011b76 <__hi0bits+0x3c>
 8011b68:	005b      	lsls	r3, r3, #1
 8011b6a:	d503      	bpl.n	8011b74 <__hi0bits+0x3a>
 8011b6c:	3001      	adds	r0, #1
 8011b6e:	4770      	bx	lr
 8011b70:	2000      	movs	r0, #0
 8011b72:	e7e8      	b.n	8011b46 <__hi0bits+0xc>
 8011b74:	2020      	movs	r0, #32
 8011b76:	4770      	bx	lr

08011b78 <__lo0bits>:
 8011b78:	6803      	ldr	r3, [r0, #0]
 8011b7a:	f013 0207 	ands.w	r2, r3, #7
 8011b7e:	4601      	mov	r1, r0
 8011b80:	d00b      	beq.n	8011b9a <__lo0bits+0x22>
 8011b82:	07da      	lsls	r2, r3, #31
 8011b84:	d423      	bmi.n	8011bce <__lo0bits+0x56>
 8011b86:	0798      	lsls	r0, r3, #30
 8011b88:	bf49      	itett	mi
 8011b8a:	085b      	lsrmi	r3, r3, #1
 8011b8c:	089b      	lsrpl	r3, r3, #2
 8011b8e:	2001      	movmi	r0, #1
 8011b90:	600b      	strmi	r3, [r1, #0]
 8011b92:	bf5c      	itt	pl
 8011b94:	600b      	strpl	r3, [r1, #0]
 8011b96:	2002      	movpl	r0, #2
 8011b98:	4770      	bx	lr
 8011b9a:	b298      	uxth	r0, r3
 8011b9c:	b9a8      	cbnz	r0, 8011bca <__lo0bits+0x52>
 8011b9e:	0c1b      	lsrs	r3, r3, #16
 8011ba0:	2010      	movs	r0, #16
 8011ba2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011ba6:	bf04      	itt	eq
 8011ba8:	0a1b      	lsreq	r3, r3, #8
 8011baa:	3008      	addeq	r0, #8
 8011bac:	071a      	lsls	r2, r3, #28
 8011bae:	bf04      	itt	eq
 8011bb0:	091b      	lsreq	r3, r3, #4
 8011bb2:	3004      	addeq	r0, #4
 8011bb4:	079a      	lsls	r2, r3, #30
 8011bb6:	bf04      	itt	eq
 8011bb8:	089b      	lsreq	r3, r3, #2
 8011bba:	3002      	addeq	r0, #2
 8011bbc:	07da      	lsls	r2, r3, #31
 8011bbe:	d402      	bmi.n	8011bc6 <__lo0bits+0x4e>
 8011bc0:	085b      	lsrs	r3, r3, #1
 8011bc2:	d006      	beq.n	8011bd2 <__lo0bits+0x5a>
 8011bc4:	3001      	adds	r0, #1
 8011bc6:	600b      	str	r3, [r1, #0]
 8011bc8:	4770      	bx	lr
 8011bca:	4610      	mov	r0, r2
 8011bcc:	e7e9      	b.n	8011ba2 <__lo0bits+0x2a>
 8011bce:	2000      	movs	r0, #0
 8011bd0:	4770      	bx	lr
 8011bd2:	2020      	movs	r0, #32
 8011bd4:	4770      	bx	lr

08011bd6 <__i2b>:
 8011bd6:	b510      	push	{r4, lr}
 8011bd8:	460c      	mov	r4, r1
 8011bda:	2101      	movs	r1, #1
 8011bdc:	f7ff ff27 	bl	8011a2e <_Balloc>
 8011be0:	2201      	movs	r2, #1
 8011be2:	6144      	str	r4, [r0, #20]
 8011be4:	6102      	str	r2, [r0, #16]
 8011be6:	bd10      	pop	{r4, pc}

08011be8 <__multiply>:
 8011be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bec:	4614      	mov	r4, r2
 8011bee:	690a      	ldr	r2, [r1, #16]
 8011bf0:	6923      	ldr	r3, [r4, #16]
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	bfb8      	it	lt
 8011bf6:	460b      	movlt	r3, r1
 8011bf8:	4689      	mov	r9, r1
 8011bfa:	bfbc      	itt	lt
 8011bfc:	46a1      	movlt	r9, r4
 8011bfe:	461c      	movlt	r4, r3
 8011c00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011c04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011c08:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011c0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011c10:	eb07 060a 	add.w	r6, r7, sl
 8011c14:	429e      	cmp	r6, r3
 8011c16:	bfc8      	it	gt
 8011c18:	3101      	addgt	r1, #1
 8011c1a:	f7ff ff08 	bl	8011a2e <_Balloc>
 8011c1e:	f100 0514 	add.w	r5, r0, #20
 8011c22:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011c26:	462b      	mov	r3, r5
 8011c28:	2200      	movs	r2, #0
 8011c2a:	4543      	cmp	r3, r8
 8011c2c:	d316      	bcc.n	8011c5c <__multiply+0x74>
 8011c2e:	f104 0214 	add.w	r2, r4, #20
 8011c32:	f109 0114 	add.w	r1, r9, #20
 8011c36:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8011c3a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011c3e:	9301      	str	r3, [sp, #4]
 8011c40:	9c01      	ldr	r4, [sp, #4]
 8011c42:	4294      	cmp	r4, r2
 8011c44:	4613      	mov	r3, r2
 8011c46:	d80c      	bhi.n	8011c62 <__multiply+0x7a>
 8011c48:	2e00      	cmp	r6, #0
 8011c4a:	dd03      	ble.n	8011c54 <__multiply+0x6c>
 8011c4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d054      	beq.n	8011cfe <__multiply+0x116>
 8011c54:	6106      	str	r6, [r0, #16]
 8011c56:	b003      	add	sp, #12
 8011c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c5c:	f843 2b04 	str.w	r2, [r3], #4
 8011c60:	e7e3      	b.n	8011c2a <__multiply+0x42>
 8011c62:	f8b3 a000 	ldrh.w	sl, [r3]
 8011c66:	3204      	adds	r2, #4
 8011c68:	f1ba 0f00 	cmp.w	sl, #0
 8011c6c:	d020      	beq.n	8011cb0 <__multiply+0xc8>
 8011c6e:	46ae      	mov	lr, r5
 8011c70:	4689      	mov	r9, r1
 8011c72:	f04f 0c00 	mov.w	ip, #0
 8011c76:	f859 4b04 	ldr.w	r4, [r9], #4
 8011c7a:	f8be b000 	ldrh.w	fp, [lr]
 8011c7e:	b2a3      	uxth	r3, r4
 8011c80:	fb0a b303 	mla	r3, sl, r3, fp
 8011c84:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8011c88:	f8de 4000 	ldr.w	r4, [lr]
 8011c8c:	4463      	add	r3, ip
 8011c8e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8011c92:	fb0a c40b 	mla	r4, sl, fp, ip
 8011c96:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011c9a:	b29b      	uxth	r3, r3
 8011c9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011ca0:	454f      	cmp	r7, r9
 8011ca2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8011ca6:	f84e 3b04 	str.w	r3, [lr], #4
 8011caa:	d8e4      	bhi.n	8011c76 <__multiply+0x8e>
 8011cac:	f8ce c000 	str.w	ip, [lr]
 8011cb0:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8011cb4:	f1b9 0f00 	cmp.w	r9, #0
 8011cb8:	d01f      	beq.n	8011cfa <__multiply+0x112>
 8011cba:	682b      	ldr	r3, [r5, #0]
 8011cbc:	46ae      	mov	lr, r5
 8011cbe:	468c      	mov	ip, r1
 8011cc0:	f04f 0a00 	mov.w	sl, #0
 8011cc4:	f8bc 4000 	ldrh.w	r4, [ip]
 8011cc8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011ccc:	fb09 b404 	mla	r4, r9, r4, fp
 8011cd0:	44a2      	add	sl, r4
 8011cd2:	b29b      	uxth	r3, r3
 8011cd4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8011cd8:	f84e 3b04 	str.w	r3, [lr], #4
 8011cdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011ce0:	f8be 4000 	ldrh.w	r4, [lr]
 8011ce4:	0c1b      	lsrs	r3, r3, #16
 8011ce6:	fb09 4303 	mla	r3, r9, r3, r4
 8011cea:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8011cee:	4567      	cmp	r7, ip
 8011cf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011cf4:	d8e6      	bhi.n	8011cc4 <__multiply+0xdc>
 8011cf6:	f8ce 3000 	str.w	r3, [lr]
 8011cfa:	3504      	adds	r5, #4
 8011cfc:	e7a0      	b.n	8011c40 <__multiply+0x58>
 8011cfe:	3e01      	subs	r6, #1
 8011d00:	e7a2      	b.n	8011c48 <__multiply+0x60>
	...

08011d04 <__pow5mult>:
 8011d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d08:	4615      	mov	r5, r2
 8011d0a:	f012 0203 	ands.w	r2, r2, #3
 8011d0e:	4606      	mov	r6, r0
 8011d10:	460f      	mov	r7, r1
 8011d12:	d007      	beq.n	8011d24 <__pow5mult+0x20>
 8011d14:	3a01      	subs	r2, #1
 8011d16:	4c21      	ldr	r4, [pc, #132]	; (8011d9c <__pow5mult+0x98>)
 8011d18:	2300      	movs	r3, #0
 8011d1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d1e:	f7ff fed1 	bl	8011ac4 <__multadd>
 8011d22:	4607      	mov	r7, r0
 8011d24:	10ad      	asrs	r5, r5, #2
 8011d26:	d035      	beq.n	8011d94 <__pow5mult+0x90>
 8011d28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011d2a:	b93c      	cbnz	r4, 8011d3c <__pow5mult+0x38>
 8011d2c:	2010      	movs	r0, #16
 8011d2e:	f7fd fe1f 	bl	800f970 <malloc>
 8011d32:	6270      	str	r0, [r6, #36]	; 0x24
 8011d34:	6044      	str	r4, [r0, #4]
 8011d36:	6084      	str	r4, [r0, #8]
 8011d38:	6004      	str	r4, [r0, #0]
 8011d3a:	60c4      	str	r4, [r0, #12]
 8011d3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011d40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011d44:	b94c      	cbnz	r4, 8011d5a <__pow5mult+0x56>
 8011d46:	f240 2171 	movw	r1, #625	; 0x271
 8011d4a:	4630      	mov	r0, r6
 8011d4c:	f7ff ff43 	bl	8011bd6 <__i2b>
 8011d50:	2300      	movs	r3, #0
 8011d52:	f8c8 0008 	str.w	r0, [r8, #8]
 8011d56:	4604      	mov	r4, r0
 8011d58:	6003      	str	r3, [r0, #0]
 8011d5a:	f04f 0800 	mov.w	r8, #0
 8011d5e:	07eb      	lsls	r3, r5, #31
 8011d60:	d50a      	bpl.n	8011d78 <__pow5mult+0x74>
 8011d62:	4639      	mov	r1, r7
 8011d64:	4622      	mov	r2, r4
 8011d66:	4630      	mov	r0, r6
 8011d68:	f7ff ff3e 	bl	8011be8 <__multiply>
 8011d6c:	4639      	mov	r1, r7
 8011d6e:	4681      	mov	r9, r0
 8011d70:	4630      	mov	r0, r6
 8011d72:	f7ff fe90 	bl	8011a96 <_Bfree>
 8011d76:	464f      	mov	r7, r9
 8011d78:	106d      	asrs	r5, r5, #1
 8011d7a:	d00b      	beq.n	8011d94 <__pow5mult+0x90>
 8011d7c:	6820      	ldr	r0, [r4, #0]
 8011d7e:	b938      	cbnz	r0, 8011d90 <__pow5mult+0x8c>
 8011d80:	4622      	mov	r2, r4
 8011d82:	4621      	mov	r1, r4
 8011d84:	4630      	mov	r0, r6
 8011d86:	f7ff ff2f 	bl	8011be8 <__multiply>
 8011d8a:	6020      	str	r0, [r4, #0]
 8011d8c:	f8c0 8000 	str.w	r8, [r0]
 8011d90:	4604      	mov	r4, r0
 8011d92:	e7e4      	b.n	8011d5e <__pow5mult+0x5a>
 8011d94:	4638      	mov	r0, r7
 8011d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d9a:	bf00      	nop
 8011d9c:	080159a0 	.word	0x080159a0

08011da0 <__lshift>:
 8011da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011da4:	460c      	mov	r4, r1
 8011da6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011daa:	6923      	ldr	r3, [r4, #16]
 8011dac:	6849      	ldr	r1, [r1, #4]
 8011dae:	eb0a 0903 	add.w	r9, sl, r3
 8011db2:	68a3      	ldr	r3, [r4, #8]
 8011db4:	4607      	mov	r7, r0
 8011db6:	4616      	mov	r6, r2
 8011db8:	f109 0501 	add.w	r5, r9, #1
 8011dbc:	42ab      	cmp	r3, r5
 8011dbe:	db31      	blt.n	8011e24 <__lshift+0x84>
 8011dc0:	4638      	mov	r0, r7
 8011dc2:	f7ff fe34 	bl	8011a2e <_Balloc>
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	4680      	mov	r8, r0
 8011dca:	f100 0314 	add.w	r3, r0, #20
 8011dce:	4611      	mov	r1, r2
 8011dd0:	4552      	cmp	r2, sl
 8011dd2:	db2a      	blt.n	8011e2a <__lshift+0x8a>
 8011dd4:	6920      	ldr	r0, [r4, #16]
 8011dd6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011dda:	f104 0114 	add.w	r1, r4, #20
 8011dde:	f016 021f 	ands.w	r2, r6, #31
 8011de2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8011de6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8011dea:	d022      	beq.n	8011e32 <__lshift+0x92>
 8011dec:	f1c2 0c20 	rsb	ip, r2, #32
 8011df0:	2000      	movs	r0, #0
 8011df2:	680e      	ldr	r6, [r1, #0]
 8011df4:	4096      	lsls	r6, r2
 8011df6:	4330      	orrs	r0, r6
 8011df8:	f843 0b04 	str.w	r0, [r3], #4
 8011dfc:	f851 0b04 	ldr.w	r0, [r1], #4
 8011e00:	458e      	cmp	lr, r1
 8011e02:	fa20 f00c 	lsr.w	r0, r0, ip
 8011e06:	d8f4      	bhi.n	8011df2 <__lshift+0x52>
 8011e08:	6018      	str	r0, [r3, #0]
 8011e0a:	b108      	cbz	r0, 8011e10 <__lshift+0x70>
 8011e0c:	f109 0502 	add.w	r5, r9, #2
 8011e10:	3d01      	subs	r5, #1
 8011e12:	4638      	mov	r0, r7
 8011e14:	f8c8 5010 	str.w	r5, [r8, #16]
 8011e18:	4621      	mov	r1, r4
 8011e1a:	f7ff fe3c 	bl	8011a96 <_Bfree>
 8011e1e:	4640      	mov	r0, r8
 8011e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e24:	3101      	adds	r1, #1
 8011e26:	005b      	lsls	r3, r3, #1
 8011e28:	e7c8      	b.n	8011dbc <__lshift+0x1c>
 8011e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011e2e:	3201      	adds	r2, #1
 8011e30:	e7ce      	b.n	8011dd0 <__lshift+0x30>
 8011e32:	3b04      	subs	r3, #4
 8011e34:	f851 2b04 	ldr.w	r2, [r1], #4
 8011e38:	f843 2f04 	str.w	r2, [r3, #4]!
 8011e3c:	458e      	cmp	lr, r1
 8011e3e:	d8f9      	bhi.n	8011e34 <__lshift+0x94>
 8011e40:	e7e6      	b.n	8011e10 <__lshift+0x70>

08011e42 <__mcmp>:
 8011e42:	6903      	ldr	r3, [r0, #16]
 8011e44:	690a      	ldr	r2, [r1, #16]
 8011e46:	1a9b      	subs	r3, r3, r2
 8011e48:	b530      	push	{r4, r5, lr}
 8011e4a:	d10c      	bne.n	8011e66 <__mcmp+0x24>
 8011e4c:	0092      	lsls	r2, r2, #2
 8011e4e:	3014      	adds	r0, #20
 8011e50:	3114      	adds	r1, #20
 8011e52:	1884      	adds	r4, r0, r2
 8011e54:	4411      	add	r1, r2
 8011e56:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011e5a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011e5e:	4295      	cmp	r5, r2
 8011e60:	d003      	beq.n	8011e6a <__mcmp+0x28>
 8011e62:	d305      	bcc.n	8011e70 <__mcmp+0x2e>
 8011e64:	2301      	movs	r3, #1
 8011e66:	4618      	mov	r0, r3
 8011e68:	bd30      	pop	{r4, r5, pc}
 8011e6a:	42a0      	cmp	r0, r4
 8011e6c:	d3f3      	bcc.n	8011e56 <__mcmp+0x14>
 8011e6e:	e7fa      	b.n	8011e66 <__mcmp+0x24>
 8011e70:	f04f 33ff 	mov.w	r3, #4294967295
 8011e74:	e7f7      	b.n	8011e66 <__mcmp+0x24>

08011e76 <__mdiff>:
 8011e76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e7a:	460d      	mov	r5, r1
 8011e7c:	4607      	mov	r7, r0
 8011e7e:	4611      	mov	r1, r2
 8011e80:	4628      	mov	r0, r5
 8011e82:	4614      	mov	r4, r2
 8011e84:	f7ff ffdd 	bl	8011e42 <__mcmp>
 8011e88:	1e06      	subs	r6, r0, #0
 8011e8a:	d108      	bne.n	8011e9e <__mdiff+0x28>
 8011e8c:	4631      	mov	r1, r6
 8011e8e:	4638      	mov	r0, r7
 8011e90:	f7ff fdcd 	bl	8011a2e <_Balloc>
 8011e94:	2301      	movs	r3, #1
 8011e96:	6103      	str	r3, [r0, #16]
 8011e98:	6146      	str	r6, [r0, #20]
 8011e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e9e:	bfa4      	itt	ge
 8011ea0:	4623      	movge	r3, r4
 8011ea2:	462c      	movge	r4, r5
 8011ea4:	4638      	mov	r0, r7
 8011ea6:	6861      	ldr	r1, [r4, #4]
 8011ea8:	bfa6      	itte	ge
 8011eaa:	461d      	movge	r5, r3
 8011eac:	2600      	movge	r6, #0
 8011eae:	2601      	movlt	r6, #1
 8011eb0:	f7ff fdbd 	bl	8011a2e <_Balloc>
 8011eb4:	692b      	ldr	r3, [r5, #16]
 8011eb6:	60c6      	str	r6, [r0, #12]
 8011eb8:	6926      	ldr	r6, [r4, #16]
 8011eba:	f105 0914 	add.w	r9, r5, #20
 8011ebe:	f104 0214 	add.w	r2, r4, #20
 8011ec2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011ec6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011eca:	f100 0514 	add.w	r5, r0, #20
 8011ece:	f04f 0c00 	mov.w	ip, #0
 8011ed2:	f852 ab04 	ldr.w	sl, [r2], #4
 8011ed6:	f859 4b04 	ldr.w	r4, [r9], #4
 8011eda:	fa1c f18a 	uxtah	r1, ip, sl
 8011ede:	b2a3      	uxth	r3, r4
 8011ee0:	1ac9      	subs	r1, r1, r3
 8011ee2:	0c23      	lsrs	r3, r4, #16
 8011ee4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011ee8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011eec:	b289      	uxth	r1, r1
 8011eee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8011ef2:	45c8      	cmp	r8, r9
 8011ef4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011ef8:	4696      	mov	lr, r2
 8011efa:	f845 3b04 	str.w	r3, [r5], #4
 8011efe:	d8e8      	bhi.n	8011ed2 <__mdiff+0x5c>
 8011f00:	45be      	cmp	lr, r7
 8011f02:	d305      	bcc.n	8011f10 <__mdiff+0x9a>
 8011f04:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011f08:	b18b      	cbz	r3, 8011f2e <__mdiff+0xb8>
 8011f0a:	6106      	str	r6, [r0, #16]
 8011f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f10:	f85e 1b04 	ldr.w	r1, [lr], #4
 8011f14:	fa1c f381 	uxtah	r3, ip, r1
 8011f18:	141a      	asrs	r2, r3, #16
 8011f1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011f28:	f845 3b04 	str.w	r3, [r5], #4
 8011f2c:	e7e8      	b.n	8011f00 <__mdiff+0x8a>
 8011f2e:	3e01      	subs	r6, #1
 8011f30:	e7e8      	b.n	8011f04 <__mdiff+0x8e>

08011f32 <__d2b>:
 8011f32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f36:	460e      	mov	r6, r1
 8011f38:	2101      	movs	r1, #1
 8011f3a:	ec59 8b10 	vmov	r8, r9, d0
 8011f3e:	4615      	mov	r5, r2
 8011f40:	f7ff fd75 	bl	8011a2e <_Balloc>
 8011f44:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011f48:	4607      	mov	r7, r0
 8011f4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011f4e:	bb34      	cbnz	r4, 8011f9e <__d2b+0x6c>
 8011f50:	9301      	str	r3, [sp, #4]
 8011f52:	f1b8 0f00 	cmp.w	r8, #0
 8011f56:	d027      	beq.n	8011fa8 <__d2b+0x76>
 8011f58:	a802      	add	r0, sp, #8
 8011f5a:	f840 8d08 	str.w	r8, [r0, #-8]!
 8011f5e:	f7ff fe0b 	bl	8011b78 <__lo0bits>
 8011f62:	9900      	ldr	r1, [sp, #0]
 8011f64:	b1f0      	cbz	r0, 8011fa4 <__d2b+0x72>
 8011f66:	9a01      	ldr	r2, [sp, #4]
 8011f68:	f1c0 0320 	rsb	r3, r0, #32
 8011f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8011f70:	430b      	orrs	r3, r1
 8011f72:	40c2      	lsrs	r2, r0
 8011f74:	617b      	str	r3, [r7, #20]
 8011f76:	9201      	str	r2, [sp, #4]
 8011f78:	9b01      	ldr	r3, [sp, #4]
 8011f7a:	61bb      	str	r3, [r7, #24]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	bf14      	ite	ne
 8011f80:	2102      	movne	r1, #2
 8011f82:	2101      	moveq	r1, #1
 8011f84:	6139      	str	r1, [r7, #16]
 8011f86:	b1c4      	cbz	r4, 8011fba <__d2b+0x88>
 8011f88:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011f8c:	4404      	add	r4, r0
 8011f8e:	6034      	str	r4, [r6, #0]
 8011f90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011f94:	6028      	str	r0, [r5, #0]
 8011f96:	4638      	mov	r0, r7
 8011f98:	b003      	add	sp, #12
 8011f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011fa2:	e7d5      	b.n	8011f50 <__d2b+0x1e>
 8011fa4:	6179      	str	r1, [r7, #20]
 8011fa6:	e7e7      	b.n	8011f78 <__d2b+0x46>
 8011fa8:	a801      	add	r0, sp, #4
 8011faa:	f7ff fde5 	bl	8011b78 <__lo0bits>
 8011fae:	9b01      	ldr	r3, [sp, #4]
 8011fb0:	617b      	str	r3, [r7, #20]
 8011fb2:	2101      	movs	r1, #1
 8011fb4:	6139      	str	r1, [r7, #16]
 8011fb6:	3020      	adds	r0, #32
 8011fb8:	e7e5      	b.n	8011f86 <__d2b+0x54>
 8011fba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011fbe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011fc2:	6030      	str	r0, [r6, #0]
 8011fc4:	6918      	ldr	r0, [r3, #16]
 8011fc6:	f7ff fdb8 	bl	8011b3a <__hi0bits>
 8011fca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011fce:	e7e1      	b.n	8011f94 <__d2b+0x62>

08011fd0 <_calloc_r>:
 8011fd0:	b538      	push	{r3, r4, r5, lr}
 8011fd2:	fb02 f401 	mul.w	r4, r2, r1
 8011fd6:	4621      	mov	r1, r4
 8011fd8:	f7fd fd42 	bl	800fa60 <_malloc_r>
 8011fdc:	4605      	mov	r5, r0
 8011fde:	b118      	cbz	r0, 8011fe8 <_calloc_r+0x18>
 8011fe0:	4622      	mov	r2, r4
 8011fe2:	2100      	movs	r1, #0
 8011fe4:	f7fd fce6 	bl	800f9b4 <memset>
 8011fe8:	4628      	mov	r0, r5
 8011fea:	bd38      	pop	{r3, r4, r5, pc}

08011fec <_realloc_r>:
 8011fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fee:	4607      	mov	r7, r0
 8011ff0:	4614      	mov	r4, r2
 8011ff2:	460e      	mov	r6, r1
 8011ff4:	b921      	cbnz	r1, 8012000 <_realloc_r+0x14>
 8011ff6:	4611      	mov	r1, r2
 8011ff8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011ffc:	f7fd bd30 	b.w	800fa60 <_malloc_r>
 8012000:	b922      	cbnz	r2, 801200c <_realloc_r+0x20>
 8012002:	f7fd fcdf 	bl	800f9c4 <_free_r>
 8012006:	4625      	mov	r5, r4
 8012008:	4628      	mov	r0, r5
 801200a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801200c:	f000 fbec 	bl	80127e8 <_malloc_usable_size_r>
 8012010:	4284      	cmp	r4, r0
 8012012:	d90f      	bls.n	8012034 <_realloc_r+0x48>
 8012014:	4621      	mov	r1, r4
 8012016:	4638      	mov	r0, r7
 8012018:	f7fd fd22 	bl	800fa60 <_malloc_r>
 801201c:	4605      	mov	r5, r0
 801201e:	2800      	cmp	r0, #0
 8012020:	d0f2      	beq.n	8012008 <_realloc_r+0x1c>
 8012022:	4631      	mov	r1, r6
 8012024:	4622      	mov	r2, r4
 8012026:	f7ff fcf5 	bl	8011a14 <memcpy>
 801202a:	4631      	mov	r1, r6
 801202c:	4638      	mov	r0, r7
 801202e:	f7fd fcc9 	bl	800f9c4 <_free_r>
 8012032:	e7e9      	b.n	8012008 <_realloc_r+0x1c>
 8012034:	4635      	mov	r5, r6
 8012036:	e7e7      	b.n	8012008 <_realloc_r+0x1c>

08012038 <__ssputs_r>:
 8012038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801203c:	688e      	ldr	r6, [r1, #8]
 801203e:	429e      	cmp	r6, r3
 8012040:	4682      	mov	sl, r0
 8012042:	460c      	mov	r4, r1
 8012044:	4691      	mov	r9, r2
 8012046:	4698      	mov	r8, r3
 8012048:	d835      	bhi.n	80120b6 <__ssputs_r+0x7e>
 801204a:	898a      	ldrh	r2, [r1, #12]
 801204c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012050:	d031      	beq.n	80120b6 <__ssputs_r+0x7e>
 8012052:	6825      	ldr	r5, [r4, #0]
 8012054:	6909      	ldr	r1, [r1, #16]
 8012056:	1a6f      	subs	r7, r5, r1
 8012058:	6965      	ldr	r5, [r4, #20]
 801205a:	2302      	movs	r3, #2
 801205c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012060:	fb95 f5f3 	sdiv	r5, r5, r3
 8012064:	f108 0301 	add.w	r3, r8, #1
 8012068:	443b      	add	r3, r7
 801206a:	429d      	cmp	r5, r3
 801206c:	bf38      	it	cc
 801206e:	461d      	movcc	r5, r3
 8012070:	0553      	lsls	r3, r2, #21
 8012072:	d531      	bpl.n	80120d8 <__ssputs_r+0xa0>
 8012074:	4629      	mov	r1, r5
 8012076:	f7fd fcf3 	bl	800fa60 <_malloc_r>
 801207a:	4606      	mov	r6, r0
 801207c:	b950      	cbnz	r0, 8012094 <__ssputs_r+0x5c>
 801207e:	230c      	movs	r3, #12
 8012080:	f8ca 3000 	str.w	r3, [sl]
 8012084:	89a3      	ldrh	r3, [r4, #12]
 8012086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801208a:	81a3      	strh	r3, [r4, #12]
 801208c:	f04f 30ff 	mov.w	r0, #4294967295
 8012090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012094:	463a      	mov	r2, r7
 8012096:	6921      	ldr	r1, [r4, #16]
 8012098:	f7ff fcbc 	bl	8011a14 <memcpy>
 801209c:	89a3      	ldrh	r3, [r4, #12]
 801209e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80120a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120a6:	81a3      	strh	r3, [r4, #12]
 80120a8:	6126      	str	r6, [r4, #16]
 80120aa:	6165      	str	r5, [r4, #20]
 80120ac:	443e      	add	r6, r7
 80120ae:	1bed      	subs	r5, r5, r7
 80120b0:	6026      	str	r6, [r4, #0]
 80120b2:	60a5      	str	r5, [r4, #8]
 80120b4:	4646      	mov	r6, r8
 80120b6:	4546      	cmp	r6, r8
 80120b8:	bf28      	it	cs
 80120ba:	4646      	movcs	r6, r8
 80120bc:	4632      	mov	r2, r6
 80120be:	4649      	mov	r1, r9
 80120c0:	6820      	ldr	r0, [r4, #0]
 80120c2:	f000 fb77 	bl	80127b4 <memmove>
 80120c6:	68a3      	ldr	r3, [r4, #8]
 80120c8:	1b9b      	subs	r3, r3, r6
 80120ca:	60a3      	str	r3, [r4, #8]
 80120cc:	6823      	ldr	r3, [r4, #0]
 80120ce:	441e      	add	r6, r3
 80120d0:	6026      	str	r6, [r4, #0]
 80120d2:	2000      	movs	r0, #0
 80120d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120d8:	462a      	mov	r2, r5
 80120da:	f7ff ff87 	bl	8011fec <_realloc_r>
 80120de:	4606      	mov	r6, r0
 80120e0:	2800      	cmp	r0, #0
 80120e2:	d1e1      	bne.n	80120a8 <__ssputs_r+0x70>
 80120e4:	6921      	ldr	r1, [r4, #16]
 80120e6:	4650      	mov	r0, sl
 80120e8:	f7fd fc6c 	bl	800f9c4 <_free_r>
 80120ec:	e7c7      	b.n	801207e <__ssputs_r+0x46>
	...

080120f0 <_svfiprintf_r>:
 80120f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f4:	b09d      	sub	sp, #116	; 0x74
 80120f6:	4680      	mov	r8, r0
 80120f8:	9303      	str	r3, [sp, #12]
 80120fa:	898b      	ldrh	r3, [r1, #12]
 80120fc:	061c      	lsls	r4, r3, #24
 80120fe:	460d      	mov	r5, r1
 8012100:	4616      	mov	r6, r2
 8012102:	d50f      	bpl.n	8012124 <_svfiprintf_r+0x34>
 8012104:	690b      	ldr	r3, [r1, #16]
 8012106:	b96b      	cbnz	r3, 8012124 <_svfiprintf_r+0x34>
 8012108:	2140      	movs	r1, #64	; 0x40
 801210a:	f7fd fca9 	bl	800fa60 <_malloc_r>
 801210e:	6028      	str	r0, [r5, #0]
 8012110:	6128      	str	r0, [r5, #16]
 8012112:	b928      	cbnz	r0, 8012120 <_svfiprintf_r+0x30>
 8012114:	230c      	movs	r3, #12
 8012116:	f8c8 3000 	str.w	r3, [r8]
 801211a:	f04f 30ff 	mov.w	r0, #4294967295
 801211e:	e0c5      	b.n	80122ac <_svfiprintf_r+0x1bc>
 8012120:	2340      	movs	r3, #64	; 0x40
 8012122:	616b      	str	r3, [r5, #20]
 8012124:	2300      	movs	r3, #0
 8012126:	9309      	str	r3, [sp, #36]	; 0x24
 8012128:	2320      	movs	r3, #32
 801212a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801212e:	2330      	movs	r3, #48	; 0x30
 8012130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012134:	f04f 0b01 	mov.w	fp, #1
 8012138:	4637      	mov	r7, r6
 801213a:	463c      	mov	r4, r7
 801213c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012140:	2b00      	cmp	r3, #0
 8012142:	d13c      	bne.n	80121be <_svfiprintf_r+0xce>
 8012144:	ebb7 0a06 	subs.w	sl, r7, r6
 8012148:	d00b      	beq.n	8012162 <_svfiprintf_r+0x72>
 801214a:	4653      	mov	r3, sl
 801214c:	4632      	mov	r2, r6
 801214e:	4629      	mov	r1, r5
 8012150:	4640      	mov	r0, r8
 8012152:	f7ff ff71 	bl	8012038 <__ssputs_r>
 8012156:	3001      	adds	r0, #1
 8012158:	f000 80a3 	beq.w	80122a2 <_svfiprintf_r+0x1b2>
 801215c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801215e:	4453      	add	r3, sl
 8012160:	9309      	str	r3, [sp, #36]	; 0x24
 8012162:	783b      	ldrb	r3, [r7, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	f000 809c 	beq.w	80122a2 <_svfiprintf_r+0x1b2>
 801216a:	2300      	movs	r3, #0
 801216c:	f04f 32ff 	mov.w	r2, #4294967295
 8012170:	9304      	str	r3, [sp, #16]
 8012172:	9307      	str	r3, [sp, #28]
 8012174:	9205      	str	r2, [sp, #20]
 8012176:	9306      	str	r3, [sp, #24]
 8012178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801217c:	931a      	str	r3, [sp, #104]	; 0x68
 801217e:	2205      	movs	r2, #5
 8012180:	7821      	ldrb	r1, [r4, #0]
 8012182:	4850      	ldr	r0, [pc, #320]	; (80122c4 <_svfiprintf_r+0x1d4>)
 8012184:	f7ee f85c 	bl	8000240 <memchr>
 8012188:	1c67      	adds	r7, r4, #1
 801218a:	9b04      	ldr	r3, [sp, #16]
 801218c:	b9d8      	cbnz	r0, 80121c6 <_svfiprintf_r+0xd6>
 801218e:	06d9      	lsls	r1, r3, #27
 8012190:	bf44      	itt	mi
 8012192:	2220      	movmi	r2, #32
 8012194:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012198:	071a      	lsls	r2, r3, #28
 801219a:	bf44      	itt	mi
 801219c:	222b      	movmi	r2, #43	; 0x2b
 801219e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80121a2:	7822      	ldrb	r2, [r4, #0]
 80121a4:	2a2a      	cmp	r2, #42	; 0x2a
 80121a6:	d016      	beq.n	80121d6 <_svfiprintf_r+0xe6>
 80121a8:	9a07      	ldr	r2, [sp, #28]
 80121aa:	2100      	movs	r1, #0
 80121ac:	200a      	movs	r0, #10
 80121ae:	4627      	mov	r7, r4
 80121b0:	3401      	adds	r4, #1
 80121b2:	783b      	ldrb	r3, [r7, #0]
 80121b4:	3b30      	subs	r3, #48	; 0x30
 80121b6:	2b09      	cmp	r3, #9
 80121b8:	d951      	bls.n	801225e <_svfiprintf_r+0x16e>
 80121ba:	b1c9      	cbz	r1, 80121f0 <_svfiprintf_r+0x100>
 80121bc:	e011      	b.n	80121e2 <_svfiprintf_r+0xf2>
 80121be:	2b25      	cmp	r3, #37	; 0x25
 80121c0:	d0c0      	beq.n	8012144 <_svfiprintf_r+0x54>
 80121c2:	4627      	mov	r7, r4
 80121c4:	e7b9      	b.n	801213a <_svfiprintf_r+0x4a>
 80121c6:	4a3f      	ldr	r2, [pc, #252]	; (80122c4 <_svfiprintf_r+0x1d4>)
 80121c8:	1a80      	subs	r0, r0, r2
 80121ca:	fa0b f000 	lsl.w	r0, fp, r0
 80121ce:	4318      	orrs	r0, r3
 80121d0:	9004      	str	r0, [sp, #16]
 80121d2:	463c      	mov	r4, r7
 80121d4:	e7d3      	b.n	801217e <_svfiprintf_r+0x8e>
 80121d6:	9a03      	ldr	r2, [sp, #12]
 80121d8:	1d11      	adds	r1, r2, #4
 80121da:	6812      	ldr	r2, [r2, #0]
 80121dc:	9103      	str	r1, [sp, #12]
 80121de:	2a00      	cmp	r2, #0
 80121e0:	db01      	blt.n	80121e6 <_svfiprintf_r+0xf6>
 80121e2:	9207      	str	r2, [sp, #28]
 80121e4:	e004      	b.n	80121f0 <_svfiprintf_r+0x100>
 80121e6:	4252      	negs	r2, r2
 80121e8:	f043 0302 	orr.w	r3, r3, #2
 80121ec:	9207      	str	r2, [sp, #28]
 80121ee:	9304      	str	r3, [sp, #16]
 80121f0:	783b      	ldrb	r3, [r7, #0]
 80121f2:	2b2e      	cmp	r3, #46	; 0x2e
 80121f4:	d10e      	bne.n	8012214 <_svfiprintf_r+0x124>
 80121f6:	787b      	ldrb	r3, [r7, #1]
 80121f8:	2b2a      	cmp	r3, #42	; 0x2a
 80121fa:	f107 0101 	add.w	r1, r7, #1
 80121fe:	d132      	bne.n	8012266 <_svfiprintf_r+0x176>
 8012200:	9b03      	ldr	r3, [sp, #12]
 8012202:	1d1a      	adds	r2, r3, #4
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	9203      	str	r2, [sp, #12]
 8012208:	2b00      	cmp	r3, #0
 801220a:	bfb8      	it	lt
 801220c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012210:	3702      	adds	r7, #2
 8012212:	9305      	str	r3, [sp, #20]
 8012214:	4c2c      	ldr	r4, [pc, #176]	; (80122c8 <_svfiprintf_r+0x1d8>)
 8012216:	7839      	ldrb	r1, [r7, #0]
 8012218:	2203      	movs	r2, #3
 801221a:	4620      	mov	r0, r4
 801221c:	f7ee f810 	bl	8000240 <memchr>
 8012220:	b138      	cbz	r0, 8012232 <_svfiprintf_r+0x142>
 8012222:	2340      	movs	r3, #64	; 0x40
 8012224:	1b00      	subs	r0, r0, r4
 8012226:	fa03 f000 	lsl.w	r0, r3, r0
 801222a:	9b04      	ldr	r3, [sp, #16]
 801222c:	4303      	orrs	r3, r0
 801222e:	9304      	str	r3, [sp, #16]
 8012230:	3701      	adds	r7, #1
 8012232:	7839      	ldrb	r1, [r7, #0]
 8012234:	4825      	ldr	r0, [pc, #148]	; (80122cc <_svfiprintf_r+0x1dc>)
 8012236:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801223a:	2206      	movs	r2, #6
 801223c:	1c7e      	adds	r6, r7, #1
 801223e:	f7ed ffff 	bl	8000240 <memchr>
 8012242:	2800      	cmp	r0, #0
 8012244:	d035      	beq.n	80122b2 <_svfiprintf_r+0x1c2>
 8012246:	4b22      	ldr	r3, [pc, #136]	; (80122d0 <_svfiprintf_r+0x1e0>)
 8012248:	b9fb      	cbnz	r3, 801228a <_svfiprintf_r+0x19a>
 801224a:	9b03      	ldr	r3, [sp, #12]
 801224c:	3307      	adds	r3, #7
 801224e:	f023 0307 	bic.w	r3, r3, #7
 8012252:	3308      	adds	r3, #8
 8012254:	9303      	str	r3, [sp, #12]
 8012256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012258:	444b      	add	r3, r9
 801225a:	9309      	str	r3, [sp, #36]	; 0x24
 801225c:	e76c      	b.n	8012138 <_svfiprintf_r+0x48>
 801225e:	fb00 3202 	mla	r2, r0, r2, r3
 8012262:	2101      	movs	r1, #1
 8012264:	e7a3      	b.n	80121ae <_svfiprintf_r+0xbe>
 8012266:	2300      	movs	r3, #0
 8012268:	9305      	str	r3, [sp, #20]
 801226a:	4618      	mov	r0, r3
 801226c:	240a      	movs	r4, #10
 801226e:	460f      	mov	r7, r1
 8012270:	3101      	adds	r1, #1
 8012272:	783a      	ldrb	r2, [r7, #0]
 8012274:	3a30      	subs	r2, #48	; 0x30
 8012276:	2a09      	cmp	r2, #9
 8012278:	d903      	bls.n	8012282 <_svfiprintf_r+0x192>
 801227a:	2b00      	cmp	r3, #0
 801227c:	d0ca      	beq.n	8012214 <_svfiprintf_r+0x124>
 801227e:	9005      	str	r0, [sp, #20]
 8012280:	e7c8      	b.n	8012214 <_svfiprintf_r+0x124>
 8012282:	fb04 2000 	mla	r0, r4, r0, r2
 8012286:	2301      	movs	r3, #1
 8012288:	e7f1      	b.n	801226e <_svfiprintf_r+0x17e>
 801228a:	ab03      	add	r3, sp, #12
 801228c:	9300      	str	r3, [sp, #0]
 801228e:	462a      	mov	r2, r5
 8012290:	4b10      	ldr	r3, [pc, #64]	; (80122d4 <_svfiprintf_r+0x1e4>)
 8012292:	a904      	add	r1, sp, #16
 8012294:	4640      	mov	r0, r8
 8012296:	f7fd fcd7 	bl	800fc48 <_printf_float>
 801229a:	f1b0 3fff 	cmp.w	r0, #4294967295
 801229e:	4681      	mov	r9, r0
 80122a0:	d1d9      	bne.n	8012256 <_svfiprintf_r+0x166>
 80122a2:	89ab      	ldrh	r3, [r5, #12]
 80122a4:	065b      	lsls	r3, r3, #25
 80122a6:	f53f af38 	bmi.w	801211a <_svfiprintf_r+0x2a>
 80122aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122ac:	b01d      	add	sp, #116	; 0x74
 80122ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b2:	ab03      	add	r3, sp, #12
 80122b4:	9300      	str	r3, [sp, #0]
 80122b6:	462a      	mov	r2, r5
 80122b8:	4b06      	ldr	r3, [pc, #24]	; (80122d4 <_svfiprintf_r+0x1e4>)
 80122ba:	a904      	add	r1, sp, #16
 80122bc:	4640      	mov	r0, r8
 80122be:	f7fd ff79 	bl	80101b4 <_printf_i>
 80122c2:	e7ea      	b.n	801229a <_svfiprintf_r+0x1aa>
 80122c4:	080159ac 	.word	0x080159ac
 80122c8:	080159b2 	.word	0x080159b2
 80122cc:	080159b6 	.word	0x080159b6
 80122d0:	0800fc49 	.word	0x0800fc49
 80122d4:	08012039 	.word	0x08012039

080122d8 <__sfputc_r>:
 80122d8:	6893      	ldr	r3, [r2, #8]
 80122da:	3b01      	subs	r3, #1
 80122dc:	2b00      	cmp	r3, #0
 80122de:	b410      	push	{r4}
 80122e0:	6093      	str	r3, [r2, #8]
 80122e2:	da09      	bge.n	80122f8 <__sfputc_r+0x20>
 80122e4:	6994      	ldr	r4, [r2, #24]
 80122e6:	42a3      	cmp	r3, r4
 80122e8:	db02      	blt.n	80122f0 <__sfputc_r+0x18>
 80122ea:	b2cb      	uxtb	r3, r1
 80122ec:	2b0a      	cmp	r3, #10
 80122ee:	d103      	bne.n	80122f8 <__sfputc_r+0x20>
 80122f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122f4:	f7fe ba4a 	b.w	801078c <__swbuf_r>
 80122f8:	6813      	ldr	r3, [r2, #0]
 80122fa:	1c58      	adds	r0, r3, #1
 80122fc:	6010      	str	r0, [r2, #0]
 80122fe:	7019      	strb	r1, [r3, #0]
 8012300:	b2c8      	uxtb	r0, r1
 8012302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012306:	4770      	bx	lr

08012308 <__sfputs_r>:
 8012308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801230a:	4606      	mov	r6, r0
 801230c:	460f      	mov	r7, r1
 801230e:	4614      	mov	r4, r2
 8012310:	18d5      	adds	r5, r2, r3
 8012312:	42ac      	cmp	r4, r5
 8012314:	d101      	bne.n	801231a <__sfputs_r+0x12>
 8012316:	2000      	movs	r0, #0
 8012318:	e007      	b.n	801232a <__sfputs_r+0x22>
 801231a:	463a      	mov	r2, r7
 801231c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012320:	4630      	mov	r0, r6
 8012322:	f7ff ffd9 	bl	80122d8 <__sfputc_r>
 8012326:	1c43      	adds	r3, r0, #1
 8012328:	d1f3      	bne.n	8012312 <__sfputs_r+0xa>
 801232a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801232c <_vfiprintf_r>:
 801232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012330:	b09d      	sub	sp, #116	; 0x74
 8012332:	460c      	mov	r4, r1
 8012334:	4617      	mov	r7, r2
 8012336:	9303      	str	r3, [sp, #12]
 8012338:	4606      	mov	r6, r0
 801233a:	b118      	cbz	r0, 8012344 <_vfiprintf_r+0x18>
 801233c:	6983      	ldr	r3, [r0, #24]
 801233e:	b90b      	cbnz	r3, 8012344 <_vfiprintf_r+0x18>
 8012340:	f7ff fa50 	bl	80117e4 <__sinit>
 8012344:	4b7c      	ldr	r3, [pc, #496]	; (8012538 <_vfiprintf_r+0x20c>)
 8012346:	429c      	cmp	r4, r3
 8012348:	d157      	bne.n	80123fa <_vfiprintf_r+0xce>
 801234a:	6874      	ldr	r4, [r6, #4]
 801234c:	89a3      	ldrh	r3, [r4, #12]
 801234e:	0718      	lsls	r0, r3, #28
 8012350:	d55d      	bpl.n	801240e <_vfiprintf_r+0xe2>
 8012352:	6923      	ldr	r3, [r4, #16]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d05a      	beq.n	801240e <_vfiprintf_r+0xe2>
 8012358:	2300      	movs	r3, #0
 801235a:	9309      	str	r3, [sp, #36]	; 0x24
 801235c:	2320      	movs	r3, #32
 801235e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012362:	2330      	movs	r3, #48	; 0x30
 8012364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012368:	f04f 0b01 	mov.w	fp, #1
 801236c:	46b8      	mov	r8, r7
 801236e:	4645      	mov	r5, r8
 8012370:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012374:	2b00      	cmp	r3, #0
 8012376:	d155      	bne.n	8012424 <_vfiprintf_r+0xf8>
 8012378:	ebb8 0a07 	subs.w	sl, r8, r7
 801237c:	d00b      	beq.n	8012396 <_vfiprintf_r+0x6a>
 801237e:	4653      	mov	r3, sl
 8012380:	463a      	mov	r2, r7
 8012382:	4621      	mov	r1, r4
 8012384:	4630      	mov	r0, r6
 8012386:	f7ff ffbf 	bl	8012308 <__sfputs_r>
 801238a:	3001      	adds	r0, #1
 801238c:	f000 80c4 	beq.w	8012518 <_vfiprintf_r+0x1ec>
 8012390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012392:	4453      	add	r3, sl
 8012394:	9309      	str	r3, [sp, #36]	; 0x24
 8012396:	f898 3000 	ldrb.w	r3, [r8]
 801239a:	2b00      	cmp	r3, #0
 801239c:	f000 80bc 	beq.w	8012518 <_vfiprintf_r+0x1ec>
 80123a0:	2300      	movs	r3, #0
 80123a2:	f04f 32ff 	mov.w	r2, #4294967295
 80123a6:	9304      	str	r3, [sp, #16]
 80123a8:	9307      	str	r3, [sp, #28]
 80123aa:	9205      	str	r2, [sp, #20]
 80123ac:	9306      	str	r3, [sp, #24]
 80123ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80123b2:	931a      	str	r3, [sp, #104]	; 0x68
 80123b4:	2205      	movs	r2, #5
 80123b6:	7829      	ldrb	r1, [r5, #0]
 80123b8:	4860      	ldr	r0, [pc, #384]	; (801253c <_vfiprintf_r+0x210>)
 80123ba:	f7ed ff41 	bl	8000240 <memchr>
 80123be:	f105 0801 	add.w	r8, r5, #1
 80123c2:	9b04      	ldr	r3, [sp, #16]
 80123c4:	2800      	cmp	r0, #0
 80123c6:	d131      	bne.n	801242c <_vfiprintf_r+0x100>
 80123c8:	06d9      	lsls	r1, r3, #27
 80123ca:	bf44      	itt	mi
 80123cc:	2220      	movmi	r2, #32
 80123ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80123d2:	071a      	lsls	r2, r3, #28
 80123d4:	bf44      	itt	mi
 80123d6:	222b      	movmi	r2, #43	; 0x2b
 80123d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80123dc:	782a      	ldrb	r2, [r5, #0]
 80123de:	2a2a      	cmp	r2, #42	; 0x2a
 80123e0:	d02c      	beq.n	801243c <_vfiprintf_r+0x110>
 80123e2:	9a07      	ldr	r2, [sp, #28]
 80123e4:	2100      	movs	r1, #0
 80123e6:	200a      	movs	r0, #10
 80123e8:	46a8      	mov	r8, r5
 80123ea:	3501      	adds	r5, #1
 80123ec:	f898 3000 	ldrb.w	r3, [r8]
 80123f0:	3b30      	subs	r3, #48	; 0x30
 80123f2:	2b09      	cmp	r3, #9
 80123f4:	d96d      	bls.n	80124d2 <_vfiprintf_r+0x1a6>
 80123f6:	b371      	cbz	r1, 8012456 <_vfiprintf_r+0x12a>
 80123f8:	e026      	b.n	8012448 <_vfiprintf_r+0x11c>
 80123fa:	4b51      	ldr	r3, [pc, #324]	; (8012540 <_vfiprintf_r+0x214>)
 80123fc:	429c      	cmp	r4, r3
 80123fe:	d101      	bne.n	8012404 <_vfiprintf_r+0xd8>
 8012400:	68b4      	ldr	r4, [r6, #8]
 8012402:	e7a3      	b.n	801234c <_vfiprintf_r+0x20>
 8012404:	4b4f      	ldr	r3, [pc, #316]	; (8012544 <_vfiprintf_r+0x218>)
 8012406:	429c      	cmp	r4, r3
 8012408:	bf08      	it	eq
 801240a:	68f4      	ldreq	r4, [r6, #12]
 801240c:	e79e      	b.n	801234c <_vfiprintf_r+0x20>
 801240e:	4621      	mov	r1, r4
 8012410:	4630      	mov	r0, r6
 8012412:	f7fe fa1b 	bl	801084c <__swsetup_r>
 8012416:	2800      	cmp	r0, #0
 8012418:	d09e      	beq.n	8012358 <_vfiprintf_r+0x2c>
 801241a:	f04f 30ff 	mov.w	r0, #4294967295
 801241e:	b01d      	add	sp, #116	; 0x74
 8012420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012424:	2b25      	cmp	r3, #37	; 0x25
 8012426:	d0a7      	beq.n	8012378 <_vfiprintf_r+0x4c>
 8012428:	46a8      	mov	r8, r5
 801242a:	e7a0      	b.n	801236e <_vfiprintf_r+0x42>
 801242c:	4a43      	ldr	r2, [pc, #268]	; (801253c <_vfiprintf_r+0x210>)
 801242e:	1a80      	subs	r0, r0, r2
 8012430:	fa0b f000 	lsl.w	r0, fp, r0
 8012434:	4318      	orrs	r0, r3
 8012436:	9004      	str	r0, [sp, #16]
 8012438:	4645      	mov	r5, r8
 801243a:	e7bb      	b.n	80123b4 <_vfiprintf_r+0x88>
 801243c:	9a03      	ldr	r2, [sp, #12]
 801243e:	1d11      	adds	r1, r2, #4
 8012440:	6812      	ldr	r2, [r2, #0]
 8012442:	9103      	str	r1, [sp, #12]
 8012444:	2a00      	cmp	r2, #0
 8012446:	db01      	blt.n	801244c <_vfiprintf_r+0x120>
 8012448:	9207      	str	r2, [sp, #28]
 801244a:	e004      	b.n	8012456 <_vfiprintf_r+0x12a>
 801244c:	4252      	negs	r2, r2
 801244e:	f043 0302 	orr.w	r3, r3, #2
 8012452:	9207      	str	r2, [sp, #28]
 8012454:	9304      	str	r3, [sp, #16]
 8012456:	f898 3000 	ldrb.w	r3, [r8]
 801245a:	2b2e      	cmp	r3, #46	; 0x2e
 801245c:	d110      	bne.n	8012480 <_vfiprintf_r+0x154>
 801245e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012462:	2b2a      	cmp	r3, #42	; 0x2a
 8012464:	f108 0101 	add.w	r1, r8, #1
 8012468:	d137      	bne.n	80124da <_vfiprintf_r+0x1ae>
 801246a:	9b03      	ldr	r3, [sp, #12]
 801246c:	1d1a      	adds	r2, r3, #4
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	9203      	str	r2, [sp, #12]
 8012472:	2b00      	cmp	r3, #0
 8012474:	bfb8      	it	lt
 8012476:	f04f 33ff 	movlt.w	r3, #4294967295
 801247a:	f108 0802 	add.w	r8, r8, #2
 801247e:	9305      	str	r3, [sp, #20]
 8012480:	4d31      	ldr	r5, [pc, #196]	; (8012548 <_vfiprintf_r+0x21c>)
 8012482:	f898 1000 	ldrb.w	r1, [r8]
 8012486:	2203      	movs	r2, #3
 8012488:	4628      	mov	r0, r5
 801248a:	f7ed fed9 	bl	8000240 <memchr>
 801248e:	b140      	cbz	r0, 80124a2 <_vfiprintf_r+0x176>
 8012490:	2340      	movs	r3, #64	; 0x40
 8012492:	1b40      	subs	r0, r0, r5
 8012494:	fa03 f000 	lsl.w	r0, r3, r0
 8012498:	9b04      	ldr	r3, [sp, #16]
 801249a:	4303      	orrs	r3, r0
 801249c:	9304      	str	r3, [sp, #16]
 801249e:	f108 0801 	add.w	r8, r8, #1
 80124a2:	f898 1000 	ldrb.w	r1, [r8]
 80124a6:	4829      	ldr	r0, [pc, #164]	; (801254c <_vfiprintf_r+0x220>)
 80124a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124ac:	2206      	movs	r2, #6
 80124ae:	f108 0701 	add.w	r7, r8, #1
 80124b2:	f7ed fec5 	bl	8000240 <memchr>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	d034      	beq.n	8012524 <_vfiprintf_r+0x1f8>
 80124ba:	4b25      	ldr	r3, [pc, #148]	; (8012550 <_vfiprintf_r+0x224>)
 80124bc:	bb03      	cbnz	r3, 8012500 <_vfiprintf_r+0x1d4>
 80124be:	9b03      	ldr	r3, [sp, #12]
 80124c0:	3307      	adds	r3, #7
 80124c2:	f023 0307 	bic.w	r3, r3, #7
 80124c6:	3308      	adds	r3, #8
 80124c8:	9303      	str	r3, [sp, #12]
 80124ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124cc:	444b      	add	r3, r9
 80124ce:	9309      	str	r3, [sp, #36]	; 0x24
 80124d0:	e74c      	b.n	801236c <_vfiprintf_r+0x40>
 80124d2:	fb00 3202 	mla	r2, r0, r2, r3
 80124d6:	2101      	movs	r1, #1
 80124d8:	e786      	b.n	80123e8 <_vfiprintf_r+0xbc>
 80124da:	2300      	movs	r3, #0
 80124dc:	9305      	str	r3, [sp, #20]
 80124de:	4618      	mov	r0, r3
 80124e0:	250a      	movs	r5, #10
 80124e2:	4688      	mov	r8, r1
 80124e4:	3101      	adds	r1, #1
 80124e6:	f898 2000 	ldrb.w	r2, [r8]
 80124ea:	3a30      	subs	r2, #48	; 0x30
 80124ec:	2a09      	cmp	r2, #9
 80124ee:	d903      	bls.n	80124f8 <_vfiprintf_r+0x1cc>
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d0c5      	beq.n	8012480 <_vfiprintf_r+0x154>
 80124f4:	9005      	str	r0, [sp, #20]
 80124f6:	e7c3      	b.n	8012480 <_vfiprintf_r+0x154>
 80124f8:	fb05 2000 	mla	r0, r5, r0, r2
 80124fc:	2301      	movs	r3, #1
 80124fe:	e7f0      	b.n	80124e2 <_vfiprintf_r+0x1b6>
 8012500:	ab03      	add	r3, sp, #12
 8012502:	9300      	str	r3, [sp, #0]
 8012504:	4622      	mov	r2, r4
 8012506:	4b13      	ldr	r3, [pc, #76]	; (8012554 <_vfiprintf_r+0x228>)
 8012508:	a904      	add	r1, sp, #16
 801250a:	4630      	mov	r0, r6
 801250c:	f7fd fb9c 	bl	800fc48 <_printf_float>
 8012510:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012514:	4681      	mov	r9, r0
 8012516:	d1d8      	bne.n	80124ca <_vfiprintf_r+0x19e>
 8012518:	89a3      	ldrh	r3, [r4, #12]
 801251a:	065b      	lsls	r3, r3, #25
 801251c:	f53f af7d 	bmi.w	801241a <_vfiprintf_r+0xee>
 8012520:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012522:	e77c      	b.n	801241e <_vfiprintf_r+0xf2>
 8012524:	ab03      	add	r3, sp, #12
 8012526:	9300      	str	r3, [sp, #0]
 8012528:	4622      	mov	r2, r4
 801252a:	4b0a      	ldr	r3, [pc, #40]	; (8012554 <_vfiprintf_r+0x228>)
 801252c:	a904      	add	r1, sp, #16
 801252e:	4630      	mov	r0, r6
 8012530:	f7fd fe40 	bl	80101b4 <_printf_i>
 8012534:	e7ec      	b.n	8012510 <_vfiprintf_r+0x1e4>
 8012536:	bf00      	nop
 8012538:	0801586c 	.word	0x0801586c
 801253c:	080159ac 	.word	0x080159ac
 8012540:	0801588c 	.word	0x0801588c
 8012544:	0801584c 	.word	0x0801584c
 8012548:	080159b2 	.word	0x080159b2
 801254c:	080159b6 	.word	0x080159b6
 8012550:	0800fc49 	.word	0x0800fc49
 8012554:	08012309 	.word	0x08012309

08012558 <lflush>:
 8012558:	8983      	ldrh	r3, [r0, #12]
 801255a:	f003 0309 	and.w	r3, r3, #9
 801255e:	2b09      	cmp	r3, #9
 8012560:	d101      	bne.n	8012566 <lflush+0xe>
 8012562:	f7ff b8ed 	b.w	8011740 <fflush>
 8012566:	2000      	movs	r0, #0
 8012568:	4770      	bx	lr
	...

0801256c <__srefill_r>:
 801256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801256e:	460c      	mov	r4, r1
 8012570:	4605      	mov	r5, r0
 8012572:	b118      	cbz	r0, 801257c <__srefill_r+0x10>
 8012574:	6983      	ldr	r3, [r0, #24]
 8012576:	b90b      	cbnz	r3, 801257c <__srefill_r+0x10>
 8012578:	f7ff f934 	bl	80117e4 <__sinit>
 801257c:	4b3b      	ldr	r3, [pc, #236]	; (801266c <__srefill_r+0x100>)
 801257e:	429c      	cmp	r4, r3
 8012580:	d10a      	bne.n	8012598 <__srefill_r+0x2c>
 8012582:	686c      	ldr	r4, [r5, #4]
 8012584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012588:	2300      	movs	r3, #0
 801258a:	6063      	str	r3, [r4, #4]
 801258c:	b293      	uxth	r3, r2
 801258e:	069e      	lsls	r6, r3, #26
 8012590:	d50c      	bpl.n	80125ac <__srefill_r+0x40>
 8012592:	f04f 30ff 	mov.w	r0, #4294967295
 8012596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012598:	4b35      	ldr	r3, [pc, #212]	; (8012670 <__srefill_r+0x104>)
 801259a:	429c      	cmp	r4, r3
 801259c:	d101      	bne.n	80125a2 <__srefill_r+0x36>
 801259e:	68ac      	ldr	r4, [r5, #8]
 80125a0:	e7f0      	b.n	8012584 <__srefill_r+0x18>
 80125a2:	4b34      	ldr	r3, [pc, #208]	; (8012674 <__srefill_r+0x108>)
 80125a4:	429c      	cmp	r4, r3
 80125a6:	bf08      	it	eq
 80125a8:	68ec      	ldreq	r4, [r5, #12]
 80125aa:	e7eb      	b.n	8012584 <__srefill_r+0x18>
 80125ac:	0758      	lsls	r0, r3, #29
 80125ae:	d448      	bmi.n	8012642 <__srefill_r+0xd6>
 80125b0:	06d9      	lsls	r1, r3, #27
 80125b2:	d405      	bmi.n	80125c0 <__srefill_r+0x54>
 80125b4:	2309      	movs	r3, #9
 80125b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80125ba:	602b      	str	r3, [r5, #0]
 80125bc:	81a2      	strh	r2, [r4, #12]
 80125be:	e7e8      	b.n	8012592 <__srefill_r+0x26>
 80125c0:	071a      	lsls	r2, r3, #28
 80125c2:	d50b      	bpl.n	80125dc <__srefill_r+0x70>
 80125c4:	4621      	mov	r1, r4
 80125c6:	4628      	mov	r0, r5
 80125c8:	f7ff f890 	bl	80116ec <_fflush_r>
 80125cc:	2800      	cmp	r0, #0
 80125ce:	d1e0      	bne.n	8012592 <__srefill_r+0x26>
 80125d0:	89a3      	ldrh	r3, [r4, #12]
 80125d2:	60a0      	str	r0, [r4, #8]
 80125d4:	f023 0308 	bic.w	r3, r3, #8
 80125d8:	81a3      	strh	r3, [r4, #12]
 80125da:	61a0      	str	r0, [r4, #24]
 80125dc:	89a3      	ldrh	r3, [r4, #12]
 80125de:	f043 0304 	orr.w	r3, r3, #4
 80125e2:	81a3      	strh	r3, [r4, #12]
 80125e4:	6923      	ldr	r3, [r4, #16]
 80125e6:	b91b      	cbnz	r3, 80125f0 <__srefill_r+0x84>
 80125e8:	4621      	mov	r1, r4
 80125ea:	4628      	mov	r0, r5
 80125ec:	f7ff f9d2 	bl	8011994 <__smakebuf_r>
 80125f0:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80125f4:	b2be      	uxth	r6, r7
 80125f6:	07b3      	lsls	r3, r6, #30
 80125f8:	d00f      	beq.n	801261a <__srefill_r+0xae>
 80125fa:	2301      	movs	r3, #1
 80125fc:	81a3      	strh	r3, [r4, #12]
 80125fe:	4b1e      	ldr	r3, [pc, #120]	; (8012678 <__srefill_r+0x10c>)
 8012600:	491e      	ldr	r1, [pc, #120]	; (801267c <__srefill_r+0x110>)
 8012602:	6818      	ldr	r0, [r3, #0]
 8012604:	f006 0609 	and.w	r6, r6, #9
 8012608:	f7ff f958 	bl	80118bc <_fwalk>
 801260c:	2e09      	cmp	r6, #9
 801260e:	81a7      	strh	r7, [r4, #12]
 8012610:	d103      	bne.n	801261a <__srefill_r+0xae>
 8012612:	4621      	mov	r1, r4
 8012614:	4628      	mov	r0, r5
 8012616:	f7fe ffe1 	bl	80115dc <__sflush_r>
 801261a:	6922      	ldr	r2, [r4, #16]
 801261c:	6022      	str	r2, [r4, #0]
 801261e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012620:	6963      	ldr	r3, [r4, #20]
 8012622:	6a21      	ldr	r1, [r4, #32]
 8012624:	4628      	mov	r0, r5
 8012626:	47b0      	blx	r6
 8012628:	2800      	cmp	r0, #0
 801262a:	6060      	str	r0, [r4, #4]
 801262c:	dc1c      	bgt.n	8012668 <__srefill_r+0xfc>
 801262e:	89a3      	ldrh	r3, [r4, #12]
 8012630:	bf17      	itett	ne
 8012632:	2200      	movne	r2, #0
 8012634:	f043 0320 	orreq.w	r3, r3, #32
 8012638:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 801263c:	6062      	strne	r2, [r4, #4]
 801263e:	81a3      	strh	r3, [r4, #12]
 8012640:	e7a7      	b.n	8012592 <__srefill_r+0x26>
 8012642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012644:	2900      	cmp	r1, #0
 8012646:	d0cd      	beq.n	80125e4 <__srefill_r+0x78>
 8012648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801264c:	4299      	cmp	r1, r3
 801264e:	d002      	beq.n	8012656 <__srefill_r+0xea>
 8012650:	4628      	mov	r0, r5
 8012652:	f7fd f9b7 	bl	800f9c4 <_free_r>
 8012656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012658:	6063      	str	r3, [r4, #4]
 801265a:	2000      	movs	r0, #0
 801265c:	6360      	str	r0, [r4, #52]	; 0x34
 801265e:	2b00      	cmp	r3, #0
 8012660:	d0c0      	beq.n	80125e4 <__srefill_r+0x78>
 8012662:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012664:	6023      	str	r3, [r4, #0]
 8012666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012668:	2000      	movs	r0, #0
 801266a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801266c:	0801586c 	.word	0x0801586c
 8012670:	0801588c 	.word	0x0801588c
 8012674:	0801584c 	.word	0x0801584c
 8012678:	080156fc 	.word	0x080156fc
 801267c:	08012559 	.word	0x08012559

08012680 <__sread>:
 8012680:	b510      	push	{r4, lr}
 8012682:	460c      	mov	r4, r1
 8012684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012688:	f000 f8b8 	bl	80127fc <_read_r>
 801268c:	2800      	cmp	r0, #0
 801268e:	bfab      	itete	ge
 8012690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012692:	89a3      	ldrhlt	r3, [r4, #12]
 8012694:	181b      	addge	r3, r3, r0
 8012696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801269a:	bfac      	ite	ge
 801269c:	6563      	strge	r3, [r4, #84]	; 0x54
 801269e:	81a3      	strhlt	r3, [r4, #12]
 80126a0:	bd10      	pop	{r4, pc}

080126a2 <__swrite>:
 80126a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126a6:	461f      	mov	r7, r3
 80126a8:	898b      	ldrh	r3, [r1, #12]
 80126aa:	05db      	lsls	r3, r3, #23
 80126ac:	4605      	mov	r5, r0
 80126ae:	460c      	mov	r4, r1
 80126b0:	4616      	mov	r6, r2
 80126b2:	d505      	bpl.n	80126c0 <__swrite+0x1e>
 80126b4:	2302      	movs	r3, #2
 80126b6:	2200      	movs	r2, #0
 80126b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126bc:	f000 f868 	bl	8012790 <_lseek_r>
 80126c0:	89a3      	ldrh	r3, [r4, #12]
 80126c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80126ca:	81a3      	strh	r3, [r4, #12]
 80126cc:	4632      	mov	r2, r6
 80126ce:	463b      	mov	r3, r7
 80126d0:	4628      	mov	r0, r5
 80126d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126d6:	f000 b817 	b.w	8012708 <_write_r>

080126da <__sseek>:
 80126da:	b510      	push	{r4, lr}
 80126dc:	460c      	mov	r4, r1
 80126de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126e2:	f000 f855 	bl	8012790 <_lseek_r>
 80126e6:	1c43      	adds	r3, r0, #1
 80126e8:	89a3      	ldrh	r3, [r4, #12]
 80126ea:	bf15      	itete	ne
 80126ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80126ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80126f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80126f6:	81a3      	strheq	r3, [r4, #12]
 80126f8:	bf18      	it	ne
 80126fa:	81a3      	strhne	r3, [r4, #12]
 80126fc:	bd10      	pop	{r4, pc}

080126fe <__sclose>:
 80126fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012702:	f000 b813 	b.w	801272c <_close_r>
	...

08012708 <_write_r>:
 8012708:	b538      	push	{r3, r4, r5, lr}
 801270a:	4c07      	ldr	r4, [pc, #28]	; (8012728 <_write_r+0x20>)
 801270c:	4605      	mov	r5, r0
 801270e:	4608      	mov	r0, r1
 8012710:	4611      	mov	r1, r2
 8012712:	2200      	movs	r2, #0
 8012714:	6022      	str	r2, [r4, #0]
 8012716:	461a      	mov	r2, r3
 8012718:	f000 f8b8 	bl	801288c <_write>
 801271c:	1c43      	adds	r3, r0, #1
 801271e:	d102      	bne.n	8012726 <_write_r+0x1e>
 8012720:	6823      	ldr	r3, [r4, #0]
 8012722:	b103      	cbz	r3, 8012726 <_write_r+0x1e>
 8012724:	602b      	str	r3, [r5, #0]
 8012726:	bd38      	pop	{r3, r4, r5, pc}
 8012728:	20002df4 	.word	0x20002df4

0801272c <_close_r>:
 801272c:	b538      	push	{r3, r4, r5, lr}
 801272e:	4c06      	ldr	r4, [pc, #24]	; (8012748 <_close_r+0x1c>)
 8012730:	2300      	movs	r3, #0
 8012732:	4605      	mov	r5, r0
 8012734:	4608      	mov	r0, r1
 8012736:	6023      	str	r3, [r4, #0]
 8012738:	f000 f872 	bl	8012820 <_close>
 801273c:	1c43      	adds	r3, r0, #1
 801273e:	d102      	bne.n	8012746 <_close_r+0x1a>
 8012740:	6823      	ldr	r3, [r4, #0]
 8012742:	b103      	cbz	r3, 8012746 <_close_r+0x1a>
 8012744:	602b      	str	r3, [r5, #0]
 8012746:	bd38      	pop	{r3, r4, r5, pc}
 8012748:	20002df4 	.word	0x20002df4

0801274c <_fstat_r>:
 801274c:	b538      	push	{r3, r4, r5, lr}
 801274e:	4c07      	ldr	r4, [pc, #28]	; (801276c <_fstat_r+0x20>)
 8012750:	2300      	movs	r3, #0
 8012752:	4605      	mov	r5, r0
 8012754:	4608      	mov	r0, r1
 8012756:	4611      	mov	r1, r2
 8012758:	6023      	str	r3, [r4, #0]
 801275a:	f000 f869 	bl	8012830 <_fstat>
 801275e:	1c43      	adds	r3, r0, #1
 8012760:	d102      	bne.n	8012768 <_fstat_r+0x1c>
 8012762:	6823      	ldr	r3, [r4, #0]
 8012764:	b103      	cbz	r3, 8012768 <_fstat_r+0x1c>
 8012766:	602b      	str	r3, [r5, #0]
 8012768:	bd38      	pop	{r3, r4, r5, pc}
 801276a:	bf00      	nop
 801276c:	20002df4 	.word	0x20002df4

08012770 <_isatty_r>:
 8012770:	b538      	push	{r3, r4, r5, lr}
 8012772:	4c06      	ldr	r4, [pc, #24]	; (801278c <_isatty_r+0x1c>)
 8012774:	2300      	movs	r3, #0
 8012776:	4605      	mov	r5, r0
 8012778:	4608      	mov	r0, r1
 801277a:	6023      	str	r3, [r4, #0]
 801277c:	f000 f860 	bl	8012840 <_isatty>
 8012780:	1c43      	adds	r3, r0, #1
 8012782:	d102      	bne.n	801278a <_isatty_r+0x1a>
 8012784:	6823      	ldr	r3, [r4, #0]
 8012786:	b103      	cbz	r3, 801278a <_isatty_r+0x1a>
 8012788:	602b      	str	r3, [r5, #0]
 801278a:	bd38      	pop	{r3, r4, r5, pc}
 801278c:	20002df4 	.word	0x20002df4

08012790 <_lseek_r>:
 8012790:	b538      	push	{r3, r4, r5, lr}
 8012792:	4c07      	ldr	r4, [pc, #28]	; (80127b0 <_lseek_r+0x20>)
 8012794:	4605      	mov	r5, r0
 8012796:	4608      	mov	r0, r1
 8012798:	4611      	mov	r1, r2
 801279a:	2200      	movs	r2, #0
 801279c:	6022      	str	r2, [r4, #0]
 801279e:	461a      	mov	r2, r3
 80127a0:	f000 f856 	bl	8012850 <_lseek>
 80127a4:	1c43      	adds	r3, r0, #1
 80127a6:	d102      	bne.n	80127ae <_lseek_r+0x1e>
 80127a8:	6823      	ldr	r3, [r4, #0]
 80127aa:	b103      	cbz	r3, 80127ae <_lseek_r+0x1e>
 80127ac:	602b      	str	r3, [r5, #0]
 80127ae:	bd38      	pop	{r3, r4, r5, pc}
 80127b0:	20002df4 	.word	0x20002df4

080127b4 <memmove>:
 80127b4:	4288      	cmp	r0, r1
 80127b6:	b510      	push	{r4, lr}
 80127b8:	eb01 0302 	add.w	r3, r1, r2
 80127bc:	d803      	bhi.n	80127c6 <memmove+0x12>
 80127be:	1e42      	subs	r2, r0, #1
 80127c0:	4299      	cmp	r1, r3
 80127c2:	d10c      	bne.n	80127de <memmove+0x2a>
 80127c4:	bd10      	pop	{r4, pc}
 80127c6:	4298      	cmp	r0, r3
 80127c8:	d2f9      	bcs.n	80127be <memmove+0xa>
 80127ca:	1881      	adds	r1, r0, r2
 80127cc:	1ad2      	subs	r2, r2, r3
 80127ce:	42d3      	cmn	r3, r2
 80127d0:	d100      	bne.n	80127d4 <memmove+0x20>
 80127d2:	bd10      	pop	{r4, pc}
 80127d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80127d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80127dc:	e7f7      	b.n	80127ce <memmove+0x1a>
 80127de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80127e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80127e6:	e7eb      	b.n	80127c0 <memmove+0xc>

080127e8 <_malloc_usable_size_r>:
 80127e8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80127ec:	2800      	cmp	r0, #0
 80127ee:	f1a0 0004 	sub.w	r0, r0, #4
 80127f2:	bfbc      	itt	lt
 80127f4:	580b      	ldrlt	r3, [r1, r0]
 80127f6:	18c0      	addlt	r0, r0, r3
 80127f8:	4770      	bx	lr
	...

080127fc <_read_r>:
 80127fc:	b538      	push	{r3, r4, r5, lr}
 80127fe:	4c07      	ldr	r4, [pc, #28]	; (801281c <_read_r+0x20>)
 8012800:	4605      	mov	r5, r0
 8012802:	4608      	mov	r0, r1
 8012804:	4611      	mov	r1, r2
 8012806:	2200      	movs	r2, #0
 8012808:	6022      	str	r2, [r4, #0]
 801280a:	461a      	mov	r2, r3
 801280c:	f000 f828 	bl	8012860 <_read>
 8012810:	1c43      	adds	r3, r0, #1
 8012812:	d102      	bne.n	801281a <_read_r+0x1e>
 8012814:	6823      	ldr	r3, [r4, #0]
 8012816:	b103      	cbz	r3, 801281a <_read_r+0x1e>
 8012818:	602b      	str	r3, [r5, #0]
 801281a:	bd38      	pop	{r3, r4, r5, pc}
 801281c:	20002df4 	.word	0x20002df4

08012820 <_close>:
 8012820:	4b02      	ldr	r3, [pc, #8]	; (801282c <_close+0xc>)
 8012822:	2258      	movs	r2, #88	; 0x58
 8012824:	601a      	str	r2, [r3, #0]
 8012826:	f04f 30ff 	mov.w	r0, #4294967295
 801282a:	4770      	bx	lr
 801282c:	20002df4 	.word	0x20002df4

08012830 <_fstat>:
 8012830:	4b02      	ldr	r3, [pc, #8]	; (801283c <_fstat+0xc>)
 8012832:	2258      	movs	r2, #88	; 0x58
 8012834:	601a      	str	r2, [r3, #0]
 8012836:	f04f 30ff 	mov.w	r0, #4294967295
 801283a:	4770      	bx	lr
 801283c:	20002df4 	.word	0x20002df4

08012840 <_isatty>:
 8012840:	4b02      	ldr	r3, [pc, #8]	; (801284c <_isatty+0xc>)
 8012842:	2258      	movs	r2, #88	; 0x58
 8012844:	601a      	str	r2, [r3, #0]
 8012846:	2000      	movs	r0, #0
 8012848:	4770      	bx	lr
 801284a:	bf00      	nop
 801284c:	20002df4 	.word	0x20002df4

08012850 <_lseek>:
 8012850:	4b02      	ldr	r3, [pc, #8]	; (801285c <_lseek+0xc>)
 8012852:	2258      	movs	r2, #88	; 0x58
 8012854:	601a      	str	r2, [r3, #0]
 8012856:	f04f 30ff 	mov.w	r0, #4294967295
 801285a:	4770      	bx	lr
 801285c:	20002df4 	.word	0x20002df4

08012860 <_read>:
 8012860:	4b02      	ldr	r3, [pc, #8]	; (801286c <_read+0xc>)
 8012862:	2258      	movs	r2, #88	; 0x58
 8012864:	601a      	str	r2, [r3, #0]
 8012866:	f04f 30ff 	mov.w	r0, #4294967295
 801286a:	4770      	bx	lr
 801286c:	20002df4 	.word	0x20002df4

08012870 <_sbrk>:
 8012870:	4b04      	ldr	r3, [pc, #16]	; (8012884 <_sbrk+0x14>)
 8012872:	6819      	ldr	r1, [r3, #0]
 8012874:	4602      	mov	r2, r0
 8012876:	b909      	cbnz	r1, 801287c <_sbrk+0xc>
 8012878:	4903      	ldr	r1, [pc, #12]	; (8012888 <_sbrk+0x18>)
 801287a:	6019      	str	r1, [r3, #0]
 801287c:	6818      	ldr	r0, [r3, #0]
 801287e:	4402      	add	r2, r0
 8012880:	601a      	str	r2, [r3, #0]
 8012882:	4770      	bx	lr
 8012884:	2000048c 	.word	0x2000048c
 8012888:	20002df8 	.word	0x20002df8

0801288c <_write>:
 801288c:	4b02      	ldr	r3, [pc, #8]	; (8012898 <_write+0xc>)
 801288e:	2258      	movs	r2, #88	; 0x58
 8012890:	601a      	str	r2, [r3, #0]
 8012892:	f04f 30ff 	mov.w	r0, #4294967295
 8012896:	4770      	bx	lr
 8012898:	20002df4 	.word	0x20002df4

0801289c <_init>:
 801289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801289e:	bf00      	nop
 80128a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128a2:	bc08      	pop	{r3}
 80128a4:	469e      	mov	lr, r3
 80128a6:	4770      	bx	lr

080128a8 <_fini>:
 80128a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128aa:	bf00      	nop
 80128ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128ae:	bc08      	pop	{r3}
 80128b0:	469e      	mov	lr, r3
 80128b2:	4770      	bx	lr
