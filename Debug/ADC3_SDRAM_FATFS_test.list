
ADC3_SDRAM_FATFS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012dc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032a0  08012f98  08012f98  00022f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016238  08016238  00026238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016240  08016240  00026240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016244  08016244  00026244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000034c  20000000  08016248  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002acc  2000034c  08016594  0003034c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002e18  08016594  00032e18  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003f745  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006881  00000000  00000000  0006fac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002158  00000000  00000000  00076348  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001e90  00000000  00000000  000784a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000148e9  00000000  00000000  0007a330  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a0e2  00000000  00000000  0008ec19  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00098cfb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009e0c  00000000  00000000  00098d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000006c  00000000  00000000  000a2b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000e3  00000000  00000000  000a2bf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000034c 	.word	0x2000034c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012f7c 	.word	0x08012f7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000350 	.word	0x20000350
 800020c:	08012f7c 	.word	0x08012f7c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr

080002c4 <strlen>:
 80002c4:	4603      	mov	r3, r0
 80002c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d1fb      	bne.n	80002c6 <strlen+0x2>
 80002ce:	1a18      	subs	r0, r3, r0
 80002d0:	3801      	subs	r0, #1
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000412:	f1a4 0401 	sub.w	r4, r4, #1
 8000416:	d1e9      	bne.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f092 0f00 	teq	r2, #0
 80005be:	bf14      	ite	ne
 80005c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c4:	4770      	bxeq	lr
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d4:	e720      	b.n	8000418 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_ul2d>:
 80005d8:	ea50 0201 	orrs.w	r2, r0, r1
 80005dc:	bf08      	it	eq
 80005de:	4770      	bxeq	lr
 80005e0:	b530      	push	{r4, r5, lr}
 80005e2:	f04f 0500 	mov.w	r5, #0
 80005e6:	e00a      	b.n	80005fe <__aeabi_l2d+0x16>

080005e8 <__aeabi_l2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f6:	d502      	bpl.n	80005fe <__aeabi_l2d+0x16>
 80005f8:	4240      	negs	r0, r0
 80005fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000602:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000606:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060a:	f43f aedc 	beq.w	80003c6 <__adddf3+0xe6>
 800060e:	f04f 0203 	mov.w	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000626:	f1c2 0320 	rsb	r3, r2, #32
 800062a:	fa00 fc03 	lsl.w	ip, r0, r3
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	fa01 fe03 	lsl.w	lr, r1, r3
 8000636:	ea40 000e 	orr.w	r0, r0, lr
 800063a:	fa21 f102 	lsr.w	r1, r1, r2
 800063e:	4414      	add	r4, r2
 8000640:	e6c1      	b.n	80003c6 <__adddf3+0xe6>
 8000642:	bf00      	nop

08000644 <__aeabi_dmul>:
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000652:	bf1d      	ittte	ne
 8000654:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000658:	ea94 0f0c 	teqne	r4, ip
 800065c:	ea95 0f0c 	teqne	r5, ip
 8000660:	f000 f8de 	bleq	8000820 <__aeabi_dmul+0x1dc>
 8000664:	442c      	add	r4, r5
 8000666:	ea81 0603 	eor.w	r6, r1, r3
 800066a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000672:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000676:	bf18      	it	ne
 8000678:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000684:	d038      	beq.n	80006f8 <__aeabi_dmul+0xb4>
 8000686:	fba0 ce02 	umull	ip, lr, r0, r2
 800068a:	f04f 0500 	mov.w	r5, #0
 800068e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000692:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000696:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069a:	f04f 0600 	mov.w	r6, #0
 800069e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a2:	f09c 0f00 	teq	ip, #0
 80006a6:	bf18      	it	ne
 80006a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b8:	d204      	bcs.n	80006c4 <__aeabi_dmul+0x80>
 80006ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006be:	416d      	adcs	r5, r5
 80006c0:	eb46 0606 	adc.w	r6, r6, r6
 80006c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006dc:	bf88      	it	hi
 80006de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e2:	d81e      	bhi.n	8000722 <__aeabi_dmul+0xde>
 80006e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e8:	bf08      	it	eq
 80006ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ee:	f150 0000 	adcs.w	r0, r0, #0
 80006f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006fc:	ea46 0101 	orr.w	r1, r6, r1
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800070c:	bfc2      	ittt	gt
 800070e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000712:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000716:	bd70      	popgt	{r4, r5, r6, pc}
 8000718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800071c:	f04f 0e00 	mov.w	lr, #0
 8000720:	3c01      	subs	r4, #1
 8000722:	f300 80ab 	bgt.w	800087c <__aeabi_dmul+0x238>
 8000726:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072a:	bfde      	ittt	le
 800072c:	2000      	movle	r0, #0
 800072e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000732:	bd70      	pople	{r4, r5, r6, pc}
 8000734:	f1c4 0400 	rsb	r4, r4, #0
 8000738:	3c20      	subs	r4, #32
 800073a:	da35      	bge.n	80007a8 <__aeabi_dmul+0x164>
 800073c:	340c      	adds	r4, #12
 800073e:	dc1b      	bgt.n	8000778 <__aeabi_dmul+0x134>
 8000740:	f104 0414 	add.w	r4, r4, #20
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f305 	lsl.w	r3, r0, r5
 800074c:	fa20 f004 	lsr.w	r0, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800075c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	fa21 f604 	lsr.w	r6, r1, r4
 8000768:	eb42 0106 	adc.w	r1, r2, r6
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f1c4 040c 	rsb	r4, r4, #12
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f304 	lsl.w	r3, r0, r4
 8000784:	fa20 f005 	lsr.w	r0, r0, r5
 8000788:	fa01 f204 	lsl.w	r2, r1, r4
 800078c:	ea40 0002 	orr.w	r0, r0, r2
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000798:	f141 0100 	adc.w	r1, r1, #0
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f205 	lsl.w	r2, r0, r5
 80007b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b4:	fa20 f304 	lsr.w	r3, r0, r4
 80007b8:	fa01 f205 	lsl.w	r2, r1, r5
 80007bc:	ea43 0302 	orr.w	r3, r3, r2
 80007c0:	fa21 f004 	lsr.w	r0, r1, r4
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	fa21 f204 	lsr.w	r2, r1, r4
 80007cc:	ea20 0002 	bic.w	r0, r0, r2
 80007d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d8:	bf08      	it	eq
 80007da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	f094 0f00 	teq	r4, #0
 80007e4:	d10f      	bne.n	8000806 <__aeabi_dmul+0x1c2>
 80007e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ea:	0040      	lsls	r0, r0, #1
 80007ec:	eb41 0101 	adc.w	r1, r1, r1
 80007f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f4:	bf08      	it	eq
 80007f6:	3c01      	subeq	r4, #1
 80007f8:	d0f7      	beq.n	80007ea <__aeabi_dmul+0x1a6>
 80007fa:	ea41 0106 	orr.w	r1, r1, r6
 80007fe:	f095 0f00 	teq	r5, #0
 8000802:	bf18      	it	ne
 8000804:	4770      	bxne	lr
 8000806:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080a:	0052      	lsls	r2, r2, #1
 800080c:	eb43 0303 	adc.w	r3, r3, r3
 8000810:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000814:	bf08      	it	eq
 8000816:	3d01      	subeq	r5, #1
 8000818:	d0f7      	beq.n	800080a <__aeabi_dmul+0x1c6>
 800081a:	ea43 0306 	orr.w	r3, r3, r6
 800081e:	4770      	bx	lr
 8000820:	ea94 0f0c 	teq	r4, ip
 8000824:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000828:	bf18      	it	ne
 800082a:	ea95 0f0c 	teqne	r5, ip
 800082e:	d00c      	beq.n	800084a <__aeabi_dmul+0x206>
 8000830:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000834:	bf18      	it	ne
 8000836:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083a:	d1d1      	bne.n	80007e0 <__aeabi_dmul+0x19c>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084e:	bf06      	itte	eq
 8000850:	4610      	moveq	r0, r2
 8000852:	4619      	moveq	r1, r3
 8000854:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000858:	d019      	beq.n	800088e <__aeabi_dmul+0x24a>
 800085a:	ea94 0f0c 	teq	r4, ip
 800085e:	d102      	bne.n	8000866 <__aeabi_dmul+0x222>
 8000860:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000864:	d113      	bne.n	800088e <__aeabi_dmul+0x24a>
 8000866:	ea95 0f0c 	teq	r5, ip
 800086a:	d105      	bne.n	8000878 <__aeabi_dmul+0x234>
 800086c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000870:	bf1c      	itt	ne
 8000872:	4610      	movne	r0, r2
 8000874:	4619      	movne	r1, r3
 8000876:	d10a      	bne.n	800088e <__aeabi_dmul+0x24a>
 8000878:	ea81 0103 	eor.w	r1, r1, r3
 800087c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000880:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000884:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000888:	f04f 0000 	mov.w	r0, #0
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000892:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000896:	bd70      	pop	{r4, r5, r6, pc}

08000898 <__aeabi_ddiv>:
 8000898:	b570      	push	{r4, r5, r6, lr}
 800089a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a6:	bf1d      	ittte	ne
 80008a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008ac:	ea94 0f0c 	teqne	r4, ip
 80008b0:	ea95 0f0c 	teqne	r5, ip
 80008b4:	f000 f8a7 	bleq	8000a06 <__aeabi_ddiv+0x16e>
 80008b8:	eba4 0405 	sub.w	r4, r4, r5
 80008bc:	ea81 0e03 	eor.w	lr, r1, r3
 80008c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c8:	f000 8088 	beq.w	80009dc <__aeabi_ddiv+0x144>
 80008cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f0:	429d      	cmp	r5, r3
 80008f2:	bf08      	it	eq
 80008f4:	4296      	cmpeq	r6, r2
 80008f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fe:	d202      	bcs.n	8000906 <__aeabi_ddiv+0x6e>
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	1ab6      	subs	r6, r6, r2
 8000908:	eb65 0503 	sbc.w	r5, r5, r3
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000916:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 000c 	orrcs.w	r0, r0, ip
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000974:	ea55 0e06 	orrs.w	lr, r5, r6
 8000978:	d018      	beq.n	80009ac <__aeabi_ddiv+0x114>
 800097a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000982:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000986:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000992:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000996:	d1c0      	bne.n	800091a <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	d10b      	bne.n	80009b6 <__aeabi_ddiv+0x11e>
 800099e:	ea41 0100 	orr.w	r1, r1, r0
 80009a2:	f04f 0000 	mov.w	r0, #0
 80009a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009aa:	e7b6      	b.n	800091a <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	bf04      	itt	eq
 80009b2:	4301      	orreq	r1, r0
 80009b4:	2000      	moveq	r0, #0
 80009b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ba:	bf88      	it	hi
 80009bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c0:	f63f aeaf 	bhi.w	8000722 <__aeabi_dmul+0xde>
 80009c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c8:	bf04      	itt	eq
 80009ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d2:	f150 0000 	adcs.w	r0, r0, #0
 80009d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e8:	bfc2      	ittt	gt
 80009ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f2:	bd70      	popgt	{r4, r5, r6, pc}
 80009f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f8:	f04f 0e00 	mov.w	lr, #0
 80009fc:	3c01      	subs	r4, #1
 80009fe:	e690      	b.n	8000722 <__aeabi_dmul+0xde>
 8000a00:	ea45 0e06 	orr.w	lr, r5, r6
 8000a04:	e68d      	b.n	8000722 <__aeabi_dmul+0xde>
 8000a06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0a:	ea94 0f0c 	teq	r4, ip
 8000a0e:	bf08      	it	eq
 8000a10:	ea95 0f0c 	teqeq	r5, ip
 8000a14:	f43f af3b 	beq.w	800088e <__aeabi_dmul+0x24a>
 8000a18:	ea94 0f0c 	teq	r4, ip
 8000a1c:	d10a      	bne.n	8000a34 <__aeabi_ddiv+0x19c>
 8000a1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a22:	f47f af34 	bne.w	800088e <__aeabi_dmul+0x24a>
 8000a26:	ea95 0f0c 	teq	r5, ip
 8000a2a:	f47f af25 	bne.w	8000878 <__aeabi_dmul+0x234>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e72c      	b.n	800088e <__aeabi_dmul+0x24a>
 8000a34:	ea95 0f0c 	teq	r5, ip
 8000a38:	d106      	bne.n	8000a48 <__aeabi_ddiv+0x1b0>
 8000a3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3e:	f43f aefd 	beq.w	800083c <__aeabi_dmul+0x1f8>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e722      	b.n	800088e <__aeabi_dmul+0x24a>
 8000a48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a4c:	bf18      	it	ne
 8000a4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a52:	f47f aec5 	bne.w	80007e0 <__aeabi_dmul+0x19c>
 8000a56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5a:	f47f af0d 	bne.w	8000878 <__aeabi_dmul+0x234>
 8000a5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a62:	f47f aeeb 	bne.w	800083c <__aeabi_dmul+0x1f8>
 8000a66:	e712      	b.n	800088e <__aeabi_dmul+0x24a>

08000a68 <__gedf2>:
 8000a68:	f04f 3cff 	mov.w	ip, #4294967295
 8000a6c:	e006      	b.n	8000a7c <__cmpdf2+0x4>
 8000a6e:	bf00      	nop

08000a70 <__ledf2>:
 8000a70:	f04f 0c01 	mov.w	ip, #1
 8000a74:	e002      	b.n	8000a7c <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__cmpdf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a92:	d01b      	beq.n	8000acc <__cmpdf2+0x54>
 8000a94:	b001      	add	sp, #4
 8000a96:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9a:	bf0c      	ite	eq
 8000a9c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa0:	ea91 0f03 	teqne	r1, r3
 8000aa4:	bf02      	ittt	eq
 8000aa6:	ea90 0f02 	teqeq	r0, r2
 8000aaa:	2000      	moveq	r0, #0
 8000aac:	4770      	bxeq	lr
 8000aae:	f110 0f00 	cmn.w	r0, #0
 8000ab2:	ea91 0f03 	teq	r1, r3
 8000ab6:	bf58      	it	pl
 8000ab8:	4299      	cmppl	r1, r3
 8000aba:	bf08      	it	eq
 8000abc:	4290      	cmpeq	r0, r2
 8000abe:	bf2c      	ite	cs
 8000ac0:	17d8      	asrcs	r0, r3, #31
 8000ac2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac6:	f040 0001 	orr.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__cmpdf2+0x64>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d107      	bne.n	8000aec <__cmpdf2+0x74>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d1d6      	bne.n	8000a94 <__cmpdf2+0x1c>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d0d3      	beq.n	8000a94 <__cmpdf2+0x1c>
 8000aec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_cdrcmple>:
 8000af4:	4684      	mov	ip, r0
 8000af6:	4610      	mov	r0, r2
 8000af8:	4662      	mov	r2, ip
 8000afa:	468c      	mov	ip, r1
 8000afc:	4619      	mov	r1, r3
 8000afe:	4663      	mov	r3, ip
 8000b00:	e000      	b.n	8000b04 <__aeabi_cdcmpeq>
 8000b02:	bf00      	nop

08000b04 <__aeabi_cdcmpeq>:
 8000b04:	b501      	push	{r0, lr}
 8000b06:	f7ff ffb7 	bl	8000a78 <__cmpdf2>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	bf48      	it	mi
 8000b0e:	f110 0f00 	cmnmi.w	r0, #0
 8000b12:	bd01      	pop	{r0, pc}

08000b14 <__aeabi_dcmpeq>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff fff4 	bl	8000b04 <__aeabi_cdcmpeq>
 8000b1c:	bf0c      	ite	eq
 8000b1e:	2001      	moveq	r0, #1
 8000b20:	2000      	movne	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmplt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffea 	bl	8000b04 <__aeabi_cdcmpeq>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmple>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffe0 	bl	8000b04 <__aeabi_cdcmpeq>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpge>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffce 	bl	8000af4 <__aeabi_cdrcmple>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpgt>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffc4 	bl	8000af4 <__aeabi_cdrcmple>
 8000b6c:	bf34      	ite	cc
 8000b6e:	2001      	movcc	r0, #1
 8000b70:	2000      	movcs	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpun>:
 8000b78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b80:	d102      	bne.n	8000b88 <__aeabi_dcmpun+0x10>
 8000b82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b86:	d10a      	bne.n	8000b9e <__aeabi_dcmpun+0x26>
 8000b88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d102      	bne.n	8000b98 <__aeabi_dcmpun+0x20>
 8000b92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b96:	d102      	bne.n	8000b9e <__aeabi_dcmpun+0x26>
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	f04f 0001 	mov.w	r0, #1
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_d2iz>:
 8000ba4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bac:	d215      	bcs.n	8000bda <__aeabi_d2iz+0x36>
 8000bae:	d511      	bpl.n	8000bd4 <__aeabi_d2iz+0x30>
 8000bb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb8:	d912      	bls.n	8000be0 <__aeabi_d2iz+0x3c>
 8000bba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	bf18      	it	ne
 8000bd0:	4240      	negne	r0, r0
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d105      	bne.n	8000bec <__aeabi_d2iz+0x48>
 8000be0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be4:	bf08      	it	eq
 8000be6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_d2uiz>:
 8000bf4:	004a      	lsls	r2, r1, #1
 8000bf6:	d211      	bcs.n	8000c1c <__aeabi_d2uiz+0x28>
 8000bf8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bfc:	d211      	bcs.n	8000c22 <__aeabi_d2uiz+0x2e>
 8000bfe:	d50d      	bpl.n	8000c1c <__aeabi_d2uiz+0x28>
 8000c00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c08:	d40e      	bmi.n	8000c28 <__aeabi_d2uiz+0x34>
 8000c0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c16:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1a:	4770      	bx	lr
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c26:	d102      	bne.n	8000c2e <__aeabi_d2uiz+0x3a>
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	4770      	bx	lr
 8000c2e:	f04f 0000 	mov.w	r0, #0
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_d2f>:
 8000c34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c3c:	bf24      	itt	cs
 8000c3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c46:	d90d      	bls.n	8000c64 <__aeabi_d2f+0x30>
 8000c48:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c5c:	bf08      	it	eq
 8000c5e:	f020 0001 	biceq.w	r0, r0, #1
 8000c62:	4770      	bx	lr
 8000c64:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c68:	d121      	bne.n	8000cae <__aeabi_d2f+0x7a>
 8000c6a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6e:	bfbc      	itt	lt
 8000c70:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	4770      	bxlt	lr
 8000c76:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7e:	f1c2 0218 	rsb	r2, r2, #24
 8000c82:	f1c2 0c20 	rsb	ip, r2, #32
 8000c86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8e:	bf18      	it	ne
 8000c90:	f040 0001 	orrne.w	r0, r0, #1
 8000c94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca0:	ea40 000c 	orr.w	r0, r0, ip
 8000ca4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cac:	e7cc      	b.n	8000c48 <__aeabi_d2f+0x14>
 8000cae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb2:	d107      	bne.n	8000cc4 <__aeabi_d2f+0x90>
 8000cb4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb8:	bf1e      	ittt	ne
 8000cba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cbe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc2:	4770      	bxne	lr
 8000cc4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ccc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_uldivmod>:
 8000cd4:	b953      	cbnz	r3, 8000cec <__aeabi_uldivmod+0x18>
 8000cd6:	b94a      	cbnz	r2, 8000cec <__aeabi_uldivmod+0x18>
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	bf08      	it	eq
 8000cdc:	2800      	cmpeq	r0, #0
 8000cde:	bf1c      	itt	ne
 8000ce0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce8:	f000 b97a 	b.w	8000fe0 <__aeabi_idiv0>
 8000cec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf4:	f000 f806 	bl	8000d04 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4770      	bx	lr

08000d04 <__udivmoddi4>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	468c      	mov	ip, r1
 8000d0a:	460d      	mov	r5, r1
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	9e08      	ldr	r6, [sp, #32]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d151      	bne.n	8000db8 <__udivmoddi4+0xb4>
 8000d14:	428a      	cmp	r2, r1
 8000d16:	4617      	mov	r7, r2
 8000d18:	d96d      	bls.n	8000df6 <__udivmoddi4+0xf2>
 8000d1a:	fab2 fe82 	clz	lr, r2
 8000d1e:	f1be 0f00 	cmp.w	lr, #0
 8000d22:	d00b      	beq.n	8000d3c <__udivmoddi4+0x38>
 8000d24:	f1ce 0c20 	rsb	ip, lr, #32
 8000d28:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d2c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d30:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d34:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d38:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d3c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d40:	0c25      	lsrs	r5, r4, #16
 8000d42:	fbbc f8fa 	udiv	r8, ip, sl
 8000d46:	fa1f f987 	uxth.w	r9, r7
 8000d4a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d4e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d52:	fb08 f309 	mul.w	r3, r8, r9
 8000d56:	42ab      	cmp	r3, r5
 8000d58:	d90a      	bls.n	8000d70 <__udivmoddi4+0x6c>
 8000d5a:	19ed      	adds	r5, r5, r7
 8000d5c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d60:	f080 8123 	bcs.w	8000faa <__udivmoddi4+0x2a6>
 8000d64:	42ab      	cmp	r3, r5
 8000d66:	f240 8120 	bls.w	8000faa <__udivmoddi4+0x2a6>
 8000d6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6e:	443d      	add	r5, r7
 8000d70:	1aed      	subs	r5, r5, r3
 8000d72:	b2a4      	uxth	r4, r4
 8000d74:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d78:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb00 f909 	mul.w	r9, r0, r9
 8000d84:	45a1      	cmp	r9, r4
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x98>
 8000d88:	19e4      	adds	r4, r4, r7
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8e:	f080 810a 	bcs.w	8000fa6 <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8107 	bls.w	8000fa6 <__udivmoddi4+0x2a2>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	eba4 0409 	sub.w	r4, r4, r9
 8000da0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da4:	2100      	movs	r1, #0
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d061      	beq.n	8000e6e <__udivmoddi4+0x16a>
 8000daa:	fa24 f40e 	lsr.w	r4, r4, lr
 8000dae:	2300      	movs	r3, #0
 8000db0:	6034      	str	r4, [r6, #0]
 8000db2:	6073      	str	r3, [r6, #4]
 8000db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0xc8>
 8000dbc:	2e00      	cmp	r6, #0
 8000dbe:	d054      	beq.n	8000e6a <__udivmoddi4+0x166>
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000dc6:	4608      	mov	r0, r1
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	fab3 f183 	clz	r1, r3
 8000dd0:	2900      	cmp	r1, #0
 8000dd2:	f040 808e 	bne.w	8000ef2 <__udivmoddi4+0x1ee>
 8000dd6:	42ab      	cmp	r3, r5
 8000dd8:	d302      	bcc.n	8000de0 <__udivmoddi4+0xdc>
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	f200 80fa 	bhi.w	8000fd4 <__udivmoddi4+0x2d0>
 8000de0:	1a84      	subs	r4, r0, r2
 8000de2:	eb65 0503 	sbc.w	r5, r5, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	46ac      	mov	ip, r5
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d03f      	beq.n	8000e6e <__udivmoddi4+0x16a>
 8000dee:	e886 1010 	stmia.w	r6, {r4, ip}
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	b912      	cbnz	r2, 8000dfe <__udivmoddi4+0xfa>
 8000df8:	2701      	movs	r7, #1
 8000dfa:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dfe:	fab7 fe87 	clz	lr, r7
 8000e02:	f1be 0f00 	cmp.w	lr, #0
 8000e06:	d134      	bne.n	8000e72 <__udivmoddi4+0x16e>
 8000e08:	1beb      	subs	r3, r5, r7
 8000e0a:	0c3a      	lsrs	r2, r7, #16
 8000e0c:	fa1f fc87 	uxth.w	ip, r7
 8000e10:	2101      	movs	r1, #1
 8000e12:	fbb3 f8f2 	udiv	r8, r3, r2
 8000e16:	0c25      	lsrs	r5, r4, #16
 8000e18:	fb02 3318 	mls	r3, r2, r8, r3
 8000e1c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e20:	fb0c f308 	mul.w	r3, ip, r8
 8000e24:	42ab      	cmp	r3, r5
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0x134>
 8000e28:	19ed      	adds	r5, r5, r7
 8000e2a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0x132>
 8000e30:	42ab      	cmp	r3, r5
 8000e32:	f200 80d1 	bhi.w	8000fd8 <__udivmoddi4+0x2d4>
 8000e36:	4680      	mov	r8, r0
 8000e38:	1aed      	subs	r5, r5, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e40:	fb02 5510 	mls	r5, r2, r0, r5
 8000e44:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e48:	fb0c fc00 	mul.w	ip, ip, r0
 8000e4c:	45a4      	cmp	ip, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x15c>
 8000e50:	19e4      	adds	r4, r4, r7
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x15a>
 8000e58:	45a4      	cmp	ip, r4
 8000e5a:	f200 80b8 	bhi.w	8000fce <__udivmoddi4+0x2ca>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 040c 	sub.w	r4, r4, ip
 8000e64:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e68:	e79d      	b.n	8000da6 <__udivmoddi4+0xa2>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1ce 0420 	rsb	r4, lr, #32
 8000e76:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e7a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e7e:	fa20 f804 	lsr.w	r8, r0, r4
 8000e82:	0c3a      	lsrs	r2, r7, #16
 8000e84:	fa25 f404 	lsr.w	r4, r5, r4
 8000e88:	ea48 0803 	orr.w	r8, r8, r3
 8000e8c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e90:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e94:	fb02 4411 	mls	r4, r2, r1, r4
 8000e98:	fa1f fc87 	uxth.w	ip, r7
 8000e9c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000ea0:	fb01 f30c 	mul.w	r3, r1, ip
 8000ea4:	42ab      	cmp	r3, r5
 8000ea6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x1bc>
 8000eac:	19ed      	adds	r5, r5, r7
 8000eae:	f101 30ff 	add.w	r0, r1, #4294967295
 8000eb2:	f080 808a 	bcs.w	8000fca <__udivmoddi4+0x2c6>
 8000eb6:	42ab      	cmp	r3, r5
 8000eb8:	f240 8087 	bls.w	8000fca <__udivmoddi4+0x2c6>
 8000ebc:	3902      	subs	r1, #2
 8000ebe:	443d      	add	r5, r7
 8000ec0:	1aeb      	subs	r3, r5, r3
 8000ec2:	fa1f f588 	uxth.w	r5, r8
 8000ec6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000eca:	fb02 3310 	mls	r3, r2, r0, r3
 8000ece:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ed2:	fb00 f30c 	mul.w	r3, r0, ip
 8000ed6:	42ab      	cmp	r3, r5
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1e6>
 8000eda:	19ed      	adds	r5, r5, r7
 8000edc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee0:	d26f      	bcs.n	8000fc2 <__udivmoddi4+0x2be>
 8000ee2:	42ab      	cmp	r3, r5
 8000ee4:	d96d      	bls.n	8000fc2 <__udivmoddi4+0x2be>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	443d      	add	r5, r7
 8000eea:	1aeb      	subs	r3, r5, r3
 8000eec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef0:	e78f      	b.n	8000e12 <__udivmoddi4+0x10e>
 8000ef2:	f1c1 0720 	rsb	r7, r1, #32
 8000ef6:	fa22 f807 	lsr.w	r8, r2, r7
 8000efa:	408b      	lsls	r3, r1
 8000efc:	fa05 f401 	lsl.w	r4, r5, r1
 8000f00:	ea48 0303 	orr.w	r3, r8, r3
 8000f04:	fa20 fe07 	lsr.w	lr, r0, r7
 8000f08:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000f0c:	40fd      	lsrs	r5, r7
 8000f0e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000f12:	fbb5 f9fc 	udiv	r9, r5, ip
 8000f16:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000f1a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000f1e:	fa1f f883 	uxth.w	r8, r3
 8000f22:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f26:	fb09 f408 	mul.w	r4, r9, r8
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	fa02 f201 	lsl.w	r2, r2, r1
 8000f30:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x244>
 8000f36:	18ed      	adds	r5, r5, r3
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f3c:	d243      	bcs.n	8000fc6 <__udivmoddi4+0x2c2>
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	d941      	bls.n	8000fc6 <__udivmoddi4+0x2c2>
 8000f42:	f1a9 0902 	sub.w	r9, r9, #2
 8000f46:	441d      	add	r5, r3
 8000f48:	1b2d      	subs	r5, r5, r4
 8000f4a:	fa1f fe8e 	uxth.w	lr, lr
 8000f4e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f52:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f56:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f5a:	fb00 f808 	mul.w	r8, r0, r8
 8000f5e:	45a0      	cmp	r8, r4
 8000f60:	d907      	bls.n	8000f72 <__udivmoddi4+0x26e>
 8000f62:	18e4      	adds	r4, r4, r3
 8000f64:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f68:	d229      	bcs.n	8000fbe <__udivmoddi4+0x2ba>
 8000f6a:	45a0      	cmp	r8, r4
 8000f6c:	d927      	bls.n	8000fbe <__udivmoddi4+0x2ba>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	441c      	add	r4, r3
 8000f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f76:	eba4 0408 	sub.w	r4, r4, r8
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	454c      	cmp	r4, r9
 8000f80:	46c6      	mov	lr, r8
 8000f82:	464d      	mov	r5, r9
 8000f84:	d315      	bcc.n	8000fb2 <__udivmoddi4+0x2ae>
 8000f86:	d012      	beq.n	8000fae <__udivmoddi4+0x2aa>
 8000f88:	b156      	cbz	r6, 8000fa0 <__udivmoddi4+0x29c>
 8000f8a:	ebba 030e 	subs.w	r3, sl, lr
 8000f8e:	eb64 0405 	sbc.w	r4, r4, r5
 8000f92:	fa04 f707 	lsl.w	r7, r4, r7
 8000f96:	40cb      	lsrs	r3, r1
 8000f98:	431f      	orrs	r7, r3
 8000f9a:	40cc      	lsrs	r4, r1
 8000f9c:	6037      	str	r7, [r6, #0]
 8000f9e:	6074      	str	r4, [r6, #4]
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	e6f8      	b.n	8000d9c <__udivmoddi4+0x98>
 8000faa:	4690      	mov	r8, r2
 8000fac:	e6e0      	b.n	8000d70 <__udivmoddi4+0x6c>
 8000fae:	45c2      	cmp	sl, r8
 8000fb0:	d2ea      	bcs.n	8000f88 <__udivmoddi4+0x284>
 8000fb2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fb6:	eb69 0503 	sbc.w	r5, r9, r3
 8000fba:	3801      	subs	r0, #1
 8000fbc:	e7e4      	b.n	8000f88 <__udivmoddi4+0x284>
 8000fbe:	4628      	mov	r0, r5
 8000fc0:	e7d7      	b.n	8000f72 <__udivmoddi4+0x26e>
 8000fc2:	4640      	mov	r0, r8
 8000fc4:	e791      	b.n	8000eea <__udivmoddi4+0x1e6>
 8000fc6:	4681      	mov	r9, r0
 8000fc8:	e7be      	b.n	8000f48 <__udivmoddi4+0x244>
 8000fca:	4601      	mov	r1, r0
 8000fcc:	e778      	b.n	8000ec0 <__udivmoddi4+0x1bc>
 8000fce:	3802      	subs	r0, #2
 8000fd0:	443c      	add	r4, r7
 8000fd2:	e745      	b.n	8000e60 <__udivmoddi4+0x15c>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e708      	b.n	8000dea <__udivmoddi4+0xe6>
 8000fd8:	f1a8 0802 	sub.w	r8, r8, #2
 8000fdc:	443d      	add	r5, r7
 8000fde:	e72b      	b.n	8000e38 <__udivmoddi4+0x134>

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8000fe8:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8000fea:	2228      	movs	r2, #40	; 0x28
 8000fec:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000fee:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8000ff0:	2209      	movs	r2, #9
 8000ff2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8000ff6:	2235      	movs	r2, #53	; 0x35
 8000ff8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8000ffc:	220b      	movs	r2, #11
 8000ffe:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001000:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8001002:	f240 121b 	movw	r2, #283	; 0x11b
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <BSP_LCD_Init+0xcc>)
 800100a:	f240 2215 	movw	r2, #533	; 0x215
 800100e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8001012:	f240 121d 	movw	r2, #285	; 0x11d
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001018:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <BSP_LCD_Init+0xcc>)
 800101a:	f240 2235 	movw	r2, #565	; 0x235
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001020:	2100      	movs	r1, #0
 8001022:	4823      	ldr	r0, [pc, #140]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8001024:	f000 fcae 	bl	8001984 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <BSP_LCD_Init+0xcc>)
 800102a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800102e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8001032:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001036:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <BSP_LCD_Init+0xcc>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <BSP_LCD_Init+0xcc>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <BSP_LCD_Init+0xcc>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <BSP_LCD_Init+0xcc>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <BSP_LCD_Init+0xd0>)
 800106c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8001070:	f002 fcc4 	bl	80039fc <HAL_LTDC_GetState>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d103      	bne.n	8001082 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800107a:	2100      	movs	r1, #0
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <BSP_LCD_Init+0xcc>)
 800107e:	f000 fba7 	bl	80017d0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8001082:	480b      	ldr	r0, [pc, #44]	; (80010b0 <BSP_LCD_Init+0xcc>)
 8001084:	f002 fba0 	bl	80037c8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	480a      	ldr	r0, [pc, #40]	; (80010b8 <BSP_LCD_Init+0xd4>)
 8001090:	f002 fa58 	bl	8003544 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2108      	movs	r1, #8
 8001098:	4808      	ldr	r0, [pc, #32]	; (80010bc <BSP_LCD_Init+0xd8>)
 800109a:	f002 fa53 	bl	8003544 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800109e:	f00b fe89 	bl	800cdb4 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <BSP_LCD_Init+0xdc>)
 80010a4:	f000 f8d8 	bl	8001258 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200004b0 	.word	0x200004b0
 80010b4:	40016800 	.word	0x40016800
 80010b8:	40022000 	.word	0x40022000
 80010bc:	40022800 	.word	0x40022800
 80010c0:	20000000 	.word	0x20000000

080010c4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <BSP_LCD_GetXSize+0x20>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <BSP_LCD_GetXSize+0x24>)
 80010ce:	2134      	movs	r1, #52	; 0x34
 80010d0:	fb01 f303 	mul.w	r3, r1, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	3360      	adds	r3, #96	; 0x60
 80010d8:	681b      	ldr	r3, [r3, #0]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	200003a8 	.word	0x200003a8
 80010e8:	200004b0 	.word	0x200004b0

080010ec <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <BSP_LCD_GetYSize+0x20>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <BSP_LCD_GetYSize+0x24>)
 80010f6:	2134      	movs	r1, #52	; 0x34
 80010f8:	fb01 f303 	mul.w	r3, r1, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	3364      	adds	r3, #100	; 0x64
 8001100:	681b      	ldr	r3, [r3, #0]
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	200003a8 	.word	0x200003a8
 8001110:	200004b0 	.word	0x200004b0

08001114 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001114:	b580      	push	{r7, lr}
 8001116:	b090      	sub	sp, #64	; 0x40
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001124:	f7ff ffce 	bl	80010c4 <BSP_LCD_GetXSize>
 8001128:	4603      	mov	r3, r0
 800112a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001130:	f7ff ffdc 	bl	80010ec <BSP_LCD_GetYSize>
 8001134:	4603      	mov	r3, r0
 8001136:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8001140:	23ff      	movs	r3, #255	; 0xff
 8001142:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800115a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001160:	2307      	movs	r3, #7
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001164:	f7ff ffae 	bl	80010c4 <BSP_LCD_GetXSize>
 8001168:	4603      	mov	r3, r0
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800116c:	f7ff ffbe 	bl	80010ec <BSP_LCD_GetYSize>
 8001170:	4603      	mov	r3, r0
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001174:	88fa      	ldrh	r2, [r7, #6]
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4619      	mov	r1, r3
 800117c:	4812      	ldr	r0, [pc, #72]	; (80011c8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800117e:	f002 fbff 	bl	8003980 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001182:	88fa      	ldrh	r2, [r7, #6]
 8001184:	4911      	ldr	r1, [pc, #68]	; (80011cc <BSP_LCD_LayerDefaultInit+0xb8>)
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	3304      	adds	r3, #4
 8001192:	f04f 32ff 	mov.w	r2, #4294967295
 8001196:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001198:	88fa      	ldrh	r2, [r7, #6]
 800119a:	490c      	ldr	r1, [pc, #48]	; (80011cc <BSP_LCD_LayerDefaultInit+0xb8>)
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	3308      	adds	r3, #8
 80011a8:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80011aa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80011ac:	88fa      	ldrh	r2, [r7, #6]
 80011ae:	4907      	ldr	r1, [pc, #28]	; (80011cc <BSP_LCD_LayerDefaultInit+0xb8>)
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80011be:	601a      	str	r2, [r3, #0]
}
 80011c0:	bf00      	nop
 80011c2:	3740      	adds	r7, #64	; 0x40
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200004b0 	.word	0x200004b0
 80011cc:	200003ac 	.word	0x200003ac
 80011d0:	20000000 	.word	0x20000000

080011d4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <BSP_LCD_SelectLayer+0x1c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
} 
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	200003a8 	.word	0x200003a8

080011f4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <BSP_LCD_SetTextColor+0x28>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <BSP_LCD_SetTextColor+0x2c>)
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	200003a8 	.word	0x200003a8
 8001220:	200003ac 	.word	0x200003ac

08001224 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <BSP_LCD_SetBackColor+0x2c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4908      	ldr	r1, [pc, #32]	; (8001254 <BSP_LCD_SetBackColor+0x30>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	3304      	adds	r3, #4
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	601a      	str	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200003a8 	.word	0x200003a8
 8001254:	200003ac 	.word	0x200003ac

08001258 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <BSP_LCD_SetFont+0x2c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4908      	ldr	r1, [pc, #32]	; (8001288 <BSP_LCD_SetFont+0x30>)
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	440b      	add	r3, r1
 8001270:	3308      	adds	r3, #8
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	200003a8 	.word	0x200003a8
 8001288:	200003ac 	.word	0x200003ac

0800128c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <BSP_LCD_GetFont+0x24>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4907      	ldr	r1, [pc, #28]	; (80012b4 <BSP_LCD_GetFont+0x28>)
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3308      	adds	r3, #8
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	200003a8 	.word	0x200003a8
 80012b4:	200003ac 	.word	0x200003ac

080012b8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80012b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af02      	add	r7, sp, #8
 80012be:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <BSP_LCD_Clear+0x48>)
 80012c2:	681c      	ldr	r4, [r3, #0]
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <BSP_LCD_Clear+0x48>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <BSP_LCD_Clear+0x4c>)
 80012ca:	2134      	movs	r1, #52	; 0x34
 80012cc:	fb01 f303 	mul.w	r3, r1, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	335c      	adds	r3, #92	; 0x5c
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	461d      	mov	r5, r3
 80012d8:	f7ff fef4 	bl	80010c4 <BSP_LCD_GetXSize>
 80012dc:	4606      	mov	r6, r0
 80012de:	f7ff ff05 	bl	80010ec <BSP_LCD_GetYSize>
 80012e2:	4602      	mov	r2, r0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	4613      	mov	r3, r2
 80012ee:	4632      	mov	r2, r6
 80012f0:	4629      	mov	r1, r5
 80012f2:	4620      	mov	r0, r4
 80012f4:	f000 fc1a 	bl	8001b2c <LL_FillBuffer>
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001300:	200003a8 	.word	0x200003a8
 8001304:	200004b0 	.word	0x200004b0

08001308 <BSP_LCD_ClearStringLine>:
  * @brief  Clears the selected line.
  * @param  Line: Line to be cleared
  * @retval None
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <BSP_LCD_ClearStringLine+0xc0>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	492d      	ldr	r1, [pc, #180]	; (80013cc <BSP_LCD_ClearStringLine+0xc4>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	440b      	add	r3, r1
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <BSP_LCD_ClearStringLine+0xc0>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <BSP_LCD_ClearStringLine+0xc0>)
 800132a:	6819      	ldr	r1, [r3, #0]
 800132c:	4827      	ldr	r0, [pc, #156]	; (80013cc <BSP_LCD_ClearStringLine+0xc4>)
 800132e:	460b      	mov	r3, r1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	440b      	add	r3, r1
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4403      	add	r3, r0
 8001338:	3304      	adds	r3, #4
 800133a:	6819      	ldr	r1, [r3, #0]
 800133c:	4823      	ldr	r0, [pc, #140]	; (80013cc <BSP_LCD_ClearStringLine+0xc4>)
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4403      	add	r3, r0
 8001348:	6019      	str	r1, [r3, #0]
  
  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <BSP_LCD_ClearStringLine+0xc0>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	491f      	ldr	r1, [pc, #124]	; (80013cc <BSP_LCD_ClearStringLine+0xc4>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	3308      	adds	r3, #8
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	88da      	ldrh	r2, [r3, #6]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	b29b      	uxth	r3, r3
 8001364:	fb12 f303 	smulbb	r3, r2, r3
 8001368:	b29c      	uxth	r4, r3
 800136a:	f7ff feab 	bl	80010c4 <BSP_LCD_GetXSize>
 800136e:	4603      	mov	r3, r0
 8001370:	b298      	uxth	r0, r3
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <BSP_LCD_ClearStringLine+0xc0>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4915      	ldr	r1, [pc, #84]	; (80013cc <BSP_LCD_ClearStringLine+0xc4>)
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	3308      	adds	r3, #8
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	88db      	ldrh	r3, [r3, #6]
 8001388:	4602      	mov	r2, r0
 800138a:	4621      	mov	r1, r4
 800138c:	2000      	movs	r0, #0
 800138e:	f000 f987 	bl	80016a0 <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = color_backup;
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <BSP_LCD_ClearStringLine+0xc0>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	490d      	ldr	r1, [pc, #52]	; (80013cc <BSP_LCD_ClearStringLine+0xc4>)
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <BSP_LCD_ClearStringLine+0xc0>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <BSP_LCD_ClearStringLine+0xc4>)
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff1b 	bl	80011f4 <BSP_LCD_SetTextColor>
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd90      	pop	{r4, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200003a8 	.word	0x200003a8
 80013cc:	200003ac 	.word	0x200003ac

080013d0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	80fb      	strh	r3, [r7, #6]
 80013da:	460b      	mov	r3, r1
 80013dc:	80bb      	strh	r3, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <BSP_LCD_DisplayChar+0x80>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	491b      	ldr	r1, [pc, #108]	; (8001454 <BSP_LCD_DisplayChar+0x84>)
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	3308      	adds	r3, #8
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6819      	ldr	r1, [r3, #0]
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <BSP_LCD_DisplayChar+0x80>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4c14      	ldr	r4, [pc, #80]	; (8001454 <BSP_LCD_DisplayChar+0x84>)
 8001404:	4613      	mov	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4423      	add	r3, r4
 800140e:	3308      	adds	r3, #8
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001414:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <BSP_LCD_DisplayChar+0x80>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4c0d      	ldr	r4, [pc, #52]	; (8001454 <BSP_LCD_DisplayChar+0x84>)
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4423      	add	r3, r4
 8001428:	3308      	adds	r3, #8
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	889b      	ldrh	r3, [r3, #4]
 800142e:	3307      	adds	r3, #7
 8001430:	2b00      	cmp	r3, #0
 8001432:	da00      	bge.n	8001436 <BSP_LCD_DisplayChar+0x66>
 8001434:	3307      	adds	r3, #7
 8001436:	10db      	asrs	r3, r3, #3
 8001438:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800143c:	18ca      	adds	r2, r1, r3
 800143e:	88b9      	ldrh	r1, [r7, #4]
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 faba 	bl	80019bc <DrawChar>
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bd90      	pop	{r4, r7, pc}
 8001450:	200003a8 	.word	0x200003a8
 8001454:	200003ac 	.word	0x200003ac

08001458 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	60ba      	str	r2, [r7, #8]
 8001460:	461a      	mov	r2, r3
 8001462:	4603      	mov	r3, r0
 8001464:	81fb      	strh	r3, [r7, #14]
 8001466:	460b      	mov	r3, r1
 8001468:	81bb      	strh	r3, [r7, #12]
 800146a:	4613      	mov	r3, r2
 800146c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800146e:	2301      	movs	r3, #1
 8001470:	83fb      	strh	r3, [r7, #30]
 8001472:	2300      	movs	r3, #0
 8001474:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001482:	e002      	b.n	800148a <BSP_LCD_DisplayStringAt+0x32>
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	3301      	adds	r3, #1
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	617a      	str	r2, [r7, #20]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f6      	bne.n	8001484 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001496:	f7ff fe15 	bl	80010c4 <BSP_LCD_GetXSize>
 800149a:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <BSP_LCD_DisplayStringAt+0x180>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	494f      	ldr	r1, [pc, #316]	; (80015dc <BSP_LCD_DisplayStringAt+0x184>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3308      	adds	r3, #8
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	889b      	ldrh	r3, [r3, #4]
 80014b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b4:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d01c      	beq.n	80014f6 <BSP_LCD_DisplayStringAt+0x9e>
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d017      	beq.n	80014f0 <BSP_LCD_DisplayStringAt+0x98>
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d12e      	bne.n	8001522 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	1ad1      	subs	r1, r2, r3
 80014ca:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <BSP_LCD_DisplayStringAt+0x180>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4843      	ldr	r0, [pc, #268]	; (80015dc <BSP_LCD_DisplayStringAt+0x184>)
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4403      	add	r3, r0
 80014da:	3308      	adds	r3, #8
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	889b      	ldrh	r3, [r3, #4]
 80014e0:	fb03 f301 	mul.w	r3, r3, r1
 80014e4:	085b      	lsrs	r3, r3, #1
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	89fb      	ldrh	r3, [r7, #14]
 80014ea:	4413      	add	r3, r2
 80014ec:	83fb      	strh	r3, [r7, #30]
      break;
 80014ee:	e01b      	b.n	8001528 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	83fb      	strh	r3, [r7, #30]
      break;
 80014f4:	e018      	b.n	8001528 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	b299      	uxth	r1, r3
 80014fe:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <BSP_LCD_DisplayStringAt+0x180>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4836      	ldr	r0, [pc, #216]	; (80015dc <BSP_LCD_DisplayStringAt+0x184>)
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4403      	add	r3, r0
 800150e:	3308      	adds	r3, #8
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	889b      	ldrh	r3, [r3, #4]
 8001514:	fb11 f303 	smulbb	r3, r1, r3
 8001518:	b29a      	uxth	r2, r3
 800151a:	89fb      	ldrh	r3, [r7, #14]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	83fb      	strh	r3, [r7, #30]
      break;
 8001520:	e002      	b.n	8001528 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	83fb      	strh	r3, [r7, #30]
      break;
 8001526:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001528:	8bfb      	ldrh	r3, [r7, #30]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <BSP_LCD_DisplayStringAt+0xde>
 800152e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001532:	2b00      	cmp	r3, #0
 8001534:	da1d      	bge.n	8001572 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8001536:	2301      	movs	r3, #1
 8001538:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800153a:	e01a      	b.n	8001572 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	89b9      	ldrh	r1, [r7, #12]
 8001542:	8bfb      	ldrh	r3, [r7, #30]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff43 	bl	80013d0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <BSP_LCD_DisplayStringAt+0x180>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4923      	ldr	r1, [pc, #140]	; (80015dc <BSP_LCD_DisplayStringAt+0x184>)
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	3308      	adds	r3, #8
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	889a      	ldrh	r2, [r3, #4]
 8001560:	8bfb      	ldrh	r3, [r7, #30]
 8001562:	4413      	add	r3, r2
 8001564:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3301      	adds	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
    i++;
 800156c:	8bbb      	ldrh	r3, [r7, #28]
 800156e:	3301      	adds	r3, #1
 8001570:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2dc      	uxtb	r4, r3
 8001580:	f7ff fda0 	bl	80010c4 <BSP_LCD_GetXSize>
 8001584:	4605      	mov	r5, r0
 8001586:	8bb9      	ldrh	r1, [r7, #28]
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <BSP_LCD_DisplayStringAt+0x180>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4813      	ldr	r0, [pc, #76]	; (80015dc <BSP_LCD_DisplayStringAt+0x184>)
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4403      	add	r3, r0
 8001598:	3308      	adds	r3, #8
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	889b      	ldrh	r3, [r3, #4]
 800159e:	fb03 f301 	mul.w	r3, r3, r1
 80015a2:	1aeb      	subs	r3, r5, r3
 80015a4:	b299      	uxth	r1, r3
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <BSP_LCD_DisplayStringAt+0x180>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	480c      	ldr	r0, [pc, #48]	; (80015dc <BSP_LCD_DisplayStringAt+0x184>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4403      	add	r3, r0
 80015b6:	3308      	adds	r3, #8
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	889b      	ldrh	r3, [r3, #4]
 80015bc:	4299      	cmp	r1, r3
 80015be:	bf2c      	ite	cs
 80015c0:	2301      	movcs	r3, #1
 80015c2:	2300      	movcc	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4023      	ands	r3, r4
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1b6      	bne.n	800153c <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80015ce:	bf00      	nop
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bdb0      	pop	{r4, r5, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200003a8 	.word	0x200003a8
 80015dc:	200003ac 	.word	0x200003ac

080015e0 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80015ec:	f7ff fe4e 	bl	800128c <BSP_LCD_GetFont>
 80015f0:	4603      	mov	r3, r0
 80015f2:	88db      	ldrh	r3, [r3, #6]
 80015f4:	88fa      	ldrh	r2, [r7, #6]
 80015f6:	fb12 f303 	smulbb	r3, r2, r3
 80015fa:	b299      	uxth	r1, r3
 80015fc:	2303      	movs	r3, #3
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff ff29 	bl	8001458 <BSP_LCD_DisplayStringAt>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	603a      	str	r2, [r7, #0]
 800161a:	80fb      	strh	r3, [r7, #6]
 800161c:	460b      	mov	r3, r1
 800161e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <BSP_LCD_DrawPixel+0x88>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1d      	ldr	r2, [pc, #116]	; (800169c <BSP_LCD_DrawPixel+0x8c>)
 8001626:	2134      	movs	r1, #52	; 0x34
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	4413      	add	r3, r2
 800162e:	3348      	adds	r3, #72	; 0x48
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d116      	bne.n	8001664 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <BSP_LCD_DrawPixel+0x88>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a18      	ldr	r2, [pc, #96]	; (800169c <BSP_LCD_DrawPixel+0x8c>)
 800163c:	2134      	movs	r1, #52	; 0x34
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	4413      	add	r3, r2
 8001644:	335c      	adds	r3, #92	; 0x5c
 8001646:	681c      	ldr	r4, [r3, #0]
 8001648:	88bd      	ldrh	r5, [r7, #4]
 800164a:	f7ff fd3b 	bl	80010c4 <BSP_LCD_GetXSize>
 800164e:	4603      	mov	r3, r0
 8001650:	fb03 f205 	mul.w	r2, r3, r5
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	4413      	add	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4423      	add	r3, r4
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	b292      	uxth	r2, r2
 8001660:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8001662:	e015      	b.n	8001690 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <BSP_LCD_DrawPixel+0x88>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0c      	ldr	r2, [pc, #48]	; (800169c <BSP_LCD_DrawPixel+0x8c>)
 800166a:	2134      	movs	r1, #52	; 0x34
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	4413      	add	r3, r2
 8001672:	335c      	adds	r3, #92	; 0x5c
 8001674:	681c      	ldr	r4, [r3, #0]
 8001676:	88bd      	ldrh	r5, [r7, #4]
 8001678:	f7ff fd24 	bl	80010c4 <BSP_LCD_GetXSize>
 800167c:	4603      	mov	r3, r0
 800167e:	fb03 f205 	mul.w	r2, r3, r5
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4423      	add	r3, r4
 800168a:	461a      	mov	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bdb0      	pop	{r4, r5, r7, pc}
 8001698:	200003a8 	.word	0x200003a8
 800169c:	200004b0 	.word	0x200004b0

080016a0 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80016a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af02      	add	r7, sp, #8
 80016a8:	4604      	mov	r4, r0
 80016aa:	4608      	mov	r0, r1
 80016ac:	4611      	mov	r1, r2
 80016ae:	461a      	mov	r2, r3
 80016b0:	4623      	mov	r3, r4
 80016b2:	80fb      	strh	r3, [r7, #6]
 80016b4:	4603      	mov	r3, r0
 80016b6:	80bb      	strh	r3, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <BSP_LCD_FillRect+0xe8>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4930      	ldr	r1, [pc, #192]	; (800178c <BSP_LCD_FillRect+0xec>)
 80016ca:	4613      	mov	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fd8c 	bl	80011f4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80016dc:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <BSP_LCD_FillRect+0xe8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a2b      	ldr	r2, [pc, #172]	; (8001790 <BSP_LCD_FillRect+0xf0>)
 80016e2:	2134      	movs	r1, #52	; 0x34
 80016e4:	fb01 f303 	mul.w	r3, r1, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	3348      	adds	r3, #72	; 0x48
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d114      	bne.n	800171c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <BSP_LCD_FillRect+0xe8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a26      	ldr	r2, [pc, #152]	; (8001790 <BSP_LCD_FillRect+0xf0>)
 80016f8:	2134      	movs	r1, #52	; 0x34
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	335c      	adds	r3, #92	; 0x5c
 8001702:	681c      	ldr	r4, [r3, #0]
 8001704:	f7ff fcde 	bl	80010c4 <BSP_LCD_GetXSize>
 8001708:	4602      	mov	r2, r0
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	fb03 f202 	mul.w	r2, r3, r2
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	4413      	add	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4423      	add	r3, r4
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	e013      	b.n	8001744 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <BSP_LCD_FillRect+0xe8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <BSP_LCD_FillRect+0xf0>)
 8001722:	2134      	movs	r1, #52	; 0x34
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	4413      	add	r3, r2
 800172a:	335c      	adds	r3, #92	; 0x5c
 800172c:	681c      	ldr	r4, [r3, #0]
 800172e:	f7ff fcc9 	bl	80010c4 <BSP_LCD_GetXSize>
 8001732:	4602      	mov	r2, r0
 8001734:	88bb      	ldrh	r3, [r7, #4]
 8001736:	fb03 f202 	mul.w	r2, r3, r2
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4423      	add	r3, r4
 8001742:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <BSP_LCD_FillRect+0xe8>)
 8001746:	681c      	ldr	r4, [r3, #0]
 8001748:	68fd      	ldr	r5, [r7, #12]
 800174a:	887e      	ldrh	r6, [r7, #2]
 800174c:	f8b7 8000 	ldrh.w	r8, [r7]
 8001750:	f7ff fcb8 	bl	80010c4 <BSP_LCD_GetXSize>
 8001754:	4602      	mov	r2, r0
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	1ad1      	subs	r1, r2, r3
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <BSP_LCD_FillRect+0xe8>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	480b      	ldr	r0, [pc, #44]	; (800178c <BSP_LCD_FillRect+0xec>)
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4403      	add	r3, r0
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	9100      	str	r1, [sp, #0]
 8001770:	4643      	mov	r3, r8
 8001772:	4632      	mov	r2, r6
 8001774:	4629      	mov	r1, r5
 8001776:	4620      	mov	r0, r4
 8001778:	f000 f9d8 	bl	8001b2c <LL_FillBuffer>
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001786:	bf00      	nop
 8001788:	200003a8 	.word	0x200003a8
 800178c:	200003ac 	.word	0x200003ac
 8001790:	200004b0 	.word	0x200004b0

08001794 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <BSP_LCD_DisplayOn+0x30>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <BSP_LCD_DisplayOn+0x30>)
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	6992      	ldr	r2, [r2, #24]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80017a8:	2201      	movs	r2, #1
 80017aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ae:	4806      	ldr	r0, [pc, #24]	; (80017c8 <BSP_LCD_DisplayOn+0x34>)
 80017b0:	f001 fec8 	bl	8003544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80017b4:	2201      	movs	r2, #1
 80017b6:	2108      	movs	r1, #8
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <BSP_LCD_DisplayOn+0x38>)
 80017ba:	f001 fec3 	bl	8003544 <HAL_GPIO_WritePin>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200004b0 	.word	0x200004b0
 80017c8:	40022000 	.word	0x40022000
 80017cc:	40022800 	.word	0x40022800

080017d0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b090      	sub	sp, #64	; 0x40
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80017da:	4a64      	ldr	r2, [pc, #400]	; (800196c <BSP_LCD_MspInit+0x19c>)
 80017dc:	4b63      	ldr	r3, [pc, #396]	; (800196c <BSP_LCD_MspInit+0x19c>)
 80017de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b61      	ldr	r3, [pc, #388]	; (800196c <BSP_LCD_MspInit+0x19c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80017f2:	4a5e      	ldr	r2, [pc, #376]	; (800196c <BSP_LCD_MspInit+0x19c>)
 80017f4:	4b5d      	ldr	r3, [pc, #372]	; (800196c <BSP_LCD_MspInit+0x19c>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b5b      	ldr	r3, [pc, #364]	; (800196c <BSP_LCD_MspInit+0x19c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800180a:	4a58      	ldr	r2, [pc, #352]	; (800196c <BSP_LCD_MspInit+0x19c>)
 800180c:	4b57      	ldr	r3, [pc, #348]	; (800196c <BSP_LCD_MspInit+0x19c>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	f043 0310 	orr.w	r3, r3, #16
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b55      	ldr	r3, [pc, #340]	; (800196c <BSP_LCD_MspInit+0x19c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	623b      	str	r3, [r7, #32]
 8001820:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001822:	4a52      	ldr	r2, [pc, #328]	; (800196c <BSP_LCD_MspInit+0x19c>)
 8001824:	4b51      	ldr	r3, [pc, #324]	; (800196c <BSP_LCD_MspInit+0x19c>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b4f      	ldr	r3, [pc, #316]	; (800196c <BSP_LCD_MspInit+0x19c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800183a:	4a4c      	ldr	r2, [pc, #304]	; (800196c <BSP_LCD_MspInit+0x19c>)
 800183c:	4b4b      	ldr	r3, [pc, #300]	; (800196c <BSP_LCD_MspInit+0x19c>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b49      	ldr	r3, [pc, #292]	; (800196c <BSP_LCD_MspInit+0x19c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001852:	4a46      	ldr	r2, [pc, #280]	; (800196c <BSP_LCD_MspInit+0x19c>)
 8001854:	4b45      	ldr	r3, [pc, #276]	; (800196c <BSP_LCD_MspInit+0x19c>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b43      	ldr	r3, [pc, #268]	; (800196c <BSP_LCD_MspInit+0x19c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800186a:	4a40      	ldr	r2, [pc, #256]	; (800196c <BSP_LCD_MspInit+0x19c>)
 800186c:	4b3f      	ldr	r3, [pc, #252]	; (800196c <BSP_LCD_MspInit+0x19c>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b3d      	ldr	r3, [pc, #244]	; (800196c <BSP_LCD_MspInit+0x19c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001882:	4a3a      	ldr	r2, [pc, #232]	; (800196c <BSP_LCD_MspInit+0x19c>)
 8001884:	4b39      	ldr	r3, [pc, #228]	; (800196c <BSP_LCD_MspInit+0x19c>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b37      	ldr	r3, [pc, #220]	; (800196c <BSP_LCD_MspInit+0x19c>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800189a:	4a34      	ldr	r2, [pc, #208]	; (800196c <BSP_LCD_MspInit+0x19c>)
 800189c:	4b33      	ldr	r3, [pc, #204]	; (800196c <BSP_LCD_MspInit+0x19c>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b31      	ldr	r3, [pc, #196]	; (800196c <BSP_LCD_MspInit+0x19c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80018b2:	2310      	movs	r3, #16
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80018be:	2302      	movs	r3, #2
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80018c2:	230e      	movs	r3, #14
 80018c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80018c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ca:	4619      	mov	r1, r3
 80018cc:	4828      	ldr	r0, [pc, #160]	; (8001970 <BSP_LCD_MspInit+0x1a0>)
 80018ce:	f001 fc8f 	bl	80031f0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80018d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80018dc:	2309      	movs	r3, #9
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80018e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e4:	4619      	mov	r1, r3
 80018e6:	4823      	ldr	r0, [pc, #140]	; (8001974 <BSP_LCD_MspInit+0x1a4>)
 80018e8:	f001 fc82 	bl	80031f0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80018ec:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80018f6:	230e      	movs	r3, #14
 80018f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80018fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fe:	4619      	mov	r1, r3
 8001900:	481d      	ldr	r0, [pc, #116]	; (8001978 <BSP_LCD_MspInit+0x1a8>)
 8001902:	f001 fc75 	bl	80031f0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001906:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001910:	230e      	movs	r3, #14
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001918:	4619      	mov	r1, r3
 800191a:	4818      	ldr	r0, [pc, #96]	; (800197c <BSP_LCD_MspInit+0x1ac>)
 800191c:	f001 fc68 	bl	80031f0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001920:	23f7      	movs	r3, #247	; 0xf7
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001928:	230e      	movs	r3, #14
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800192c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001930:	4619      	mov	r1, r3
 8001932:	4813      	ldr	r0, [pc, #76]	; (8001980 <BSP_LCD_MspInit+0x1b0>)
 8001934:	f001 fc5c 	bl	80031f0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800193e:	2301      	movs	r3, #1
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001946:	4619      	mov	r1, r3
 8001948:	480b      	ldr	r0, [pc, #44]	; (8001978 <BSP_LCD_MspInit+0x1a8>)
 800194a:	f001 fc51 	bl	80031f0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800194e:	2308      	movs	r3, #8
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195a:	4619      	mov	r1, r3
 800195c:	4808      	ldr	r0, [pc, #32]	; (8001980 <BSP_LCD_MspInit+0x1b0>)
 800195e:	f001 fc47 	bl	80031f0 <HAL_GPIO_Init>
}
 8001962:	bf00      	nop
 8001964:	3740      	adds	r7, #64	; 0x40
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40021000 	.word	0x40021000
 8001974:	40021800 	.word	0x40021800
 8001978:	40022000 	.word	0x40022000
 800197c:	40022400 	.word	0x40022400
 8001980:	40022800 	.word	0x40022800

08001984 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <BSP_LCD_ClockConfig+0x34>)
 8001990:	2208      	movs	r2, #8
 8001992:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <BSP_LCD_ClockConfig+0x34>)
 8001996:	22c0      	movs	r2, #192	; 0xc0
 8001998:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <BSP_LCD_ClockConfig+0x34>)
 800199c:	2205      	movs	r2, #5
 800199e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <BSP_LCD_ClockConfig+0x34>)
 80019a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80019a8:	4803      	ldr	r0, [pc, #12]	; (80019b8 <BSP_LCD_ClockConfig+0x34>)
 80019aa:	f004 f815 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200003c4 	.word	0x200003c4

080019bc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	603a      	str	r2, [r7, #0]
 80019c6:	80fb      	strh	r3, [r7, #6]
 80019c8:	460b      	mov	r3, r1
 80019ca:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80019d4:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <DrawChar+0x168>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4953      	ldr	r1, [pc, #332]	; (8001b28 <DrawChar+0x16c>)
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	3308      	adds	r3, #8
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	88db      	ldrh	r3, [r3, #6]
 80019ea:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80019ec:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <DrawChar+0x168>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	494d      	ldr	r1, [pc, #308]	; (8001b28 <DrawChar+0x16c>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3308      	adds	r3, #8
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	889b      	ldrh	r3, [r3, #4]
 8001a02:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001a04:	8a3b      	ldrh	r3, [r7, #16]
 8001a06:	3307      	adds	r3, #7
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	da00      	bge.n	8001a0e <DrawChar+0x52>
 8001a0c:	3307      	adds	r3, #7
 8001a0e:	10db      	asrs	r3, r3, #3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	8a3b      	ldrh	r3, [r7, #16]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	e076      	b.n	8001b12 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001a24:	8a3b      	ldrh	r3, [r7, #16]
 8001a26:	3307      	adds	r3, #7
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da00      	bge.n	8001a2e <DrawChar+0x72>
 8001a2c:	3307      	adds	r3, #7
 8001a2e:	10db      	asrs	r3, r3, #3
 8001a30:	461a      	mov	r2, r3
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fb03 f302 	mul.w	r3, r3, r2
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8001a3e:	8a3b      	ldrh	r3, [r7, #16]
 8001a40:	3307      	adds	r3, #7
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da00      	bge.n	8001a48 <DrawChar+0x8c>
 8001a46:	3307      	adds	r3, #7
 8001a48:	10db      	asrs	r3, r3, #3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d002      	beq.n	8001a54 <DrawChar+0x98>
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d004      	beq.n	8001a5c <DrawChar+0xa0>
 8001a52:	e00c      	b.n	8001a6e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	617b      	str	r3, [r7, #20]
      break;
 8001a5a:	e016      	b.n	8001a8a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	3201      	adds	r2, #1
 8001a66:	7812      	ldrb	r2, [r2, #0]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
      break;
 8001a6c:	e00d      	b.n	8001a8a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	041a      	lsls	r2, r3, #16
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	3301      	adds	r3, #1
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	3202      	adds	r2, #2
 8001a82:	7812      	ldrb	r2, [r2, #0]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
      break;
 8001a88:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	e036      	b.n	8001afe <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001a90:	8a3a      	ldrh	r2, [r7, #16]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	1ad2      	subs	r2, r2, r3
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	4413      	add	r3, r2
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d012      	beq.n	8001ad2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b298      	uxth	r0, r3
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <DrawChar+0x168>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	491b      	ldr	r1, [pc, #108]	; (8001b28 <DrawChar+0x16c>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	88bb      	ldrh	r3, [r7, #4]
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff fda0 	bl	8001610 <BSP_LCD_DrawPixel>
 8001ad0:	e012      	b.n	8001af8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	4413      	add	r3, r2
 8001ada:	b298      	uxth	r0, r3
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <DrawChar+0x168>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4911      	ldr	r1, [pc, #68]	; (8001b28 <DrawChar+0x16c>)
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	3304      	adds	r3, #4
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	88bb      	ldrh	r3, [r7, #4]
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7ff fd8c 	bl	8001610 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	3301      	adds	r3, #1
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	8a3a      	ldrh	r2, [r7, #16]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d8c4      	bhi.n	8001a90 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001b06:	88bb      	ldrh	r3, [r7, #4]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	8a7a      	ldrh	r2, [r7, #18]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d884      	bhi.n	8001a24 <DrawChar+0x68>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	3720      	adds	r7, #32
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200003a8 	.word	0x200003a8
 8001b28:	200003ac 	.word	0x200003ac

08001b2c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <LL_FillBuffer+0x88>)
 8001b3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b40:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <LL_FillBuffer+0x8c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <LL_FillBuffer+0x90>)
 8001b48:	2134      	movs	r1, #52	; 0x34
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3348      	adds	r3, #72	; 0x48
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d103      	bne.n	8001b60 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <LL_FillBuffer+0x88>)
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	e002      	b.n	8001b66 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <LL_FillBuffer+0x88>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001b66:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <LL_FillBuffer+0x88>)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <LL_FillBuffer+0x88>)
 8001b6e:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <LL_FillBuffer+0x94>)
 8001b70:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001b72:	4810      	ldr	r0, [pc, #64]	; (8001bb4 <LL_FillBuffer+0x88>)
 8001b74:	f001 f8a4 	bl	8002cc0 <HAL_DMA2D_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d115      	bne.n	8001baa <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <LL_FillBuffer+0x88>)
 8001b82:	f001 f9fb 	bl	8002f7c <HAL_DMA2D_ConfigLayer>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10e      	bne.n	8001baa <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69f9      	ldr	r1, [r7, #28]
 8001b96:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <LL_FillBuffer+0x88>)
 8001b98:	f001 f8dc 	bl	8002d54 <HAL_DMA2D_Start>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001ba2:	210a      	movs	r1, #10
 8001ba4:	4803      	ldr	r0, [pc, #12]	; (8001bb4 <LL_FillBuffer+0x88>)
 8001ba6:	f001 f900 	bl	8002daa <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000368 	.word	0x20000368
 8001bb8:	200003a8 	.word	0x200003a8
 8001bbc:	200004b0 	.word	0x200004b0
 8001bc0:	4002b000 	.word	0x4002b000

08001bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <HAL_Init+0x34>)
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_Init+0x34>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <HAL_Init+0x34>)
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_Init+0x34>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 fc3b 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f00d fb5a 	bl	800f2a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001bec:	f00d f8c0 	bl	800ed70 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000010 	.word	0x20000010
 8001c20:	20000558 	.word	0x20000558

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000558 	.word	0x20000558

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff ffee 	bl	8001c24 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d005      	beq.n	8001c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_Delay+0x40>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c62:	bf00      	nop
 8001c64:	f7ff ffde 	bl	8001c24 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1ad2      	subs	r2, r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d3f7      	bcc.n	8001c64 <HAL_Delay+0x28>
  {
  }
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000010 	.word	0x20000010

08001c80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e031      	b.n	8001cfa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f00d f891 	bl	800edd4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d116      	bne.n	8001cec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_ADC_Init+0x84>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	f043 0202 	orr.w	r2, r3, #2
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fa02 	bl	80020d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f023 0303 	bic.w	r3, r3, #3
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8001cea:	e001      	b.n	8001cf0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	ffffeefd 	.word	0xffffeefd

08001d08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_Start+0x1a>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e085      	b.n	8001e2e <HAL_ADC_Start+0x126>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d018      	beq.n	8001d6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	6892      	ldr	r2, [r2, #8]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d48:	4b3c      	ldr	r3, [pc, #240]	; (8001e3c <HAL_ADC_Start+0x134>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a3c      	ldr	r2, [pc, #240]	; (8001e40 <HAL_ADC_Start+0x138>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	0c9a      	lsrs	r2, r3, #18
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d5c:	e002      	b.n	8001d64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f9      	bne.n	8001d5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d059      	beq.n	8001e2c <HAL_ADC_Start+0x124>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d7c:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <HAL_ADC_Start+0x13c>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <HAL_ADC_Start+0xb8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f023 0206 	bic.w	r2, r3, #6
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	645a      	str	r2, [r3, #68]	; 0x44
 8001dbe:	e002      	b.n	8001dc6 <HAL_ADC_Start+0xbe>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dd6:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_ADC_Start+0x140>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10f      	bne.n	8001e04 <HAL_ADC_Start+0xfc>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d11c      	bne.n	8001e2c <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	6892      	ldr	r2, [r2, #8]
 8001dfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	e013      	b.n	8001e2c <HAL_ADC_Start+0x124>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_ADC_Start+0x144>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d10e      	bne.n	8001e2c <HAL_ADC_Start+0x124>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	6892      	ldr	r2, [r2, #8]
 8001e26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e2a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000124 	.word	0x20000124
 8001e40:	431bde83 	.word	0x431bde83
 8001e44:	fffff8fe 	.word	0xfffff8fe
 8001e48:	40012300 	.word	0x40012300
 8001e4c:	40012000 	.word	0x40012000

08001e50 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e6c:	b490      	push	{r4, r7}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1c>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e117      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x24c>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b09      	cmp	r3, #9
 8001e96:	d936      	bls.n	8001f06 <HAL_ADC_ConfigChannel+0x9a>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68d9      	ldr	r1, [r3, #12]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4403      	add	r3, r0
 8001eb0:	3b1e      	subs	r3, #30
 8001eb2:	2007      	movs	r0, #7
 8001eb4:	fa00 f303 	lsl.w	r3, r0, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	400b      	ands	r3, r1
 8001ebc:	60d3      	str	r3, [r2, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a80      	ldr	r2, [pc, #512]	; (80020c4 <HAL_ADC_ConfigChannel+0x258>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d10a      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	68d1      	ldr	r1, [r2, #12]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	6892      	ldr	r2, [r2, #8]
 8001ed6:	0612      	lsls	r2, r2, #24
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	e037      	b.n	8001f4e <HAL_ADC_ConfigChannel+0xe2>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68d9      	ldr	r1, [r3, #12]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6898      	ldr	r0, [r3, #8]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	461c      	mov	r4, r3
 8001ef4:	4623      	mov	r3, r4
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4423      	add	r3, r4
 8001efa:	3b1e      	subs	r3, #30
 8001efc:	fa00 f303 	lsl.w	r3, r0, r3
 8001f00:	430b      	orrs	r3, r1
 8001f02:	60d3      	str	r3, [r2, #12]
 8001f04:	e023      	b.n	8001f4e <HAL_ADC_ConfigChannel+0xe2>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6919      	ldr	r1, [r3, #16]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4618      	mov	r0, r3
 8001f18:	4603      	mov	r3, r0
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4403      	add	r3, r0
 8001f1e:	2007      	movs	r0, #7
 8001f20:	fa00 f303 	lsl.w	r3, r0, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	400b      	ands	r3, r1
 8001f28:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6919      	ldr	r1, [r3, #16]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6898      	ldr	r0, [r3, #8]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	461c      	mov	r4, r3
 8001f40:	4623      	mov	r3, r4
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4423      	add	r3, r4
 8001f46:	fa00 f303 	lsl.w	r3, r0, r3
 8001f4a:	430b      	orrs	r3, r1
 8001f4c:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d824      	bhi.n	8001fa0 <HAL_ADC_ConfigChannel+0x134>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	3b05      	subs	r3, #5
 8001f6c:	221f      	movs	r2, #31
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	4003      	ands	r3, r0
 8001f76:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6819      	ldr	r1, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	461c      	mov	r4, r3
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	3b05      	subs	r3, #5
 8001f96:	fa04 f303 	lsl.w	r3, r4, r3
 8001f9a:	4303      	orrs	r3, r0
 8001f9c:	634b      	str	r3, [r1, #52]	; 0x34
 8001f9e:	e04c      	b.n	800203a <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b0c      	cmp	r3, #12
 8001fa6:	d824      	bhi.n	8001ff2 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6819      	ldr	r1, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b23      	subs	r3, #35	; 0x23
 8001fbe:	221f      	movs	r2, #31
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	4003      	ands	r3, r0
 8001fc8:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6819      	ldr	r1, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	461c      	mov	r4, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b23      	subs	r3, #35	; 0x23
 8001fe8:	fa04 f303 	lsl.w	r3, r4, r3
 8001fec:	4303      	orrs	r3, r0
 8001fee:	630b      	str	r3, [r1, #48]	; 0x30
 8001ff0:	e023      	b.n	800203a <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6819      	ldr	r1, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3b41      	subs	r3, #65	; 0x41
 8002008:	221f      	movs	r2, #31
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	4003      	ands	r3, r0
 8002012:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	461c      	mov	r4, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	3b41      	subs	r3, #65	; 0x41
 8002032:	fa04 f303 	lsl.w	r3, r4, r3
 8002036:	4303      	orrs	r3, r0
 8002038:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a22      	ldr	r2, [pc, #136]	; (80020c8 <HAL_ADC_ConfigChannel+0x25c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d109      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x1ec>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b12      	cmp	r3, #18
 800204a:	d105      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800204c:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <HAL_ADC_ConfigChannel+0x260>)
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <HAL_ADC_ConfigChannel+0x260>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002056:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1a      	ldr	r2, [pc, #104]	; (80020c8 <HAL_ADC_ConfigChannel+0x25c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d125      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x242>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HAL_ADC_ConfigChannel+0x258>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d003      	beq.n	8002074 <HAL_ADC_ConfigChannel+0x208>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b11      	cmp	r3, #17
 8002072:	d11c      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x242>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002074:	4a15      	ldr	r2, [pc, #84]	; (80020cc <HAL_ADC_ConfigChannel+0x260>)
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_ADC_ConfigChannel+0x260>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800207e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <HAL_ADC_ConfigChannel+0x258>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d111      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x242>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_ADC_ConfigChannel+0x264>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_ADC_ConfigChannel+0x268>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	0c9a      	lsrs	r2, r3, #18
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020a0:	e002      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x23c>
      {
        counter--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f9      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x236>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc90      	pop	{r4, r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	10000012 	.word	0x10000012
 80020c8:	40012000 	.word	0x40012000
 80020cc:	40012300 	.word	0x40012300
 80020d0:	20000124 	.word	0x20000124
 80020d4:	431bde83 	.word	0x431bde83

080020d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020e0:	4a77      	ldr	r2, [pc, #476]	; (80022c0 <ADC_Init+0x1e8>)
 80020e2:	4b77      	ldr	r3, [pc, #476]	; (80022c0 <ADC_Init+0x1e8>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020ec:	4974      	ldr	r1, [pc, #464]	; (80022c0 <ADC_Init+0x1e8>)
 80020ee:	4b74      	ldr	r3, [pc, #464]	; (80022c0 <ADC_Init+0x1e8>)
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	6852      	ldr	r2, [r2, #4]
 8002104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	6851      	ldr	r1, [r2, #4]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6912      	ldr	r2, [r2, #16]
 8002118:	0212      	lsls	r2, r2, #8
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	6852      	ldr	r2, [r2, #4]
 8002128:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800212c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	6851      	ldr	r1, [r2, #4]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6892      	ldr	r2, [r2, #8]
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	6892      	ldr	r2, [r2, #8]
 800214a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	6891      	ldr	r1, [r2, #8]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68d2      	ldr	r2, [r2, #12]
 800215e:	430a      	orrs	r2, r1
 8002160:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	4a57      	ldr	r2, [pc, #348]	; (80022c4 <ADC_Init+0x1ec>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d022      	beq.n	80021b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	6892      	ldr	r2, [r2, #8]
 8002176:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800217a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	6891      	ldr	r1, [r2, #8]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	6892      	ldr	r2, [r2, #8]
 8002198:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800219c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	6891      	ldr	r1, [r2, #8]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021ac:	430a      	orrs	r2, r1
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e00f      	b.n	80021d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	6892      	ldr	r2, [r2, #8]
 80021bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	6892      	ldr	r2, [r2, #8]
 80021cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	6892      	ldr	r2, [r2, #8]
 80021dc:	f022 0202 	bic.w	r2, r2, #2
 80021e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	6891      	ldr	r1, [r2, #8]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6992      	ldr	r2, [r2, #24]
 80021f0:	0052      	lsls	r2, r2, #1
 80021f2:	430a      	orrs	r2, r1
 80021f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d01b      	beq.n	8002236 <ADC_Init+0x15e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	6852      	ldr	r2, [r2, #4]
 8002208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800220c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	6852      	ldr	r2, [r2, #4]
 8002218:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800221c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	6851      	ldr	r1, [r2, #4]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800222c:	3a01      	subs	r2, #1
 800222e:	0352      	lsls	r2, r2, #13
 8002230:	430a      	orrs	r2, r1
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	e007      	b.n	8002246 <ADC_Init+0x16e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	6852      	ldr	r2, [r2, #4]
 8002240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002244:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002250:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	69d2      	ldr	r2, [r2, #28]
 8002264:	3a01      	subs	r2, #1
 8002266:	0512      	lsls	r2, r2, #20
 8002268:	430a      	orrs	r2, r1
 800226a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	6892      	ldr	r2, [r2, #8]
 8002276:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800227a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	6891      	ldr	r1, [r2, #8]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800228a:	0252      	lsls	r2, r2, #9
 800228c:	430a      	orrs	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	6892      	ldr	r2, [r2, #8]
 800229a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	6891      	ldr	r1, [r2, #8]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6952      	ldr	r2, [r2, #20]
 80022ae:	0292      	lsls	r2, r2, #10
 80022b0:	430a      	orrs	r2, r1
 80022b2:	609a      	str	r2, [r3, #8]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40012300 	.word	0x40012300
 80022c4:	0f000001 	.word	0x0f000001

080022c8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <NVIC_SetPriorityGrouping+0x40>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <NVIC_SetPriorityGrouping+0x44>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	; (8002308 <NVIC_SetPriorityGrouping+0x40>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00
 800230c:	05fa0000 	.word	0x05fa0000

08002310 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002336:	4909      	ldr	r1, [pc, #36]	; (800235c <NVIC_EnableIRQ+0x30>)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	79fa      	ldrb	r2, [r7, #7]
 8002340:	f002 021f 	and.w	r2, r2, #31
 8002344:	2001      	movs	r0, #1
 8002346:	fa00 f202 	lsl.w	r2, r0, r2
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000e100 	.word	0xe000e100

08002360 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	6039      	str	r1, [r7, #0]
 800236a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800236c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da0b      	bge.n	800238c <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002374:	490d      	ldr	r1, [pc, #52]	; (80023ac <NVIC_SetPriority+0x4c>)
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	3b04      	subs	r3, #4
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238a:	e009      	b.n	80023a0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	4908      	ldr	r1, [pc, #32]	; (80023b0 <NVIC_SetPriority+0x50>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f1c3 0307 	rsb	r3, r3, #7
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	bf28      	it	cs
 80023d2:	2304      	movcs	r3, #4
 80023d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3304      	adds	r3, #4
 80023da:	2b06      	cmp	r3, #6
 80023dc:	d902      	bls.n	80023e4 <NVIC_EncodePriority+0x30>
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3b03      	subs	r3, #3
 80023e2:	e000      	b.n	80023e6 <NVIC_EncodePriority+0x32>
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	2201      	movs	r2, #1
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	1e5a      	subs	r2, r3, #1
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	401a      	ands	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023fa:	2101      	movs	r1, #1
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	1e59      	subs	r1, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f7ff ff90 	bl	8002360 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff2f 	bl	80022c8 <NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff44 	bl	8002310 <NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff90 	bl	80023b4 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5f 	bl	8002360 <NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff37 	bl	800232c <NVIC_EnableIRQ>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ffa2 	bl	8002418 <SysTick_Config>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d106      	bne.n	80024fc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80024ee:	4a09      	ldr	r2, [pc, #36]	; (8002514 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80024fa:	e005      	b.n	8002508 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80024fc:	4a05      	ldr	r2, [pc, #20]	; (8002514 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0304 	bic.w	r3, r3, #4
 8002506:	6013      	str	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000e010 	.word	0xe000e010

08002518 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800251c:	f000 f802 	bl	8002524 <HAL_SYSTICK_Callback>
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e054      	b.n	80025f0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7f5b      	ldrb	r3, [r3, #29]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f00c fc76 	bl	800ee48 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	791b      	ldrb	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a22      	ldr	r2, [pc, #136]	; (80025f8 <HAL_CRC_Init+0xc4>)
 8002570:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	6892      	ldr	r2, [r2, #8]
 800257c:	f022 0218 	bic.w	r2, r2, #24
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	e00c      	b.n	800259e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	461a      	mov	r2, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f834 	bl	80025fc <HAL_CRCEx_Polynomial_Set>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e028      	b.n	80025f0 <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	795b      	ldrb	r3, [r3, #5]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d105      	bne.n	80025b2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f04f 32ff 	mov.w	r2, #4294967295
 80025ae:	611a      	str	r2, [r3, #16]
 80025b0:	e004      	b.n	80025bc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6912      	ldr	r2, [r2, #16]
 80025ba:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	6892      	ldr	r2, [r2, #8]
 80025c6:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6952      	ldr	r2, [r2, #20]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	6892      	ldr	r2, [r2, #8]
 80025dc:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6992      	ldr	r2, [r2, #24]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	04c11db7 	.word	0x04c11db7

080025fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002608:	231f      	movs	r3, #31
 800260a:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 800260c:	bf00      	nop
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa22 f303 	lsr.w	r3, r2, r3
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d104      	bne.n	8002628 <HAL_CRCEx_Polynomial_Set+0x2c>
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	1e5a      	subs	r2, r3, #1
 8002622:	617a      	str	r2, [r7, #20]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f2      	bne.n	800260e <HAL_CRCEx_Polynomial_Set+0x12>
  {
  }

  switch (PolyLength)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b18      	cmp	r3, #24
 800262c:	d843      	bhi.n	80026b6 <HAL_CRCEx_Polynomial_Set+0xba>
 800262e:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <HAL_CRCEx_Polynomial_Set+0x38>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	080026b7 	.word	0x080026b7
 8002638:	080026b7 	.word	0x080026b7
 800263c:	080026b7 	.word	0x080026b7
 8002640:	080026b7 	.word	0x080026b7
 8002644:	080026b7 	.word	0x080026b7
 8002648:	080026b7 	.word	0x080026b7
 800264c:	080026b7 	.word	0x080026b7
 8002650:	080026b7 	.word	0x080026b7
 8002654:	080026ad 	.word	0x080026ad
 8002658:	080026b7 	.word	0x080026b7
 800265c:	080026b7 	.word	0x080026b7
 8002660:	080026b7 	.word	0x080026b7
 8002664:	080026b7 	.word	0x080026b7
 8002668:	080026b7 	.word	0x080026b7
 800266c:	080026b7 	.word	0x080026b7
 8002670:	080026b7 	.word	0x080026b7
 8002674:	080026a3 	.word	0x080026a3
 8002678:	080026b7 	.word	0x080026b7
 800267c:	080026b7 	.word	0x080026b7
 8002680:	080026b7 	.word	0x080026b7
 8002684:	080026b7 	.word	0x080026b7
 8002688:	080026b7 	.word	0x080026b7
 800268c:	080026b7 	.word	0x080026b7
 8002690:	080026b7 	.word	0x080026b7
 8002694:	08002699 	.word	0x08002699
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b06      	cmp	r3, #6
 800269c:	d90d      	bls.n	80026ba <HAL_CRCEx_Polynomial_Set+0xbe>
      { 
        return  HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e01f      	b.n	80026e2 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b07      	cmp	r3, #7
 80026a6:	d90a      	bls.n	80026be <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e01a      	b.n	80026e2 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b0f      	cmp	r3, #15
 80026b0:	d907      	bls.n	80026c2 <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e015      	b.n	80026e2 <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
  default:
      break;
 80026b6:	bf00      	nop
 80026b8:	e004      	b.n	80026c4 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026ba:	bf00      	nop
 80026bc:	e002      	b.n	80026c4 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026be:	bf00      	nop
 80026c0:	e000      	b.n	80026c4 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026c2:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	6892      	ldr	r2, [r2, #8]
 80026d6:	f022 0118 	bic.w	r1, r2, #24
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop

080026f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff fa92 	bl	8001c24 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e099      	b.n	8002840 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272c:	e00f      	b.n	800274e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272e:	f7ff fa79 	bl	8001c24 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b05      	cmp	r3, #5
 800273a:	d908      	bls.n	800274e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2203      	movs	r2, #3
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e078      	b.n	8002840 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e8      	bne.n	800272e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4b38      	ldr	r3, [pc, #224]	; (8002848 <HAL_DMA_Init+0x158>)
 8002768:	4013      	ands	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d107      	bne.n	80027b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	4313      	orrs	r3, r2
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f023 0307 	bic.w	r3, r3, #7
 80027ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d117      	bne.n	8002812 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f9e9 	bl	8002bcc <DMA_CheckFifoParam>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2240      	movs	r2, #64	; 0x40
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800280e:	2301      	movs	r3, #1
 8002810:	e016      	b.n	8002840 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f9a0 	bl	8002b60 <DMA_CalcBaseAndBitshift>
 8002820:	4603      	mov	r3, r0
 8002822:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	223f      	movs	r2, #63	; 0x3f
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	f010803f 	.word	0xf010803f

0800284c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002858:	4b92      	ldr	r3, [pc, #584]	; (8002aa4 <HAL_DMA_IRQHandler+0x258>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a92      	ldr	r2, [pc, #584]	; (8002aa8 <HAL_DMA_IRQHandler+0x25c>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0a9b      	lsrs	r3, r3, #10
 8002864:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	2208      	movs	r2, #8
 8002878:	409a      	lsls	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d01a      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	f022 0204 	bic.w	r2, r2, #4
 800289e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	2208      	movs	r2, #8
 80028a6:	409a      	lsls	r2, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	2201      	movs	r2, #1
 80028be:	409a      	lsls	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d012      	beq.n	80028ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	2201      	movs	r2, #1
 80028dc:	409a      	lsls	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f043 0202 	orr.w	r2, r3, #2
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f2:	2204      	movs	r2, #4
 80028f4:	409a      	lsls	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d012      	beq.n	8002924 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00b      	beq.n	8002924 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	2204      	movs	r2, #4
 8002912:	409a      	lsls	r2, r3
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	f043 0204 	orr.w	r2, r3, #4
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002928:	2210      	movs	r2, #16
 800292a:	409a      	lsls	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d043      	beq.n	80029bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d03c      	beq.n	80029bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002946:	2210      	movs	r2, #16
 8002948:	409a      	lsls	r2, r3
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d018      	beq.n	800298e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d108      	bne.n	800297c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d024      	beq.n	80029bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	4798      	blx	r3
 800297a:	e01f      	b.n	80029bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01b      	beq.n	80029bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
 800298c:	e016      	b.n	80029bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d107      	bne.n	80029ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	f022 0208 	bic.w	r2, r2, #8
 80029aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	2220      	movs	r2, #32
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 808e 	beq.w	8002aea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8086 	beq.w	8002aea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	2220      	movs	r2, #32
 80029e4:	409a      	lsls	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b05      	cmp	r3, #5
 80029f4:	d136      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	f022 0216 	bic.w	r2, r2, #22
 8002a04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	6952      	ldr	r2, [r2, #20]
 8002a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <HAL_DMA_IRQHandler+0x1da>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	f022 0208 	bic.w	r2, r2, #8
 8002a34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	223f      	movs	r2, #63	; 0x3f
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d07d      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
        }
        return;
 8002a62:	e078      	b.n	8002b56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01c      	beq.n	8002aac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d108      	bne.n	8002a92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d030      	beq.n	8002aea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
 8002a90:	e02b      	b.n	8002aea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d027      	beq.n	8002aea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
 8002aa2:	e022      	b.n	8002aea <HAL_DMA_IRQHandler+0x29e>
 8002aa4:	20000124 	.word	0x20000124
 8002aa8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10f      	bne.n	8002ada <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	f022 0210 	bic.w	r2, r2, #16
 8002ac8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d032      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d022      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2205      	movs	r2, #5
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	f022 0201 	bic.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d807      	bhi.n	8002b32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f2      	bne.n	8002b16 <HAL_DMA_IRQHandler+0x2ca>
 8002b30:	e000      	b.n	8002b34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b32:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
 8002b54:	e000      	b.n	8002b58 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b56:	bf00      	nop
    }
  }
}
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop

08002b60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	3b10      	subs	r3, #16
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <DMA_CalcBaseAndBitshift+0x60>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b7a:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <DMA_CalcBaseAndBitshift+0x64>)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d908      	bls.n	8002ba0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <DMA_CalcBaseAndBitshift+0x68>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	1d1a      	adds	r2, r3, #4
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	659a      	str	r2, [r3, #88]	; 0x58
 8002b9e:	e006      	b.n	8002bae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <DMA_CalcBaseAndBitshift+0x68>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	aaaaaaab 	.word	0xaaaaaaab
 8002bc4:	08015ea0 	.word	0x08015ea0
 8002bc8:	fffffc00 	.word	0xfffffc00

08002bcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11f      	bne.n	8002c26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d855      	bhi.n	8002c98 <DMA_CheckFifoParam+0xcc>
 8002bec:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <DMA_CheckFifoParam+0x28>)
 8002bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf2:	bf00      	nop
 8002bf4:	08002c05 	.word	0x08002c05
 8002bf8:	08002c17 	.word	0x08002c17
 8002bfc:	08002c05 	.word	0x08002c05
 8002c00:	08002c99 	.word	0x08002c99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d045      	beq.n	8002c9c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c14:	e042      	b.n	8002c9c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c1e:	d13f      	bne.n	8002ca0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c24:	e03c      	b.n	8002ca0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c2e:	d121      	bne.n	8002c74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d836      	bhi.n	8002ca4 <DMA_CheckFifoParam+0xd8>
 8002c36:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <DMA_CheckFifoParam+0x70>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002c4d 	.word	0x08002c4d
 8002c40:	08002c53 	.word	0x08002c53
 8002c44:	08002c4d 	.word	0x08002c4d
 8002c48:	08002c65 	.word	0x08002c65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c50:	e02f      	b.n	8002cb2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d024      	beq.n	8002ca8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c62:	e021      	b.n	8002ca8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c6c:	d11e      	bne.n	8002cac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c72:	e01b      	b.n	8002cac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d902      	bls.n	8002c80 <DMA_CheckFifoParam+0xb4>
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d003      	beq.n	8002c86 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c7e:	e018      	b.n	8002cb2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
      break;
 8002c84:	e015      	b.n	8002cb2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00e      	beq.n	8002cb0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
      break;
 8002c96:	e00b      	b.n	8002cb0 <DMA_CheckFifoParam+0xe4>
      break;
 8002c98:	bf00      	nop
 8002c9a:	e00a      	b.n	8002cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002c9c:	bf00      	nop
 8002c9e:	e008      	b.n	8002cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ca0:	bf00      	nop
 8002ca2:	e006      	b.n	8002cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ca4:	bf00      	nop
 8002ca6:	e004      	b.n	8002cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ca8:	bf00      	nop
 8002caa:	e002      	b.n	8002cb2 <DMA_CheckFifoParam+0xe6>
      break;   
 8002cac:	bf00      	nop
 8002cae:	e000      	b.n	8002cb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cb0:	bf00      	nop
    }
  } 
  
  return status; 
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e039      	b.n	8002d46 <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f00c f8ce 	bl	800ee88 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6852      	ldr	r2, [r2, #4]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d14:	f022 0107 	bic.w	r1, r2, #7
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6892      	ldr	r2, [r2, #8]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_DMA2D_Init+0x90>)
 8002d2c:	400b      	ands	r3, r1
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68c9      	ldr	r1, [r1, #12]
 8002d32:	430b      	orrs	r3, r1
 8002d34:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	ffffc000 	.word	0xffffc000

08002d54 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_DMA2D_Start+0x1c>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e018      	b.n	8002da2 <HAL_DMA2D_Start+0x4e>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f98a 	bl	80030a4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d056      	beq.n	8002e78 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002dca:	f7fe ff2b 	bl	8001c24 <HAL_GetTick>
 8002dce:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002dd0:	e04b      	b.n	8002e6a <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d023      	beq.n	8002e2c <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	f043 0202 	orr.w	r2, r3, #2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2221      	movs	r2, #33	; 0x21
 8002e16:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0a2      	b.n	8002f72 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d01a      	beq.n	8002e6a <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <HAL_DMA2D_PollForTransfer+0xa0>
 8002e3a:	f7fe fef3 	bl	8001c24 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1ad2      	subs	r2, r2, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d90f      	bls.n	8002e6a <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2203      	movs	r2, #3
 8002e5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e083      	b.n	8002f72 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0ac      	beq.n	8002dd2 <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d061      	beq.n	8002f58 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e94:	f7fe fec6 	bl	8001c24 <HAL_GetTick>
 8002e98:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002e9a:	e056      	b.n	8002f4a <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d02e      	beq.n	8002f0c <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebc:	f043 0204 	orr.w	r2, r3, #4
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	f043 0202 	orr.w	r2, r3, #2
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2229      	movs	r2, #41	; 0x29
 8002ef6:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2204      	movs	r2, #4
 8002efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e032      	b.n	8002f72 <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f12:	d01a      	beq.n	8002f4a <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d007      	beq.n	8002f2a <HAL_DMA2D_PollForTransfer+0x180>
 8002f1a:	f7fe fe83 	bl	8001c24 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1ad2      	subs	r2, r2, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d90f      	bls.n	8002f4a <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e013      	b.n	8002f72 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0a1      	beq.n	8002e9c <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2212      	movs	r2, #18
 8002f5e:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	3318      	adds	r3, #24
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_DMA2D_ConfigLayer+0x34>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e071      	b.n	8003094 <HAL_DMA2D_ConfigLayer+0x118>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002fce:	4b34      	ldr	r3, [pc, #208]	; (80030a0 <HAL_DMA2D_ConfigLayer+0x124>)
 8002fd0:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b0a      	cmp	r3, #10
 8002fd8:	d003      	beq.n	8002fe2 <HAL_DMA2D_ConfigLayer+0x66>
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b09      	cmp	r3, #9
 8002fe0:	d107      	bne.n	8002ff2 <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	e005      	b.n	8002ffe <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	061b      	lsls	r3, r3, #24
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d11f      	bne.n	8003044 <HAL_DMA2D_ConfigLayer+0xc8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	43d2      	mvns	r2, r2
 8003012:	4011      	ands	r1, r2
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	430a      	orrs	r2, r1
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b0a      	cmp	r3, #10
 800302a:	d003      	beq.n	8003034 <HAL_DMA2D_ConfigLayer+0xb8>
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b09      	cmp	r3, #9
 8003032:	d126      	bne.n	8003082 <HAL_DMA2D_ConfigLayer+0x106>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	68d2      	ldr	r2, [r2, #12]
 800303c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003040:	629a      	str	r2, [r3, #40]	; 0x28
 8003042:	e01e      	b.n	8003082 <HAL_DMA2D_ConfigLayer+0x106>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	69d1      	ldr	r1, [r2, #28]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	43d2      	mvns	r2, r2
 8003052:	4011      	ands	r1, r2
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	430a      	orrs	r2, r1
 8003058:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b0a      	cmp	r3, #10
 800306a:	d003      	beq.n	8003074 <HAL_DMA2D_ConfigLayer+0xf8>
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b09      	cmp	r3, #9
 8003072:	d106      	bne.n	8003082 <HAL_DMA2D_ConfigLayer+0x106>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	68d2      	ldr	r2, [r2, #12]
 800307c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003080:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	ff03000f 	.word	0xff03000f

080030a4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 80030a4:	b480      	push	{r7}
 80030a6:	b08b      	sub	sp, #44	; 0x2c
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030d0:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	0410      	lsls	r0, r2, #16
 80030d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030da:	4302      	orrs	r2, r0
 80030dc:	430a      	orrs	r2, r1
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030f0:	d174      	bne.n	80031dc <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80030f8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003100:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003108:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d108      	bne.n	800312a <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	431a      	orrs	r2, r3
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	431a      	orrs	r2, r3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
 8003128:	e053      	b.n	80031d2 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d106      	bne.n	8003140 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	431a      	orrs	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	e048      	b.n	80031d2 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d111      	bne.n	800316c <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	0cdb      	lsrs	r3, r3, #19
 800314c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	0a9b      	lsrs	r3, r3, #10
 8003152:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	08db      	lsrs	r3, r3, #3
 8003158:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	02db      	lsls	r3, r3, #11
 8003162:	431a      	orrs	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	e032      	b.n	80031d2 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d117      	bne.n	80031a4 <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	0fdb      	lsrs	r3, r3, #31
 8003178:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	0cdb      	lsrs	r3, r3, #19
 800317e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	0adb      	lsrs	r3, r3, #11
 8003184:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	08db      	lsrs	r3, r3, #3
 800318a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	029b      	lsls	r3, r3, #10
 8003194:	431a      	orrs	r2, r3
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	03db      	lsls	r3, r3, #15
 800319a:	431a      	orrs	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
 80031a2:	e016      	b.n	80031d2 <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	0f1b      	lsrs	r3, r3, #28
 80031a8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	0d1b      	lsrs	r3, r3, #20
 80031ae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	0b1b      	lsrs	r3, r3, #12
 80031b4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	011a      	lsls	r2, r3, #4
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	431a      	orrs	r2, r3
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	031b      	lsls	r3, r3, #12
 80031ca:	431a      	orrs	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80031da:	e003      	b.n	80031e4 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	60da      	str	r2, [r3, #12]
}
 80031e4:	bf00      	nop
 80031e6:	372c      	adds	r7, #44	; 0x2c
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	e175      	b.n	80034fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003210:	2201      	movs	r2, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	429a      	cmp	r2, r3
 800322a:	f040 8164 	bne.w	80034f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x4e>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b12      	cmp	r3, #18
 800323c:	d123      	bne.n	8003286 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	08da      	lsrs	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3208      	adds	r2, #8
 8003246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	220f      	movs	r2, #15
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	08da      	lsrs	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3208      	adds	r2, #8
 8003280:	69b9      	ldr	r1, [r7, #24]
 8003282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	2203      	movs	r2, #3
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0203 	and.w	r2, r3, #3
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d00b      	beq.n	80032da <HAL_GPIO_Init+0xea>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d007      	beq.n	80032da <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032ce:	2b11      	cmp	r3, #17
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b12      	cmp	r3, #18
 80032d8:	d130      	bne.n	800333c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	2203      	movs	r2, #3
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4013      	ands	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003310:	2201      	movs	r2, #1
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 0201 	and.w	r2, r3, #1
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80be 	beq.w	80034f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337a:	4a65      	ldr	r2, [pc, #404]	; (8003510 <HAL_GPIO_Init+0x320>)
 800337c:	4b64      	ldr	r3, [pc, #400]	; (8003510 <HAL_GPIO_Init+0x320>)
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003384:	6453      	str	r3, [r2, #68]	; 0x44
 8003386:	4b62      	ldr	r3, [pc, #392]	; (8003510 <HAL_GPIO_Init+0x320>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003392:	4a60      	ldr	r2, [pc, #384]	; (8003514 <HAL_GPIO_Init+0x324>)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	3302      	adds	r3, #2
 800339a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	220f      	movs	r2, #15
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a57      	ldr	r2, [pc, #348]	; (8003518 <HAL_GPIO_Init+0x328>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d037      	beq.n	800342e <HAL_GPIO_Init+0x23e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a56      	ldr	r2, [pc, #344]	; (800351c <HAL_GPIO_Init+0x32c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d031      	beq.n	800342a <HAL_GPIO_Init+0x23a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a55      	ldr	r2, [pc, #340]	; (8003520 <HAL_GPIO_Init+0x330>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02b      	beq.n	8003426 <HAL_GPIO_Init+0x236>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a54      	ldr	r2, [pc, #336]	; (8003524 <HAL_GPIO_Init+0x334>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d025      	beq.n	8003422 <HAL_GPIO_Init+0x232>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a53      	ldr	r2, [pc, #332]	; (8003528 <HAL_GPIO_Init+0x338>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d01f      	beq.n	800341e <HAL_GPIO_Init+0x22e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a52      	ldr	r2, [pc, #328]	; (800352c <HAL_GPIO_Init+0x33c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d019      	beq.n	800341a <HAL_GPIO_Init+0x22a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a51      	ldr	r2, [pc, #324]	; (8003530 <HAL_GPIO_Init+0x340>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <HAL_GPIO_Init+0x226>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a50      	ldr	r2, [pc, #320]	; (8003534 <HAL_GPIO_Init+0x344>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00d      	beq.n	8003412 <HAL_GPIO_Init+0x222>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4f      	ldr	r2, [pc, #316]	; (8003538 <HAL_GPIO_Init+0x348>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <HAL_GPIO_Init+0x21e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4e      	ldr	r2, [pc, #312]	; (800353c <HAL_GPIO_Init+0x34c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d101      	bne.n	800340a <HAL_GPIO_Init+0x21a>
 8003406:	2309      	movs	r3, #9
 8003408:	e012      	b.n	8003430 <HAL_GPIO_Init+0x240>
 800340a:	230a      	movs	r3, #10
 800340c:	e010      	b.n	8003430 <HAL_GPIO_Init+0x240>
 800340e:	2308      	movs	r3, #8
 8003410:	e00e      	b.n	8003430 <HAL_GPIO_Init+0x240>
 8003412:	2307      	movs	r3, #7
 8003414:	e00c      	b.n	8003430 <HAL_GPIO_Init+0x240>
 8003416:	2306      	movs	r3, #6
 8003418:	e00a      	b.n	8003430 <HAL_GPIO_Init+0x240>
 800341a:	2305      	movs	r3, #5
 800341c:	e008      	b.n	8003430 <HAL_GPIO_Init+0x240>
 800341e:	2304      	movs	r3, #4
 8003420:	e006      	b.n	8003430 <HAL_GPIO_Init+0x240>
 8003422:	2303      	movs	r3, #3
 8003424:	e004      	b.n	8003430 <HAL_GPIO_Init+0x240>
 8003426:	2302      	movs	r3, #2
 8003428:	e002      	b.n	8003430 <HAL_GPIO_Init+0x240>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_GPIO_Init+0x240>
 800342e:	2300      	movs	r3, #0
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	f002 0203 	and.w	r2, r2, #3
 8003436:	0092      	lsls	r2, r2, #2
 8003438:	4093      	lsls	r3, r2
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003440:	4934      	ldr	r1, [pc, #208]	; (8003514 <HAL_GPIO_Init+0x324>)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	3302      	adds	r3, #2
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800344e:	4b3c      	ldr	r3, [pc, #240]	; (8003540 <HAL_GPIO_Init+0x350>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003472:	4a33      	ldr	r2, [pc, #204]	; (8003540 <HAL_GPIO_Init+0x350>)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003478:	4b31      	ldr	r3, [pc, #196]	; (8003540 <HAL_GPIO_Init+0x350>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800349c:	4a28      	ldr	r2, [pc, #160]	; (8003540 <HAL_GPIO_Init+0x350>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034a2:	4b27      	ldr	r3, [pc, #156]	; (8003540 <HAL_GPIO_Init+0x350>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034c6:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <HAL_GPIO_Init+0x350>)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034cc:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <HAL_GPIO_Init+0x350>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034f0:	4a13      	ldr	r2, [pc, #76]	; (8003540 <HAL_GPIO_Init+0x350>)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3301      	adds	r3, #1
 80034fa:	61fb      	str	r3, [r7, #28]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	2b0f      	cmp	r3, #15
 8003500:	f67f ae86 	bls.w	8003210 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003504:	bf00      	nop
 8003506:	3724      	adds	r7, #36	; 0x24
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40023800 	.word	0x40023800
 8003514:	40013800 	.word	0x40013800
 8003518:	40020000 	.word	0x40020000
 800351c:	40020400 	.word	0x40020400
 8003520:	40020800 	.word	0x40020800
 8003524:	40020c00 	.word	0x40020c00
 8003528:	40021000 	.word	0x40021000
 800352c:	40021400 	.word	0x40021400
 8003530:	40021800 	.word	0x40021800
 8003534:	40021c00 	.word	0x40021c00
 8003538:	40022000 	.word	0x40022000
 800353c:	40022400 	.word	0x40022400
 8003540:	40013c00 	.word	0x40013c00

08003544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	807b      	strh	r3, [r7, #2]
 8003550:	4613      	mov	r3, r2
 8003552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003554:	787b      	ldrb	r3, [r7, #1]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800355a:	887a      	ldrh	r2, [r7, #2]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003560:	e003      	b.n	800356a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003562:	887b      	ldrh	r3, [r7, #2]
 8003564:	041a      	lsls	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	619a      	str	r2, [r3, #24]
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e07e      	b.n	8003688 <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f00b fc92 	bl	800eec8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2224      	movs	r2, #36	; 0x24
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6852      	ldr	r2, [r2, #4]
 80035c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	6892      	ldr	r2, [r2, #8]
 80035d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d107      	bne.n	80035f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6892      	ldr	r2, [r2, #8]
 80035ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	e006      	b.n	8003600 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6892      	ldr	r2, [r2, #8]
 80035fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d104      	bne.n	8003612 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003610:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_I2C_Init+0x118>)
 800361e:	430b      	orrs	r3, r1
 8003620:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	68d2      	ldr	r2, [r2, #12]
 800362c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003630:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6911      	ldr	r1, [r2, #16]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6952      	ldr	r2, [r2, #20]
 800363e:	4311      	orrs	r1, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6992      	ldr	r2, [r2, #24]
 8003644:	0212      	lsls	r2, r2, #8
 8003646:	430a      	orrs	r2, r1
 8003648:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	69d1      	ldr	r1, [r2, #28]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6a12      	ldr	r2, [r2, #32]
 8003656:	430a      	orrs	r2, r1
 8003658:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	f042 0201 	orr.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	02008000 	.word	0x02008000

08003694 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d138      	bne.n	800371c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e032      	b.n	800371e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	; 0x24
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	6811      	ldr	r1, [r2, #0]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	e000      	b.n	800371e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800371c:	2302      	movs	r3, #2
  }
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800372a:	b480      	push	{r7}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b20      	cmp	r3, #32
 8003742:	d139      	bne.n	80037b8 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 800374e:	2302      	movs	r3, #2
 8003750:	e033      	b.n	80037ba <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2224      	movs	r2, #36	; 0x24
 800375e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003780:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e000      	b.n	80037ba <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0c7      	b.n	8003972 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f00b fc02 	bl	800f000 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	6992      	ldr	r2, [r2, #24]
 800380e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003812:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	6991      	ldr	r1, [r2, #24]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6850      	ldr	r0, [r2, #4]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6892      	ldr	r2, [r2, #8]
 8003826:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800382c:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6912      	ldr	r2, [r2, #16]
 8003832:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003834:	430a      	orrs	r2, r1
 8003836:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6899      	ldr	r1, [r3, #8]
 8003842:	4b4e      	ldr	r3, [pc, #312]	; (800397c <HAL_LTDC_Init+0x1b4>)
 8003844:	400b      	ands	r3, r1
 8003846:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	6891      	ldr	r1, [r2, #8]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6990      	ldr	r0, [r2, #24]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4302      	orrs	r2, r0
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68d9      	ldr	r1, [r3, #12]
 8003870:	4b42      	ldr	r3, [pc, #264]	; (800397c <HAL_LTDC_Init+0x1b4>)
 8003872:	400b      	ands	r3, r1
 8003874:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	68d1      	ldr	r1, [r2, #12]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6a10      	ldr	r0, [r2, #32]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4302      	orrs	r2, r0
 8003890:	430a      	orrs	r2, r1
 8003892:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6919      	ldr	r1, [r3, #16]
 800389e:	4b37      	ldr	r3, [pc, #220]	; (800397c <HAL_LTDC_Init+0x1b4>)
 80038a0:	400b      	ands	r3, r1
 80038a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	041b      	lsls	r3, r3, #16
 80038aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	6911      	ldr	r1, [r2, #16]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4302      	orrs	r2, r0
 80038be:	430a      	orrs	r2, r1
 80038c0:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6959      	ldr	r1, [r3, #20]
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_LTDC_Init+0x1b4>)
 80038ce:	400b      	ands	r3, r1
 80038d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6812      	ldr	r2, [r2, #0]
 80038e2:	6951      	ldr	r1, [r2, #20]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4302      	orrs	r2, r0
 80038ec:	430a      	orrs	r2, r1
 80038ee:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800390e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800391e:	68b8      	ldr	r0, [r7, #8]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4302      	orrs	r2, r0
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800392a:	4302      	orrs	r2, r0
 800392c:	430a      	orrs	r2, r1
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800393a:	f042 0204 	orr.w	r2, r2, #4
 800393e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800394a:	f042 0202 	orr.w	r2, r2, #2
 800394e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	6992      	ldr	r2, [r2, #24]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	f000f800 	.word	0xf000f800

08003980 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8003980:	b5b0      	push	{r4, r5, r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_LTDC_ConfigLayer+0x1a>
 8003996:	2302      	movs	r3, #2
 8003998:	e02c      	b.n	80039f4 <HAL_LTDC_ConfigLayer+0x74>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2134      	movs	r1, #52	; 0x34
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4614      	mov	r4, r2
 80039be:	461d      	mov	r5, r3
 80039c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f81f 	bl	8003a18 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2201      	movs	r2, #1
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bdb0      	pop	{r4, r5, r7, pc}

080039fc <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003a0a:	b2db      	uxtb	r3, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	; 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	0c1b      	lsrs	r3, r3, #16
 8003a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a40:	4413      	add	r3, r2
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	01db      	lsls	r3, r3, #7
 8003a50:	4413      	add	r3, r2
 8003a52:	3384      	adds	r3, #132	; 0x84
 8003a54:	461a      	mov	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	01db      	lsls	r3, r3, #7
 8003a60:	440b      	add	r3, r1
 8003a62:	3384      	adds	r3, #132	; 0x84
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003a6a:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	01db      	lsls	r3, r3, #7
 8003a76:	4413      	add	r3, r2
 8003a78:	3384      	adds	r3, #132	; 0x84
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	0c1b      	lsrs	r3, r3, #16
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	4413      	add	r3, r2
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa4:	4413      	add	r3, r2
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	01db      	lsls	r3, r3, #7
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3384      	adds	r3, #132	; 0x84
 8003ab8:	461a      	mov	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	01db      	lsls	r3, r3, #7
 8003ac4:	440b      	add	r3, r1
 8003ac6:	3384      	adds	r3, #132	; 0x84
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ace:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	01db      	lsls	r3, r3, #7
 8003ada:	4413      	add	r3, r2
 8003adc:	3384      	adds	r3, #132	; 0x84
 8003ade:	4619      	mov	r1, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aee:	4413      	add	r3, r2
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	01db      	lsls	r3, r3, #7
 8003b02:	4413      	add	r3, r2
 8003b04:	3384      	adds	r3, #132	; 0x84
 8003b06:	461a      	mov	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	01db      	lsls	r3, r3, #7
 8003b12:	440b      	add	r3, r1
 8003b14:	3384      	adds	r3, #132	; 0x84
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f023 0307 	bic.w	r3, r3, #7
 8003b1c:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	01db      	lsls	r3, r3, #7
 8003b28:	4413      	add	r3, r2
 8003b2a:	3384      	adds	r3, #132	; 0x84
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b44:	041b      	lsls	r3, r3, #16
 8003b46:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	01db      	lsls	r3, r3, #7
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3384      	adds	r3, #132	; 0x84
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	01db      	lsls	r3, r3, #7
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3384      	adds	r3, #132	; 0x84
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2300      	movs	r3, #0
 8003b72:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	01db      	lsls	r3, r3, #7
 8003b7e:	4413      	add	r3, r2
 8003b80:	3384      	adds	r3, #132	; 0x84
 8003b82:	4619      	mov	r1, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	01db      	lsls	r3, r3, #7
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3384      	adds	r3, #132	; 0x84
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	01db      	lsls	r3, r3, #7
 8003bb4:	440b      	add	r3, r1
 8003bb6:	3384      	adds	r3, #132	; 0x84
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bbe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	01db      	lsls	r3, r3, #7
 8003bca:	4413      	add	r3, r2
 8003bcc:	3384      	adds	r3, #132	; 0x84
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	01db      	lsls	r3, r3, #7
 8003be0:	4413      	add	r3, r2
 8003be2:	3384      	adds	r3, #132	; 0x84
 8003be4:	4619      	mov	r1, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	01db      	lsls	r3, r3, #7
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3384      	adds	r3, #132	; 0x84
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	4b5a      	ldr	r3, [pc, #360]	; (8003d60 <LTDC_SetConfig+0x348>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	01db      	lsls	r3, r3, #7
 8003c06:	4413      	add	r3, r2
 8003c08:	3384      	adds	r3, #132	; 0x84
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	01db      	lsls	r3, r3, #7
 8003c22:	4413      	add	r3, r2
 8003c24:	3384      	adds	r3, #132	; 0x84
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	01db      	lsls	r3, r3, #7
 8003c32:	4413      	add	r3, r2
 8003c34:	3384      	adds	r3, #132	; 0x84
 8003c36:	461a      	mov	r2, r3
 8003c38:	2300      	movs	r3, #0
 8003c3a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	01db      	lsls	r3, r3, #7
 8003c46:	4413      	add	r3, r2
 8003c48:	3384      	adds	r3, #132	; 0x84
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <LTDC_SetConfig+0x248>
  {
    tmp = 4;
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	e01b      	b.n	8003c98 <LTDC_SetConfig+0x280>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d102      	bne.n	8003c6e <LTDC_SetConfig+0x256>
  {
    tmp = 3;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	61fb      	str	r3, [r7, #28]
 8003c6c:	e014      	b.n	8003c98 <LTDC_SetConfig+0x280>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d00b      	beq.n	8003c8e <LTDC_SetConfig+0x276>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d007      	beq.n	8003c8e <LTDC_SetConfig+0x276>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d003      	beq.n	8003c8e <LTDC_SetConfig+0x276>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c8a:	2b07      	cmp	r3, #7
 8003c8c:	d102      	bne.n	8003c94 <LTDC_SetConfig+0x27c>
  {
    tmp = 2;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	e001      	b.n	8003c98 <LTDC_SetConfig+0x280>
  }
  else
  {
    tmp = 1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	01db      	lsls	r3, r3, #7
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3384      	adds	r3, #132	; 0x84
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4619      	mov	r1, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	01db      	lsls	r3, r3, #7
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3384      	adds	r3, #132	; 0x84
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003cbc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	01db      	lsls	r3, r3, #7
 8003cc8:	4413      	add	r3, r2
 8003cca:	3384      	adds	r3, #132	; 0x84
 8003ccc:	4618      	mov	r0, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	fb02 f303 	mul.w	r3, r2, r3
 8003cd8:	041a      	lsls	r2, r3, #16
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6859      	ldr	r1, [r3, #4]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	1acb      	subs	r3, r1, r3
 8003ce4:	69f9      	ldr	r1, [r7, #28]
 8003ce6:	fb01 f303 	mul.w	r3, r1, r3
 8003cea:	3303      	adds	r3, #3
 8003cec:	4313      	orrs	r3, r2
 8003cee:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	01db      	lsls	r3, r3, #7
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3384      	adds	r3, #132	; 0x84
 8003cfe:	4619      	mov	r1, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	01db      	lsls	r3, r3, #7
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3384      	adds	r3, #132	; 0x84
 8003d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d10:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <LTDC_SetConfig+0x34c>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	01db      	lsls	r3, r3, #7
 8003d20:	4413      	add	r3, r2
 8003d22:	3384      	adds	r3, #132	; 0x84
 8003d24:	461a      	mov	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	01db      	lsls	r3, r3, #7
 8003d36:	4413      	add	r3, r2
 8003d38:	3384      	adds	r3, #132	; 0x84
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4619      	mov	r1, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	01db      	lsls	r3, r3, #7
 8003d46:	440b      	add	r3, r1
 8003d48:	3384      	adds	r3, #132	; 0x84
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6013      	str	r3, [r2, #0]
}
 8003d52:	bf00      	nop
 8003d54:	3724      	adds	r7, #36	; 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	fffff8f8 	.word	0xfffff8f8
 8003d64:	fffff800 	.word	0xfffff800

08003d68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d6a:	b08f      	sub	sp, #60	; 0x3c
 8003d6c:	af0a      	add	r7, sp, #40	; 0x28
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e0fe      	b.n	8003f7c <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2203      	movs	r2, #3
 8003d82:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f00b fbfe 	bl	800f588 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f003 fbee 	bl	8007572 <USB_DisableGlobalInt>

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	687e      	ldr	r6, [r7, #4]
 8003d9e:	466d      	mov	r5, sp
 8003da0:	f106 0410 	add.w	r4, r6, #16
 8003da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003db0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003db4:	1d33      	adds	r3, r6, #4
 8003db6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003db8:	6838      	ldr	r0, [r7, #0]
 8003dba:	f003 fb77 	bl	80074ac <USB_CoreInit>

 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 fbe5 	bl	8007594 <USB_SetCurrentMode>

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	e04c      	b.n	8003e6a <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	3339      	adds	r3, #57	; 0x39
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	b2d8      	uxtb	r0, r3
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	3338      	adds	r3, #56	; 0x38
 8003df8:	4602      	mov	r2, r0
 8003dfa:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	b298      	uxth	r0, r3
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	333e      	adds	r3, #62	; 0x3e
 8003e10:	4602      	mov	r2, r0
 8003e12:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	333b      	adds	r3, #59	; 0x3b
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	3340      	adds	r3, #64	; 0x40
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0;
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	3344      	adds	r3, #68	; 0x44
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0;
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	334c      	adds	r3, #76	; 0x4c
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 for (i = 0; i < 15 ; i++)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3301      	adds	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b0e      	cmp	r3, #14
 8003e6e:	d9af      	bls.n	8003dd0 <HAL_PCD_Init+0x68>
 }

 for (i = 0; i < 15 ; i++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e05a      	b.n	8003f2c <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0;
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	b2d8      	uxtb	r0, r3
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	b298      	uxth	r0, r3
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	333e      	adds	r3, #62	; 0x3e
 8003eba:	4602      	mov	r2, r0
 8003ebc:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0;
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0;
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]

   hpcd->Instance->DIEPTXF[i] = 0;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3340      	adds	r3, #64	; 0x40
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	2200      	movs	r2, #0
 8003f24:	605a      	str	r2, [r3, #4]
 for (i = 0; i < 15 ; i++)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b0e      	cmp	r3, #14
 8003f30:	d9a1      	bls.n	8003e76 <HAL_PCD_Init+0x10e>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	687e      	ldr	r6, [r7, #4]
 8003f3a:	466d      	mov	r5, sp
 8003f3c:	f106 0410 	add.w	r4, r6, #16
 8003f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f50:	1d33      	adds	r3, r6, #4
 8003f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f54:	6838      	ldr	r0, [r7, #0]
 8003f56:	f003 fb45 	bl	80075e4 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d102      	bne.n	8003f70 <HAL_PCD_Init+0x208>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f001 f84c 	bl	8005008 <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f004 fb3a 	bl	80085ee <USB_DevDisconnect>
 return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f84 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_PCD_Start+0x16>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e012      	b.n	8003fc0 <HAL_PCD_Start+0x3c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f004 fb0a 	bl	80085c0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f003 facd 	bl	8007550 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_PCD_IRQHandler>:
  * @brief  Handle PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08c      	sub	sp, #48	; 0x30
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	623b      	str	r3, [r7, #32]
  uint32_t i = 0, ep_intr = 0, epint = 0, epnum = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fda:	2300      	movs	r3, #0
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0, temp = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep = NULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	613b      	str	r3, [r7, #16]
  uint32_t hclk = 200000000;
 8003ff2:	4b98      	ldr	r3, [pc, #608]	; (8004254 <HAL_PCD_IRQHandler+0x28c>)
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f004 fb99 	bl	8008732 <USB_GetMode>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	f040 84e1 	bne.w	80049ca <HAL_PCD_IRQHandler+0xa02>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f004 fb05 	bl	800861c <USB_ReadInterrupts>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 84d7 	beq.w	80049c8 <HAL_PCD_IRQHandler+0xa00>
    {
      return;
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f004 fafc 	bl	800861c <USB_ReadInterrupts>
 8004024:	4603      	mov	r3, r0
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d103      	bne.n	8004036 <HAL_PCD_IRQHandler+0x6e>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2202      	movs	r2, #2
 8004034:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f004 faee 	bl	800861c <USB_ReadInterrupts>
 8004040:	4603      	mov	r3, r0
 8004042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004046:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800404a:	f040 80ed 	bne.w	8004228 <HAL_PCD_IRQHandler+0x260>
    {
      epnum = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f004 faf5 	bl	8008646 <USB_ReadDevAllOutEpInterrupt>
 800405c:	62b8      	str	r0, [r7, #40]	; 0x28

      while ( ep_intr )
 800405e:	e0df      	b.n	8004220 <HAL_PCD_IRQHandler+0x258>
      {
        if (ep_intr & 0x1)
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80d4 	beq.w	8004214 <HAL_PCD_IRQHandler+0x24c>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	4611      	mov	r1, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f004 fb15 	bl	80086a6 <USB_ReadDevOutEPInterrupt>
 800407c:	61f8      	str	r0, [r7, #28]

          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8082 	beq.w	800418e <HAL_PCD_IRQHandler+0x1c6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004096:	461a      	mov	r2, r3
 8004098:	2301      	movs	r3, #1
 800409a:	6093      	str	r3, [r2, #8]

            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d111      	bne.n	80040c8 <HAL_PCD_IRQHandler+0x100>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d009      	beq.n	80040c8 <HAL_PCD_IRQHandler+0x100>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c0:	461a      	mov	r2, r3
 80040c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c6:	6093      	str	r3, [r2, #8]
              }
            }

            if(hpcd->Init.dma_enable == 1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d13c      	bne.n	800414a <HAL_PCD_IRQHandler+0x182>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	0159      	lsls	r1, r3, #5
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	440b      	add	r3, r1
 80040ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f6:	1ad1      	subs	r1, r2, r3
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4403      	add	r3, r0
 8004106:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800410a:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4403      	add	r3, r0
 800412e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4419      	add	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413a:	4613      	mov	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4403      	add	r3, r0
 8004144:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004148:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	b2db      	uxtb	r3, r3
 800414e:	4619      	mov	r1, r3
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f00b faa5 	bl	800f6a0 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d117      	bne.n	800418e <HAL_PCD_IRQHandler+0x1c6>
            {
              if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	2b00      	cmp	r3, #0
 8004162:	d114      	bne.n	800418e <HAL_PCD_IRQHandler+0x1c6>
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d108      	bne.n	800418e <HAL_PCD_IRQHandler+0x1c6>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004186:	461a      	mov	r2, r3
 8004188:	2101      	movs	r1, #1
 800418a:	f004 fb17 	bl	80087bc <USB_EP0_OutStart>
              }
            }
          }

          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d021      	beq.n	80041dc <HAL_PCD_IRQHandler+0x214>
          {
            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d111      	bne.n	80041c4 <HAL_PCD_IRQHandler+0x1fc>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d009      	beq.n	80041c4 <HAL_PCD_IRQHandler+0x1fc>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	461a      	mov	r2, r3
 80041be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c2:	6093      	str	r3, [r2, #8]
              }
            }

            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f00b fa59 	bl	800f67c <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	461a      	mov	r2, r3
 80041d8:	2308      	movs	r3, #8
 80041da:	6093      	str	r3, [r2, #8]
          }

          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_PCD_IRQHandler+0x230>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f2:	461a      	mov	r2, r3
 80041f4:	2310      	movs	r3, #16
 80041f6:	6093      	str	r3, [r2, #8]
          }
          /* Clear Status Phase Received interrupt */
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <HAL_PCD_IRQHandler+0x24c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420e:	461a      	mov	r2, r3
 8004210:	2320      	movs	r3, #32
 8004212:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	3301      	adds	r3, #1
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	f47f af1c 	bne.w	8004060 <HAL_PCD_IRQHandler+0x98>
      }
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f004 f9f5 	bl	800861c <USB_ReadInterrupts>
 8004232:	4603      	mov	r3, r0
 8004234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004238:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800423c:	f040 80c6 	bne.w	80043cc <HAL_PCD_IRQHandler+0x404>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f004 fa16 	bl	8008676 <USB_ReadDevAllInEpInterrupt>
 800424a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	627b      	str	r3, [r7, #36]	; 0x24

      while ( ep_intr )
 8004250:	e0b8      	b.n	80043c4 <HAL_PCD_IRQHandler+0x3fc>
 8004252:	bf00      	nop
 8004254:	0bebc200 	.word	0x0bebc200
      {
        if (ep_intr & 0x1) /* In ITR */
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 80aa 	beq.w	80043b8 <HAL_PCD_IRQHandler+0x3f0>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f004 fa35 	bl	80086de <USB_ReadDevInEPInterrupt>
 8004274:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d05a      	beq.n	8004336 <HAL_PCD_IRQHandler+0x36e>
          {
            fifoemptymsk = 0x1 << epnum;
 8004280:	2201      	movs	r2, #1
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004290:	4619      	mov	r1, r3
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	43db      	mvns	r3, r3
 800429e:	4013      	ands	r3, r2
 80042a0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ae:	461a      	mov	r2, r3
 80042b0:	2301      	movs	r3, #1
 80042b2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d11b      	bne.n	80042f4 <HAL_PCD_IRQHandler+0x32c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c0:	4613      	mov	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	3344      	adds	r3, #68	; 0x44
 80042cc:	6819      	ldr	r1, [r3, #0]
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d2:	4613      	mov	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4403      	add	r3, r0
 80042dc:	3340      	adds	r3, #64	; 0x40
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4419      	add	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4403      	add	r3, r0
 80042f0:	3344      	adds	r3, #68	; 0x44
 80042f2:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataInStageCallback(hpcd, epnum);
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	4619      	mov	r1, r3
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f00b f9eb 	bl	800f6d6 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d116      	bne.n	8004336 <HAL_PCD_IRQHandler+0x36e>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	2b00      	cmp	r3, #0
 800430c:	d113      	bne.n	8004336 <HAL_PCD_IRQHandler+0x36e>
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	334c      	adds	r3, #76	; 0x4c
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d108      	bne.n	8004336 <HAL_PCD_IRQHandler+0x36e>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800432e:	461a      	mov	r2, r3
 8004330:	2101      	movs	r1, #1
 8004332:	f004 fa43 	bl	80087bc <USB_EP0_OutStart>
              }
            }
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_PCD_IRQHandler+0x38a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434c:	461a      	mov	r2, r3
 800434e:	2308      	movs	r3, #8
 8004350:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_PCD_IRQHandler+0x3a6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004368:	461a      	mov	r2, r3
 800436a:	2310      	movs	r3, #16
 800436c:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_PCD_IRQHandler+0x3c2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004384:	461a      	mov	r2, r3
 8004386:	2340      	movs	r3, #64	; 0x40
 8004388:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_PCD_IRQHandler+0x3de>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	461a      	mov	r2, r3
 80043a2:	2302      	movs	r3, #2
 80043a4:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_PCD_IRQHandler+0x3f0>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 80043b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fd43 	bl	8004e3e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	3301      	adds	r3, #1
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f47f af46 	bne.w	8004258 <HAL_PCD_IRQHandler+0x290>
      }
    }

    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f004 f923 	bl	800861c <USB_ReadInterrupts>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043e0:	d120      	bne.n	8004424 <HAL_PCD_IRQHandler+0x45c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e8:	461a      	mov	r2, r3
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	6053      	str	r3, [r2, #4]

      if(hpcd->LPM_State == LPM_L1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d108      	bne.n	8004414 <HAL_PCD_IRQHandler+0x44c>
      {
        hpcd->LPM_State = LPM_L0;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800440a:	2100      	movs	r1, #0
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f00b fc7d 	bl	800fd0c <HAL_PCDEx_LPM_Callback>
 8004412:	e002      	b.n	800441a <HAL_PCD_IRQHandler+0x452>
      }
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f00b f9d7 	bl	800f7c8 <HAL_PCD_ResumeCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f004 f8f7 	bl	800861c <USB_ReadInterrupts>
 800442e:	4603      	mov	r3, r0
 8004430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004438:	d10f      	bne.n	800445a <HAL_PCD_IRQHandler+0x492>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b01      	cmp	r3, #1
 8004448:	d102      	bne.n	8004450 <HAL_PCD_IRQHandler+0x488>
      {

        HAL_PCD_SuspendCallback(hpcd);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f00b f994 	bl	800f778 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004458:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f004 f8dc 	bl	800861c <USB_ReadInterrupts>
 8004464:	4603      	mov	r3, r0
 8004466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800446a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800446e:	d11e      	bne.n	80044ae <HAL_PCD_IRQHandler+0x4e6>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004478:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8004480:	2b00      	cmp	r3, #0
 8004482:	d111      	bne.n	80044a8 <HAL_PCD_IRQHandler+0x4e0>
      {
        hpcd->LPM_State = LPM_L1;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	f003 020f 	and.w	r2, r3, #15
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800449e:	2101      	movs	r1, #1
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f00b fc33 	bl	800fd0c <HAL_PCDEx_LPM_Callback>
 80044a6:	e002      	b.n	80044ae <HAL_PCD_IRQHandler+0x4e6>
      }
      else
      {
        HAL_PCD_SuspendCallback(hpcd);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f00b f965 	bl	800f778 <HAL_PCD_SuspendCallback>
      }
    }

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f004 f8b2 	bl	800861c <USB_ReadInterrupts>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c2:	f040 80b0 	bne.w	8004626 <HAL_PCD_IRQHandler+0x65e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044cc:	461a      	mov	r2, r3
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2110      	movs	r1, #16
 80044e2:	4618      	mov	r0, r3
 80044e4:	f003 f9cc 	bl	8007880 <USB_FlushTxFifo>

      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80044e8:	2300      	movs	r3, #0
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ec:	e036      	b.n	800455c <HAL_PCD_IRQHandler+0x594>
      {
        USBx_INEP(i)->DIEPINT = 0xFF;
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fa:	461a      	mov	r2, r3
 80044fc:	23ff      	movs	r3, #255	; 0xff
 80044fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450c:	4619      	mov	r1, r3
 800450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004520:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFF;
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	461a      	mov	r2, r3
 8004530:	23ff      	movs	r3, #255	; 0xff
 8004532:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004540:	4619      	mov	r1, r3
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004554:	600b      	str	r3, [r1, #0]
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8004556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004558:	3301      	adds	r3, #1
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004562:	429a      	cmp	r2, r3
 8004564:	d8c3      	bhi.n	80044ee <HAL_PCD_IRQHandler+0x526>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456c:	461a      	mov	r2, r3
 800456e:	f04f 33ff 	mov.w	r3, #4294967295
 8004572:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457a:	461a      	mov	r2, r3
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004588:	61d3      	str	r3, [r2, #28]

      if(hpcd->Init.use_dedicated_ep1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	2b00      	cmp	r3, #0
 8004590:	d018      	beq.n	80045c4 <HAL_PCD_IRQHandler+0x5fc>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004598:	461a      	mov	r2, r3
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a4:	f043 030b 	orr.w	r3, r3, #11
 80045a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b2:	461a      	mov	r2, r3
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	f043 030b 	orr.w	r3, r3, #11
 80045c0:	6453      	str	r3, [r2, #68]	; 0x44
 80045c2:	e015      	b.n	80045f0 <HAL_PCD_IRQHandler+0x628>
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ca:	461a      	mov	r2, r3
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80045d8:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e0:	461a      	mov	r2, r3
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f043 030b 	orr.w	r3, r3, #11
 80045ee:	6113      	str	r3, [r2, #16]
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f6:	461a      	mov	r2, r3
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004604:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	b2d9      	uxtb	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004616:	461a      	mov	r2, r3
 8004618:	f004 f8d0 	bl	80087bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004624:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f003 fff6 	bl	800861c <USB_ReadInterrupts>
 8004630:	4603      	mov	r3, r0
 8004632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463a:	f040 80d7 	bne.w	80047ec <HAL_PCD_IRQHandler+0x824>
    {
      USB_ActivateSetup(hpcd->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f004 f884 	bl	8008750 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	68d2      	ldr	r2, [r2, #12]
 8004652:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8004656:	60da      	str	r2, [r3, #12]

      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f003 f96f 	bl	8007940 <USB_GetDevSpeed>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10f      	bne.n	8004688 <HAL_PCD_IRQHandler+0x6c0>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004674:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	68d2      	ldr	r2, [r2, #12]
 8004680:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8004684:	60da      	str	r2, [r3, #12]
 8004686:	e0a9      	b.n	80047dc <HAL_PCD_IRQHandler+0x814>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2203      	movs	r2, #3
 800468c:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2240      	movs	r2, #64	; 0x40
 8004692:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8004694:	f001 f93a 	bl	800590c <HAL_RCC_GetHCLKFreq>
 8004698:	60f8      	str	r0, [r7, #12]

		if((hclk >= 14200000)&&(hclk < 15000000))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4a79      	ldr	r2, [pc, #484]	; (8004884 <HAL_PCD_IRQHandler+0x8bc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d90c      	bls.n	80046bc <HAL_PCD_IRQHandler+0x6f4>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a78      	ldr	r2, [pc, #480]	; (8004888 <HAL_PCD_IRQHandler+0x8c0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d808      	bhi.n	80046bc <HAL_PCD_IRQHandler+0x6f4>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	68d2      	ldr	r2, [r2, #12]
 80046b4:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 80046b8:	60da      	str	r2, [r3, #12]
 80046ba:	e08f      	b.n	80047dc <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 15000000)&&(hclk < 16000000))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4a72      	ldr	r2, [pc, #456]	; (8004888 <HAL_PCD_IRQHandler+0x8c0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d90c      	bls.n	80046de <HAL_PCD_IRQHandler+0x716>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a71      	ldr	r2, [pc, #452]	; (800488c <HAL_PCD_IRQHandler+0x8c4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d808      	bhi.n	80046de <HAL_PCD_IRQHandler+0x716>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	68d2      	ldr	r2, [r2, #12]
 80046d6:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80046da:	60da      	str	r2, [r3, #12]
 80046dc:	e07e      	b.n	80047dc <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 16000000)&&(hclk < 17200000))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a6a      	ldr	r2, [pc, #424]	; (800488c <HAL_PCD_IRQHandler+0x8c4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d90c      	bls.n	8004700 <HAL_PCD_IRQHandler+0x738>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a69      	ldr	r2, [pc, #420]	; (8004890 <HAL_PCD_IRQHandler+0x8c8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d808      	bhi.n	8004700 <HAL_PCD_IRQHandler+0x738>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	68d2      	ldr	r2, [r2, #12]
 80046f8:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80046fc:	60da      	str	r2, [r3, #12]
 80046fe:	e06d      	b.n	80047dc <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 17200000)&&(hclk < 18500000))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4a63      	ldr	r2, [pc, #396]	; (8004890 <HAL_PCD_IRQHandler+0x8c8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d90c      	bls.n	8004722 <HAL_PCD_IRQHandler+0x75a>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a62      	ldr	r2, [pc, #392]	; (8004894 <HAL_PCD_IRQHandler+0x8cc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d808      	bhi.n	8004722 <HAL_PCD_IRQHandler+0x75a>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	68d2      	ldr	r2, [r2, #12]
 800471a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800471e:	60da      	str	r2, [r3, #12]
 8004720:	e05c      	b.n	80047dc <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 18500000)&&(hclk < 20000000))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4a5b      	ldr	r2, [pc, #364]	; (8004894 <HAL_PCD_IRQHandler+0x8cc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d90c      	bls.n	8004744 <HAL_PCD_IRQHandler+0x77c>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4a5a      	ldr	r2, [pc, #360]	; (8004898 <HAL_PCD_IRQHandler+0x8d0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d808      	bhi.n	8004744 <HAL_PCD_IRQHandler+0x77c>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	68d2      	ldr	r2, [r2, #12]
 800473c:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8004740:	60da      	str	r2, [r3, #12]
 8004742:	e04b      	b.n	80047dc <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 20000000)&&(hclk < 21800000))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a54      	ldr	r2, [pc, #336]	; (8004898 <HAL_PCD_IRQHandler+0x8d0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d90c      	bls.n	8004766 <HAL_PCD_IRQHandler+0x79e>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4a53      	ldr	r2, [pc, #332]	; (800489c <HAL_PCD_IRQHandler+0x8d4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d808      	bhi.n	8004766 <HAL_PCD_IRQHandler+0x79e>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	68d2      	ldr	r2, [r2, #12]
 800475e:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8004762:	60da      	str	r2, [r3, #12]
 8004764:	e03a      	b.n	80047dc <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 21800000)&&(hclk < 24000000))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4a4c      	ldr	r2, [pc, #304]	; (800489c <HAL_PCD_IRQHandler+0x8d4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d90c      	bls.n	8004788 <HAL_PCD_IRQHandler+0x7c0>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a4b      	ldr	r2, [pc, #300]	; (80048a0 <HAL_PCD_IRQHandler+0x8d8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d808      	bhi.n	8004788 <HAL_PCD_IRQHandler+0x7c0>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	68d2      	ldr	r2, [r2, #12]
 8004780:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8004784:	60da      	str	r2, [r3, #12]
 8004786:	e029      	b.n	80047dc <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 24000000)&&(hclk < 27700000))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a45      	ldr	r2, [pc, #276]	; (80048a0 <HAL_PCD_IRQHandler+0x8d8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d90c      	bls.n	80047aa <HAL_PCD_IRQHandler+0x7e2>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4a44      	ldr	r2, [pc, #272]	; (80048a4 <HAL_PCD_IRQHandler+0x8dc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d808      	bhi.n	80047aa <HAL_PCD_IRQHandler+0x7e2>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	68d2      	ldr	r2, [r2, #12]
 80047a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a6:	60da      	str	r2, [r3, #12]
 80047a8:	e018      	b.n	80047dc <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 27700000)&&(hclk < 32000000))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4a3d      	ldr	r2, [pc, #244]	; (80048a4 <HAL_PCD_IRQHandler+0x8dc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d90c      	bls.n	80047cc <HAL_PCD_IRQHandler+0x804>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4a3c      	ldr	r2, [pc, #240]	; (80048a8 <HAL_PCD_IRQHandler+0x8e0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d808      	bhi.n	80047cc <HAL_PCD_IRQHandler+0x804>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	68d2      	ldr	r2, [r2, #12]
 80047c4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80047c8:	60da      	str	r2, [r3, #12]
 80047ca:	e007      	b.n	80047dc <HAL_PCD_IRQHandler+0x814>
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	68d2      	ldr	r2, [r2, #12]
 80047d6:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80047da:	60da      	str	r2, [r3, #12]
        }
      }

      HAL_PCD_ResetCallback(hpcd);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f00a ffa2 	bl	800f726 <HAL_PCD_ResetCallback>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f003 ff13 	bl	800861c <USB_ReadInterrupts>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d174      	bne.n	80048ea <HAL_PCD_IRQHandler+0x922>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	6992      	ldr	r2, [r2, #24]
 800480a:	f022 0210 	bic.w	r2, r2, #16
 800480e:	619a      	str	r2, [r3, #24]
      temp = USBx->GRXSTSP;
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	617b      	str	r3, [r7, #20]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 020f 	and.w	r2, r3, #15
 800481c:	4613      	mov	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4413      	add	r3, r2
 800482c:	613b      	str	r3, [r7, #16]

      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	0c5b      	lsrs	r3, r3, #17
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	2b02      	cmp	r3, #2
 8004838:	d138      	bne.n	80048ac <HAL_PCD_IRQHandler+0x8e4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d049      	beq.n	80048da <HAL_PCD_IRQHandler+0x912>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	68d9      	ldr	r1, [r3, #12]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	b29b      	uxth	r3, r3
 8004850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004854:	b29b      	uxth	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	6a38      	ldr	r0, [r7, #32]
 800485a:	f003 fd83 	bl	8008364 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800486a:	441a      	add	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	699a      	ldr	r2, [r3, #24]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800487c:	441a      	add	r2, r3
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	619a      	str	r2, [r3, #24]
 8004882:	e02a      	b.n	80048da <HAL_PCD_IRQHandler+0x912>
 8004884:	00d8acbf 	.word	0x00d8acbf
 8004888:	00e4e1bf 	.word	0x00e4e1bf
 800488c:	00f423ff 	.word	0x00f423ff
 8004890:	0106737f 	.word	0x0106737f
 8004894:	011a499f 	.word	0x011a499f
 8004898:	01312cff 	.word	0x01312cff
 800489c:	014ca43f 	.word	0x014ca43f
 80048a0:	016e35ff 	.word	0x016e35ff
 80048a4:	01a6ab1f 	.word	0x01a6ab1f
 80048a8:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	0c5b      	lsrs	r3, r3, #17
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	2b06      	cmp	r3, #6
 80048b6:	d110      	bne.n	80048da <HAL_PCD_IRQHandler+0x912>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80048be:	2208      	movs	r2, #8
 80048c0:	4619      	mov	r1, r3
 80048c2:	6a38      	ldr	r0, [r7, #32]
 80048c4:	f003 fd4e 	bl	8008364 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048d4:	441a      	add	r2, r3
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	6992      	ldr	r2, [r2, #24]
 80048e4:	f042 0210 	orr.w	r2, r2, #16
 80048e8:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f003 fe94 	bl	800861c <USB_ReadInterrupts>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d106      	bne.n	800490c <HAL_PCD_IRQHandler+0x944>
    {
      HAL_PCD_SOFCallback(hpcd);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f00a ff03 	bl	800f70a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2208      	movs	r2, #8
 800490a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f003 fe83 	bl	800861c <USB_ReadInterrupts>
 8004916:	4603      	mov	r3, r0
 8004918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800491c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004920:	d10a      	bne.n	8004938 <HAL_PCD_IRQHandler+0x970>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	b2db      	uxtb	r3, r3
 8004926:	4619      	mov	r1, r3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f00a ff6d 	bl	800f808 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f003 fe6d 	bl	800861c <USB_ReadInterrupts>
 8004942:	4603      	mov	r3, r0
 8004944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004948:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800494c:	d10a      	bne.n	8004964 <HAL_PCD_IRQHandler+0x99c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	b2db      	uxtb	r3, r3
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f00a ff45 	bl	800f7e4 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f003 fe57 	bl	800861c <USB_ReadInterrupts>
 800496e:	4603      	mov	r3, r0
 8004970:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004978:	d107      	bne.n	800498a <HAL_PCD_IRQHandler+0x9c2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f00a ff56 	bl	800f82c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004988:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f003 fe44 	bl	800861c <USB_ReadInterrupts>
 8004994:	4603      	mov	r3, r0
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b04      	cmp	r3, #4
 800499c:	d115      	bne.n	80049ca <HAL_PCD_IRQHandler+0xa02>
    {
      temp = hpcd->Instance->GOTGINT;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	617b      	str	r3, [r7, #20]

      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_PCD_IRQHandler+0x9ee>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f00a ff49 	bl	800f848 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	6851      	ldr	r1, [r2, #4]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	e000      	b.n	80049ca <HAL_PCD_IRQHandler+0xa02>
      return;
 80049c8:	bf00      	nop
    }
  }
}
 80049ca:	3730      	adds	r7, #48	; 0x30
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_PCD_SetAddress+0x1a>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e00f      	b.n	8004a0a <HAL_PCD_SetAddress+0x3a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	4611      	mov	r1, r2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f003 fdba 	bl	8008574 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	4608      	mov	r0, r1
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	461a      	mov	r2, r3
 8004a20:	4603      	mov	r3, r0
 8004a22:	70fb      	strb	r3, [r7, #3]
 8004a24:	460b      	mov	r3, r1
 8004a26:	803b      	strh	r3, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8004a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	da0b      	bge.n	8004a50 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a3e:	4613      	mov	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	3338      	adds	r3, #56	; 0x38
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e00b      	b.n	8004a68 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a56:	4613      	mov	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4413      	add	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8004a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	09db      	lsrs	r3, r3, #7
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8004a84:	883a      	ldrh	r2, [r7, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	78ba      	ldrb	r2, [r7, #2]
 8004a8e:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	785b      	ldrb	r3, [r3, #1]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8004aa2:	78bb      	ldrb	r3, [r7, #2]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d102      	bne.n	8004aae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_PCD_EP_Open+0xaa>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e00e      	b.n	8004ada <HAL_PCD_EP_Open+0xc8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68f9      	ldr	r1, [r7, #12]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f002 ff6e 	bl	80079ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 8004ad8:	7afb      	ldrb	r3, [r7, #11]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8004aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	da0b      	bge.n	8004b0e <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	3338      	adds	r3, #56	; 0x38
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e00b      	b.n	8004b26 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b14:	4613      	mov	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	4413      	add	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8004b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	09db      	lsrs	r3, r3, #7
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_PCD_EP_Close+0x6e>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e00e      	b.n	8004b6e <HAL_PCD_EP_Close+0x8c>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f002 ffac 	bl	8007abc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b086      	sub	sp, #24
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
 8004b82:	460b      	mov	r3, r1
 8004b84:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004b86:	7afb      	ldrb	r3, [r7, #11]
 8004b88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2200      	movs	r2, #0
 8004bae:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8004bb6:	7afb      	ldrb	r3, [r7, #11]
 8004bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d102      	bne.n	8004bd0 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8004bd0:	7afb      	ldrb	r3, [r7, #11]
 8004bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	6979      	ldr	r1, [r7, #20]
 8004be8:	f003 fa28 	bl	800803c <USB_EP0StartXfer>
 8004bec:	e008      	b.n	8004c00 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6979      	ldr	r1, [r7, #20]
 8004bfc:	f002 ffda 	bl	8007bb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	460b      	mov	r3, r1
 8004c14:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	f003 020f 	and.w	r2, r3, #15
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	607a      	str	r2, [r7, #4]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004c4c:	7afb      	ldrb	r3, [r7, #11]
 8004c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c52:	4613      	mov	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	3338      	adds	r3, #56	; 0x38
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2200      	movs	r2, #0
 8004c72:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2201      	movs	r2, #1
 8004c78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8004c7a:	7afb      	ldrb	r3, [r7, #11]
 8004c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d102      	bne.n	8004c94 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8004c94:	7afb      	ldrb	r3, [r7, #11]
 8004c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6979      	ldr	r1, [r7, #20]
 8004cac:	f003 f9c6 	bl	800803c <USB_EP0StartXfer>
 8004cb0:	e008      	b.n	8004cc4 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6979      	ldr	r1, [r7, #20]
 8004cc0:	f002 ff78 	bl	8007bb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8004cda:	78fb      	ldrb	r3, [r7, #3]
 8004cdc:	f003 020f 	and.w	r2, r3, #15
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d901      	bls.n	8004cec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e050      	b.n	8004d8e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80 & ep_addr) == 0x80)
 8004cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	da0b      	bge.n	8004d0c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	3338      	adds	r3, #56	; 0x38
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	4413      	add	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	e009      	b.n	8004d20 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	09db      	lsrs	r3, r3, #7
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	705a      	strb	r2, [r3, #1]


  __HAL_LOCK(hpcd);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_PCD_EP_SetStall+0x82>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e01e      	b.n	8004d8e <HAL_PCD_EP_SetStall+0xc0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68f9      	ldr	r1, [r7, #12]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f003 fb2a 	bl	80083b8 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10a      	bne.n	8004d84 <HAL_PCD_EP_SetStall+0xb6>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	b2d9      	uxtb	r1, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f003 fd1c 	bl	80087bc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	f003 020f 	and.w	r2, r3, #15
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d901      	bls.n	8004db4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e040      	b.n	8004e36 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80 & ep_addr) == 0x80)
 8004db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	da0b      	bge.n	8004dd4 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	3338      	adds	r3, #56	; 0x38
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	4413      	add	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	e009      	b.n	8004de8 <HAL_PCD_EP_ClrStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004dd4:	78fa      	ldrb	r2, [r7, #3]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	1a9b      	subs	r3, r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 0;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8004dee:	78fb      	ldrb	r3, [r7, #3]
 8004df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	09db      	lsrs	r3, r3, #7
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_PCD_EP_ClrStall+0x82>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e00e      	b.n	8004e36 <HAL_PCD_EP_ClrStall+0xa0>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68f9      	ldr	r1, [r7, #12]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f003 fb37 	bl	800849a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b08a      	sub	sp, #40	; 0x28
 8004e42:	af02      	add	r7, sp, #8
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	3338      	adds	r3, #56	; 0x38
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	4413      	add	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d202      	bcs.n	8004e84 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	61fb      	str	r3, [r7, #28]
  }


  len32b = (len + 3) / 4;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	3303      	adds	r3, #3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	da00      	bge.n	8004e8e <PCD_WriteEmptyTxFifo+0x50>
 8004e8c:	3303      	adds	r3, #3
 8004e8e:	109b      	asrs	r3, r3, #2
 8004e90:	61bb      	str	r3, [r7, #24]

  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004e92:	e02e      	b.n	8004ef2 <PCD_WriteEmptyTxFifo+0xb4>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	695a      	ldr	r2, [r3, #20]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d202      	bcs.n	8004eb0 <PCD_WriteEmptyTxFifo+0x72>
    {
      len = ep->maxpacket;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3) / 4;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	3303      	adds	r3, #3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	da00      	bge.n	8004eba <PCD_WriteEmptyTxFifo+0x7c>
 8004eb8:	3303      	adds	r3, #3
 8004eba:	109b      	asrs	r3, r3, #2
 8004ebc:	61bb      	str	r3, [r7, #24]

    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	68d9      	ldr	r1, [r3, #12]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	b298      	uxth	r0, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	6978      	ldr	r0, [r7, #20]
 8004ed6:	f003 fa0d 	bl	80082f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	441a      	add	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	441a      	add	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	619a      	str	r2, [r3, #24]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d909      	bls.n	8004f1c <PCD_WriteEmptyTxFifo+0xde>
          ep->xfer_count < ep->xfer_len &&
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	695b      	ldr	r3, [r3, #20]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d203      	bcs.n	8004f1c <PCD_WriteEmptyTxFifo+0xde>
            ep->xfer_len != 0)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1bb      	bne.n	8004e94 <PCD_WriteEmptyTxFifo+0x56>
  }

  if(len <= 0)
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	dc10      	bgt.n	8004f44 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = 0x1 << epnum;
 8004f22:	2201      	movs	r2, #1
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f32:	4619      	mov	r1, r3
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	4013      	ands	r3, r2
 8004f42:	634b      	str	r3, [r1, #52]	; 0x34

  }

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3720      	adds	r7, #32
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	70fb      	strb	r3, [r7, #3]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d107      	bne.n	8004f84 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	883a      	ldrh	r2, [r7, #0]
 8004f7a:	0411      	lsls	r1, r2, #16
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	629a      	str	r2, [r3, #40]	; 0x28
 8004f82:	e028      	b.n	8004fd6 <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	0c1b      	lsrs	r3, r3, #16
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	4413      	add	r3, r2
 8004f90:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
 8004f96:	e00d      	b.n	8004fb4 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	3340      	adds	r3, #64	; 0x40
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	0c1b      	lsrs	r3, r3, #16
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	4413      	add	r3, r2
 8004fac:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
 8004fb4:	7bfa      	ldrb	r2, [r7, #15]
 8004fb6:	78fb      	ldrb	r3, [r7, #3]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	dbec      	blt.n	8004f98 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6819      	ldr	r1, [r3, #0]
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	883a      	ldrh	r2, [r7, #0]
 8004fc8:	0410      	lsls	r0, r2, #16
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4302      	orrs	r2, r0
 8004fce:	3340      	adds	r3, #64	; 0x40
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	887a      	ldrh	r2, [r7, #2]
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM Feature
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60fb      	str	r3, [r7, #12]
  
  hpcd->lpm_active = ENABLE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005036:	4b05      	ldr	r3, [pc, #20]	; (800504c <HAL_PCDEx_ActivateLPM+0x44>)
 8005038:	4313      	orrs	r3, r2
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	10000003 	.word	0x10000003

08005050 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800505a:	4a23      	ldr	r2, [pc, #140]	; (80050e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800505c:	4b22      	ldr	r3, [pc, #136]	; (80050e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005064:	6413      	str	r3, [r2, #64]	; 0x40
 8005066:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005072:	4a1e      	ldr	r2, [pc, #120]	; (80050ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005074:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800507e:	f7fc fdd1 	bl	8001c24 <HAL_GetTick>
 8005082:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005084:	e009      	b.n	800509a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005086:	f7fc fdcd 	bl	8001c24 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005094:	d901      	bls.n	800509a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e022      	b.n	80050e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800509a:	4b14      	ldr	r3, [pc, #80]	; (80050ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a6:	d1ee      	bne.n	8005086 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80050a8:	4a10      	ldr	r2, [pc, #64]	; (80050ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80050aa:	4b10      	ldr	r3, [pc, #64]	; (80050ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050b4:	f7fc fdb6 	bl	8001c24 <HAL_GetTick>
 80050b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050ba:	e009      	b.n	80050d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050bc:	f7fc fdb2 	bl	8001c24 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050ca:	d901      	bls.n	80050d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e007      	b.n	80050e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050dc:	d1ee      	bne.n	80050bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	40007000 	.word	0x40007000

080050f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80050f8:	2300      	movs	r3, #0
 80050fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e25c      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 8087 	beq.w	8005222 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005114:	4b96      	ldr	r3, [pc, #600]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 030c 	and.w	r3, r3, #12
 800511c:	2b04      	cmp	r3, #4
 800511e:	d00c      	beq.n	800513a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005120:	4b93      	ldr	r3, [pc, #588]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b08      	cmp	r3, #8
 800512a:	d112      	bne.n	8005152 <HAL_RCC_OscConfig+0x62>
 800512c:	4b90      	ldr	r3, [pc, #576]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005138:	d10b      	bne.n	8005152 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800513a:	4b8d      	ldr	r3, [pc, #564]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d06c      	beq.n	8005220 <HAL_RCC_OscConfig+0x130>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d168      	bne.n	8005220 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e236      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515a:	d106      	bne.n	800516a <HAL_RCC_OscConfig+0x7a>
 800515c:	4a84      	ldr	r2, [pc, #528]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800515e:	4b84      	ldr	r3, [pc, #528]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	e02e      	b.n	80051c8 <HAL_RCC_OscConfig+0xd8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10c      	bne.n	800518c <HAL_RCC_OscConfig+0x9c>
 8005172:	4a7f      	ldr	r2, [pc, #508]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005174:	4b7e      	ldr	r3, [pc, #504]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	4a7c      	ldr	r2, [pc, #496]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005180:	4b7b      	ldr	r3, [pc, #492]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	e01d      	b.n	80051c8 <HAL_RCC_OscConfig+0xd8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005194:	d10c      	bne.n	80051b0 <HAL_RCC_OscConfig+0xc0>
 8005196:	4a76      	ldr	r2, [pc, #472]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005198:	4b75      	ldr	r3, [pc, #468]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	4a73      	ldr	r2, [pc, #460]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051a4:	4b72      	ldr	r3, [pc, #456]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e00b      	b.n	80051c8 <HAL_RCC_OscConfig+0xd8>
 80051b0:	4a6f      	ldr	r2, [pc, #444]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051b2:	4b6f      	ldr	r3, [pc, #444]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	4a6c      	ldr	r2, [pc, #432]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051be:	4b6c      	ldr	r3, [pc, #432]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d013      	beq.n	80051f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7fc fd28 	bl	8001c24 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051d8:	f7fc fd24 	bl	8001c24 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b64      	cmp	r3, #100	; 0x64
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e1ea      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ea:	4b61      	ldr	r3, [pc, #388]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f0      	beq.n	80051d8 <HAL_RCC_OscConfig+0xe8>
 80051f6:	e014      	b.n	8005222 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f8:	f7fc fd14 	bl	8001c24 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005200:	f7fc fd10 	bl	8001c24 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b64      	cmp	r3, #100	; 0x64
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e1d6      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005212:	4b57      	ldr	r3, [pc, #348]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0x110>
 800521e:	e000      	b.n	8005222 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d069      	beq.n	8005302 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800522e:	4b50      	ldr	r3, [pc, #320]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800523a:	4b4d      	ldr	r3, [pc, #308]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	2b08      	cmp	r3, #8
 8005244:	d11c      	bne.n	8005280 <HAL_RCC_OscConfig+0x190>
 8005246:	4b4a      	ldr	r3, [pc, #296]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d116      	bne.n	8005280 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005252:	4b47      	ldr	r3, [pc, #284]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d005      	beq.n	800526a <HAL_RCC_OscConfig+0x17a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d001      	beq.n	800526a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e1aa      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800526a:	4941      	ldr	r1, [pc, #260]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800526c:	4b40      	ldr	r3, [pc, #256]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4313      	orrs	r3, r2
 800527c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800527e:	e040      	b.n	8005302 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d023      	beq.n	80052d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005288:	4a39      	ldr	r2, [pc, #228]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005294:	f7fc fcc6 	bl	8001c24 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800529c:	f7fc fcc2 	bl	8001c24 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e188      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ae:	4b30      	ldr	r3, [pc, #192]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ba:	492d      	ldr	r1, [pc, #180]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80052bc:	4b2c      	ldr	r3, [pc, #176]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]
 80052ce:	e018      	b.n	8005302 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052d0:	4a27      	ldr	r2, [pc, #156]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80052d2:	4b27      	ldr	r3, [pc, #156]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052dc:	f7fc fca2 	bl	8001c24 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052e4:	f7fc fc9e 	bl	8001c24 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e164      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052f6:	4b1e      	ldr	r3, [pc, #120]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f0      	bne.n	80052e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d038      	beq.n	8005380 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d019      	beq.n	800534a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005316:	4a16      	ldr	r2, [pc, #88]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005318:	4b15      	ldr	r3, [pc, #84]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800531a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005322:	f7fc fc7f 	bl	8001c24 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800532a:	f7fc fc7b 	bl	8001c24 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e141      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800533c:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800533e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x23a>
 8005348:	e01a      	b.n	8005380 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800534a:	4a09      	ldr	r2, [pc, #36]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800534c:	4b08      	ldr	r3, [pc, #32]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800534e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005356:	f7fc fc65 	bl	8001c24 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800535c:	e00a      	b.n	8005374 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800535e:	f7fc fc61 	bl	8001c24 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d903      	bls.n	8005374 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e127      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
 8005370:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005374:	4b94      	ldr	r3, [pc, #592]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ee      	bne.n	800535e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 80a4 	beq.w	80054d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800538e:	4b8e      	ldr	r3, [pc, #568]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10d      	bne.n	80053b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800539a:	4a8b      	ldr	r2, [pc, #556]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 800539c:	4b8a      	ldr	r3, [pc, #552]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a4:	6413      	str	r3, [r2, #64]	; 0x40
 80053a6:	4b88      	ldr	r3, [pc, #544]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053b2:	2301      	movs	r3, #1
 80053b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053b6:	4b85      	ldr	r3, [pc, #532]	; (80055cc <HAL_RCC_OscConfig+0x4dc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d118      	bne.n	80053f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80053c2:	4a82      	ldr	r2, [pc, #520]	; (80055cc <HAL_RCC_OscConfig+0x4dc>)
 80053c4:	4b81      	ldr	r3, [pc, #516]	; (80055cc <HAL_RCC_OscConfig+0x4dc>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ce:	f7fc fc29 	bl	8001c24 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053d6:	f7fc fc25 	bl	8001c24 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b64      	cmp	r3, #100	; 0x64
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e0eb      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e8:	4b78      	ldr	r3, [pc, #480]	; (80055cc <HAL_RCC_OscConfig+0x4dc>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f0      	beq.n	80053d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d106      	bne.n	800540a <HAL_RCC_OscConfig+0x31a>
 80053fc:	4a72      	ldr	r2, [pc, #456]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 80053fe:	4b72      	ldr	r3, [pc, #456]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	6713      	str	r3, [r2, #112]	; 0x70
 8005408:	e02d      	b.n	8005466 <HAL_RCC_OscConfig+0x376>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10c      	bne.n	800542c <HAL_RCC_OscConfig+0x33c>
 8005412:	4a6d      	ldr	r2, [pc, #436]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005414:	4b6c      	ldr	r3, [pc, #432]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	6713      	str	r3, [r2, #112]	; 0x70
 800541e:	4a6a      	ldr	r2, [pc, #424]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005420:	4b69      	ldr	r3, [pc, #420]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005424:	f023 0304 	bic.w	r3, r3, #4
 8005428:	6713      	str	r3, [r2, #112]	; 0x70
 800542a:	e01c      	b.n	8005466 <HAL_RCC_OscConfig+0x376>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2b05      	cmp	r3, #5
 8005432:	d10c      	bne.n	800544e <HAL_RCC_OscConfig+0x35e>
 8005434:	4a64      	ldr	r2, [pc, #400]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005436:	4b64      	ldr	r3, [pc, #400]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	f043 0304 	orr.w	r3, r3, #4
 800543e:	6713      	str	r3, [r2, #112]	; 0x70
 8005440:	4a61      	ldr	r2, [pc, #388]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005442:	4b61      	ldr	r3, [pc, #388]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	6713      	str	r3, [r2, #112]	; 0x70
 800544c:	e00b      	b.n	8005466 <HAL_RCC_OscConfig+0x376>
 800544e:	4a5e      	ldr	r2, [pc, #376]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005450:	4b5d      	ldr	r3, [pc, #372]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	6713      	str	r3, [r2, #112]	; 0x70
 800545a:	4a5b      	ldr	r2, [pc, #364]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 800545c:	4b5a      	ldr	r3, [pc, #360]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	f023 0304 	bic.w	r3, r3, #4
 8005464:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d015      	beq.n	800549a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546e:	f7fc fbd9 	bl	8001c24 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005474:	e00a      	b.n	800548c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005476:	f7fc fbd5 	bl	8001c24 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	f241 3288 	movw	r2, #5000	; 0x1388
 8005484:	4293      	cmp	r3, r2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e099      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548c:	4b4e      	ldr	r3, [pc, #312]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ee      	beq.n	8005476 <HAL_RCC_OscConfig+0x386>
 8005498:	e014      	b.n	80054c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549a:	f7fc fbc3 	bl	8001c24 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a0:	e00a      	b.n	80054b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f7fc fbbf 	bl	8001c24 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e083      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054b8:	4b43      	ldr	r3, [pc, #268]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1ee      	bne.n	80054a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d105      	bne.n	80054d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ca:	4a3f      	ldr	r2, [pc, #252]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 80054cc:	4b3e      	ldr	r3, [pc, #248]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d06f      	beq.n	80055be <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054de:	4b3a      	ldr	r3, [pc, #232]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d067      	beq.n	80055ba <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d149      	bne.n	8005586 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f2:	4a35      	ldr	r2, [pc, #212]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 80054f4:	4b34      	ldr	r3, [pc, #208]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fe:	f7fc fb91 	bl	8001c24 <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005504:	e008      	b.n	8005518 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005506:	f7fc fb8d 	bl	8001c24 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e053      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005518:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1f0      	bne.n	8005506 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005524:	4928      	ldr	r1, [pc, #160]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69da      	ldr	r2, [r3, #28]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	019b      	lsls	r3, r3, #6
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	085b      	lsrs	r3, r3, #1
 800553e:	3b01      	subs	r3, #1
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	061b      	lsls	r3, r3, #24
 800554a:	4313      	orrs	r3, r2
 800554c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005550:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005552:	4a1d      	ldr	r2, [pc, #116]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005554:	4b1c      	ldr	r3, [pc, #112]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800555c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555e:	f7fc fb61 	bl	8001c24 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005566:	f7fc fb5d 	bl	8001c24 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e023      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005578:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_OscConfig+0x476>
 8005584:	e01b      	b.n	80055be <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005586:	4a10      	ldr	r2, [pc, #64]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 8005588:	4b0f      	ldr	r3, [pc, #60]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005592:	f7fc fb47 	bl	8001c24 <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800559a:	f7fc fb43 	bl	8001c24 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e009      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ac:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <HAL_RCC_OscConfig+0x4d8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f0      	bne.n	800559a <HAL_RCC_OscConfig+0x4aa>
 80055b8:	e001      	b.n	80055be <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40023800 	.word	0x40023800
 80055cc:	40007000 	.word	0x40007000

080055d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0ce      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055e8:	4b69      	ldr	r3, [pc, #420]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 020f 	and.w	r2, r3, #15
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d210      	bcs.n	8005618 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4966      	ldr	r1, [pc, #408]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 80055f8:	4b65      	ldr	r3, [pc, #404]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f023 020f 	bic.w	r2, r3, #15
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b62      	ldr	r3, [pc, #392]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 020f 	and.w	r2, r3, #15
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0b6      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d020      	beq.n	8005666 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005630:	4a58      	ldr	r2, [pc, #352]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005632:	4b58      	ldr	r3, [pc, #352]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800563a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005648:	4a52      	ldr	r2, [pc, #328]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800564a:	4b52      	ldr	r3, [pc, #328]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005652:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005654:	494f      	ldr	r1, [pc, #316]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005656:	4b4f      	ldr	r3, [pc, #316]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	4313      	orrs	r3, r2
 8005664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d040      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d107      	bne.n	800568a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567a:	4b46      	ldr	r3, [pc, #280]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d115      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e07d      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d107      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005692:	4b40      	ldr	r3, [pc, #256]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e071      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a2:	4b3c      	ldr	r3, [pc, #240]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e069      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056b2:	4938      	ldr	r1, [pc, #224]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 80056b4:	4b37      	ldr	r3, [pc, #220]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f023 0203 	bic.w	r2, r3, #3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c4:	f7fc faae 	bl	8001c24 <HAL_GetTick>
 80056c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ca:	e00a      	b.n	80056e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056cc:	f7fc faaa 	bl	8001c24 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e051      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e2:	4b2c      	ldr	r3, [pc, #176]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 020c 	and.w	r2, r3, #12
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d1eb      	bne.n	80056cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056f4:	4b26      	ldr	r3, [pc, #152]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 020f 	and.w	r2, r3, #15
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d910      	bls.n	8005724 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005702:	4923      	ldr	r1, [pc, #140]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005704:	4b22      	ldr	r3, [pc, #136]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f023 020f 	bic.w	r2, r3, #15
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	4313      	orrs	r3, r2
 8005710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	4b1f      	ldr	r3, [pc, #124]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 020f 	and.w	r2, r3, #15
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d001      	beq.n	8005724 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e030      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005730:	4918      	ldr	r1, [pc, #96]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005732:	4b18      	ldr	r3, [pc, #96]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800574e:	4911      	ldr	r1, [pc, #68]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4313      	orrs	r3, r2
 8005760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005762:	f000 f81d 	bl	80057a0 <HAL_RCC_GetSysClockFreq>
 8005766:	4601      	mov	r1, r0
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	4a09      	ldr	r2, [pc, #36]	; (8005798 <HAL_RCC_ClockConfig+0x1c8>)
 8005774:	5cd3      	ldrb	r3, [r2, r3]
 8005776:	fa21 f303 	lsr.w	r3, r1, r3
 800577a:	4a08      	ldr	r2, [pc, #32]	; (800579c <HAL_RCC_ClockConfig+0x1cc>)
 800577c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800577e:	2000      	movs	r0, #0
 8005780:	f009 fd8e 	bl	800f2a0 <HAL_InitTick>

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40023c00 	.word	0x40023c00
 8005794:	40023800 	.word	0x40023800
 8005798:	08015f5c 	.word	0x08015f5c
 800579c:	20000124 	.word	0x20000124

080057a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a4:	b087      	sub	sp, #28
 80057a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80057a8:	2200      	movs	r2, #0
 80057aa:	60fa      	str	r2, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	617a      	str	r2, [r7, #20]
 80057b0:	2200      	movs	r2, #0
 80057b2:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 80057b4:	2200      	movs	r2, #0
 80057b6:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057b8:	4a51      	ldr	r2, [pc, #324]	; (8005900 <HAL_RCC_GetSysClockFreq+0x160>)
 80057ba:	6892      	ldr	r2, [r2, #8]
 80057bc:	f002 020c 	and.w	r2, r2, #12
 80057c0:	2a04      	cmp	r2, #4
 80057c2:	d007      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0x34>
 80057c4:	2a08      	cmp	r2, #8
 80057c6:	d008      	beq.n	80057da <HAL_RCC_GetSysClockFreq+0x3a>
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	f040 8090 	bne.w	80058ee <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057ce:	4b4d      	ldr	r3, [pc, #308]	; (8005904 <HAL_RCC_GetSysClockFreq+0x164>)
 80057d0:	613b      	str	r3, [r7, #16]
       break;
 80057d2:	e08f      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057d4:	4b4c      	ldr	r3, [pc, #304]	; (8005908 <HAL_RCC_GetSysClockFreq+0x168>)
 80057d6:	613b      	str	r3, [r7, #16]
      break;
 80057d8:	e08c      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057da:	4a49      	ldr	r2, [pc, #292]	; (8005900 <HAL_RCC_GetSysClockFreq+0x160>)
 80057dc:	6852      	ldr	r2, [r2, #4]
 80057de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80057e2:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80057e4:	4a46      	ldr	r2, [pc, #280]	; (8005900 <HAL_RCC_GetSysClockFreq+0x160>)
 80057e6:	6852      	ldr	r2, [r2, #4]
 80057e8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80057ec:	2a00      	cmp	r2, #0
 80057ee:	d023      	beq.n	8005838 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f0:	4b43      	ldr	r3, [pc, #268]	; (8005900 <HAL_RCC_GetSysClockFreq+0x160>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	099b      	lsrs	r3, r3, #6
 80057f6:	f04f 0400 	mov.w	r4, #0
 80057fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	ea03 0301 	and.w	r3, r3, r1
 8005806:	ea04 0402 	and.w	r4, r4, r2
 800580a:	4a3f      	ldr	r2, [pc, #252]	; (8005908 <HAL_RCC_GetSysClockFreq+0x168>)
 800580c:	fb02 f104 	mul.w	r1, r2, r4
 8005810:	2200      	movs	r2, #0
 8005812:	fb02 f203 	mul.w	r2, r2, r3
 8005816:	440a      	add	r2, r1
 8005818:	493b      	ldr	r1, [pc, #236]	; (8005908 <HAL_RCC_GetSysClockFreq+0x168>)
 800581a:	fba3 0101 	umull	r0, r1, r3, r1
 800581e:	1853      	adds	r3, r2, r1
 8005820:	4619      	mov	r1, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f04f 0400 	mov.w	r4, #0
 8005828:	461a      	mov	r2, r3
 800582a:	4623      	mov	r3, r4
 800582c:	f7fb fa52 	bl	8000cd4 <__aeabi_uldivmod>
 8005830:	4603      	mov	r3, r0
 8005832:	460c      	mov	r4, r1
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	e04c      	b.n	80058d2 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005838:	4a31      	ldr	r2, [pc, #196]	; (8005900 <HAL_RCC_GetSysClockFreq+0x160>)
 800583a:	6852      	ldr	r2, [r2, #4]
 800583c:	0992      	lsrs	r2, r2, #6
 800583e:	4611      	mov	r1, r2
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	f240 15ff 	movw	r5, #511	; 0x1ff
 8005848:	f04f 0600 	mov.w	r6, #0
 800584c:	ea05 0501 	and.w	r5, r5, r1
 8005850:	ea06 0602 	and.w	r6, r6, r2
 8005854:	4629      	mov	r1, r5
 8005856:	4632      	mov	r2, r6
 8005858:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 800585c:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8005860:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8005864:	4651      	mov	r1, sl
 8005866:	465a      	mov	r2, fp
 8005868:	46aa      	mov	sl, r5
 800586a:	46b3      	mov	fp, r6
 800586c:	4655      	mov	r5, sl
 800586e:	465e      	mov	r6, fp
 8005870:	1b4d      	subs	r5, r1, r5
 8005872:	eb62 0606 	sbc.w	r6, r2, r6
 8005876:	4629      	mov	r1, r5
 8005878:	4632      	mov	r2, r6
 800587a:	0194      	lsls	r4, r2, #6
 800587c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005880:	018b      	lsls	r3, r1, #6
 8005882:	1a5b      	subs	r3, r3, r1
 8005884:	eb64 0402 	sbc.w	r4, r4, r2
 8005888:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800588c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8005890:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8005894:	4643      	mov	r3, r8
 8005896:	464c      	mov	r4, r9
 8005898:	4655      	mov	r5, sl
 800589a:	465e      	mov	r6, fp
 800589c:	18ed      	adds	r5, r5, r3
 800589e:	eb46 0604 	adc.w	r6, r6, r4
 80058a2:	462b      	mov	r3, r5
 80058a4:	4634      	mov	r4, r6
 80058a6:	02a2      	lsls	r2, r4, #10
 80058a8:	607a      	str	r2, [r7, #4]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80058b0:	607a      	str	r2, [r7, #4]
 80058b2:	029b      	lsls	r3, r3, #10
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	e897 0018 	ldmia.w	r7, {r3, r4}
 80058ba:	4618      	mov	r0, r3
 80058bc:	4621      	mov	r1, r4
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f04f 0400 	mov.w	r4, #0
 80058c4:	461a      	mov	r2, r3
 80058c6:	4623      	mov	r3, r4
 80058c8:	f7fb fa04 	bl	8000cd4 <__aeabi_uldivmod>
 80058cc:	4603      	mov	r3, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80058d2:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <HAL_RCC_GetSysClockFreq+0x160>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	0c1b      	lsrs	r3, r3, #16
 80058d8:	f003 0303 	and.w	r3, r3, #3
 80058dc:	3301      	adds	r3, #1
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ea:	613b      	str	r3, [r7, #16]
      break;
 80058ec:	e002      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058ee:	4b05      	ldr	r3, [pc, #20]	; (8005904 <HAL_RCC_GetSysClockFreq+0x164>)
 80058f0:	613b      	str	r3, [r7, #16]
      break;
 80058f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058f4:	693b      	ldr	r3, [r7, #16]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005900:	40023800 	.word	0x40023800
 8005904:	00f42400 	.word	0x00f42400
 8005908:	017d7840 	.word	0x017d7840

0800590c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005910:	4b03      	ldr	r3, [pc, #12]	; (8005920 <HAL_RCC_GetHCLKFreq+0x14>)
 8005912:	681b      	ldr	r3, [r3, #0]
}
 8005914:	4618      	mov	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20000124 	.word	0x20000124

08005924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005928:	f7ff fff0 	bl	800590c <HAL_RCC_GetHCLKFreq>
 800592c:	4601      	mov	r1, r0
 800592e:	4b05      	ldr	r3, [pc, #20]	; (8005944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	0a9b      	lsrs	r3, r3, #10
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	4a03      	ldr	r2, [pc, #12]	; (8005948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800593a:	5cd3      	ldrb	r3, [r2, r3]
 800593c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005940:	4618      	mov	r0, r3
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40023800 	.word	0x40023800
 8005948:	08015f6c 	.word	0x08015f6c

0800594c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005950:	f7ff ffdc 	bl	800590c <HAL_RCC_GetHCLKFreq>
 8005954:	4601      	mov	r1, r0
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	0b5b      	lsrs	r3, r3, #13
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	4a03      	ldr	r2, [pc, #12]	; (8005970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005962:	5cd3      	ldrb	r3, [r2, r3]
 8005964:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40023800 	.word	0x40023800
 8005970:	08015f6c 	.word	0x08015f6c

08005974 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	220f      	movs	r2, #15
 8005982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005984:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0203 	and.w	r2, r3, #3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005990:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80059a8:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	08db      	lsrs	r3, r3, #3
 80059ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059b6:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <HAL_RCC_GetClockConfig+0x60>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 020f 	and.w	r2, r3, #15
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	601a      	str	r2, [r3, #0]
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40023800 	.word	0x40023800
 80059d4:	40023c00 	.word	0x40023c00

080059d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d012      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a00:	4a69      	ldr	r2, [pc, #420]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a02:	4b69      	ldr	r3, [pc, #420]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005a0a:	6093      	str	r3, [r2, #8]
 8005a0c:	4966      	ldr	r1, [pc, #408]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0e:	4b66      	ldr	r3, [pc, #408]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a16:	4313      	orrs	r3, r2
 8005a18:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1; 
 8005a22:	2301      	movs	r3, #1
 8005a24:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d017      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a32:	495d      	ldr	r1, [pc, #372]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a34:	4b5c      	ldr	r3, [pc, #368]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a50:	d101      	bne.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1; 
 8005a52:	2301      	movs	r3, #1
 8005a54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1; 
 8005a5e:	2301      	movs	r3, #1
 8005a60:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d017      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a6e:	494e      	ldr	r1, [pc, #312]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a70:	4b4d      	ldr	r3, [pc, #308]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a8c:	d101      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1; 
 8005a8e:	2301      	movs	r3, #1
 8005a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1; 
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {    
      plli2sused = 1; 
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 808b 	beq.w	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005abc:	4a3a      	ldr	r2, [pc, #232]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005abe:	4b3a      	ldr	r3, [pc, #232]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8005ac8:	4b37      	ldr	r3, [pc, #220]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ad4:	4a35      	ldr	r2, [pc, #212]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ad6:	4b35      	ldr	r3, [pc, #212]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ade:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae0:	f7fc f8a0 	bl	8001c24 <HAL_GetTick>
 8005ae4:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ae8:	f7fc f89c 	bl	8001c24 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b64      	cmp	r3, #100	; 0x64
 8005af4:	d901      	bls.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e355      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005afa:	4b2c      	ldr	r3, [pc, #176]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b06:	4b28      	ldr	r3, [pc, #160]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d035      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d02e      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b24:	4b20      	ldr	r3, [pc, #128]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b30:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b46:	4a18      	ldr	r2, [pc, #96]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b4c:	4b16      	ldr	r3, [pc, #88]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d014      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b58:	f7fc f864 	bl	8001c24 <HAL_GetTick>
 8005b5c:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5e:	e00a      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b60:	f7fc f860 	bl	8001c24 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e317      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b76:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0ee      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b8e:	d111      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005b90:	4805      	ldr	r0, [pc, #20]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b9e:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ba0:	400b      	ands	r3, r1
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	6083      	str	r3, [r0, #8]
 8005ba6:	e00b      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	40007000 	.word	0x40007000
 8005bb0:	0ffffcff 	.word	0x0ffffcff
 8005bb4:	4ab0      	ldr	r2, [pc, #704]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bb6:	4bb0      	ldr	r3, [pc, #704]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bbe:	6093      	str	r3, [r2, #8]
 8005bc0:	49ad      	ldr	r1, [pc, #692]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bc2:	4bad      	ldr	r3, [pc, #692]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d010      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bde:	4aa6      	ldr	r2, [pc, #664]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005be0:	4ba5      	ldr	r3, [pc, #660]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bee:	49a2      	ldr	r1, [pc, #648]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bf0:	4ba1      	ldr	r3, [pc, #644]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bf2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c0c:	499a      	ldr	r1, [pc, #616]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c0e:	4b9a      	ldr	r3, [pc, #616]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c2e:	4992      	ldr	r1, [pc, #584]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c30:	4b91      	ldr	r3, [pc, #580]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c50:	4989      	ldr	r1, [pc, #548]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c52:	4b89      	ldr	r3, [pc, #548]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c72:	4981      	ldr	r1, [pc, #516]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c74:	4b80      	ldr	r3, [pc, #512]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c94:	4978      	ldr	r1, [pc, #480]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c96:	4b78      	ldr	r3, [pc, #480]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9c:	f023 0203 	bic.w	r2, r3, #3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cb6:	4970      	ldr	r1, [pc, #448]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cb8:	4b6f      	ldr	r3, [pc, #444]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cbe:	f023 020c 	bic.w	r2, r3, #12
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cd8:	4967      	ldr	r1, [pc, #412]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cda:	4b67      	ldr	r3, [pc, #412]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cfa:	495f      	ldr	r1, [pc, #380]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cfc:	4b5e      	ldr	r3, [pc, #376]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d1c:	4956      	ldr	r1, [pc, #344]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d1e:	4b56      	ldr	r3, [pc, #344]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d3e:	494e      	ldr	r1, [pc, #312]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d40:	4b4d      	ldr	r3, [pc, #308]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d60:	4945      	ldr	r1, [pc, #276]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d62:	4b45      	ldr	r3, [pc, #276]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d82:	493d      	ldr	r1, [pc, #244]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d84:	4b3c      	ldr	r3, [pc, #240]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005da4:	4934      	ldr	r1, [pc, #208]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005da6:	4b34      	ldr	r3, [pc, #208]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dac:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d011      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005dc6:	492c      	ldr	r1, [pc, #176]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dc8:	4b2b      	ldr	r3, [pc, #172]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dce:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005de4:	d101      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1; 
 8005de6:	2301      	movs	r3, #1
 8005de8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1; 
 8005df6:	2301      	movs	r3, #1
 8005df8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e06:	491c      	ldr	r1, [pc, #112]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e08:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e28:	4913      	ldr	r1, [pc, #76]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e2a:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e30:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d005      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e4e:	f040 80d8 	bne.w	8006002 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8005e52:	4a09      	ldr	r2, [pc, #36]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e54:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e5c:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e5e:	f7fb fee1 	bl	8001c24 <HAL_GetTick>
 8005e62:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e64:	e00a      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e66:	f7fb fedd 	bl	8001c24 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b64      	cmp	r3, #100	; 0x64
 8005e72:	d903      	bls.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e196      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005e78:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e7c:	4b6c      	ldr	r3, [pc, #432]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1ee      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x48e>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d021      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d11d      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005e9c:	4b64      	ldr	r3, [pc, #400]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea2:	0c1b      	lsrs	r3, r3, #16
 8005ea4:	f003 0303 	and.w	r3, r3, #3
 8005ea8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005eaa:	4b61      	ldr	r3, [pc, #388]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb0:	0e1b      	lsrs	r3, r3, #24
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005eb8:	495d      	ldr	r1, [pc, #372]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	019a      	lsls	r2, r3, #6
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	041b      	lsls	r3, r3, #16
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	061b      	lsls	r3, r3, #24
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	071b      	lsls	r3, r3, #28
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d004      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eec:	d00a      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d02e      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f02:	d129      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f04:	4b4a      	ldr	r3, [pc, #296]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f0a:	0c1b      	lsrs	r3, r3, #16
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f12:	4b47      	ldr	r3, [pc, #284]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f18:	0f1b      	lsrs	r3, r3, #28
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f20:	4943      	ldr	r1, [pc, #268]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	019a      	lsls	r2, r3, #6
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	041b      	lsls	r3, r3, #16
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	061b      	lsls	r3, r3, #24
 8005f34:	431a      	orrs	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	071b      	lsls	r3, r3, #28
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8005f40:	493b      	ldr	r1, [pc, #236]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f42:	4b3b      	ldr	r3, [pc, #236]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f48:	f023 021f 	bic.w	r2, r3, #31
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	3b01      	subs	r3, #1
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01d      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f64:	4b32      	ldr	r3, [pc, #200]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6a:	0e1b      	lsrs	r3, r3, #24
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f72:	4b2f      	ldr	r3, [pc, #188]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f78:	0f1b      	lsrs	r3, r3, #28
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005f80:	492b      	ldr	r1, [pc, #172]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	019a      	lsls	r2, r3, #6
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	041b      	lsls	r3, r3, #16
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	061b      	lsls	r3, r3, #24
 8005f94:	431a      	orrs	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	071b      	lsls	r3, r3, #28
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d011      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fac:	4920      	ldr	r1, [pc, #128]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	019a      	lsls	r2, r3, #6
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	041b      	lsls	r3, r3, #16
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	061b      	lsls	r3, r3, #24
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	071b      	lsls	r3, r3, #28
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fd0:	4a17      	ldr	r2, [pc, #92]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fd2:	4b17      	ldr	r3, [pc, #92]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fda:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fdc:	f7fb fe22 	bl	8001c24 <HAL_GetTick>
 8005fe0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fe4:	f7fb fe1e 	bl	8001c24 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b64      	cmp	r3, #100	; 0x64
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e0d7      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ff6:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0f0      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b01      	cmp	r3, #1
 8006006:	f040 80cd 	bne.w	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 800600a:	4a09      	ldr	r2, [pc, #36]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800600c:	4b08      	ldr	r3, [pc, #32]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006014:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006016:	f7fb fe05 	bl	8001c24 <HAL_GetTick>
 800601a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800601c:	e00a      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800601e:	f7fb fe01 	bl	8001c24 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b64      	cmp	r3, #100	; 0x64
 800602a:	d903      	bls.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e0ba      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006030:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006034:	4b5e      	ldr	r3, [pc, #376]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800603c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006040:	d0ed      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x646>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800605e:	2b00      	cmp	r3, #0
 8006060:	d02e      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d12a      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800606a:	4b51      	ldr	r3, [pc, #324]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800606c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006078:	4b4d      	ldr	r3, [pc, #308]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800607a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607e:	0f1b      	lsrs	r3, r3, #28
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006086:	494a      	ldr	r1, [pc, #296]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	019a      	lsls	r2, r3, #6
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	061b      	lsls	r3, r3, #24
 800609a:	431a      	orrs	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	071b      	lsls	r3, r3, #28
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060a6:	4942      	ldr	r1, [pc, #264]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060a8:	4b41      	ldr	r3, [pc, #260]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	3b01      	subs	r3, #1
 80060b8:	021b      	lsls	r3, r3, #8
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d022      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060d4:	d11d      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060d6:	4b36      	ldr	r3, [pc, #216]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	0e1b      	lsrs	r3, r3, #24
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060e4:	4b32      	ldr	r3, [pc, #200]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ea:	0f1b      	lsrs	r3, r3, #28
 80060ec:	f003 0307 	and.w	r3, r3, #7
 80060f0:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80060f2:	492f      	ldr	r1, [pc, #188]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	019a      	lsls	r2, r3, #6
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	041b      	lsls	r3, r3, #16
 8006100:	431a      	orrs	r2, r3
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	061b      	lsls	r3, r3, #24
 8006106:	431a      	orrs	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	071b      	lsls	r3, r3, #28
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0308 	and.w	r3, r3, #8
 800611a:	2b00      	cmp	r3, #0
 800611c:	d028      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800611e:	4b24      	ldr	r3, [pc, #144]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006124:	0e1b      	lsrs	r3, r3, #24
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800612c:	4b20      	ldr	r3, [pc, #128]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006132:	0c1b      	lsrs	r3, r3, #16
 8006134:	f003 0303 	and.w	r3, r3, #3
 8006138:	60fb      	str	r3, [r7, #12]
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800613a:	491d      	ldr	r1, [pc, #116]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	019a      	lsls	r2, r3, #6
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	041b      	lsls	r3, r3, #16
 8006146:	431a      	orrs	r2, r3
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	061b      	lsls	r3, r3, #24
 800614c:	431a      	orrs	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	071b      	lsls	r3, r3, #28
 8006154:	4313      	orrs	r3, r2
 8006156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800615a:	4915      	ldr	r1, [pc, #84]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800615c:	4b14      	ldr	r3, [pc, #80]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800615e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006162:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006170:	4a0f      	ldr	r2, [pc, #60]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006172:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617a:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800617c:	f7fb fd52 	bl	8001c24 <HAL_GetTick>
 8006180:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006182:	e008      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006184:	f7fb fd4e 	bl	8001c24 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b64      	cmp	r3, #100	; 0x64
 8006190:	d901      	bls.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e007      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006196:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800619e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061a2:	d1ef      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40023800 	.word	0x40023800

080061b4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e025      	b.n	8006214 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d106      	bne.n	80061e2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f009 f855 	bl	800f28c <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f001 f845 	bl	8007284 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	461a      	mov	r2, r3
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	f001 f8af 	bl	8007368 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_SDRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_SDRAM_Read_32b+0x20>
 8006238:	2302      	movs	r3, #2
 800623a:	e028      	b.n	800628e <HAL_SDRAM_Read_32b+0x72>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d101      	bne.n	8006254 <HAL_SDRAM_Read_32b+0x38>
  {
    return HAL_BUSY;
 8006250:	2302      	movs	r3, #2
 8006252:	e01c      	b.n	800628e <HAL_SDRAM_Read_32b+0x72>
  }
  else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b05      	cmp	r3, #5
 800625e:	d10e      	bne.n	800627e <HAL_SDRAM_Read_32b+0x62>
  {
    return  HAL_ERROR; 
 8006260:	2301      	movs	r3, #1
 8006262:	e014      	b.n	800628e <HAL_SDRAM_Read_32b+0x72>
  }  
  
  /* Read data from source */
  for(; BufferSize != 0; BufferSize--)
  {
    *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	607b      	str	r3, [r7, #4]
    pSdramAddress++;               
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	3304      	adds	r3, #4
 8006276:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	3b01      	subs	r3, #1
 800627c:	603b      	str	r3, [r7, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1ef      	bne.n	8006264 <HAL_SDRAM_Read_32b+0x48>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);       
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK; 
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <HAL_SDRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 800629a:	b480      	push	{r7}
 800629c:	b087      	sub	sp, #28
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(hsdram);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d101      	bne.n	80062be <HAL_SDRAM_Write_32b+0x24>
 80062ba:	2302      	movs	r3, #2
 80062bc:	e02a      	b.n	8006314 <HAL_SDRAM_Write_32b+0x7a>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  /* Check the SDRAM controller state */
  tmp = hsdram->State;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	613b      	str	r3, [r7, #16]
  
  if(tmp == HAL_SDRAM_STATE_BUSY)
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d101      	bne.n	80062da <HAL_SDRAM_Write_32b+0x40>
  {
    return HAL_BUSY;
 80062d6:	2302      	movs	r3, #2
 80062d8:	e01c      	b.n	8006314 <HAL_SDRAM_Write_32b+0x7a>
  }
  else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b05      	cmp	r3, #5
 80062de:	d002      	beq.n	80062e6 <HAL_SDRAM_Write_32b+0x4c>
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d10e      	bne.n	8006304 <HAL_SDRAM_Write_32b+0x6a>
  {
    return  HAL_ERROR; 
 80062e6:	2301      	movs	r3, #1
 80062e8:	e014      	b.n	8006314 <HAL_SDRAM_Write_32b+0x7a>
  }
  
  /* Write data to memory */
  for(; BufferSize != 0; BufferSize--)
  {
    *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3304      	adds	r3, #4
 80062f6:	607b      	str	r3, [r7, #4]
    pSdramAddress++;          
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	3304      	adds	r3, #4
 80062fc:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0; BufferSize--)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	3b01      	subs	r3, #1
 8006302:	603b      	str	r3, [r7, #0]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1ef      	bne.n	80062ea <HAL_SDRAM_Write_32b+0x50>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hsdram);    
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  return HAL_OK;  
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d101      	bne.n	800633c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006338:	2302      	movs	r3, #2
 800633a:	e018      	b.n	800636e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	4618      	mov	r0, r3
 800634e:	f001 f88b 	bl	8007468 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d104      	bne.n	8006364 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2205      	movs	r2, #5
 800635e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006362:	e003      	b.n	800636c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e01d      	b.n	80063c4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d106      	bne.n	80063a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f815 	bl	80063cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2202      	movs	r2, #2
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3304      	adds	r3, #4
 80063b2:	4619      	mov	r1, r3
 80063b4:	4610      	mov	r0, r2
 80063b6:	f000 f975 	bl	80066a4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6812      	ldr	r2, [r2, #0]
 80063f0:	68d2      	ldr	r2, [r2, #12]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6812      	ldr	r2, [r2, #0]
 8006400:	6812      	ldr	r2, [r2, #0]
 8006402:	f042 0201 	orr.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b02      	cmp	r3, #2
 800642a:	d122      	bne.n	8006472 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b02      	cmp	r3, #2
 8006438:	d11b      	bne.n	8006472 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f06f 0202 	mvn.w	r2, #2
 8006442:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	f003 0303 	and.w	r3, r3, #3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f905 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 800645e:	e005      	b.n	800646c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f8f7 	bl	8006654 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f908 	bl	800667c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b04      	cmp	r3, #4
 800647e:	d122      	bne.n	80064c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b04      	cmp	r3, #4
 800648c:	d11b      	bne.n	80064c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f06f 0204 	mvn.w	r2, #4
 8006496:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f8db 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 80064b2:	e005      	b.n	80064c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f8cd 	bl	8006654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f8de 	bl	800667c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d122      	bne.n	800651a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d11b      	bne.n	800651a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f06f 0208 	mvn.w	r2, #8
 80064ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2204      	movs	r2, #4
 80064f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <HAL_TIM_IRQHandler+0xf2>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f8b1 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 8006506:	e005      	b.n	8006514 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f8a3 	bl	8006654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8b4 	bl	800667c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b10      	cmp	r3, #16
 8006526:	d122      	bne.n	800656e <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b10      	cmp	r3, #16
 8006534:	d11b      	bne.n	800656e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f06f 0210 	mvn.w	r2, #16
 800653e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2208      	movs	r2, #8
 8006544:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_TIM_IRQHandler+0x146>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f887 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 800655a:	e005      	b.n	8006568 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f879 	bl	8006654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f88a 	bl	800667c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b01      	cmp	r3, #1
 800657a:	d10e      	bne.n	800659a <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b01      	cmp	r3, #1
 8006588:	d107      	bne.n	800659a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f06f 0201 	mvn.w	r2, #1
 8006592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f008 fb07 	bl	800eba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a4:	2b80      	cmp	r3, #128	; 0x80
 80065a6:	d10e      	bne.n	80065c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b2:	2b80      	cmp	r3, #128	; 0x80
 80065b4:	d107      	bne.n	80065c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f929 	bl	8006818 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d4:	d10e      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e0:	2b80      	cmp	r3, #128	; 0x80
 80065e2:	d107      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f912 	bl	8006818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fe:	2b40      	cmp	r3, #64	; 0x40
 8006600:	d10e      	bne.n	8006620 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d107      	bne.n	8006620 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f838 	bl	8006690 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b20      	cmp	r3, #32
 800662c:	d10e      	bne.n	800664c <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b20      	cmp	r3, #32
 800663a:	d107      	bne.n	800664c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0220 	mvn.w	r2, #32
 8006644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f8dc 	bl	8006804 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a47      	ldr	r2, [pc, #284]	; (80067d8 <TIM_Base_SetConfig+0x134>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d013      	beq.n	80066e8 <TIM_Base_SetConfig+0x44>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c6:	d00f      	beq.n	80066e8 <TIM_Base_SetConfig+0x44>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a44      	ldr	r2, [pc, #272]	; (80067dc <TIM_Base_SetConfig+0x138>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00b      	beq.n	80066e8 <TIM_Base_SetConfig+0x44>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a43      	ldr	r2, [pc, #268]	; (80067e0 <TIM_Base_SetConfig+0x13c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d007      	beq.n	80066e8 <TIM_Base_SetConfig+0x44>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a42      	ldr	r2, [pc, #264]	; (80067e4 <TIM_Base_SetConfig+0x140>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_Base_SetConfig+0x44>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a41      	ldr	r2, [pc, #260]	; (80067e8 <TIM_Base_SetConfig+0x144>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d101      	bne.n	80066ec <TIM_Base_SetConfig+0x48>
 80066e8:	2301      	movs	r3, #1
 80066ea:	e000      	b.n	80066ee <TIM_Base_SetConfig+0x4a>
 80066ec:	2300      	movs	r3, #0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d008      	beq.n	8006704 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	4313      	orrs	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a34      	ldr	r2, [pc, #208]	; (80067d8 <TIM_Base_SetConfig+0x134>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d02b      	beq.n	8006764 <TIM_Base_SetConfig+0xc0>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006712:	d027      	beq.n	8006764 <TIM_Base_SetConfig+0xc0>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a31      	ldr	r2, [pc, #196]	; (80067dc <TIM_Base_SetConfig+0x138>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d023      	beq.n	8006764 <TIM_Base_SetConfig+0xc0>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a30      	ldr	r2, [pc, #192]	; (80067e0 <TIM_Base_SetConfig+0x13c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d01f      	beq.n	8006764 <TIM_Base_SetConfig+0xc0>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a2f      	ldr	r2, [pc, #188]	; (80067e4 <TIM_Base_SetConfig+0x140>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d01b      	beq.n	8006764 <TIM_Base_SetConfig+0xc0>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a2e      	ldr	r2, [pc, #184]	; (80067e8 <TIM_Base_SetConfig+0x144>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d017      	beq.n	8006764 <TIM_Base_SetConfig+0xc0>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a2d      	ldr	r2, [pc, #180]	; (80067ec <TIM_Base_SetConfig+0x148>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d013      	beq.n	8006764 <TIM_Base_SetConfig+0xc0>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a2c      	ldr	r2, [pc, #176]	; (80067f0 <TIM_Base_SetConfig+0x14c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00f      	beq.n	8006764 <TIM_Base_SetConfig+0xc0>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a2b      	ldr	r2, [pc, #172]	; (80067f4 <TIM_Base_SetConfig+0x150>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00b      	beq.n	8006764 <TIM_Base_SetConfig+0xc0>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a2a      	ldr	r2, [pc, #168]	; (80067f8 <TIM_Base_SetConfig+0x154>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d007      	beq.n	8006764 <TIM_Base_SetConfig+0xc0>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a29      	ldr	r2, [pc, #164]	; (80067fc <TIM_Base_SetConfig+0x158>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <TIM_Base_SetConfig+0xc0>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a28      	ldr	r2, [pc, #160]	; (8006800 <TIM_Base_SetConfig+0x15c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d101      	bne.n	8006768 <TIM_Base_SetConfig+0xc4>
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <TIM_Base_SetConfig+0xc6>
 8006768:	2300      	movs	r3, #0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d008      	beq.n	8006780 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a0c      	ldr	r2, [pc, #48]	; (80067d8 <TIM_Base_SetConfig+0x134>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_Base_SetConfig+0x110>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a0e      	ldr	r2, [pc, #56]	; (80067e8 <TIM_Base_SetConfig+0x144>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d101      	bne.n	80067b8 <TIM_Base_SetConfig+0x114>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <TIM_Base_SetConfig+0x116>
 80067b8:	2300      	movs	r3, #0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	691a      	ldr	r2, [r3, #16]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	615a      	str	r2, [r3, #20]
}
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40000400 	.word	0x40000400
 80067e0:	40000800 	.word	0x40000800
 80067e4:	40000c00 	.word	0x40000c00
 80067e8:	40010400 	.word	0x40010400
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40014400 	.word	0x40014400
 80067f4:	40014800 	.word	0x40014800
 80067f8:	40001800 	.word	0x40001800
 80067fc:	40001c00 	.word	0x40001c00
 8006800:	40002000 	.word	0x40002000

08006804 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e043      	b.n	80068c6 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f008 fc4e 	bl	800f0f4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2224      	movs	r2, #36	; 0x24
 800685c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6812      	ldr	r2, [r2, #0]
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f9c3 	bl	8006bfc <UART_SetConfig>
 8006876:	4603      	mov	r3, r0
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e022      	b.n	80068c6 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fc25 	bl	80070d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6812      	ldr	r2, [r2, #0]
 8006896:	6852      	ldr	r2, [r2, #4]
 8006898:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800689c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6812      	ldr	r2, [r2, #0]
 80068a6:	6892      	ldr	r2, [r2, #8]
 80068a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068ac:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	6812      	ldr	r2, [r2, #0]
 80068b8:	f042 0201 	orr.w	r2, r2, #1
 80068bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fcac 	bl	800721c <UART_CheckIdleState>
 80068c4:	4603      	mov	r3, r0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b088      	sub	sp, #32
 80068d2:	af02      	add	r7, sp, #8
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	603b      	str	r3, [r7, #0]
 80068da:	4613      	mov	r3, r2
 80068dc:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d175      	bne.n	80069da <HAL_UART_Transmit+0x10c>
  {
    if((pData == NULL ) || (Size == 0U))
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <HAL_UART_Transmit+0x2c>
 80068f4:	88fb      	ldrh	r3, [r7, #6]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e06e      	b.n	80069dc <HAL_UART_Transmit+0x10e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_UART_Transmit+0x3e>
 8006908:	2302      	movs	r3, #2
 800690a:	e067      	b.n	80069dc <HAL_UART_Transmit+0x10e>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2221      	movs	r2, #33	; 0x21
 800691e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006922:	f7fb f97f 	bl	8001c24 <HAL_GetTick>
 8006926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	88fa      	ldrh	r2, [r7, #6]
 800692c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	88fa      	ldrh	r2, [r7, #6]
 8006934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8006938:	e032      	b.n	80069a0 <HAL_UART_Transmit+0xd2>
    {
      huart->TxXferCount--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006940:	b29b      	uxth	r3, r3
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2200      	movs	r2, #0
 8006954:	2180      	movs	r1, #128	; 0x80
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 f906 	bl	8006b68 <UART_WaitOnFlagUntilTimeout>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e03a      	b.n	80069dc <HAL_UART_Transmit+0x10e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800696e:	d110      	bne.n	8006992 <HAL_UART_Transmit+0xc4>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10c      	bne.n	8006992 <HAL_UART_Transmit+0xc4>
      {
        tmp = (uint16_t*) pData;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	8812      	ldrh	r2, [r2, #0]
 8006984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006988:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	3302      	adds	r3, #2
 800698e:	60bb      	str	r3, [r7, #8]
 8006990:	e006      	b.n	80069a0 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	1c59      	adds	r1, r3, #1
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	6293      	str	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1c6      	bne.n	800693a <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2200      	movs	r2, #0
 80069b4:	2140      	movs	r1, #64	; 0x40
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 f8d6 	bl	8006b68 <UART_WaitOnFlagUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <HAL_UART_Transmit+0xf8>
    {
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e00a      	b.n	80069dc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e000      	b.n	80069dc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80069da:	2302      	movs	r3, #2
  }
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <HAL_UART_Receive>:
  * @param Size amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08a      	sub	sp, #40	; 0x28
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	4613      	mov	r3, r2
 80069f2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	f040 80ac 	bne.w	8006b5e <HAL_UART_Receive+0x17a>
  {
    if((pData == NULL ) || (Size == 0U))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <HAL_UART_Receive+0x2e>
 8006a0c:	88fb      	ldrh	r3, [r7, #6]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e0a4      	b.n	8006b60 <HAL_UART_Receive+0x17c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d101      	bne.n	8006a24 <HAL_UART_Receive+0x40>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e09d      	b.n	8006b60 <HAL_UART_Receive+0x17c>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2222      	movs	r2, #34	; 0x22
 8006a36:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006a3a:	f7fb f8f3 	bl	8001c24 <HAL_GetTick>
 8006a3e:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	88fa      	ldrh	r2, [r7, #6]
 8006a44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	88fa      	ldrh	r2, [r7, #6]
 8006a4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a58:	d10e      	bne.n	8006a78 <HAL_UART_Receive+0x94>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d105      	bne.n	8006a6e <HAL_UART_Receive+0x8a>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a6c:	e028      	b.n	8006ac0 <HAL_UART_Receive+0xdc>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	22ff      	movs	r2, #255	; 0xff
 8006a72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a76:	e023      	b.n	8006ac0 <HAL_UART_Receive+0xdc>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10d      	bne.n	8006a9c <HAL_UART_Receive+0xb8>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d104      	bne.n	8006a92 <HAL_UART_Receive+0xae>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	22ff      	movs	r2, #255	; 0xff
 8006a8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a90:	e016      	b.n	8006ac0 <HAL_UART_Receive+0xdc>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	227f      	movs	r2, #127	; 0x7f
 8006a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a9a:	e011      	b.n	8006ac0 <HAL_UART_Receive+0xdc>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aa4:	d10c      	bne.n	8006ac0 <HAL_UART_Receive+0xdc>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d104      	bne.n	8006ab8 <HAL_UART_Receive+0xd4>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	227f      	movs	r2, #127	; 0x7f
 8006ab2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ab6:	e003      	b.n	8006ac0 <HAL_UART_Receive+0xdc>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	223f      	movs	r2, #63	; 0x3f
 8006abc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ac6:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8006ac8:	e039      	b.n	8006b3e <HAL_UART_Receive+0x15a>
    {
      huart->RxXferCount--;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2120      	movs	r1, #32
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 f83e 	bl	8006b68 <UART_WaitOnFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e034      	b.n	8006b60 <HAL_UART_Receive+0x17c>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afe:	d112      	bne.n	8006b26 <HAL_UART_Receive+0x142>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10e      	bne.n	8006b26 <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	8b7b      	ldrh	r3, [r7, #26]
 8006b16:	4013      	ands	r3, r2
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	3302      	adds	r3, #2
 8006b22:	60bb      	str	r3, [r7, #8]
 8006b24:	e00b      	b.n	8006b3e <HAL_UART_Receive+0x15a>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	60ba      	str	r2, [r7, #8]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	6812      	ldr	r2, [r2, #0]
 8006b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b32:	b2d1      	uxtb	r1, r2
 8006b34:	8b7a      	ldrh	r2, [r7, #26]
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	400a      	ands	r2, r1
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1bf      	bne.n	8006aca <HAL_UART_Receive+0xe6>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e000      	b.n	8006b60 <HAL_UART_Receive+0x17c>
  }
  else
  {
    return HAL_BUSY;
 8006b5e:	2302      	movs	r3, #2
  }
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3720      	adds	r7, #32
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	4613      	mov	r3, r2
 8006b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b78:	e02c      	b.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b80:	d028      	beq.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b88:	f7fb f84c 	bl	8001c24 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	1ad2      	subs	r2, r2, r3
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d31d      	bcc.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	6812      	ldr	r2, [r2, #0]
 8006ba0:	6812      	ldr	r2, [r2, #0]
 8006ba2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ba6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	6892      	ldr	r2, [r2, #8]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e00f      	b.n	8006bf4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	69da      	ldr	r2, [r3, #28]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	401a      	ands	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	bf0c      	ite	eq
 8006be4:	2301      	moveq	r3, #1
 8006be6:	2300      	movne	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	461a      	mov	r2, r3
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d0c3      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bfc:	b590      	push	{r4, r7, lr}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006c08:	2310      	movs	r3, #16
 8006c0a:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6819      	ldr	r1, [r3, #0]
 8006c3a:	4baa      	ldr	r3, [pc, #680]	; (8006ee4 <UART_SetConfig+0x2e8>)
 8006c3c:	400b      	ands	r3, r1
 8006c3e:	68f9      	ldr	r1, [r7, #12]
 8006c40:	430b      	orrs	r3, r1
 8006c42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	6852      	ldr	r2, [r2, #4]
 8006c4e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	68d2      	ldr	r2, [r2, #12]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6812      	ldr	r2, [r2, #0]
 8006c6e:	6892      	ldr	r2, [r2, #8]
 8006c70:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a9a      	ldr	r2, [pc, #616]	; (8006ee8 <UART_SetConfig+0x2ec>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d11f      	bne.n	8006cc4 <UART_SetConfig+0xc8>
 8006c84:	4b99      	ldr	r3, [pc, #612]	; (8006eec <UART_SetConfig+0x2f0>)
 8006c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	f200 813e 	bhi.w	8006f10 <UART_SetConfig+0x314>
 8006c94:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <UART_SetConfig+0xa0>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006cad 	.word	0x08006cad
 8006ca0:	08006cb9 	.word	0x08006cb9
 8006ca4:	08006cb3 	.word	0x08006cb3
 8006ca8:	08006cbf 	.word	0x08006cbf
 8006cac:	2301      	movs	r3, #1
 8006cae:	75fb      	strb	r3, [r7, #23]
 8006cb0:	e12e      	b.n	8006f10 <UART_SetConfig+0x314>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	75fb      	strb	r3, [r7, #23]
 8006cb6:	e12b      	b.n	8006f10 <UART_SetConfig+0x314>
 8006cb8:	2304      	movs	r3, #4
 8006cba:	75fb      	strb	r3, [r7, #23]
 8006cbc:	e128      	b.n	8006f10 <UART_SetConfig+0x314>
 8006cbe:	2308      	movs	r3, #8
 8006cc0:	75fb      	strb	r3, [r7, #23]
 8006cc2:	e125      	b.n	8006f10 <UART_SetConfig+0x314>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a89      	ldr	r2, [pc, #548]	; (8006ef0 <UART_SetConfig+0x2f4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d130      	bne.n	8006d30 <UART_SetConfig+0x134>
 8006cce:	4b87      	ldr	r3, [pc, #540]	; (8006eec <UART_SetConfig+0x2f0>)
 8006cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd4:	f003 030c 	and.w	r3, r3, #12
 8006cd8:	2b0c      	cmp	r3, #12
 8006cda:	f200 8119 	bhi.w	8006f10 <UART_SetConfig+0x314>
 8006cde:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <UART_SetConfig+0xe8>)
 8006ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce4:	08006d19 	.word	0x08006d19
 8006ce8:	08006f11 	.word	0x08006f11
 8006cec:	08006f11 	.word	0x08006f11
 8006cf0:	08006f11 	.word	0x08006f11
 8006cf4:	08006d25 	.word	0x08006d25
 8006cf8:	08006f11 	.word	0x08006f11
 8006cfc:	08006f11 	.word	0x08006f11
 8006d00:	08006f11 	.word	0x08006f11
 8006d04:	08006d1f 	.word	0x08006d1f
 8006d08:	08006f11 	.word	0x08006f11
 8006d0c:	08006f11 	.word	0x08006f11
 8006d10:	08006f11 	.word	0x08006f11
 8006d14:	08006d2b 	.word	0x08006d2b
 8006d18:	2300      	movs	r3, #0
 8006d1a:	75fb      	strb	r3, [r7, #23]
 8006d1c:	e0f8      	b.n	8006f10 <UART_SetConfig+0x314>
 8006d1e:	2302      	movs	r3, #2
 8006d20:	75fb      	strb	r3, [r7, #23]
 8006d22:	e0f5      	b.n	8006f10 <UART_SetConfig+0x314>
 8006d24:	2304      	movs	r3, #4
 8006d26:	75fb      	strb	r3, [r7, #23]
 8006d28:	e0f2      	b.n	8006f10 <UART_SetConfig+0x314>
 8006d2a:	2308      	movs	r3, #8
 8006d2c:	75fb      	strb	r3, [r7, #23]
 8006d2e:	e0ef      	b.n	8006f10 <UART_SetConfig+0x314>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a6f      	ldr	r2, [pc, #444]	; (8006ef4 <UART_SetConfig+0x2f8>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d11c      	bne.n	8006d74 <UART_SetConfig+0x178>
 8006d3a:	4b6c      	ldr	r3, [pc, #432]	; (8006eec <UART_SetConfig+0x2f0>)
 8006d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d44:	2b10      	cmp	r3, #16
 8006d46:	d00f      	beq.n	8006d68 <UART_SetConfig+0x16c>
 8006d48:	2b10      	cmp	r3, #16
 8006d4a:	d802      	bhi.n	8006d52 <UART_SetConfig+0x156>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <UART_SetConfig+0x160>
 8006d50:	e0de      	b.n	8006f10 <UART_SetConfig+0x314>
 8006d52:	2b20      	cmp	r3, #32
 8006d54:	d005      	beq.n	8006d62 <UART_SetConfig+0x166>
 8006d56:	2b30      	cmp	r3, #48	; 0x30
 8006d58:	d009      	beq.n	8006d6e <UART_SetConfig+0x172>
 8006d5a:	e0d9      	b.n	8006f10 <UART_SetConfig+0x314>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	75fb      	strb	r3, [r7, #23]
 8006d60:	e0d6      	b.n	8006f10 <UART_SetConfig+0x314>
 8006d62:	2302      	movs	r3, #2
 8006d64:	75fb      	strb	r3, [r7, #23]
 8006d66:	e0d3      	b.n	8006f10 <UART_SetConfig+0x314>
 8006d68:	2304      	movs	r3, #4
 8006d6a:	75fb      	strb	r3, [r7, #23]
 8006d6c:	e0d0      	b.n	8006f10 <UART_SetConfig+0x314>
 8006d6e:	2308      	movs	r3, #8
 8006d70:	75fb      	strb	r3, [r7, #23]
 8006d72:	e0cd      	b.n	8006f10 <UART_SetConfig+0x314>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a5f      	ldr	r2, [pc, #380]	; (8006ef8 <UART_SetConfig+0x2fc>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d11c      	bne.n	8006db8 <UART_SetConfig+0x1bc>
 8006d7e:	4b5b      	ldr	r3, [pc, #364]	; (8006eec <UART_SetConfig+0x2f0>)
 8006d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	d00f      	beq.n	8006dac <UART_SetConfig+0x1b0>
 8006d8c:	2b40      	cmp	r3, #64	; 0x40
 8006d8e:	d802      	bhi.n	8006d96 <UART_SetConfig+0x19a>
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d005      	beq.n	8006da0 <UART_SetConfig+0x1a4>
 8006d94:	e0bc      	b.n	8006f10 <UART_SetConfig+0x314>
 8006d96:	2b80      	cmp	r3, #128	; 0x80
 8006d98:	d005      	beq.n	8006da6 <UART_SetConfig+0x1aa>
 8006d9a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d9c:	d009      	beq.n	8006db2 <UART_SetConfig+0x1b6>
 8006d9e:	e0b7      	b.n	8006f10 <UART_SetConfig+0x314>
 8006da0:	2300      	movs	r3, #0
 8006da2:	75fb      	strb	r3, [r7, #23]
 8006da4:	e0b4      	b.n	8006f10 <UART_SetConfig+0x314>
 8006da6:	2302      	movs	r3, #2
 8006da8:	75fb      	strb	r3, [r7, #23]
 8006daa:	e0b1      	b.n	8006f10 <UART_SetConfig+0x314>
 8006dac:	2304      	movs	r3, #4
 8006dae:	75fb      	strb	r3, [r7, #23]
 8006db0:	e0ae      	b.n	8006f10 <UART_SetConfig+0x314>
 8006db2:	2308      	movs	r3, #8
 8006db4:	75fb      	strb	r3, [r7, #23]
 8006db6:	e0ab      	b.n	8006f10 <UART_SetConfig+0x314>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a4f      	ldr	r2, [pc, #316]	; (8006efc <UART_SetConfig+0x300>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d120      	bne.n	8006e04 <UART_SetConfig+0x208>
 8006dc2:	4b4a      	ldr	r3, [pc, #296]	; (8006eec <UART_SetConfig+0x2f0>)
 8006dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd0:	d012      	beq.n	8006df8 <UART_SetConfig+0x1fc>
 8006dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd6:	d802      	bhi.n	8006dde <UART_SetConfig+0x1e2>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <UART_SetConfig+0x1f0>
 8006ddc:	e098      	b.n	8006f10 <UART_SetConfig+0x314>
 8006dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de2:	d006      	beq.n	8006df2 <UART_SetConfig+0x1f6>
 8006de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de8:	d009      	beq.n	8006dfe <UART_SetConfig+0x202>
 8006dea:	e091      	b.n	8006f10 <UART_SetConfig+0x314>
 8006dec:	2300      	movs	r3, #0
 8006dee:	75fb      	strb	r3, [r7, #23]
 8006df0:	e08e      	b.n	8006f10 <UART_SetConfig+0x314>
 8006df2:	2302      	movs	r3, #2
 8006df4:	75fb      	strb	r3, [r7, #23]
 8006df6:	e08b      	b.n	8006f10 <UART_SetConfig+0x314>
 8006df8:	2304      	movs	r3, #4
 8006dfa:	75fb      	strb	r3, [r7, #23]
 8006dfc:	e088      	b.n	8006f10 <UART_SetConfig+0x314>
 8006dfe:	2308      	movs	r3, #8
 8006e00:	75fb      	strb	r3, [r7, #23]
 8006e02:	e085      	b.n	8006f10 <UART_SetConfig+0x314>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a3d      	ldr	r2, [pc, #244]	; (8006f00 <UART_SetConfig+0x304>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d120      	bne.n	8006e50 <UART_SetConfig+0x254>
 8006e0e:	4b37      	ldr	r3, [pc, #220]	; (8006eec <UART_SetConfig+0x2f0>)
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e1c:	d012      	beq.n	8006e44 <UART_SetConfig+0x248>
 8006e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e22:	d802      	bhi.n	8006e2a <UART_SetConfig+0x22e>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <UART_SetConfig+0x23c>
 8006e28:	e072      	b.n	8006f10 <UART_SetConfig+0x314>
 8006e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2e:	d006      	beq.n	8006e3e <UART_SetConfig+0x242>
 8006e30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e34:	d009      	beq.n	8006e4a <UART_SetConfig+0x24e>
 8006e36:	e06b      	b.n	8006f10 <UART_SetConfig+0x314>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	75fb      	strb	r3, [r7, #23]
 8006e3c:	e068      	b.n	8006f10 <UART_SetConfig+0x314>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	75fb      	strb	r3, [r7, #23]
 8006e42:	e065      	b.n	8006f10 <UART_SetConfig+0x314>
 8006e44:	2304      	movs	r3, #4
 8006e46:	75fb      	strb	r3, [r7, #23]
 8006e48:	e062      	b.n	8006f10 <UART_SetConfig+0x314>
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	75fb      	strb	r3, [r7, #23]
 8006e4e:	e05f      	b.n	8006f10 <UART_SetConfig+0x314>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a2b      	ldr	r2, [pc, #172]	; (8006f04 <UART_SetConfig+0x308>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d120      	bne.n	8006e9c <UART_SetConfig+0x2a0>
 8006e5a:	4b24      	ldr	r3, [pc, #144]	; (8006eec <UART_SetConfig+0x2f0>)
 8006e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e68:	d012      	beq.n	8006e90 <UART_SetConfig+0x294>
 8006e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6e:	d802      	bhi.n	8006e76 <UART_SetConfig+0x27a>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <UART_SetConfig+0x288>
 8006e74:	e04c      	b.n	8006f10 <UART_SetConfig+0x314>
 8006e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7a:	d006      	beq.n	8006e8a <UART_SetConfig+0x28e>
 8006e7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e80:	d009      	beq.n	8006e96 <UART_SetConfig+0x29a>
 8006e82:	e045      	b.n	8006f10 <UART_SetConfig+0x314>
 8006e84:	2300      	movs	r3, #0
 8006e86:	75fb      	strb	r3, [r7, #23]
 8006e88:	e042      	b.n	8006f10 <UART_SetConfig+0x314>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	75fb      	strb	r3, [r7, #23]
 8006e8e:	e03f      	b.n	8006f10 <UART_SetConfig+0x314>
 8006e90:	2304      	movs	r3, #4
 8006e92:	75fb      	strb	r3, [r7, #23]
 8006e94:	e03c      	b.n	8006f10 <UART_SetConfig+0x314>
 8006e96:	2308      	movs	r3, #8
 8006e98:	75fb      	strb	r3, [r7, #23]
 8006e9a:	e039      	b.n	8006f10 <UART_SetConfig+0x314>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a19      	ldr	r2, [pc, #100]	; (8006f08 <UART_SetConfig+0x30c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d135      	bne.n	8006f12 <UART_SetConfig+0x316>
 8006ea6:	4b11      	ldr	r3, [pc, #68]	; (8006eec <UART_SetConfig+0x2f0>)
 8006ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb4:	d012      	beq.n	8006edc <UART_SetConfig+0x2e0>
 8006eb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eba:	d802      	bhi.n	8006ec2 <UART_SetConfig+0x2c6>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <UART_SetConfig+0x2d4>
 8006ec0:	e026      	b.n	8006f10 <UART_SetConfig+0x314>
 8006ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec6:	d006      	beq.n	8006ed6 <UART_SetConfig+0x2da>
 8006ec8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ecc:	d01e      	beq.n	8006f0c <UART_SetConfig+0x310>
 8006ece:	e01f      	b.n	8006f10 <UART_SetConfig+0x314>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	75fb      	strb	r3, [r7, #23]
 8006ed4:	e01c      	b.n	8006f10 <UART_SetConfig+0x314>
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	75fb      	strb	r3, [r7, #23]
 8006eda:	e019      	b.n	8006f10 <UART_SetConfig+0x314>
 8006edc:	2304      	movs	r3, #4
 8006ede:	75fb      	strb	r3, [r7, #23]
 8006ee0:	e016      	b.n	8006f10 <UART_SetConfig+0x314>
 8006ee2:	bf00      	nop
 8006ee4:	efff69f3 	.word	0xefff69f3
 8006ee8:	40011000 	.word	0x40011000
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	40004400 	.word	0x40004400
 8006ef4:	40004800 	.word	0x40004800
 8006ef8:	40004c00 	.word	0x40004c00
 8006efc:	40005000 	.word	0x40005000
 8006f00:	40011400 	.word	0x40011400
 8006f04:	40007800 	.word	0x40007800
 8006f08:	40007c00 	.word	0x40007c00
 8006f0c:	2308      	movs	r3, #8
 8006f0e:	75fb      	strb	r3, [r7, #23]
 8006f10:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f1a:	d16c      	bne.n	8006ff6 <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	d854      	bhi.n	8006fcc <UART_SetConfig+0x3d0>
 8006f22:	a201      	add	r2, pc, #4	; (adr r2, 8006f28 <UART_SetConfig+0x32c>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006f4d 	.word	0x08006f4d
 8006f2c:	08006f69 	.word	0x08006f69
 8006f30:	08006f85 	.word	0x08006f85
 8006f34:	08006fcd 	.word	0x08006fcd
 8006f38:	08006f9b 	.word	0x08006f9b
 8006f3c:	08006fcd 	.word	0x08006fcd
 8006f40:	08006fcd 	.word	0x08006fcd
 8006f44:	08006fcd 	.word	0x08006fcd
 8006f48:	08006fb7 	.word	0x08006fb7
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006f4c:	f7fe fcea 	bl	8005924 <HAL_RCC_GetPCLK1Freq>
 8006f50:	4603      	mov	r3, r0
 8006f52:	005a      	lsls	r2, r3, #1
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	085b      	lsrs	r3, r3, #1
 8006f5a:	441a      	add	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f64:	82bb      	strh	r3, [r7, #20]
      break;
 8006f66:	e034      	b.n	8006fd2 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006f68:	f7fe fcf0 	bl	800594c <HAL_RCC_GetPCLK2Freq>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	005a      	lsls	r2, r3, #1
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	085b      	lsrs	r3, r3, #1
 8006f76:	441a      	add	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f80:	82bb      	strh	r3, [r7, #20]
      break;
 8006f82:	e026      	b.n	8006fd2 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	085a      	lsrs	r2, r3, #1
 8006f8a:	4b51      	ldr	r3, [pc, #324]	; (80070d0 <UART_SetConfig+0x4d4>)
 8006f8c:	4413      	add	r3, r2
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6852      	ldr	r2, [r2, #4]
 8006f92:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f96:	82bb      	strh	r3, [r7, #20]
      break;
 8006f98:	e01b      	b.n	8006fd2 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006f9a:	f7fe fc01 	bl	80057a0 <HAL_RCC_GetSysClockFreq>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	005a      	lsls	r2, r3, #1
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	441a      	add	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb2:	82bb      	strh	r3, [r7, #20]
      break;
 8006fb4:	e00d      	b.n	8006fd2 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	085b      	lsrs	r3, r3, #1
 8006fbc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc8:	82bb      	strh	r3, [r7, #20]
      break;
 8006fca:	e002      	b.n	8006fd2 <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	74fb      	strb	r3, [r7, #19]
      break;
 8006fd0:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8006fd2:	8abb      	ldrh	r3, [r7, #20]
 8006fd4:	f023 030f 	bic.w	r3, r3, #15
 8006fd8:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fda:	8abb      	ldrh	r3, [r7, #20]
 8006fdc:	105b      	asrs	r3, r3, #1
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	897b      	ldrh	r3, [r7, #10]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	897a      	ldrh	r2, [r7, #10]
 8006ff2:	60da      	str	r2, [r3, #12]
 8006ff4:	e067      	b.n	80070c6 <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d861      	bhi.n	80070c0 <UART_SetConfig+0x4c4>
 8006ffc:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <UART_SetConfig+0x408>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	08007029 	.word	0x08007029
 8007008:	08007049 	.word	0x08007049
 800700c:	08007069 	.word	0x08007069
 8007010:	080070c1 	.word	0x080070c1
 8007014:	08007085 	.word	0x08007085
 8007018:	080070c1 	.word	0x080070c1
 800701c:	080070c1 	.word	0x080070c1
 8007020:	080070c1 	.word	0x080070c1
 8007024:	080070a5 	.word	0x080070a5
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681c      	ldr	r4, [r3, #0]
 800702c:	f7fe fc7a 	bl	8005924 <HAL_RCC_GetPCLK1Freq>
 8007030:	4602      	mov	r2, r0
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	085b      	lsrs	r3, r3, #1
 8007038:	441a      	add	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007042:	b29b      	uxth	r3, r3
 8007044:	60e3      	str	r3, [r4, #12]
      break;
 8007046:	e03e      	b.n	80070c6 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681c      	ldr	r4, [r3, #0]
 800704c:	f7fe fc7e 	bl	800594c <HAL_RCC_GetPCLK2Freq>
 8007050:	4602      	mov	r2, r0
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	085b      	lsrs	r3, r3, #1
 8007058:	441a      	add	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007062:	b29b      	uxth	r3, r3
 8007064:	60e3      	str	r3, [r4, #12]
      break;
 8007066:	e02e      	b.n	80070c6 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	0859      	lsrs	r1, r3, #1
 8007072:	4b18      	ldr	r3, [pc, #96]	; (80070d4 <UART_SetConfig+0x4d8>)
 8007074:	440b      	add	r3, r1
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	6849      	ldr	r1, [r1, #4]
 800707a:	fbb3 f3f1 	udiv	r3, r3, r1
 800707e:	b29b      	uxth	r3, r3
 8007080:	60d3      	str	r3, [r2, #12]
      break;
 8007082:	e020      	b.n	80070c6 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681c      	ldr	r4, [r3, #0]
 8007088:	f7fe fb8a 	bl	80057a0 <HAL_RCC_GetSysClockFreq>
 800708c:	4602      	mov	r2, r0
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	085b      	lsrs	r3, r3, #1
 8007094:	441a      	add	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	fbb2 f3f3 	udiv	r3, r2, r3
 800709e:	b29b      	uxth	r3, r3
 80070a0:	60e3      	str	r3, [r4, #12]
      break;
 80070a2:	e010      	b.n	80070c6 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6852      	ldr	r2, [r2, #4]
 80070ac:	0852      	lsrs	r2, r2, #1
 80070ae:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	6852      	ldr	r2, [r2, #4]
 80070b6:	fbb1 f2f2 	udiv	r2, r1, r2
 80070ba:	b292      	uxth	r2, r2
 80070bc:	60da      	str	r2, [r3, #12]
      break;
 80070be:	e002      	b.n	80070c6 <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	74fb      	strb	r3, [r7, #19]
      break;
 80070c4:	bf00      	nop
    }
  }

  return ret;
 80070c6:	7cfb      	ldrb	r3, [r7, #19]

}
 80070c8:	4618      	mov	r0, r3
 80070ca:	371c      	adds	r7, #28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd90      	pop	{r4, r7, pc}
 80070d0:	01e84800 	.word	0x01e84800
 80070d4:	00f42400 	.word	0x00f42400

080070d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	6812      	ldr	r2, [r2, #0]
 80070f4:	6852      	ldr	r2, [r2, #4]
 80070f6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6812      	ldr	r2, [r2, #0]
 8007116:	6852      	ldr	r2, [r2, #4]
 8007118:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007120:	430a      	orrs	r2, r1
 8007122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6812      	ldr	r2, [r2, #0]
 8007138:	6852      	ldr	r2, [r2, #4]
 800713a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007142:	430a      	orrs	r2, r1
 8007144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6812      	ldr	r2, [r2, #0]
 800715a:	6852      	ldr	r2, [r2, #4]
 800715c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007164:	430a      	orrs	r2, r1
 8007166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6812      	ldr	r2, [r2, #0]
 800717c:	6892      	ldr	r2, [r2, #8]
 800717e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007186:	430a      	orrs	r2, r1
 8007188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6812      	ldr	r2, [r2, #0]
 800719e:	6892      	ldr	r2, [r2, #8]
 80071a0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80071a8:	430a      	orrs	r2, r1
 80071aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01a      	beq.n	80071ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6812      	ldr	r2, [r2, #0]
 80071c0:	6852      	ldr	r2, [r2, #4]
 80071c2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d6:	d10a      	bne.n	80071ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6812      	ldr	r2, [r2, #0]
 80071e0:	6852      	ldr	r2, [r2, #4]
 80071e2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6812      	ldr	r2, [r2, #0]
 8007202:	6852      	ldr	r2, [r2, #4]
 8007204:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800720c:	430a      	orrs	r2, r1
 800720e:	605a      	str	r2, [r3, #4]
  }
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af02      	add	r7, sp, #8
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800722e:	f7fa fcf9 	bl	8001c24 <HAL_GetTick>
 8007232:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0308 	and.w	r3, r3, #8
 800723e:	2b08      	cmp	r3, #8
 8007240:	d10e      	bne.n	8007260 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007242:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff fc89 	bl	8006b68 <UART_WaitOnFlagUntilTimeout>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e00c      	b.n	800727a <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d027      	beq.n	80072ee <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4b2f      	ldr	r3, [pc, #188]	; (8007364 <FMC_SDRAM_Init+0xe0>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072b4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80072ba:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80072c0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80072c6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80072cc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80072d2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80072d8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80072de:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	e032      	b.n	8007354 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072fa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007304:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800730a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	4b12      	ldr	r3, [pc, #72]	; (8007364 <FMC_SDRAM_Init+0xe0>)
 800731c:	4013      	ands	r3, r2
 800731e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007328:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800732e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007334:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800733a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007340:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	4313      	orrs	r3, r2
 8007346:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	ffff8000 	.word	0xffff8000

08007368 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d02e      	beq.n	80073e0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800738e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	3b01      	subs	r3, #1
 800739c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800739e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80073a8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80073b2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80073bc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80073c6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80073d0:	4313      	orrs	r3, r2
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	609a      	str	r2, [r3, #8]
 80073de:	e039      	b.n	8007454 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	4b1e      	ldr	r3, [pc, #120]	; (8007464 <FMC_SDRAM_Timing_Init+0xfc>)
 80073ea:	4013      	ands	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80073fe:	4313      	orrs	r3, r2
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007412:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	3b01      	subs	r3, #1
 8007420:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007422:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	3b01      	subs	r3, #1
 800742a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800742c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	3b01      	subs	r3, #1
 8007434:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007436:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	3b01      	subs	r3, #1
 800743e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007440:	4313      	orrs	r3, r2
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	371c      	adds	r7, #28
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	ff0f0fff 	.word	0xff0f0fff

08007468 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007480:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	3b01      	subs	r3, #1
 8007488:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800748a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007492:	4313      	orrs	r3, r2
 8007494:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	371c      	adds	r7, #28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
	...

080074ac <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074ac:	b084      	sub	sp, #16
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	f107 0014 	add.w	r0, r7, #20
 80074ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d11e      	bne.n	8007502 <USB_CoreInit+0x56>
  {

    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	4b1d      	ldr	r3, [pc, #116]	; (800754c <USB_CoreInit+0xa0>)
 80074d6:	4013      	ands	r3, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1)
 80074e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d105      	bne.n	80074fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 f9a4 	bl	8008848 <USB_CoreReset>
 8007500:	e00c      	b.n	800751c <USB_CoreInit+0x70>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 f99a 	bl	8008848 <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800751a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(cfg.dma_enable == ENABLE)
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d10b      	bne.n	800753a <USB_CoreInit+0x8e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f043 0206 	orr.w	r2, r3, #6
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f043 0220 	orr.w	r2, r3, #32
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007546:	b004      	add	sp, #16
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	ffbdffbf 	.word	0xffbdffbf

08007550 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f043 0201 	orr.w	r2, r3, #1
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f023 0201 	bic.w	r2, r3, #1
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	60da      	str	r2, [r3, #12]

  if ( mode == USB_OTG_HOST_MODE)
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d106      	bne.n	80075c0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60da      	str	r2, [r3, #12]
 80075be:	e008      	b.n	80075d2 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d105      	bne.n	80075d2 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 80075d2:	2032      	movs	r0, #50	; 0x32
 80075d4:	f7fa fb32 	bl	8001c3c <HAL_Delay>

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075e4:	b084      	sub	sp, #16
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b084      	sub	sp, #16
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	f107 001c 	add.w	r0, r7, #28
 80075f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	639a      	str	r2, [r3, #56]	; 0x38

  if (cfg.vbus_sensing_enable == 0)
 8007606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007608:	2b00      	cmp	r3, #0
 800760a:	d111      	bne.n	8007630 <USB_DevInit+0x4c>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007610:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable*/
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	601a      	str	r2, [r3, #0]
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007636:	461a      	mov	r2, r3
 8007638:	2300      	movs	r3, #0
 800763a:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007642:	461a      	mov	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6013      	str	r3, [r2, #0]

  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	2b01      	cmp	r3, #1
 8007652:	d10c      	bne.n	800766e <USB_DevInit+0x8a>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	2b00      	cmp	r3, #0
 8007658:	d104      	bne.n	8007664 <USB_DevInit+0x80>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 800765a:	2100      	movs	r1, #0
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f957 	bl	8007910 <USB_SetDevSpeed>
 8007662:	e018      	b.n	8007696 <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8007664:	2101      	movs	r1, #1
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f952 	bl	8007910 <USB_SetDevSpeed>
 800766c:	e013      	b.n	8007696 <USB_DevInit+0xb2>
    }
  }

  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	2b03      	cmp	r3, #3
 8007672:	d10c      	bne.n	800768e <USB_DevInit+0xaa>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	2b00      	cmp	r3, #0
 8007678:	d104      	bne.n	8007684 <USB_DevInit+0xa0>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 800767a:	2100      	movs	r1, #0
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f947 	bl	8007910 <USB_SetDevSpeed>
 8007682:	e008      	b.n	8007696 <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8007684:	2101      	movs	r1, #1
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f942 	bl	8007910 <USB_SetDevSpeed>
 800768c:	e003      	b.n	8007696 <USB_DevInit+0xb2>
  }

  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800768e:	2103      	movs	r1, #3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f93d 	bl	8007910 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8007696:	2110      	movs	r1, #16
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f8f1 	bl	8007880 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f914 	bl	80078cc <USB_FlushRxFifo>

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076aa:	461a      	mov	r2, r3
 80076ac:	2300      	movs	r3, #0
 80076ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b6:	461a      	mov	r2, r3
 80076b8:	2300      	movs	r3, #0
 80076ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c2:	461a      	mov	r2, r3
 80076c4:	f04f 33ff 	mov.w	r3, #4294967295
 80076c8:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d0:	461a      	mov	r2, r3
 80076d2:	2300      	movs	r3, #0
 80076d4:	61d3      	str	r3, [r2, #28]

  for (i = 0; i < cfg.dev_endpoints; i++)
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]
 80076da:	e034      	b.n	8007746 <USB_DevInit+0x162>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076f2:	d10a      	bne.n	800770a <USB_DevInit+0x126>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007700:	461a      	mov	r2, r3
 8007702:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	e008      	b.n	800771c <USB_DevInit+0x138>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007716:	461a      	mov	r2, r3
 8007718:	2300      	movs	r3, #0
 800771a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007728:	461a      	mov	r2, r3
 800772a:	2300      	movs	r3, #0
 800772c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773a:	461a      	mov	r2, r3
 800773c:	23ff      	movs	r3, #255	; 0xff
 800773e:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3301      	adds	r3, #1
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	429a      	cmp	r2, r3
 800774c:	d8c6      	bhi.n	80076dc <USB_DevInit+0xf8>
  }

  for (i = 0; i < cfg.dev_endpoints; i++)
 800774e:	2300      	movs	r3, #0
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	e034      	b.n	80077be <USB_DevInit+0x1da>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800776a:	d10a      	bne.n	8007782 <USB_DevInit+0x19e>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007778:	461a      	mov	r2, r3
 800777a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	e008      	b.n	8007794 <USB_DevInit+0x1b0>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778e:	461a      	mov	r2, r3
 8007790:	2300      	movs	r3, #0
 8007792:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a0:	461a      	mov	r2, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b2:	461a      	mov	r2, r3
 80077b4:	23ff      	movs	r3, #255	; 0xff
 80077b6:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3301      	adds	r3, #1
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d8c6      	bhi.n	8007754 <USB_DevInit+0x170>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077cc:	461a      	mov	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077da:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1)
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d115      	bne.n	800780e <USB_DevInit+0x22a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e8:	461a      	mov	r2, r3
 80077ea:	4b21      	ldr	r3, [pc, #132]	; (8007870 <USB_DevInit+0x28c>)
 80077ec:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f4:	4619      	mov	r1, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077fe:	4b1d      	ldr	r3, [pc, #116]	; (8007874 <USB_DevInit+0x290>)
 8007800:	4313      	orrs	r3, r2
 8007802:	630b      	str	r3, [r1, #48]	; 0x30

    i= USBx_DEVICE->DTHRCTL;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800781a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <USB_DevInit+0x24a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	f043 0210 	orr.w	r2, r3, #16
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	4b11      	ldr	r3, [pc, #68]	; (8007878 <USB_DevInit+0x294>)
 8007834:	4313      	orrs	r3, r2
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 800783a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <USB_DevInit+0x268>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	f043 0208 	orr.w	r2, r3, #8
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800784c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800784e:	2b01      	cmp	r3, #1
 8007850:	d105      	bne.n	800785e <USB_DevInit+0x27a>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	4b09      	ldr	r3, [pc, #36]	; (800787c <USB_DevInit+0x298>)
 8007858:	4313      	orrs	r3, r2
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	6193      	str	r3, [r2, #24]
  }

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800786a:	b004      	add	sp, #16
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	00800100 	.word	0x00800100
 8007874:	00010003 	.word	0x00010003
 8007878:	803c3800 	.word	0x803c3800
 800787c:	40000004 	.word	0x40000004

08007880 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	019b      	lsls	r3, r3, #6
 8007892:	f043 0220 	orr.w	r2, r3, #32
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3301      	adds	r3, #1
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4a09      	ldr	r2, [pc, #36]	; (80078c8 <USB_FlushTxFifo+0x48>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d901      	bls.n	80078ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e006      	b.n	80078ba <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	f003 0320 	and.w	r3, r3, #32
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d0f0      	beq.n	800789a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	00030d40 	.word	0x00030d40

080078cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2210      	movs	r2, #16
 80078dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3301      	adds	r3, #1
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4a09      	ldr	r2, [pc, #36]	; (800790c <USB_FlushRxFifo+0x40>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d901      	bls.n	80078f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e006      	b.n	80078fe <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b10      	cmp	r3, #16
 80078fa:	d0f0      	beq.n	80078de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	00030d40 	.word	0x00030d40

08007910 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	460b      	mov	r3, r1
 800791a:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007922:	4619      	mov	r1, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	4313      	orrs	r3, r2
 8007930:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	73fb      	strb	r3, [r7, #15]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f003 0306 	and.w	r3, r3, #6
 8007958:	2b00      	cmp	r3, #0
 800795a:	d102      	bne.n	8007962 <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 800795c:	2300      	movs	r3, #0
 800795e:	73fb      	strb	r3, [r7, #15]
 8007960:	e01c      	b.n	800799c <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f003 0306 	and.w	r3, r3, #6
 800796e:	2b02      	cmp	r3, #2
 8007970:	d007      	beq.n	8007982 <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800797e:	2b06      	cmp	r3, #6
 8007980:	d102      	bne.n	8007988 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8007982:	2303      	movs	r3, #3
 8007984:	73fb      	strb	r3, [r7, #15]
 8007986:	e009      	b.n	800799c <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 0306 	and.w	r3, r3, #6
 8007994:	2b04      	cmp	r3, #4
 8007996:	d101      	bne.n	800799c <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8007998:	2302      	movs	r3, #2
 800799a:	73fb      	strb	r3, [r7, #15]
  }

  return speed;
 800799c:	7bfb      	ldrb	r3, [r7, #15]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
	...

080079ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	785b      	ldrb	r3, [r3, #1]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d13c      	bne.n	8007a38 <USB_ActivateEndpoint+0x8c>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c4:	4619      	mov	r1, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079cc:	69da      	ldr	r2, [r3, #28]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	4618      	mov	r0, r3
 80079d4:	2301      	movs	r3, #1
 80079d6:	4083      	lsls	r3, r0
 80079d8:	b29b      	uxth	r3, r3
 80079da:	4313      	orrs	r3, r2
 80079dc:	61cb      	str	r3, [r1, #28]

    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d158      	bne.n	8007aa8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a04:	4618      	mov	r0, r3
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	78c9      	ldrb	r1, [r1, #3]
 8007a22:	0489      	lsls	r1, r1, #18
 8007a24:	430b      	orrs	r3, r1
        ((ep->num) << 22 ) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP));
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	7809      	ldrb	r1, [r1, #0]
 8007a2a:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007a2c:	430b      	orrs	r3, r1
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	4b21      	ldr	r3, [pc, #132]	; (8007ab8 <USB_ActivateEndpoint+0x10c>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	6003      	str	r3, [r0, #0]
 8007a36:	e037      	b.n	8007aa8 <USB_ActivateEndpoint+0xfc>
    }

  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3e:	4619      	mov	r1, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	7812      	ldrb	r2, [r2, #0]
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	2201      	movs	r2, #1
 8007a50:	4082      	lsls	r2, r0
 8007a52:	0412      	lsls	r2, r2, #16
 8007a54:	4313      	orrs	r3, r2
 8007a56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	015a      	lsls	r2, r3, #5
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d11b      	bne.n	8007aa8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7e:	4618      	mov	r0, r3
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	78c9      	ldrb	r1, [r1, #3]
 8007a9c:	0489      	lsls	r1, r1, #18
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	4b05      	ldr	r3, [pc, #20]	; (8007ab8 <USB_ActivateEndpoint+0x10c>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    }
  }
  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	10008000 	.word	0x10008000

08007abc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	785b      	ldrb	r3, [r3, #1]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d135      	bne.n	8007b3a <USB_DeactivateEndpoint+0x7e>
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	4083      	lsls	r3, r0
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	43db      	mvns	r3, r3
 8007aec:	4013      	ands	r3, r2
 8007aee:	63cb      	str	r3, [r1, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af6:	4619      	mov	r1, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afe:	69da      	ldr	r2, [r3, #28]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	4618      	mov	r0, r3
 8007b06:	2301      	movs	r3, #1
 8007b08:	4083      	lsls	r3, r0
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	43db      	mvns	r3, r3
 8007b0e:	4013      	ands	r3, r2
 8007b10:	61cb      	str	r3, [r1, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b20:	4619      	mov	r1, r3
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b36:	600b      	str	r3, [r1, #0]
 8007b38:	e034      	b.n	8007ba4 <USB_DeactivateEndpoint+0xe8>
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b40:	4619      	mov	r1, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	2301      	movs	r3, #1
 8007b52:	4083      	lsls	r3, r0
 8007b54:	041b      	lsls	r3, r3, #16
 8007b56:	43db      	mvns	r3, r3
 8007b58:	4013      	ands	r3, r2
 8007b5a:	63cb      	str	r3, [r1, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b62:	4619      	mov	r1, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6a:	69da      	ldr	r2, [r3, #28]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	2301      	movs	r3, #1
 8007b74:	4083      	lsls	r3, r0
 8007b76:	041b      	lsls	r3, r3, #16
 8007b78:	43db      	mvns	r3, r3
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	61cb      	str	r3, [r1, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ba2:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af02      	add	r7, sp, #8
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	82fb      	strh	r3, [r7, #22]

  /* IN endpoint */
  if (ep->is_in == 1)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	f040 8148 	bne.w	8007e60 <USB_EPStartXfer+0x2ac>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d139      	bne.n	8007c4c <USB_EPStartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be6:	4619      	mov	r1, r3
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	4b96      	ldr	r3, [pc, #600]	; (8007e54 <USB_EPStartXfer+0x2a0>)
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c22:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c32:	4619      	mov	r1, r3
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c42:	691a      	ldr	r2, [r3, #16]
 8007c44:	4b84      	ldr	r3, [pc, #528]	; (8007e58 <USB_EPStartXfer+0x2a4>)
 8007c46:	4013      	ands	r3, r2
 8007c48:	610b      	str	r3, [r1, #16]
 8007c4a:	e084      	b.n	8007d56 <USB_EPStartXfer+0x1a2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	4b7a      	ldr	r3, [pc, #488]	; (8007e58 <USB_EPStartXfer+0x2a4>)
 8007c6e:	4013      	ands	r3, r2
 8007c70:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c80:	4619      	mov	r1, r3
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c90:	691a      	ldr	r2, [r3, #16]
 8007c92:	4b70      	ldr	r3, [pc, #448]	; (8007e54 <USB_EPStartXfer+0x2a0>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	6959      	ldr	r1, [r3, #20]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	440b      	add	r3, r1
 8007cc2:	1e59      	subs	r1, r3, #1
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ccc:	04d9      	lsls	r1, r3, #19
 8007cce:	4b63      	ldr	r3, [pc, #396]	; (8007e5c <USB_EPStartXfer+0x2a8>)
 8007cd0:	400b      	ands	r3, r1
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf4:	691a      	ldr	r2, [r3, #16]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	78db      	ldrb	r3, [r3, #3]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d125      	bne.n	8007d56 <USB_EPStartXfer+0x1a2>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d18:	4619      	mov	r1, r3
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	015a      	lsls	r2, r3, #5
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4413      	add	r3, r2
 8007d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007d2e:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29));
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3e:	4619      	mov	r1, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d54:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1)
 8007d56:	79fb      	ldrb	r3, [r7, #7]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d10b      	bne.n	8007d74 <USB_EPStartXfer+0x1c0>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	6153      	str	r3, [r2, #20]
 8007d72:	e016      	b.n	8007da2 <USB_EPStartXfer+0x1ee>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	78db      	ldrb	r3, [r3, #3]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d012      	beq.n	8007da2 <USB_EPStartXfer+0x1ee>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00e      	beq.n	8007da2 <USB_EPStartXfer+0x1ee>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	7812      	ldrb	r2, [r2, #0]
 8007d98:	4610      	mov	r0, r2
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	4082      	lsls	r2, r0
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	78db      	ldrb	r3, [r3, #3]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d12e      	bne.n	8007e08 <USB_EPStartXfer+0x254>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d113      	bne.n	8007de2 <USB_EPStartXfer+0x22e>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc8:	4619      	mov	r1, r3
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dde:	600b      	str	r3, [r1, #0]
 8007de0:	e012      	b.n	8007e08 <USB_EPStartXfer+0x254>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df0:	4619      	mov	r1, r3
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e06:	600b      	str	r3, [r1, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	015a      	lsls	r2, r3, #5
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e16:	4619      	mov	r1, r3
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e2c:	600b      	str	r3, [r1, #0]

    if (ep->type == EP_TYPE_ISOC)
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	78db      	ldrb	r3, [r3, #3]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	f040 80f7 	bne.w	8008026 <USB_EPStartXfer+0x472>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	68d9      	ldr	r1, [r3, #12]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	b298      	uxth	r0, r3
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 fa51 	bl	80082f4 <USB_WritePacket>
 8007e52:	e0e8      	b.n	8008026 <USB_EPStartXfer+0x472>
 8007e54:	e007ffff 	.word	0xe007ffff
 8007e58:	fff80000 	.word	0xfff80000
 8007e5c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6e:	4619      	mov	r1, r3
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7e:	691a      	ldr	r2, [r3, #16]
 8007e80:	4b6b      	ldr	r3, [pc, #428]	; (8008030 <USB_EPStartXfer+0x47c>)
 8007e82:	4013      	ands	r3, r2
 8007e84:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e94:	4619      	mov	r1, r3
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea4:	691a      	ldr	r2, [r3, #16]
 8007ea6:	4b63      	ldr	r3, [pc, #396]	; (8008034 <USB_EPStartXfer+0x480>)
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0)
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d129      	bne.n	8007f08 <USB_EPStartXfer+0x354>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed2:	691a      	ldr	r2, [r3, #16]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007edc:	4313      	orrs	r3, r2
 8007ede:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	015a      	lsls	r2, r3, #5
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eee:	4619      	mov	r1, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f04:	610b      	str	r3, [r1, #16]
 8007f06:	e03a      	b.n	8007f7e <USB_EPStartXfer+0x3ca>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	695a      	ldr	r2, [r3, #20]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	4413      	add	r3, r2
 8007f12:	1e5a      	subs	r2, r3, #1
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f1c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3c:	691a      	ldr	r2, [r3, #16]
 8007f3e:	8afb      	ldrh	r3, [r7, #22]
 8007f40:	04db      	lsls	r3, r3, #19
 8007f42:	4618      	mov	r0, r3
 8007f44:	4b3c      	ldr	r3, [pc, #240]	; (8008038 <USB_EPStartXfer+0x484>)
 8007f46:	4003      	ands	r3, r0
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6a:	691a      	ldr	r2, [r3, #16]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	8af9      	ldrh	r1, [r7, #22]
 8007f72:	fb01 f303 	mul.w	r3, r1, r3
 8007f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1)
 8007f7e:	79fb      	ldrb	r3, [r7, #7]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d10a      	bne.n	8007f9a <USB_EPStartXfer+0x3e6>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f92:	461a      	mov	r2, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	6153      	str	r3, [r2, #20]
    }

    if (ep->type == EP_TYPE_ISOC)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	78db      	ldrb	r3, [r3, #3]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d12e      	bne.n	8008000 <USB_EPStartXfer+0x44c>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d113      	bne.n	8007fda <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fd6:	600b      	str	r3, [r1, #0]
 8007fd8:	e012      	b.n	8008000 <USB_EPStartXfer+0x44c>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe8:	4619      	mov	r1, r3
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ffe:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	4413      	add	r3, r2
 800800a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800e:	4619      	mov	r1, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008024:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	fff80000 	.word	0xfff80000
 8008034:	e007ffff 	.word	0xe007ffff
 8008038:	1ff80000 	.word	0x1ff80000

0800803c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	4613      	mov	r3, r2
 8008048:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1)
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	2b01      	cmp	r3, #1
 8008050:	f040 80cd 	bne.w	80081ee <USB_EP0StartXfer+0x1b2>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d139      	bne.n	80080d0 <USB_EP0StartXfer+0x94>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806a:	4619      	mov	r1, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807a:	691a      	ldr	r2, [r3, #16]
 800807c:	4b9b      	ldr	r3, [pc, #620]	; (80082ec <USB_EP0StartXfer+0x2b0>)
 800807e:	4013      	ands	r3, r2
 8008080:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008090:	4619      	mov	r1, r3
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b6:	4619      	mov	r1, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c6:	691a      	ldr	r2, [r3, #16]
 80080c8:	4b89      	ldr	r3, [pc, #548]	; (80082f0 <USB_EP0StartXfer+0x2b4>)
 80080ca:	4013      	ands	r3, r2
 80080cc:	610b      	str	r3, [r1, #16]
 80080ce:	e058      	b.n	8008182 <USB_EP0StartXfer+0x146>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080de:	4619      	mov	r1, r3
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ee:	691a      	ldr	r2, [r3, #16]
 80080f0:	4b7f      	ldr	r3, [pc, #508]	; (80082f0 <USB_EP0StartXfer+0x2b4>)
 80080f2:	4013      	ands	r3, r2
 80080f4:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008104:	4619      	mov	r1, r3
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008114:	691a      	ldr	r2, [r3, #16]
 8008116:	4b75      	ldr	r3, [pc, #468]	; (80082ec <USB_EP0StartXfer+0x2b0>)
 8008118:	4013      	ands	r3, r2
 800811a:	610b      	str	r3, [r1, #16]

      if(ep->xfer_len > ep->maxpacket)
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	695a      	ldr	r2, [r3, #20]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	429a      	cmp	r2, r3
 8008126:	d903      	bls.n	8008130 <USB_EP0StartXfer+0xf4>
      {
        ep->xfer_len = ep->maxpacket;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813e:	4619      	mov	r1, r3
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4413      	add	r3, r2
 800814a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008154:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008164:	4619      	mov	r1, r3
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800817e:	4313      	orrs	r3, r2
 8008180:	610b      	str	r3, [r1, #16]

    }

    if (dma == 1)
 8008182:	79fb      	ldrb	r3, [r7, #7]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d10b      	bne.n	80081a0 <USB_EP0StartXfer+0x164>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008196:	461a      	mov	r2, r3
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	6153      	str	r3, [r2, #20]
 800819e:	e012      	b.n	80081c6 <USB_EP0StartXfer+0x18a>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00e      	beq.n	80081c6 <USB_EP0StartXfer+0x18a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ae:	4619      	mov	r1, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	4618      	mov	r0, r3
 80081be:	2301      	movs	r3, #1
 80081c0:	4083      	lsls	r3, r0
 80081c2:	4313      	orrs	r3, r2
 80081c4:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d4:	4619      	mov	r1, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081ea:	600b      	str	r3, [r1, #0]
 80081ec:	e077      	b.n	80082de <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fc:	4619      	mov	r1, r3
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4413      	add	r3, r2
 8008208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820c:	691a      	ldr	r2, [r3, #16]
 800820e:	4b38      	ldr	r3, [pc, #224]	; (80082f0 <USB_EP0StartXfer+0x2b4>)
 8008210:	4013      	ands	r3, r2
 8008212:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008222:	4619      	mov	r1, r3
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	4413      	add	r3, r2
 800822e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008232:	691a      	ldr	r2, [r3, #16]
 8008234:	4b2d      	ldr	r3, [pc, #180]	; (80082ec <USB_EP0StartXfer+0x2b0>)
 8008236:	4013      	ands	r3, r2
 8008238:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0)
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <USB_EP0StartXfer+0x20e>
    {
      ep->xfer_len = ep->maxpacket;
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008258:	4619      	mov	r1, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800826e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827e:	4619      	mov	r1, r3
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008298:	4313      	orrs	r3, r2
 800829a:	610b      	str	r3, [r1, #16]


    if (dma == 1)
 800829c:	79fb      	ldrb	r3, [r7, #7]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d10a      	bne.n	80082b8 <USB_EP0StartXfer+0x27c>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b0:	461a      	mov	r2, r3
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	6153      	str	r3, [r2, #20]
    }

    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	4619      	mov	r1, r3
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082dc:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	e007ffff 	.word	0xe007ffff
 80082f0:	fff80000 	.word	0xfff80000

080082f4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b087      	sub	sp, #28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	4611      	mov	r1, r2
 8008300:	461a      	mov	r2, r3
 8008302:	460b      	mov	r3, r1
 8008304:	71fb      	strb	r3, [r7, #7]
 8008306:	4613      	mov	r3, r2
 8008308:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b= 0 , i= 0;
 800830a:	2300      	movs	r3, #0
 800830c:	613b      	str	r3, [r7, #16]
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]

  if (dma == 0)
 8008312:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d11d      	bne.n	8008356 <USB_WritePacket+0x62>
  {
    count32b =  (len + 3) / 4;
 800831a:	88bb      	ldrh	r3, [r7, #4]
 800831c:	3303      	adds	r3, #3
 800831e:	2b00      	cmp	r3, #0
 8008320:	da00      	bge.n	8008324 <USB_WritePacket+0x30>
 8008322:	3303      	adds	r3, #3
 8008324:	109b      	asrs	r3, r3, #2
 8008326:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src += 4)
 8008328:	2300      	movs	r3, #0
 800832a:	617b      	str	r3, [r7, #20]
 800832c:	e00f      	b.n	800834e <USB_WritePacket+0x5a>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	031a      	lsls	r2, r3, #12
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	4413      	add	r3, r2
 8008336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800833a:	461a      	mov	r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6013      	str	r3, [r2, #0]
    for (i = 0; i < count32b; i++, src += 4)
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	3301      	adds	r3, #1
 8008346:	617b      	str	r3, [r7, #20]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	3304      	adds	r3, #4
 800834c:	60bb      	str	r3, [r7, #8]
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	429a      	cmp	r2, r3
 8008354:	d3eb      	bcc.n	800832e <USB_WritePacket+0x3a>
    }
  }
  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	4613      	mov	r3, r2
 8008370:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 8008372:	2300      	movs	r3, #0
 8008374:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	3303      	adds	r3, #3
 800837a:	2b00      	cmp	r3, #0
 800837c:	da00      	bge.n	8008380 <USB_ReadPacket+0x1c>
 800837e:	3303      	adds	r3, #3
 8008380:	109b      	asrs	r3, r3, #2
 8008382:	613b      	str	r3, [r7, #16]

  for ( i = 0; i < count32b; i++, dest += 4 )
 8008384:	2300      	movs	r3, #0
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	e00b      	b.n	80083a2 <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	3301      	adds	r3, #1
 800839a:	617b      	str	r3, [r7, #20]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	3304      	adds	r3, #4
 80083a0:	60bb      	str	r3, [r7, #8]
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d3ef      	bcc.n	800838a <USB_ReadPacket+0x26>

  }
  return ((void *)dest);
 80083aa:	68bb      	ldr	r3, [r7, #8]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	371c      	adds	r7, #28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	785b      	ldrb	r3, [r3, #1]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d130      	bne.n	800842c <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	db12      	blt.n	8008404 <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ec:	4619      	mov	r1, r3
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008402:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008412:	4619      	mov	r1, r3
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4413      	add	r3, r2
 800841e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008428:	600b      	str	r3, [r1, #0]
 800842a:	e02f      	b.n	800848c <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	db12      	blt.n	8008466 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844e:	4619      	mov	r1, r3
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4413      	add	r3, r2
 800845a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008464:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4413      	add	r3, r2
 8008470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008474:	4619      	mov	r1, r3
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800848a:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800849a:	b480      	push	{r7}
 800849c:	b083      	sub	sp, #12
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d12e      	bne.n	800850a <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ba:	4619      	mov	r1, r3
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084d0:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	78db      	ldrb	r3, [r3, #3]
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d003      	beq.n	80084e2 <USB_EPClearStall+0x48>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	78db      	ldrb	r3, [r3, #3]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d141      	bne.n	8008566 <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f0:	4619      	mov	r1, r3
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008506:	600b      	str	r3, [r1, #0]
 8008508:	e02d      	b.n	8008566 <USB_EPClearStall+0xcc>
    }
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008518:	4619      	mov	r1, r3
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800852e:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	78db      	ldrb	r3, [r3, #3]
 8008534:	2b03      	cmp	r3, #3
 8008536:	d003      	beq.n	8008540 <USB_EPClearStall+0xa6>
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	78db      	ldrb	r3, [r3, #3]
 800853c:	2b02      	cmp	r3, #2
 800853e:	d112      	bne.n	8008566 <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854e:	4619      	mov	r1, r3
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4413      	add	r3, r2
 800855a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008564:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	460b      	mov	r3, r1
 800857e:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008594:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859c:	4619      	mov	r1, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	011b      	lsls	r3, r3, #4
 80085aa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80085ae:	4313      	orrs	r3, r2
 80085b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ce:	461a      	mov	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f023 0302 	bic.w	r3, r3, #2
 80085dc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 80085de:	2003      	movs	r0, #3
 80085e0:	f7f9 fb2c 	bl	8001c3c <HAL_Delay>

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fc:	461a      	mov	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f043 0302 	orr.w	r3, r3, #2
 800860a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 800860c:	2003      	movs	r0, #3
 800860e:	f7f9 fb15 	bl	8001c3c <HAL_Delay>

  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	60fb      	str	r3, [r7, #12]

  v = USBx->GINTSTS;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	4013      	ands	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]
  return v;
 8008638:	68fb      	ldr	r3, [r7, #12]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8008646:	b480      	push	{r7}
 8008648:	b085      	sub	sp, #20
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4013      	ands	r3, r2
 8008664:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	0c1b      	lsrs	r3, r3, #16
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4013      	ands	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFF));
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	b29b      	uxth	r3, r3
}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b085      	sub	sp, #20
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	460b      	mov	r3, r1
 80086b0:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	4013      	ands	r3, r2
 80086ce:	60fb      	str	r3, [r7, #12]
  return v;
 80086d0:	68fb      	ldr	r3, [r7, #12]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80086de:	b480      	push	{r7}
 80086e0:	b087      	sub	sp, #28
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	460b      	mov	r3, r1
 80086e8:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fc:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	fa22 f303 	lsr.w	r3, r2, r3
 8008706:	01db      	lsls	r3, r3, #7
 8008708:	b2db      	uxtb	r3, r3
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	4313      	orrs	r3, r2
 800870e:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	4013      	ands	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]
  return v;
 8008724:	68fb      	ldr	r3, [r7, #12]
}
 8008726:	4618      	mov	r0, r3
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	f003 0301 	and.w	r3, r3, #1
}
 8008742:	4618      	mov	r0, r3
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
	...

08008750 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875e:	4619      	mov	r1, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	4b13      	ldr	r3, [pc, #76]	; (80087b8 <USB_ActivateSetup+0x68>)
 800876a:	4013      	ands	r3, r2
 800876c:	600b      	str	r3, [r1, #0]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f003 0306 	and.w	r3, r3, #6
 800877a:	2b04      	cmp	r3, #4
 800877c:	d10a      	bne.n	8008794 <USB_ActivateSetup+0x44>
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008784:	461a      	mov	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f043 0303 	orr.w	r3, r3, #3
 8008792:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800879a:	461a      	mov	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	fffff800 	.word	0xfffff800

080087bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	460b      	mov	r3, r1
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d0:	461a      	mov	r2, r3
 80087d2:	2300      	movs	r3, #0
 80087d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087dc:	461a      	mov	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087ea:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f2:	461a      	mov	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	f043 0318 	orr.w	r3, r3, #24
 8008800:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008808:	461a      	mov	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008816:	6113      	str	r3, [r2, #16]

  if (dma == 1)
 8008818:	7afb      	ldrb	r3, [r7, #11]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d10c      	bne.n	8008838 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008824:	461a      	mov	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008830:	461a      	mov	r2, r3
 8008832:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8008836:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
	...

08008848 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3301      	adds	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4a13      	ldr	r2, [pc, #76]	; (80088ac <USB_CoreReset+0x64>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d901      	bls.n	8008866 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e01b      	b.n	800889e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	daf2      	bge.n	8008854 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f043 0201 	orr.w	r2, r3, #1
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3301      	adds	r3, #1
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4a09      	ldr	r2, [pc, #36]	; (80088ac <USB_CoreReset+0x64>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d901      	bls.n	8008890 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e006      	b.n	800889e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	2b01      	cmp	r3, #1
 800889a:	d0f0      	beq.n	800887e <USB_CoreReset+0x36>

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	00030d40 	.word	0x00030d40

080088b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	4a08      	ldr	r2, [pc, #32]	; (80088e0 <disk_status+0x30>)
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	79fa      	ldrb	r2, [r7, #7]
 80088c8:	4905      	ldr	r1, [pc, #20]	; (80088e0 <disk_status+0x30>)
 80088ca:	440a      	add	r2, r1
 80088cc:	7b12      	ldrb	r2, [r2, #12]
 80088ce:	4610      	mov	r0, r2
 80088d0:	4798      	blx	r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	20000474 	.word	0x20000474

080088e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	4a0d      	ldr	r2, [pc, #52]	; (800892c <disk_initialize+0x48>)
 80088f6:	5cd3      	ldrb	r3, [r2, r3]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d111      	bne.n	8008920 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80088fc:	79fb      	ldrb	r3, [r7, #7]
 80088fe:	4a0b      	ldr	r2, [pc, #44]	; (800892c <disk_initialize+0x48>)
 8008900:	2101      	movs	r1, #1
 8008902:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008904:	79fb      	ldrb	r3, [r7, #7]
 8008906:	4a09      	ldr	r2, [pc, #36]	; (800892c <disk_initialize+0x48>)
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	79fa      	ldrb	r2, [r7, #7]
 8008912:	4906      	ldr	r1, [pc, #24]	; (800892c <disk_initialize+0x48>)
 8008914:	440a      	add	r2, r1
 8008916:	7b12      	ldrb	r2, [r2, #12]
 8008918:	4610      	mov	r0, r2
 800891a:	4798      	blx	r3
 800891c:	4603      	mov	r3, r0
 800891e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008920:	7bfb      	ldrb	r3, [r7, #15]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20000474 	.word	0x20000474

08008930 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008930:	b590      	push	{r4, r7, lr}
 8008932:	b087      	sub	sp, #28
 8008934:	af00      	add	r7, sp, #0
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
 800893a:	603b      	str	r3, [r7, #0]
 800893c:	4603      	mov	r3, r0
 800893e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	4a0a      	ldr	r2, [pc, #40]	; (800896c <disk_read+0x3c>)
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	689c      	ldr	r4, [r3, #8]
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	4a07      	ldr	r2, [pc, #28]	; (800896c <disk_read+0x3c>)
 8008950:	4413      	add	r3, r2
 8008952:	7b18      	ldrb	r0, [r3, #12]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	47a0      	blx	r4
 800895c:	4603      	mov	r3, r0
 800895e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008960:	7dfb      	ldrb	r3, [r7, #23]
}
 8008962:	4618      	mov	r0, r3
 8008964:	371c      	adds	r7, #28
 8008966:	46bd      	mov	sp, r7
 8008968:	bd90      	pop	{r4, r7, pc}
 800896a:	bf00      	nop
 800896c:	20000474 	.word	0x20000474

08008970 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008970:	b590      	push	{r4, r7, lr}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]
 800897a:	603b      	str	r3, [r7, #0]
 800897c:	4603      	mov	r3, r0
 800897e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008980:	7bfb      	ldrb	r3, [r7, #15]
 8008982:	4a0a      	ldr	r2, [pc, #40]	; (80089ac <disk_write+0x3c>)
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	68dc      	ldr	r4, [r3, #12]
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	4a07      	ldr	r2, [pc, #28]	; (80089ac <disk_write+0x3c>)
 8008990:	4413      	add	r3, r2
 8008992:	7b18      	ldrb	r0, [r3, #12]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	68b9      	ldr	r1, [r7, #8]
 800899a:	47a0      	blx	r4
 800899c:	4603      	mov	r3, r0
 800899e:	75fb      	strb	r3, [r7, #23]
  return res;
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	371c      	adds	r7, #28
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd90      	pop	{r4, r7, pc}
 80089aa:	bf00      	nop
 80089ac:	20000474 	.word	0x20000474

080089b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	4603      	mov	r3, r0
 80089b8:	603a      	str	r2, [r7, #0]
 80089ba:	71fb      	strb	r3, [r7, #7]
 80089bc:	460b      	mov	r3, r1
 80089be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	4a09      	ldr	r2, [pc, #36]	; (80089e8 <disk_ioctl+0x38>)
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	79fa      	ldrb	r2, [r7, #7]
 80089ce:	4906      	ldr	r1, [pc, #24]	; (80089e8 <disk_ioctl+0x38>)
 80089d0:	440a      	add	r2, r1
 80089d2:	7b10      	ldrb	r0, [r2, #12]
 80089d4:	79b9      	ldrb	r1, [r7, #6]
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	4798      	blx	r3
 80089da:	4603      	mov	r3, r0
 80089dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80089de:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	20000474 	.word	0x20000474

080089ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	3301      	adds	r3, #1
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80089fc:	89fb      	ldrh	r3, [r7, #14]
 80089fe:	021b      	lsls	r3, r3, #8
 8008a00:	b21a      	sxth	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	b21b      	sxth	r3, r3
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	b21b      	sxth	r3, r3
 8008a0c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008a0e:	89fb      	ldrh	r3, [r7, #14]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3303      	adds	r3, #3
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	021b      	lsls	r3, r3, #8
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	3202      	adds	r2, #2
 8008a34:	7812      	ldrb	r2, [r2, #0]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	3201      	adds	r2, #1
 8008a42:	7812      	ldrb	r2, [r2, #0]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	021b      	lsls	r3, r3, #8
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	7812      	ldrb	r2, [r2, #0]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]
	return rv;
 8008a54:	68fb      	ldr	r3, [r7, #12]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	887a      	ldrh	r2, [r7, #2]
 8008a76:	b2d2      	uxtb	r2, r2
 8008a78:	701a      	strb	r2, [r3, #0]
 8008a7a:	887b      	ldrh	r3, [r7, #2]
 8008a7c:	0a1b      	lsrs	r3, r3, #8
 8008a7e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	607a      	str	r2, [r7, #4]
 8008a86:	887a      	ldrh	r2, [r7, #2]
 8008a88:	b2d2      	uxtb	r2, r2
 8008a8a:	701a      	strb	r2, [r3, #0]
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	607a      	str	r2, [r7, #4]
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	b2d2      	uxtb	r2, r2
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	0a1b      	lsrs	r3, r3, #8
 8008ab2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	607a      	str	r2, [r7, #4]
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	b2d2      	uxtb	r2, r2
 8008abe:	701a      	strb	r2, [r3, #0]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	0a1b      	lsrs	r3, r3, #8
 8008ac4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	b2d2      	uxtb	r2, r2
 8008ad0:	701a      	strb	r2, [r3, #0]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	0a1b      	lsrs	r3, r3, #8
 8008ad6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	607a      	str	r2, [r7, #4]
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	b2d2      	uxtb	r2, r2
 8008ae2:	701a      	strb	r2, [r3, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00d      	beq.n	8008b26 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	617a      	str	r2, [r7, #20]
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	1c51      	adds	r1, r2, #1
 8008b14:	6139      	str	r1, [r7, #16]
 8008b16:	7812      	ldrb	r2, [r2, #0]
 8008b18:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	607b      	str	r3, [r7, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1f1      	bne.n	8008b0a <mem_cpy+0x1a>
	}
}
 8008b26:	bf00      	nop
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008b32:	b480      	push	{r7}
 8008b34:	b087      	sub	sp, #28
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	1c5a      	adds	r2, r3, #1
 8008b46:	617a      	str	r2, [r7, #20]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	b2d2      	uxtb	r2, r2
 8008b4c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	607b      	str	r3, [r7, #4]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1f3      	bne.n	8008b42 <mem_set+0x10>
}
 8008b5a:	bf00      	nop
 8008b5c:	371c      	adds	r7, #28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008b66:	b480      	push	{r7}
 8008b68:	b089      	sub	sp, #36	; 0x24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	60b9      	str	r1, [r7, #8]
 8008b70:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	61fb      	str	r3, [r7, #28]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	1c5a      	adds	r2, r3, #1
 8008b82:	61fa      	str	r2, [r7, #28]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	4619      	mov	r1, r3
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	61ba      	str	r2, [r7, #24]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	1acb      	subs	r3, r1, r3
 8008b92:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	607b      	str	r3, [r7, #4]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <mem_cmp+0x40>
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0eb      	beq.n	8008b7e <mem_cmp+0x18>

	return r;
 8008ba6:	697b      	ldr	r3, [r7, #20]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3724      	adds	r7, #36	; 0x24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008bbe:	e002      	b.n	8008bc6 <chk_chr+0x12>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	607b      	str	r3, [r7, #4]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d005      	beq.n	8008bda <chk_chr+0x26>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d1f2      	bne.n	8008bc0 <chk_chr+0xc>
	return *str;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
	...

08008bec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60bb      	str	r3, [r7, #8]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	e029      	b.n	8008c54 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008c00:	4a27      	ldr	r2, [pc, #156]	; (8008ca0 <chk_lock+0xb4>)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	011b      	lsls	r3, r3, #4
 8008c06:	4413      	add	r3, r2
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d01d      	beq.n	8008c4a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c0e:	4a24      	ldr	r2, [pc, #144]	; (8008ca0 <chk_lock+0xb4>)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	011b      	lsls	r3, r3, #4
 8008c14:	4413      	add	r3, r2
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d116      	bne.n	8008c4e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008c20:	4a1f      	ldr	r2, [pc, #124]	; (8008ca0 <chk_lock+0xb4>)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	4413      	add	r3, r2
 8008c28:	3304      	adds	r3, #4
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d10c      	bne.n	8008c4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008c34:	4a1a      	ldr	r2, [pc, #104]	; (8008ca0 <chk_lock+0xb4>)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	4413      	add	r3, r2
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d102      	bne.n	8008c4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008c48:	e007      	b.n	8008c5a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3301      	adds	r3, #1
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d9d2      	bls.n	8008c00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d109      	bne.n	8008c74 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d102      	bne.n	8008c6c <chk_lock+0x80>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d101      	bne.n	8008c70 <chk_lock+0x84>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	e010      	b.n	8008c92 <chk_lock+0xa6>
 8008c70:	2312      	movs	r3, #18
 8008c72:	e00e      	b.n	8008c92 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d108      	bne.n	8008c8c <chk_lock+0xa0>
 8008c7a:	4a09      	ldr	r2, [pc, #36]	; (8008ca0 <chk_lock+0xb4>)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	011b      	lsls	r3, r3, #4
 8008c80:	4413      	add	r3, r2
 8008c82:	330c      	adds	r3, #12
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c8a:	d101      	bne.n	8008c90 <chk_lock+0xa4>
 8008c8c:	2310      	movs	r3, #16
 8008c8e:	e000      	b.n	8008c92 <chk_lock+0xa6>
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	20000454 	.word	0x20000454

08008ca4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008caa:	2300      	movs	r3, #0
 8008cac:	607b      	str	r3, [r7, #4]
 8008cae:	e002      	b.n	8008cb6 <enq_lock+0x12>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	607b      	str	r3, [r7, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d806      	bhi.n	8008cca <enq_lock+0x26>
 8008cbc:	4a09      	ldr	r2, [pc, #36]	; (8008ce4 <enq_lock+0x40>)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	4413      	add	r3, r2
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1f2      	bne.n	8008cb0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	bf14      	ite	ne
 8008cd0:	2301      	movne	r3, #1
 8008cd2:	2300      	moveq	r3, #0
 8008cd4:	b2db      	uxtb	r3, r3
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	20000454 	.word	0x20000454

08008ce8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60fb      	str	r3, [r7, #12]
 8008cf6:	e01f      	b.n	8008d38 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008cf8:	4a41      	ldr	r2, [pc, #260]	; (8008e00 <inc_lock+0x118>)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	011b      	lsls	r3, r3, #4
 8008cfe:	4413      	add	r3, r2
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d113      	bne.n	8008d32 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008d0a:	4a3d      	ldr	r2, [pc, #244]	; (8008e00 <inc_lock+0x118>)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	011b      	lsls	r3, r3, #4
 8008d10:	4413      	add	r3, r2
 8008d12:	3304      	adds	r3, #4
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d109      	bne.n	8008d32 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008d1e:	4a38      	ldr	r2, [pc, #224]	; (8008e00 <inc_lock+0x118>)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	011b      	lsls	r3, r3, #4
 8008d24:	4413      	add	r3, r2
 8008d26:	3308      	adds	r3, #8
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d006      	beq.n	8008d40 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3301      	adds	r3, #1
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d9dc      	bls.n	8008cf8 <inc_lock+0x10>
 8008d3e:	e000      	b.n	8008d42 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008d40:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d132      	bne.n	8008dae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	e002      	b.n	8008d54 <inc_lock+0x6c>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	3301      	adds	r3, #1
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d806      	bhi.n	8008d68 <inc_lock+0x80>
 8008d5a:	4a29      	ldr	r2, [pc, #164]	; (8008e00 <inc_lock+0x118>)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	4413      	add	r3, r2
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1f2      	bne.n	8008d4e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d101      	bne.n	8008d72 <inc_lock+0x8a>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	e040      	b.n	8008df4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	4922      	ldr	r1, [pc, #136]	; (8008e00 <inc_lock+0x118>)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	011b      	lsls	r3, r3, #4
 8008d7c:	440b      	add	r3, r1
 8008d7e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	491e      	ldr	r1, [pc, #120]	; (8008e00 <inc_lock+0x118>)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	440b      	add	r3, r1
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	695a      	ldr	r2, [r3, #20]
 8008d94:	491a      	ldr	r1, [pc, #104]	; (8008e00 <inc_lock+0x118>)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	011b      	lsls	r3, r3, #4
 8008d9a:	440b      	add	r3, r1
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008da0:	4a17      	ldr	r2, [pc, #92]	; (8008e00 <inc_lock+0x118>)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	4413      	add	r3, r2
 8008da8:	330c      	adds	r3, #12
 8008daa:	2200      	movs	r2, #0
 8008dac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d009      	beq.n	8008dc8 <inc_lock+0xe0>
 8008db4:	4a12      	ldr	r2, [pc, #72]	; (8008e00 <inc_lock+0x118>)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	011b      	lsls	r3, r3, #4
 8008dba:	4413      	add	r3, r2
 8008dbc:	330c      	adds	r3, #12
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <inc_lock+0xe0>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	e015      	b.n	8008df4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d108      	bne.n	8008de0 <inc_lock+0xf8>
 8008dce:	4a0c      	ldr	r2, [pc, #48]	; (8008e00 <inc_lock+0x118>)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	011b      	lsls	r3, r3, #4
 8008dd4:	4413      	add	r3, r2
 8008dd6:	330c      	adds	r3, #12
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	e001      	b.n	8008de4 <inc_lock+0xfc>
 8008de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008de4:	4906      	ldr	r1, [pc, #24]	; (8008e00 <inc_lock+0x118>)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	011b      	lsls	r3, r3, #4
 8008dea:	440b      	add	r3, r1
 8008dec:	330c      	adds	r3, #12
 8008dee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3301      	adds	r3, #1
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	20000454 	.word	0x20000454

08008e04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	607b      	str	r3, [r7, #4]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d825      	bhi.n	8008e64 <dec_lock+0x60>
		n = Files[i].ctr;
 8008e18:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <dec_lock+0x74>)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	011b      	lsls	r3, r3, #4
 8008e1e:	4413      	add	r3, r2
 8008e20:	330c      	adds	r3, #12
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008e26:	89fb      	ldrh	r3, [r7, #14]
 8008e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e2c:	d101      	bne.n	8008e32 <dec_lock+0x2e>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008e32:	89fb      	ldrh	r3, [r7, #14]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d002      	beq.n	8008e3e <dec_lock+0x3a>
 8008e38:	89fb      	ldrh	r3, [r7, #14]
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008e3e:	4a0e      	ldr	r2, [pc, #56]	; (8008e78 <dec_lock+0x74>)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	011b      	lsls	r3, r3, #4
 8008e44:	4413      	add	r3, r2
 8008e46:	330c      	adds	r3, #12
 8008e48:	89fa      	ldrh	r2, [r7, #14]
 8008e4a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008e4c:	89fb      	ldrh	r3, [r7, #14]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d105      	bne.n	8008e5e <dec_lock+0x5a>
 8008e52:	4a09      	ldr	r2, [pc, #36]	; (8008e78 <dec_lock+0x74>)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	011b      	lsls	r3, r3, #4
 8008e58:	4413      	add	r3, r2
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	737b      	strb	r3, [r7, #13]
 8008e62:	e001      	b.n	8008e68 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008e64:	2302      	movs	r3, #2
 8008e66:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008e68:	7b7b      	ldrb	r3, [r7, #13]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	20000454 	.word	0x20000454

08008e7c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008e84:	2300      	movs	r3, #0
 8008e86:	60fb      	str	r3, [r7, #12]
 8008e88:	e010      	b.n	8008eac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008e8a:	4a0d      	ldr	r2, [pc, #52]	; (8008ec0 <clear_lock+0x44>)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	011b      	lsls	r3, r3, #4
 8008e90:	4413      	add	r3, r2
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d105      	bne.n	8008ea6 <clear_lock+0x2a>
 8008e9a:	4a09      	ldr	r2, [pc, #36]	; (8008ec0 <clear_lock+0x44>)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	011b      	lsls	r3, r3, #4
 8008ea0:	4413      	add	r3, r2
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d9eb      	bls.n	8008e8a <clear_lock+0xe>
	}
}
 8008eb2:	bf00      	nop
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	20000454 	.word	0x20000454

08008ec4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	78db      	ldrb	r3, [r3, #3]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d034      	beq.n	8008f42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008edc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	7858      	ldrb	r0, [r3, #1]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ee8:	2301      	movs	r3, #1
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	f7ff fd40 	bl	8008970 <disk_write>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d002      	beq.n	8008efc <sync_window+0x38>
			res = FR_DISK_ERR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	73fb      	strb	r3, [r7, #15]
 8008efa:	e022      	b.n	8008f42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	1ad2      	subs	r2, r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d217      	bcs.n	8008f42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	789b      	ldrb	r3, [r3, #2]
 8008f16:	613b      	str	r3, [r7, #16]
 8008f18:	e010      	b.n	8008f3c <sync_window+0x78>
					wsect += fs->fsize;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4413      	add	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7858      	ldrb	r0, [r3, #1]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f2e:	2301      	movs	r3, #1
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	f7ff fd1d 	bl	8008970 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	613b      	str	r3, [r7, #16]
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d8eb      	bhi.n	8008f1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d01b      	beq.n	8008f9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7ff ffad 	bl	8008ec4 <sync_window>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d113      	bne.n	8008f9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	7858      	ldrb	r0, [r3, #1]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f7e:	2301      	movs	r3, #1
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	f7ff fcd5 	bl	8008930 <disk_read>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d004      	beq.n	8008f96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
	...

08008fa8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff ff87 	bl	8008ec4 <sync_window>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d158      	bne.n	8009072 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d148      	bne.n	800905a <sync_fs+0xb2>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	791b      	ldrb	r3, [r3, #4]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d144      	bne.n	800905a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3330      	adds	r3, #48	; 0x30
 8008fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fd8:	2100      	movs	r1, #0
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff fda9 	bl	8008b32 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3330      	adds	r3, #48	; 0x30
 8008fe4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008fe8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7ff fd38 	bl	8008a62 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3330      	adds	r3, #48	; 0x30
 8008ff6:	4921      	ldr	r1, [pc, #132]	; (800907c <sync_fs+0xd4>)
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fd4d 	bl	8008a98 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3330      	adds	r3, #48	; 0x30
 8009002:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009006:	491e      	ldr	r1, [pc, #120]	; (8009080 <sync_fs+0xd8>)
 8009008:	4618      	mov	r0, r3
 800900a:	f7ff fd45 	bl	8008a98 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	3330      	adds	r3, #48	; 0x30
 8009012:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	4619      	mov	r1, r3
 800901c:	4610      	mov	r0, r2
 800901e:	f7ff fd3b 	bl	8008a98 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3330      	adds	r3, #48	; 0x30
 8009026:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	4619      	mov	r1, r3
 8009030:	4610      	mov	r0, r2
 8009032:	f7ff fd31 	bl	8008a98 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	7858      	ldrb	r0, [r3, #1]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904e:	2301      	movs	r3, #1
 8009050:	f7ff fc8e 	bl	8008970 <disk_write>
			fs->fsi_flag = 0;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	785b      	ldrb	r3, [r3, #1]
 800905e:	2200      	movs	r2, #0
 8009060:	2100      	movs	r1, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f7ff fca4 	bl	80089b0 <disk_ioctl>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <sync_fs+0xca>
 800906e:	2301      	movs	r3, #1
 8009070:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	41615252 	.word	0x41615252
 8009080:	61417272 	.word	0x61417272

08009084 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	3b02      	subs	r3, #2
 8009092:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	695b      	ldr	r3, [r3, #20]
 8009098:	1e9a      	subs	r2, r3, #2
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	429a      	cmp	r2, r3
 800909e:	d801      	bhi.n	80090a4 <clust2sect+0x20>
 80090a0:	2300      	movs	r3, #0
 80090a2:	e008      	b.n	80090b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	895b      	ldrh	r3, [r3, #10]
 80090a8:	461a      	mov	r2, r3
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	fb03 f202 	mul.w	r2, r3, r2
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b4:	4413      	add	r3, r2
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b086      	sub	sp, #24
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d904      	bls.n	80090e2 <get_fat+0x20>
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	695a      	ldr	r2, [r3, #20]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d802      	bhi.n	80090e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80090e2:	2301      	movs	r3, #1
 80090e4:	617b      	str	r3, [r7, #20]
 80090e6:	e08c      	b.n	8009202 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80090e8:	f04f 33ff 	mov.w	r3, #4294967295
 80090ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d045      	beq.n	8009182 <get_fat+0xc0>
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d05d      	beq.n	80091b6 <get_fat+0xf4>
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d177      	bne.n	80091ee <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	60fb      	str	r3, [r7, #12]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	085b      	lsrs	r3, r3, #1
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	4413      	add	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	6a1a      	ldr	r2, [r3, #32]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	0a5b      	lsrs	r3, r3, #9
 8009114:	4413      	add	r3, r2
 8009116:	4619      	mov	r1, r3
 8009118:	6938      	ldr	r0, [r7, #16]
 800911a:	f7ff ff17 	bl	8008f4c <move_window>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d167      	bne.n	80091f4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	60fa      	str	r2, [r7, #12]
 800912a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	4413      	add	r3, r2
 8009132:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009136:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	6a1a      	ldr	r2, [r3, #32]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	0a5b      	lsrs	r3, r3, #9
 8009140:	4413      	add	r3, r2
 8009142:	4619      	mov	r1, r3
 8009144:	6938      	ldr	r0, [r7, #16]
 8009146:	f7ff ff01 	bl	8008f4c <move_window>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d153      	bne.n	80091f8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	4413      	add	r3, r2
 800915a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800915e:	021b      	lsls	r3, r3, #8
 8009160:	461a      	mov	r2, r3
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	4313      	orrs	r3, r2
 8009166:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <get_fat+0xb6>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	091b      	lsrs	r3, r3, #4
 8009176:	e002      	b.n	800917e <get_fat+0xbc>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800917e:	617b      	str	r3, [r7, #20]
			break;
 8009180:	e03f      	b.n	8009202 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	6a1a      	ldr	r2, [r3, #32]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	0a1b      	lsrs	r3, r3, #8
 800918a:	4413      	add	r3, r2
 800918c:	4619      	mov	r1, r3
 800918e:	6938      	ldr	r0, [r7, #16]
 8009190:	f7ff fedc 	bl	8008f4c <move_window>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d130      	bne.n	80091fc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80091a8:	4413      	add	r3, r2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7ff fc1e 	bl	80089ec <ld_word>
 80091b0:	4603      	mov	r3, r0
 80091b2:	617b      	str	r3, [r7, #20]
			break;
 80091b4:	e025      	b.n	8009202 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	6a1a      	ldr	r2, [r3, #32]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	09db      	lsrs	r3, r3, #7
 80091be:	4413      	add	r3, r2
 80091c0:	4619      	mov	r1, r3
 80091c2:	6938      	ldr	r0, [r7, #16]
 80091c4:	f7ff fec2 	bl	8008f4c <move_window>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d118      	bne.n	8009200 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80091dc:	4413      	add	r3, r2
 80091de:	4618      	mov	r0, r3
 80091e0:	f7ff fc1c 	bl	8008a1c <ld_dword>
 80091e4:	4603      	mov	r3, r0
 80091e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80091ea:	617b      	str	r3, [r7, #20]
			break;
 80091ec:	e009      	b.n	8009202 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80091ee:	2301      	movs	r3, #1
 80091f0:	617b      	str	r3, [r7, #20]
 80091f2:	e006      	b.n	8009202 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091f4:	bf00      	nop
 80091f6:	e004      	b.n	8009202 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091f8:	bf00      	nop
 80091fa:	e002      	b.n	8009202 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80091fc:	bf00      	nop
 80091fe:	e000      	b.n	8009202 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009200:	bf00      	nop
		}
	}

	return val;
 8009202:	697b      	ldr	r3, [r7, #20]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800920c:	b590      	push	{r4, r7, lr}
 800920e:	b089      	sub	sp, #36	; 0x24
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009218:	2302      	movs	r3, #2
 800921a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b01      	cmp	r3, #1
 8009220:	f240 80d6 	bls.w	80093d0 <put_fat+0x1c4>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	695a      	ldr	r2, [r3, #20]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	429a      	cmp	r2, r3
 800922c:	f240 80d0 	bls.w	80093d0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b02      	cmp	r3, #2
 8009236:	d073      	beq.n	8009320 <put_fat+0x114>
 8009238:	2b03      	cmp	r3, #3
 800923a:	f000 8091 	beq.w	8009360 <put_fat+0x154>
 800923e:	2b01      	cmp	r3, #1
 8009240:	f040 80c6 	bne.w	80093d0 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	61bb      	str	r3, [r7, #24]
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	085b      	lsrs	r3, r3, #1
 800924c:	69ba      	ldr	r2, [r7, #24]
 800924e:	4413      	add	r3, r2
 8009250:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6a1a      	ldr	r2, [r3, #32]
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	0a5b      	lsrs	r3, r3, #9
 800925a:	4413      	add	r3, r2
 800925c:	4619      	mov	r1, r3
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f7ff fe74 	bl	8008f4c <move_window>
 8009264:	4603      	mov	r3, r0
 8009266:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009268:	7ffb      	ldrb	r3, [r7, #31]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f040 80a9 	bne.w	80093c2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	1c59      	adds	r1, r3, #1
 800927a:	61b9      	str	r1, [r7, #24]
 800927c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009280:	4413      	add	r3, r2
 8009282:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00d      	beq.n	80092aa <put_fat+0x9e>
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	b25b      	sxtb	r3, r3
 8009294:	f003 030f 	and.w	r3, r3, #15
 8009298:	b25a      	sxtb	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	011b      	lsls	r3, r3, #4
 80092a0:	b25b      	sxtb	r3, r3
 80092a2:	4313      	orrs	r3, r2
 80092a4:	b25b      	sxtb	r3, r3
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	e001      	b.n	80092ae <put_fat+0xa2>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2201      	movs	r2, #1
 80092b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6a1a      	ldr	r2, [r3, #32]
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	0a5b      	lsrs	r3, r3, #9
 80092c0:	4413      	add	r3, r2
 80092c2:	4619      	mov	r1, r3
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f7ff fe41 	bl	8008f4c <move_window>
 80092ca:	4603      	mov	r3, r0
 80092cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80092ce:	7ffb      	ldrb	r3, [r7, #31]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d178      	bne.n	80093c6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e0:	4413      	add	r3, r2
 80092e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f003 0301 	and.w	r3, r3, #1
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <put_fat+0xea>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	091b      	lsrs	r3, r3, #4
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	e00e      	b.n	8009314 <put_fat+0x108>
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	b25b      	sxtb	r3, r3
 80092fc:	f023 030f 	bic.w	r3, r3, #15
 8009300:	b25a      	sxtb	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	0a1b      	lsrs	r3, r3, #8
 8009306:	b25b      	sxtb	r3, r3
 8009308:	f003 030f 	and.w	r3, r3, #15
 800930c:	b25b      	sxtb	r3, r3
 800930e:	4313      	orrs	r3, r2
 8009310:	b25b      	sxtb	r3, r3
 8009312:	b2db      	uxtb	r3, r3
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2201      	movs	r2, #1
 800931c:	70da      	strb	r2, [r3, #3]
			break;
 800931e:	e057      	b.n	80093d0 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6a1a      	ldr	r2, [r3, #32]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	0a1b      	lsrs	r3, r3, #8
 8009328:	4413      	add	r3, r2
 800932a:	4619      	mov	r1, r3
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f7ff fe0d 	bl	8008f4c <move_window>
 8009332:	4603      	mov	r3, r0
 8009334:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009336:	7ffb      	ldrb	r3, [r7, #31]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d146      	bne.n	80093ca <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	005b      	lsls	r3, r3, #1
 8009346:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800934a:	4413      	add	r3, r2
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	b292      	uxth	r2, r2
 8009350:	4611      	mov	r1, r2
 8009352:	4618      	mov	r0, r3
 8009354:	f7ff fb85 	bl	8008a62 <st_word>
			fs->wflag = 1;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2201      	movs	r2, #1
 800935c:	70da      	strb	r2, [r3, #3]
			break;
 800935e:	e037      	b.n	80093d0 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a1a      	ldr	r2, [r3, #32]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	09db      	lsrs	r3, r3, #7
 8009368:	4413      	add	r3, r2
 800936a:	4619      	mov	r1, r3
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f7ff fded 	bl	8008f4c <move_window>
 8009372:	4603      	mov	r3, r0
 8009374:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009376:	7ffb      	ldrb	r3, [r7, #31]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d128      	bne.n	80093ce <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009390:	4413      	add	r3, r2
 8009392:	4618      	mov	r0, r3
 8009394:	f7ff fb42 	bl	8008a1c <ld_dword>
 8009398:	4603      	mov	r3, r0
 800939a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800939e:	4323      	orrs	r3, r4
 80093a0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80093b0:	4413      	add	r3, r2
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7ff fb6f 	bl	8008a98 <st_dword>
			fs->wflag = 1;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2201      	movs	r2, #1
 80093be:	70da      	strb	r2, [r3, #3]
			break;
 80093c0:	e006      	b.n	80093d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80093c2:	bf00      	nop
 80093c4:	e004      	b.n	80093d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80093c6:	bf00      	nop
 80093c8:	e002      	b.n	80093d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80093ca:	bf00      	nop
 80093cc:	e000      	b.n	80093d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80093ce:	bf00      	nop
		}
	}
	return res;
 80093d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3724      	adds	r7, #36	; 0x24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd90      	pop	{r4, r7, pc}

080093da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b088      	sub	sp, #32
 80093de:	af00      	add	r7, sp, #0
 80093e0:	60f8      	str	r0, [r7, #12]
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d904      	bls.n	8009400 <remove_chain+0x26>
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	695a      	ldr	r2, [r3, #20]
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d801      	bhi.n	8009404 <remove_chain+0x2a>
 8009400:	2302      	movs	r3, #2
 8009402:	e04b      	b.n	800949c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00c      	beq.n	8009424 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800940a:	f04f 32ff 	mov.w	r2, #4294967295
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	69b8      	ldr	r0, [r7, #24]
 8009412:	f7ff fefb 	bl	800920c <put_fat>
 8009416:	4603      	mov	r3, r0
 8009418:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800941a:	7ffb      	ldrb	r3, [r7, #31]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d001      	beq.n	8009424 <remove_chain+0x4a>
 8009420:	7ffb      	ldrb	r3, [r7, #31]
 8009422:	e03b      	b.n	800949c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009424:	68b9      	ldr	r1, [r7, #8]
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f7ff fe4b 	bl	80090c2 <get_fat>
 800942c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d031      	beq.n	8009498 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d101      	bne.n	800943e <remove_chain+0x64>
 800943a:	2302      	movs	r3, #2
 800943c:	e02e      	b.n	800949c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009444:	d101      	bne.n	800944a <remove_chain+0x70>
 8009446:	2301      	movs	r3, #1
 8009448:	e028      	b.n	800949c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800944a:	2200      	movs	r2, #0
 800944c:	68b9      	ldr	r1, [r7, #8]
 800944e:	69b8      	ldr	r0, [r7, #24]
 8009450:	f7ff fedc 	bl	800920c <put_fat>
 8009454:	4603      	mov	r3, r0
 8009456:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009458:	7ffb      	ldrb	r3, [r7, #31]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <remove_chain+0x88>
 800945e:	7ffb      	ldrb	r3, [r7, #31]
 8009460:	e01c      	b.n	800949c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	691a      	ldr	r2, [r3, #16]
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	3b02      	subs	r3, #2
 800946c:	429a      	cmp	r2, r3
 800946e:	d20b      	bcs.n	8009488 <remove_chain+0xae>
			fs->free_clst++;
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	791b      	ldrb	r3, [r3, #4]
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	b2da      	uxtb	r2, r3
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	695a      	ldr	r2, [r3, #20]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	429a      	cmp	r2, r3
 8009494:	d8c6      	bhi.n	8009424 <remove_chain+0x4a>
 8009496:	e000      	b.n	800949a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009498:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3720      	adds	r7, #32
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b088      	sub	sp, #32
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10d      	bne.n	80094d6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d004      	beq.n	80094d0 <create_chain+0x2c>
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	695a      	ldr	r2, [r3, #20]
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d81b      	bhi.n	8009508 <create_chain+0x64>
 80094d0:	2301      	movs	r3, #1
 80094d2:	61bb      	str	r3, [r7, #24]
 80094d4:	e018      	b.n	8009508 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff fdf2 	bl	80090c2 <get_fat>
 80094de:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d801      	bhi.n	80094ea <create_chain+0x46>
 80094e6:	2301      	movs	r3, #1
 80094e8:	e070      	b.n	80095cc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f0:	d101      	bne.n	80094f6 <create_chain+0x52>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	e06a      	b.n	80095cc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	695a      	ldr	r2, [r3, #20]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d901      	bls.n	8009504 <create_chain+0x60>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	e063      	b.n	80095cc <create_chain+0x128>
		scl = clst;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	3301      	adds	r3, #1
 8009510:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	695a      	ldr	r2, [r3, #20]
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	429a      	cmp	r2, r3
 800951a:	d807      	bhi.n	800952c <create_chain+0x88>
				ncl = 2;
 800951c:	2302      	movs	r3, #2
 800951e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009520:	69fa      	ldr	r2, [r7, #28]
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	429a      	cmp	r2, r3
 8009526:	d901      	bls.n	800952c <create_chain+0x88>
 8009528:	2300      	movs	r3, #0
 800952a:	e04f      	b.n	80095cc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800952c:	69f9      	ldr	r1, [r7, #28]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7ff fdc7 	bl	80090c2 <get_fat>
 8009534:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00e      	beq.n	800955a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d003      	beq.n	800954a <create_chain+0xa6>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009548:	d101      	bne.n	800954e <create_chain+0xaa>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	e03e      	b.n	80095cc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800954e:	69fa      	ldr	r2, [r7, #28]
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	429a      	cmp	r2, r3
 8009554:	d1da      	bne.n	800950c <create_chain+0x68>
 8009556:	2300      	movs	r3, #0
 8009558:	e038      	b.n	80095cc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800955a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800955c:	f04f 32ff 	mov.w	r2, #4294967295
 8009560:	69f9      	ldr	r1, [r7, #28]
 8009562:	6938      	ldr	r0, [r7, #16]
 8009564:	f7ff fe52 	bl	800920c <put_fat>
 8009568:	4603      	mov	r3, r0
 800956a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d109      	bne.n	8009586 <create_chain+0xe2>
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d006      	beq.n	8009586 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009578:	69fa      	ldr	r2, [r7, #28]
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6938      	ldr	r0, [r7, #16]
 800957e:	f7ff fe45 	bl	800920c <put_fat>
 8009582:	4603      	mov	r3, r0
 8009584:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009586:	7dfb      	ldrb	r3, [r7, #23]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d116      	bne.n	80095ba <create_chain+0x116>
		fs->last_clst = ncl;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	69fa      	ldr	r2, [r7, #28]
 8009590:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	691a      	ldr	r2, [r3, #16]
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	3b02      	subs	r3, #2
 800959c:	429a      	cmp	r2, r3
 800959e:	d804      	bhi.n	80095aa <create_chain+0x106>
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	1e5a      	subs	r2, r3, #1
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	791b      	ldrb	r3, [r3, #4]
 80095ae:	f043 0301 	orr.w	r3, r3, #1
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	711a      	strb	r2, [r3, #4]
 80095b8:	e007      	b.n	80095ca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d102      	bne.n	80095c6 <create_chain+0x122>
 80095c0:	f04f 33ff 	mov.w	r3, #4294967295
 80095c4:	e000      	b.n	80095c8 <create_chain+0x124>
 80095c6:	2301      	movs	r3, #1
 80095c8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80095ca:	69fb      	ldr	r3, [r7, #28]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3720      	adds	r7, #32
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b087      	sub	sp, #28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e8:	3304      	adds	r3, #4
 80095ea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	0a5b      	lsrs	r3, r3, #9
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	8952      	ldrh	r2, [r2, #10]
 80095f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80095f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	1d1a      	adds	r2, r3, #4
 80095fe:	613a      	str	r2, [r7, #16]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <clmt_clust+0x3a>
 800960a:	2300      	movs	r3, #0
 800960c:	e010      	b.n	8009630 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	429a      	cmp	r2, r3
 8009614:	d307      	bcc.n	8009626 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	617b      	str	r3, [r7, #20]
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	3304      	adds	r3, #4
 8009622:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009624:	e7e9      	b.n	80095fa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009626:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	4413      	add	r3, r2
}
 8009630:	4618      	mov	r0, r3
 8009632:	371c      	adds	r7, #28
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009652:	d204      	bcs.n	800965e <dir_sdi+0x22>
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	f003 031f 	and.w	r3, r3, #31
 800965a:	2b00      	cmp	r3, #0
 800965c:	d001      	beq.n	8009662 <dir_sdi+0x26>
		return FR_INT_ERR;
 800965e:	2302      	movs	r3, #2
 8009660:	e063      	b.n	800972a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d106      	bne.n	8009682 <dir_sdi+0x46>
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b02      	cmp	r3, #2
 800967a:	d902      	bls.n	8009682 <dir_sdi+0x46>
		clst = fs->dirbase;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009680:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10c      	bne.n	80096a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	095b      	lsrs	r3, r3, #5
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	8912      	ldrh	r2, [r2, #8]
 8009690:	4293      	cmp	r3, r2
 8009692:	d301      	bcc.n	8009698 <dir_sdi+0x5c>
 8009694:	2302      	movs	r3, #2
 8009696:	e048      	b.n	800972a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	61da      	str	r2, [r3, #28]
 80096a0:	e029      	b.n	80096f6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	895b      	ldrh	r3, [r3, #10]
 80096a6:	025b      	lsls	r3, r3, #9
 80096a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80096aa:	e019      	b.n	80096e0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6979      	ldr	r1, [r7, #20]
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7ff fd06 	bl	80090c2 <get_fat>
 80096b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096be:	d101      	bne.n	80096c4 <dir_sdi+0x88>
 80096c0:	2301      	movs	r3, #1
 80096c2:	e032      	b.n	800972a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d904      	bls.n	80096d4 <dir_sdi+0x98>
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	695a      	ldr	r2, [r3, #20]
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d801      	bhi.n	80096d8 <dir_sdi+0x9c>
 80096d4:	2302      	movs	r3, #2
 80096d6:	e028      	b.n	800972a <dir_sdi+0xee>
			ofs -= csz;
 80096d8:	683a      	ldr	r2, [r7, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d2e1      	bcs.n	80096ac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80096e8:	6979      	ldr	r1, [r7, #20]
 80096ea:	6938      	ldr	r0, [r7, #16]
 80096ec:	f7ff fcca 	bl	8009084 <clust2sect>
 80096f0:	4602      	mov	r2, r0
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	69db      	ldr	r3, [r3, #28]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <dir_sdi+0xcc>
 8009704:	2302      	movs	r3, #2
 8009706:	e010      	b.n	800972a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	69da      	ldr	r2, [r3, #28]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	0a5b      	lsrs	r3, r3, #9
 8009710:	441a      	add	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009722:	441a      	add	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b086      	sub	sp, #24
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	3320      	adds	r3, #32
 8009748:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <dir_next+0x28>
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009758:	d301      	bcc.n	800975e <dir_next+0x2c>
 800975a:	2304      	movs	r3, #4
 800975c:	e0aa      	b.n	80098b4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009764:	2b00      	cmp	r3, #0
 8009766:	f040 8098 	bne.w	800989a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10b      	bne.n	8009794 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	095b      	lsrs	r3, r3, #5
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	8912      	ldrh	r2, [r2, #8]
 8009784:	4293      	cmp	r3, r2
 8009786:	f0c0 8088 	bcc.w	800989a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	61da      	str	r2, [r3, #28]
 8009790:	2304      	movs	r3, #4
 8009792:	e08f      	b.n	80098b4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	0a5b      	lsrs	r3, r3, #9
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	8952      	ldrh	r2, [r2, #10]
 800979c:	3a01      	subs	r2, #1
 800979e:	4013      	ands	r3, r2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d17a      	bne.n	800989a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	4619      	mov	r1, r3
 80097ac:	4610      	mov	r0, r2
 80097ae:	f7ff fc88 	bl	80090c2 <get_fat>
 80097b2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d801      	bhi.n	80097be <dir_next+0x8c>
 80097ba:	2302      	movs	r3, #2
 80097bc:	e07a      	b.n	80098b4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c4:	d101      	bne.n	80097ca <dir_next+0x98>
 80097c6:	2301      	movs	r3, #1
 80097c8:	e074      	b.n	80098b4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	695a      	ldr	r2, [r3, #20]
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d858      	bhi.n	8009886 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d104      	bne.n	80097e4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	61da      	str	r2, [r3, #28]
 80097e0:	2304      	movs	r3, #4
 80097e2:	e067      	b.n	80098b4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	4619      	mov	r1, r3
 80097ec:	4610      	mov	r0, r2
 80097ee:	f7ff fe59 	bl	80094a4 <create_chain>
 80097f2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d101      	bne.n	80097fe <dir_next+0xcc>
 80097fa:	2307      	movs	r3, #7
 80097fc:	e05a      	b.n	80098b4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d101      	bne.n	8009808 <dir_next+0xd6>
 8009804:	2302      	movs	r3, #2
 8009806:	e055      	b.n	80098b4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980e:	d101      	bne.n	8009814 <dir_next+0xe2>
 8009810:	2301      	movs	r3, #1
 8009812:	e04f      	b.n	80098b4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f7ff fb55 	bl	8008ec4 <sync_window>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <dir_next+0xf2>
 8009820:	2301      	movs	r3, #1
 8009822:	e047      	b.n	80098b4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	3330      	adds	r3, #48	; 0x30
 8009828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800982c:	2100      	movs	r1, #0
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff f97f 	bl	8008b32 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009834:	2300      	movs	r3, #0
 8009836:	613b      	str	r3, [r7, #16]
 8009838:	6979      	ldr	r1, [r7, #20]
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f7ff fc22 	bl	8009084 <clust2sect>
 8009840:	4602      	mov	r2, r0
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	62da      	str	r2, [r3, #44]	; 0x2c
 8009846:	e012      	b.n	800986e <dir_next+0x13c>
						fs->wflag = 1;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2201      	movs	r2, #1
 800984c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f7ff fb38 	bl	8008ec4 <sync_window>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <dir_next+0x12c>
 800985a:	2301      	movs	r3, #1
 800985c:	e02a      	b.n	80098b4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	3301      	adds	r3, #1
 8009862:	613b      	str	r3, [r7, #16]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	62da      	str	r2, [r3, #44]	; 0x2c
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	895b      	ldrh	r3, [r3, #10]
 8009872:	461a      	mov	r2, r3
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	429a      	cmp	r2, r3
 8009878:	d8e6      	bhi.n	8009848 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	1ad2      	subs	r2, r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800988c:	6979      	ldr	r1, [r7, #20]
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f7ff fbf8 	bl	8009084 <clust2sect>
 8009894:	4602      	mov	r2, r0
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ac:	441a      	add	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3718      	adds	r7, #24
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80098cc:	2100      	movs	r1, #0
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7ff feb4 	bl	800963c <dir_sdi>
 80098d4:	4603      	mov	r3, r0
 80098d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80098d8:	7dfb      	ldrb	r3, [r7, #23]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d12b      	bne.n	8009936 <dir_alloc+0x7a>
		n = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	4619      	mov	r1, r3
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f7ff fb2f 	bl	8008f4c <move_window>
 80098ee:	4603      	mov	r3, r0
 80098f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d11d      	bne.n	8009934 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a1b      	ldr	r3, [r3, #32]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	2be5      	cmp	r3, #229	; 0xe5
 8009900:	d004      	beq.n	800990c <dir_alloc+0x50>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d107      	bne.n	800991c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	3301      	adds	r3, #1
 8009910:	613b      	str	r3, [r7, #16]
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	429a      	cmp	r2, r3
 8009918:	d102      	bne.n	8009920 <dir_alloc+0x64>
 800991a:	e00c      	b.n	8009936 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800991c:	2300      	movs	r3, #0
 800991e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009920:	2101      	movs	r1, #1
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff ff05 	bl	8009732 <dir_next>
 8009928:	4603      	mov	r3, r0
 800992a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800992c:	7dfb      	ldrb	r3, [r7, #23]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0d7      	beq.n	80098e2 <dir_alloc+0x26>
 8009932:	e000      	b.n	8009936 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009934:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009936:	7dfb      	ldrb	r3, [r7, #23]
 8009938:	2b04      	cmp	r3, #4
 800993a:	d101      	bne.n	8009940 <dir_alloc+0x84>
 800993c:	2307      	movs	r3, #7
 800993e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009940:	7dfb      	ldrb	r3, [r7, #23]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	331a      	adds	r3, #26
 8009958:	4618      	mov	r0, r3
 800995a:	f7ff f847 	bl	80089ec <ld_word>
 800995e:	4603      	mov	r3, r0
 8009960:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b03      	cmp	r3, #3
 8009968:	d109      	bne.n	800997e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	3314      	adds	r3, #20
 800996e:	4618      	mov	r0, r3
 8009970:	f7ff f83c 	bl	80089ec <ld_word>
 8009974:	4603      	mov	r3, r0
 8009976:	041b      	lsls	r3, r3, #16
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	4313      	orrs	r3, r2
 800997c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800997e:	68fb      	ldr	r3, [r7, #12]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	331a      	adds	r3, #26
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	b292      	uxth	r2, r2
 800999c:	4611      	mov	r1, r2
 800999e:	4618      	mov	r0, r3
 80099a0:	f7ff f85f 	bl	8008a62 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	2b03      	cmp	r3, #3
 80099aa:	d109      	bne.n	80099c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	f103 0214 	add.w	r2, r3, #20
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	0c1b      	lsrs	r3, r3, #16
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	4619      	mov	r1, r3
 80099ba:	4610      	mov	r0, r2
 80099bc:	f7ff f851 	bl	8008a62 <st_word>
	}
}
 80099c0:	bf00      	nop
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80099d2:	2304      	movs	r3, #4
 80099d4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80099dc:	e03c      	b.n	8009a58 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	4619      	mov	r1, r3
 80099e4:	6938      	ldr	r0, [r7, #16]
 80099e6:	f7ff fab1 	bl	8008f4c <move_window>
 80099ea:	4603      	mov	r3, r0
 80099ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80099ee:	7dfb      	ldrb	r3, [r7, #23]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d136      	bne.n	8009a62 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d102      	bne.n	8009a08 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009a02:	2304      	movs	r3, #4
 8009a04:	75fb      	strb	r3, [r7, #23]
 8009a06:	e031      	b.n	8009a6c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	330b      	adds	r3, #11
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a14:	73bb      	strb	r3, [r7, #14]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	7bba      	ldrb	r2, [r7, #14]
 8009a1a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	2be5      	cmp	r3, #229	; 0xe5
 8009a20:	d011      	beq.n	8009a46 <dir_read+0x7e>
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	2b2e      	cmp	r3, #46	; 0x2e
 8009a26:	d00e      	beq.n	8009a46 <dir_read+0x7e>
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
 8009a2a:	2b0f      	cmp	r3, #15
 8009a2c:	d00b      	beq.n	8009a46 <dir_read+0x7e>
 8009a2e:	7bbb      	ldrb	r3, [r7, #14]
 8009a30:	f023 0320 	bic.w	r3, r3, #32
 8009a34:	2b08      	cmp	r3, #8
 8009a36:	bf0c      	ite	eq
 8009a38:	2301      	moveq	r3, #1
 8009a3a:	2300      	movne	r3, #0
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	461a      	mov	r2, r3
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d00f      	beq.n	8009a66 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009a46:	2100      	movs	r1, #0
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7ff fe72 	bl	8009732 <dir_next>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d108      	bne.n	8009a6a <dir_read+0xa2>
	while (dp->sect) {
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1be      	bne.n	80099de <dir_read+0x16>
 8009a60:	e004      	b.n	8009a6c <dir_read+0xa4>
		if (res != FR_OK) break;
 8009a62:	bf00      	nop
 8009a64:	e002      	b.n	8009a6c <dir_read+0xa4>
				break;
 8009a66:	bf00      	nop
 8009a68:	e000      	b.n	8009a6c <dir_read+0xa4>
		if (res != FR_OK) break;
 8009a6a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d002      	beq.n	8009a78 <dir_read+0xb0>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	61da      	str	r2, [r3, #28]
	return res;
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b086      	sub	sp, #24
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009a90:	2100      	movs	r1, #0
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7ff fdd2 	bl	800963c <dir_sdi>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009a9c:	7dfb      	ldrb	r3, [r7, #23]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <dir_find+0x24>
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	e03e      	b.n	8009b24 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6938      	ldr	r0, [r7, #16]
 8009aae:	f7ff fa4d 	bl	8008f4c <move_window>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ab6:	7dfb      	ldrb	r3, [r7, #23]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d12f      	bne.n	8009b1c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a1b      	ldr	r3, [r3, #32]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d102      	bne.n	8009ad0 <dir_find+0x4e>
 8009aca:	2304      	movs	r3, #4
 8009acc:	75fb      	strb	r3, [r7, #23]
 8009ace:	e028      	b.n	8009b22 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	330b      	adds	r3, #11
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	330b      	adds	r3, #11
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	f003 0308 	and.w	r3, r3, #8
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10a      	bne.n	8009b08 <dir_find+0x86>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a18      	ldr	r0, [r3, #32]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3324      	adds	r3, #36	; 0x24
 8009afa:	220b      	movs	r2, #11
 8009afc:	4619      	mov	r1, r3
 8009afe:	f7ff f832 	bl	8008b66 <mem_cmp>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00b      	beq.n	8009b20 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009b08:	2100      	movs	r1, #0
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff fe11 	bl	8009732 <dir_next>
 8009b10:	4603      	mov	r3, r0
 8009b12:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d0c5      	beq.n	8009aa6 <dir_find+0x24>
 8009b1a:	e002      	b.n	8009b22 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009b1c:	bf00      	nop
 8009b1e:	e000      	b.n	8009b22 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009b20:	bf00      	nop

	return res;
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009b3a:	2101      	movs	r1, #1
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff febd 	bl	80098bc <dir_alloc>
 8009b42:	4603      	mov	r3, r0
 8009b44:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d11c      	bne.n	8009b86 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	4619      	mov	r1, r3
 8009b52:	68b8      	ldr	r0, [r7, #8]
 8009b54:	f7ff f9fa 	bl	8008f4c <move_window>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d111      	bne.n	8009b86 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	2220      	movs	r2, #32
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe ffe1 	bl	8008b32 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a18      	ldr	r0, [r3, #32]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	3324      	adds	r3, #36	; 0x24
 8009b78:	220b      	movs	r2, #11
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	f7fe ffb8 	bl	8008af0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2201      	movs	r2, #1
 8009b84:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d04e      	beq.n	8009c46 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	613b      	str	r3, [r7, #16]
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009bb0:	e021      	b.n	8009bf6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1a      	ldr	r2, [r3, #32]
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	1c59      	adds	r1, r3, #1
 8009bba:	6179      	str	r1, [r7, #20]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009bc2:	7bfb      	ldrb	r3, [r7, #15]
 8009bc4:	2b20      	cmp	r3, #32
 8009bc6:	d100      	bne.n	8009bca <get_fileinfo+0x3a>
 8009bc8:	e015      	b.n	8009bf6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	2b05      	cmp	r3, #5
 8009bce:	d101      	bne.n	8009bd4 <get_fileinfo+0x44>
 8009bd0:	23e5      	movs	r3, #229	; 0xe5
 8009bd2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	2b09      	cmp	r3, #9
 8009bd8:	d106      	bne.n	8009be8 <get_fileinfo+0x58>
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	1c5a      	adds	r2, r3, #1
 8009bde:	613a      	str	r2, [r7, #16]
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	4413      	add	r3, r2
 8009be4:	222e      	movs	r2, #46	; 0x2e
 8009be6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	1c5a      	adds	r2, r3, #1
 8009bec:	613a      	str	r2, [r7, #16]
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	7bfa      	ldrb	r2, [r7, #15]
 8009bf4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b0a      	cmp	r3, #10
 8009bfa:	d9da      	bls.n	8009bb2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	4413      	add	r3, r2
 8009c02:	3309      	adds	r3, #9
 8009c04:	2200      	movs	r2, #0
 8009c06:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a1b      	ldr	r3, [r3, #32]
 8009c0c:	7ada      	ldrb	r2, [r3, #11]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	331c      	adds	r3, #28
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fe feff 	bl	8008a1c <ld_dword>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	3316      	adds	r3, #22
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fe fef6 	bl	8008a1c <ld_dword>
 8009c30:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	80da      	strh	r2, [r3, #6]
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	0c1b      	lsrs	r3, r3, #16
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	809a      	strh	r2, [r3, #4]
 8009c44:	e000      	b.n	8009c48 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009c46:	bf00      	nop
}
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
	...

08009c50 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3324      	adds	r3, #36	; 0x24
 8009c64:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009c66:	220b      	movs	r2, #11
 8009c68:	2120      	movs	r1, #32
 8009c6a:	68b8      	ldr	r0, [r7, #8]
 8009c6c:	f7fe ff61 	bl	8008b32 <mem_set>
	si = i = 0; ni = 8;
 8009c70:	2300      	movs	r3, #0
 8009c72:	613b      	str	r3, [r7, #16]
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	2308      	movs	r3, #8
 8009c7a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	617a      	str	r2, [r7, #20]
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	4413      	add	r3, r2
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009c8a:	7ffb      	ldrb	r3, [r7, #31]
 8009c8c:	2b20      	cmp	r3, #32
 8009c8e:	d94e      	bls.n	8009d2e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009c90:	7ffb      	ldrb	r3, [r7, #31]
 8009c92:	2b2f      	cmp	r3, #47	; 0x2f
 8009c94:	d006      	beq.n	8009ca4 <create_name+0x54>
 8009c96:	7ffb      	ldrb	r3, [r7, #31]
 8009c98:	2b5c      	cmp	r3, #92	; 0x5c
 8009c9a:	d110      	bne.n	8009cbe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009c9c:	e002      	b.n	8009ca4 <create_name+0x54>
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	617b      	str	r3, [r7, #20]
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	4413      	add	r3, r2
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b2f      	cmp	r3, #47	; 0x2f
 8009cae:	d0f6      	beq.n	8009c9e <create_name+0x4e>
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	2b5c      	cmp	r3, #92	; 0x5c
 8009cba:	d0f0      	beq.n	8009c9e <create_name+0x4e>
			break;
 8009cbc:	e038      	b.n	8009d30 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009cbe:	7ffb      	ldrb	r3, [r7, #31]
 8009cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8009cc2:	d003      	beq.n	8009ccc <create_name+0x7c>
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d30c      	bcc.n	8009ce6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	2b0b      	cmp	r3, #11
 8009cd0:	d002      	beq.n	8009cd8 <create_name+0x88>
 8009cd2:	7ffb      	ldrb	r3, [r7, #31]
 8009cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8009cd6:	d001      	beq.n	8009cdc <create_name+0x8c>
 8009cd8:	2306      	movs	r3, #6
 8009cda:	e044      	b.n	8009d66 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009cdc:	2308      	movs	r3, #8
 8009cde:	613b      	str	r3, [r7, #16]
 8009ce0:	230b      	movs	r3, #11
 8009ce2:	61bb      	str	r3, [r7, #24]
			continue;
 8009ce4:	e022      	b.n	8009d2c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009ce6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	da04      	bge.n	8009cf8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009cee:	7ffb      	ldrb	r3, [r7, #31]
 8009cf0:	3b80      	subs	r3, #128	; 0x80
 8009cf2:	4a1f      	ldr	r2, [pc, #124]	; (8009d70 <create_name+0x120>)
 8009cf4:	5cd3      	ldrb	r3, [r2, r3]
 8009cf6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009cf8:	7ffb      	ldrb	r3, [r7, #31]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	481d      	ldr	r0, [pc, #116]	; (8009d74 <create_name+0x124>)
 8009cfe:	f7fe ff59 	bl	8008bb4 <chk_chr>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d001      	beq.n	8009d0c <create_name+0xbc>
 8009d08:	2306      	movs	r3, #6
 8009d0a:	e02c      	b.n	8009d66 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009d0c:	7ffb      	ldrb	r3, [r7, #31]
 8009d0e:	2b60      	cmp	r3, #96	; 0x60
 8009d10:	d905      	bls.n	8009d1e <create_name+0xce>
 8009d12:	7ffb      	ldrb	r3, [r7, #31]
 8009d14:	2b7a      	cmp	r3, #122	; 0x7a
 8009d16:	d802      	bhi.n	8009d1e <create_name+0xce>
 8009d18:	7ffb      	ldrb	r3, [r7, #31]
 8009d1a:	3b20      	subs	r3, #32
 8009d1c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	613a      	str	r2, [r7, #16]
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	4413      	add	r3, r2
 8009d28:	7ffa      	ldrb	r2, [r7, #31]
 8009d2a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009d2c:	e7a6      	b.n	8009c7c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009d2e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	441a      	add	r2, r3
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <create_name+0xf4>
 8009d40:	2306      	movs	r3, #6
 8009d42:	e010      	b.n	8009d66 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	2be5      	cmp	r3, #229	; 0xe5
 8009d4a:	d102      	bne.n	8009d52 <create_name+0x102>
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2205      	movs	r2, #5
 8009d50:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	330b      	adds	r3, #11
 8009d56:	7ffa      	ldrb	r2, [r7, #31]
 8009d58:	2a20      	cmp	r2, #32
 8009d5a:	d801      	bhi.n	8009d60 <create_name+0x110>
 8009d5c:	2204      	movs	r2, #4
 8009d5e:	e000      	b.n	8009d62 <create_name+0x112>
 8009d60:	2200      	movs	r2, #0
 8009d62:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009d64:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3720      	adds	r7, #32
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	08015ea8 	.word	0x08015ea8
 8009d74:	08012f98 	.word	0x08012f98

08009d78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009d8c:	e002      	b.n	8009d94 <follow_path+0x1c>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	3301      	adds	r3, #1
 8009d92:	603b      	str	r3, [r7, #0]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	2b2f      	cmp	r3, #47	; 0x2f
 8009d9a:	d0f8      	beq.n	8009d8e <follow_path+0x16>
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	2b5c      	cmp	r3, #92	; 0x5c
 8009da2:	d0f4      	beq.n	8009d8e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	2200      	movs	r2, #0
 8009da8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	2b1f      	cmp	r3, #31
 8009db0:	d80a      	bhi.n	8009dc8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2280      	movs	r2, #128	; 0x80
 8009db6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009dba:	2100      	movs	r1, #0
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7ff fc3d 	bl	800963c <dir_sdi>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	75fb      	strb	r3, [r7, #23]
 8009dc6:	e043      	b.n	8009e50 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009dc8:	463b      	mov	r3, r7
 8009dca:	4619      	mov	r1, r3
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f7ff ff3f 	bl	8009c50 <create_name>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d134      	bne.n	8009e46 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff fe50 	bl	8009a82 <dir_find>
 8009de2:	4603      	mov	r3, r0
 8009de4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009dec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00a      	beq.n	8009e0a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009df4:	7dfb      	ldrb	r3, [r7, #23]
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	d127      	bne.n	8009e4a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009dfa:	7afb      	ldrb	r3, [r7, #11]
 8009dfc:	f003 0304 	and.w	r3, r3, #4
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d122      	bne.n	8009e4a <follow_path+0xd2>
 8009e04:	2305      	movs	r3, #5
 8009e06:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009e08:	e01f      	b.n	8009e4a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009e0a:	7afb      	ldrb	r3, [r7, #11]
 8009e0c:	f003 0304 	and.w	r3, r3, #4
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d11c      	bne.n	8009e4e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	799b      	ldrb	r3, [r3, #6]
 8009e18:	f003 0310 	and.w	r3, r3, #16
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d102      	bne.n	8009e26 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009e20:	2305      	movs	r3, #5
 8009e22:	75fb      	strb	r3, [r7, #23]
 8009e24:	e014      	b.n	8009e50 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	695b      	ldr	r3, [r3, #20]
 8009e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e34:	4413      	add	r3, r2
 8009e36:	4619      	mov	r1, r3
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f7ff fd86 	bl	800994a <ld_clust>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009e44:	e7c0      	b.n	8009dc8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009e46:	bf00      	nop
 8009e48:	e002      	b.n	8009e50 <follow_path+0xd8>
				break;
 8009e4a:	bf00      	nop
 8009e4c:	e000      	b.n	8009e50 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009e4e:	bf00      	nop
			}
		}
	}

	return res;
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b087      	sub	sp, #28
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009e62:	f04f 33ff 	mov.w	r3, #4294967295
 8009e66:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d031      	beq.n	8009ed4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	617b      	str	r3, [r7, #20]
 8009e76:	e002      	b.n	8009e7e <get_ldnumber+0x24>
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	617b      	str	r3, [r7, #20]
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2b20      	cmp	r3, #32
 8009e84:	d903      	bls.n	8009e8e <get_ldnumber+0x34>
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	2b3a      	cmp	r3, #58	; 0x3a
 8009e8c:	d1f4      	bne.n	8009e78 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	2b3a      	cmp	r3, #58	; 0x3a
 8009e94:	d11c      	bne.n	8009ed0 <get_ldnumber+0x76>
			tp = *path;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	60fa      	str	r2, [r7, #12]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	3b30      	subs	r3, #48	; 0x30
 8009ea6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2b09      	cmp	r3, #9
 8009eac:	d80e      	bhi.n	8009ecc <get_ldnumber+0x72>
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d10a      	bne.n	8009ecc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d807      	bhi.n	8009ecc <get_ldnumber+0x72>
					vol = (int)i;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	617b      	str	r3, [r7, #20]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	e002      	b.n	8009ed6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009ed4:	693b      	ldr	r3, [r7, #16]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	371c      	adds	r7, #28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
	...

08009ee4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	70da      	strb	r2, [r3, #3]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8009efa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7ff f824 	bl	8008f4c <move_window>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <check_fs+0x2a>
 8009f0a:	2304      	movs	r3, #4
 8009f0c:	e038      	b.n	8009f80 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	3330      	adds	r3, #48	; 0x30
 8009f12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fe fd68 	bl	80089ec <ld_word>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	461a      	mov	r2, r3
 8009f20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d001      	beq.n	8009f2c <check_fs+0x48>
 8009f28:	2303      	movs	r3, #3
 8009f2a:	e029      	b.n	8009f80 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f32:	2be9      	cmp	r3, #233	; 0xe9
 8009f34:	d009      	beq.n	8009f4a <check_fs+0x66>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f3c:	2beb      	cmp	r3, #235	; 0xeb
 8009f3e:	d11e      	bne.n	8009f7e <check_fs+0x9a>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009f46:	2b90      	cmp	r3, #144	; 0x90
 8009f48:	d119      	bne.n	8009f7e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	3330      	adds	r3, #48	; 0x30
 8009f4e:	3336      	adds	r3, #54	; 0x36
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fe fd63 	bl	8008a1c <ld_dword>
 8009f56:	4603      	mov	r3, r0
 8009f58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009f5c:	4a0a      	ldr	r2, [pc, #40]	; (8009f88 <check_fs+0xa4>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d101      	bne.n	8009f66 <check_fs+0x82>
 8009f62:	2300      	movs	r3, #0
 8009f64:	e00c      	b.n	8009f80 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3330      	adds	r3, #48	; 0x30
 8009f6a:	3352      	adds	r3, #82	; 0x52
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7fe fd55 	bl	8008a1c <ld_dword>
 8009f72:	4602      	mov	r2, r0
 8009f74:	4b05      	ldr	r3, [pc, #20]	; (8009f8c <check_fs+0xa8>)
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d101      	bne.n	8009f7e <check_fs+0x9a>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	e000      	b.n	8009f80 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009f7e:	2302      	movs	r3, #2
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	00544146 	.word	0x00544146
 8009f8c:	33544146 	.word	0x33544146

08009f90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b096      	sub	sp, #88	; 0x58
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f7ff ff58 	bl	8009e5a <get_ldnumber>
 8009faa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	da01      	bge.n	8009fb6 <find_volume+0x26>
 8009fb2:	230b      	movs	r3, #11
 8009fb4:	e22e      	b.n	800a414 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009fb6:	4aa8      	ldr	r2, [pc, #672]	; (800a258 <find_volume+0x2c8>)
 8009fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fbe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <find_volume+0x3a>
 8009fc6:	230c      	movs	r3, #12
 8009fc8:	e224      	b.n	800a414 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009fd0:	79fb      	ldrb	r3, [r7, #7]
 8009fd2:	f023 0301 	bic.w	r3, r3, #1
 8009fd6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d01a      	beq.n	800a016 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	785b      	ldrb	r3, [r3, #1]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fe fc63 	bl	80088b0 <disk_status>
 8009fea:	4603      	mov	r3, r0
 8009fec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009ff0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10c      	bne.n	800a016 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009ffc:	79fb      	ldrb	r3, [r7, #7]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d007      	beq.n	800a012 <find_volume+0x82>
 800a002:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a006:	f003 0304 	and.w	r3, r3, #4
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d001      	beq.n	800a012 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a00e:	230a      	movs	r3, #10
 800a010:	e200      	b.n	800a414 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800a012:	2300      	movs	r3, #0
 800a014:	e1fe      	b.n	800a414 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a018:	2200      	movs	r2, #0
 800a01a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fe fc5b 	bl	80088e4 <disk_initialize>
 800a02e:	4603      	mov	r3, r0
 800a030:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a034:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a040:	2303      	movs	r3, #3
 800a042:	e1e7      	b.n	800a414 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a044:	79fb      	ldrb	r3, [r7, #7]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d007      	beq.n	800a05a <find_volume+0xca>
 800a04a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a04e:	f003 0304 	and.w	r3, r3, #4
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a056:	230a      	movs	r3, #10
 800a058:	e1dc      	b.n	800a414 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a05e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a060:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a062:	f7ff ff3f 	bl	8009ee4 <check_fs>
 800a066:	4603      	mov	r3, r0
 800a068:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a06c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a070:	2b02      	cmp	r3, #2
 800a072:	d14b      	bne.n	800a10c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a074:	2300      	movs	r3, #0
 800a076:	643b      	str	r3, [r7, #64]	; 0x40
 800a078:	e01f      	b.n	800a0ba <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a082:	011b      	lsls	r3, r3, #4
 800a084:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a088:	4413      	add	r3, r2
 800a08a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08e:	3304      	adds	r3, #4
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d006      	beq.n	800a0a4 <find_volume+0x114>
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	3308      	adds	r3, #8
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fe fcbe 	bl	8008a1c <ld_dword>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	e000      	b.n	800a0a6 <find_volume+0x116>
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a0ae:	440b      	add	r3, r1
 800a0b0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a0b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	643b      	str	r3, [r7, #64]	; 0x40
 800a0ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	d9dc      	bls.n	800a07a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <find_volume+0x140>
 800a0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a0d8:	4413      	add	r3, r2
 800a0da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a0de:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a0e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d005      	beq.n	800a0f2 <find_volume+0x162>
 800a0e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0ea:	f7ff fefb 	bl	8009ee4 <check_fs>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	e000      	b.n	800a0f4 <find_volume+0x164>
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a0f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d905      	bls.n	800a10c <find_volume+0x17c>
 800a100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a102:	3301      	adds	r3, #1
 800a104:	643b      	str	r3, [r7, #64]	; 0x40
 800a106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d9e1      	bls.n	800a0d0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a10c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a110:	2b04      	cmp	r3, #4
 800a112:	d101      	bne.n	800a118 <find_volume+0x188>
 800a114:	2301      	movs	r3, #1
 800a116:	e17d      	b.n	800a414 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d901      	bls.n	800a124 <find_volume+0x194>
 800a120:	230d      	movs	r3, #13
 800a122:	e177      	b.n	800a414 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a126:	3330      	adds	r3, #48	; 0x30
 800a128:	330b      	adds	r3, #11
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fc5e 	bl	80089ec <ld_word>
 800a130:	4603      	mov	r3, r0
 800a132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a136:	d001      	beq.n	800a13c <find_volume+0x1ac>
 800a138:	230d      	movs	r3, #13
 800a13a:	e16b      	b.n	800a414 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	3330      	adds	r3, #48	; 0x30
 800a140:	3316      	adds	r3, #22
 800a142:	4618      	mov	r0, r3
 800a144:	f7fe fc52 	bl	80089ec <ld_word>
 800a148:	4603      	mov	r3, r0
 800a14a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a14c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d106      	bne.n	800a160 <find_volume+0x1d0>
 800a152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a154:	3330      	adds	r3, #48	; 0x30
 800a156:	3324      	adds	r3, #36	; 0x24
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fe fc5f 	bl	8008a1c <ld_dword>
 800a15e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a164:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a168:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a172:	789b      	ldrb	r3, [r3, #2]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d005      	beq.n	800a184 <find_volume+0x1f4>
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	789b      	ldrb	r3, [r3, #2]
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d001      	beq.n	800a184 <find_volume+0x1f4>
 800a180:	230d      	movs	r3, #13
 800a182:	e147      	b.n	800a414 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a186:	789b      	ldrb	r3, [r3, #2]
 800a188:	461a      	mov	r2, r3
 800a18a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a18c:	fb02 f303 	mul.w	r3, r2, r3
 800a190:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a198:	b29a      	uxth	r2, r3
 800a19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a0:	895b      	ldrh	r3, [r3, #10]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d008      	beq.n	800a1b8 <find_volume+0x228>
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a8:	895b      	ldrh	r3, [r3, #10]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ae:	895b      	ldrh	r3, [r3, #10]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <find_volume+0x22c>
 800a1b8:	230d      	movs	r3, #13
 800a1ba:	e12b      	b.n	800a414 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1be:	3330      	adds	r3, #48	; 0x30
 800a1c0:	3311      	adds	r3, #17
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fe fc12 	bl	80089ec <ld_word>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	891b      	ldrh	r3, [r3, #8]
 800a1d4:	f003 030f 	and.w	r3, r3, #15
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <find_volume+0x252>
 800a1de:	230d      	movs	r3, #13
 800a1e0:	e118      	b.n	800a414 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e4:	3330      	adds	r3, #48	; 0x30
 800a1e6:	3313      	adds	r3, #19
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fe fbff 	bl	80089ec <ld_word>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a1f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d106      	bne.n	800a206 <find_volume+0x276>
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	3330      	adds	r3, #48	; 0x30
 800a1fc:	3320      	adds	r3, #32
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fe fc0c 	bl	8008a1c <ld_dword>
 800a204:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a208:	3330      	adds	r3, #48	; 0x30
 800a20a:	330e      	adds	r3, #14
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fe fbed 	bl	80089ec <ld_word>
 800a212:	4603      	mov	r3, r0
 800a214:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a216:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <find_volume+0x290>
 800a21c:	230d      	movs	r3, #13
 800a21e:	e0f9      	b.n	800a414 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a220:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a224:	4413      	add	r3, r2
 800a226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a228:	8912      	ldrh	r2, [r2, #8]
 800a22a:	0912      	lsrs	r2, r2, #4
 800a22c:	b292      	uxth	r2, r2
 800a22e:	4413      	add	r3, r2
 800a230:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a236:	429a      	cmp	r2, r3
 800a238:	d201      	bcs.n	800a23e <find_volume+0x2ae>
 800a23a:	230d      	movs	r3, #13
 800a23c:	e0ea      	b.n	800a414 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a23e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a246:	8952      	ldrh	r2, [r2, #10]
 800a248:	fbb3 f3f2 	udiv	r3, r3, r2
 800a24c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a250:	2b00      	cmp	r3, #0
 800a252:	d103      	bne.n	800a25c <find_volume+0x2cc>
 800a254:	230d      	movs	r3, #13
 800a256:	e0dd      	b.n	800a414 <find_volume+0x484>
 800a258:	20000448 	.word	0x20000448
		fmt = FS_FAT32;
 800a25c:	2303      	movs	r3, #3
 800a25e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a268:	4293      	cmp	r3, r2
 800a26a:	d802      	bhi.n	800a272 <find_volume+0x2e2>
 800a26c:	2302      	movs	r3, #2
 800a26e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a274:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a278:	4293      	cmp	r3, r2
 800a27a:	d802      	bhi.n	800a282 <find_volume+0x2f2>
 800a27c:	2301      	movs	r3, #1
 800a27e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a284:	1c9a      	adds	r2, r3, #2
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a28e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a290:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a294:	441a      	add	r2, r3
 800a296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a298:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a29a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29e:	441a      	add	r2, r3
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a2a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d11e      	bne.n	800a2ea <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	3330      	adds	r3, #48	; 0x30
 800a2b0:	332a      	adds	r3, #42	; 0x2a
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fb9a 	bl	80089ec <ld_word>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d001      	beq.n	800a2c2 <find_volume+0x332>
 800a2be:	230d      	movs	r3, #13
 800a2c0:	e0a8      	b.n	800a414 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c4:	891b      	ldrh	r3, [r3, #8]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <find_volume+0x33e>
 800a2ca:	230d      	movs	r3, #13
 800a2cc:	e0a2      	b.n	800a414 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	3330      	adds	r3, #48	; 0x30
 800a2d2:	332c      	adds	r3, #44	; 0x2c
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fe fba1 	bl	8008a1c <ld_dword>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2de:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	647b      	str	r3, [r7, #68]	; 0x44
 800a2e8:	e01f      	b.n	800a32a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ec:	891b      	ldrh	r3, [r3, #8]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <find_volume+0x366>
 800a2f2:	230d      	movs	r3, #13
 800a2f4:	e08e      	b.n	800a414 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f8:	6a1a      	ldr	r2, [r3, #32]
 800a2fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2fc:	441a      	add	r2, r3
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a300:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a302:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a306:	2b02      	cmp	r3, #2
 800a308:	d103      	bne.n	800a312 <find_volume+0x382>
 800a30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	005b      	lsls	r3, r3, #1
 800a310:	e00a      	b.n	800a328 <find_volume+0x398>
 800a312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a314:	695a      	ldr	r2, [r3, #20]
 800a316:	4613      	mov	r3, r2
 800a318:	005b      	lsls	r3, r3, #1
 800a31a:	4413      	add	r3, r2
 800a31c:	085a      	lsrs	r2, r3, #1
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	f003 0301 	and.w	r3, r3, #1
 800a326:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a328:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32c:	699a      	ldr	r2, [r3, #24]
 800a32e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a330:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a334:	0a5b      	lsrs	r3, r3, #9
 800a336:	429a      	cmp	r2, r3
 800a338:	d201      	bcs.n	800a33e <find_volume+0x3ae>
 800a33a:	230d      	movs	r3, #13
 800a33c:	e06a      	b.n	800a414 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a340:	f04f 32ff 	mov.w	r2, #4294967295
 800a344:	611a      	str	r2, [r3, #16]
 800a346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a348:	691a      	ldr	r2, [r3, #16]
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a350:	2280      	movs	r2, #128	; 0x80
 800a352:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a354:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a358:	2b03      	cmp	r3, #3
 800a35a:	d149      	bne.n	800a3f0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35e:	3330      	adds	r3, #48	; 0x30
 800a360:	3330      	adds	r3, #48	; 0x30
 800a362:	4618      	mov	r0, r3
 800a364:	f7fe fb42 	bl	80089ec <ld_word>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d140      	bne.n	800a3f0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a36e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a370:	3301      	adds	r3, #1
 800a372:	4619      	mov	r1, r3
 800a374:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a376:	f7fe fde9 	bl	8008f4c <move_window>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d137      	bne.n	800a3f0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800a380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a382:	2200      	movs	r2, #0
 800a384:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a388:	3330      	adds	r3, #48	; 0x30
 800a38a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe fb2c 	bl	80089ec <ld_word>
 800a394:	4603      	mov	r3, r0
 800a396:	461a      	mov	r2, r3
 800a398:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d127      	bne.n	800a3f0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a2:	3330      	adds	r3, #48	; 0x30
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fe fb39 	bl	8008a1c <ld_dword>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	4b1b      	ldr	r3, [pc, #108]	; (800a41c <find_volume+0x48c>)
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d11e      	bne.n	800a3f0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b4:	3330      	adds	r3, #48	; 0x30
 800a3b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fe fb2e 	bl	8008a1c <ld_dword>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	4b17      	ldr	r3, [pc, #92]	; (800a420 <find_volume+0x490>)
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d113      	bne.n	800a3f0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ca:	3330      	adds	r3, #48	; 0x30
 800a3cc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fe fb23 	bl	8008a1c <ld_dword>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3da:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3de:	3330      	adds	r3, #48	; 0x30
 800a3e0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe fb19 	bl	8008a1c <ld_dword>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a3f6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a3f8:	4b0a      	ldr	r3, [pc, #40]	; (800a424 <find_volume+0x494>)
 800a3fa:	881b      	ldrh	r3, [r3, #0]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	4b08      	ldr	r3, [pc, #32]	; (800a424 <find_volume+0x494>)
 800a402:	801a      	strh	r2, [r3, #0]
 800a404:	4b07      	ldr	r3, [pc, #28]	; (800a424 <find_volume+0x494>)
 800a406:	881a      	ldrh	r2, [r3, #0]
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a40c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a40e:	f7fe fd35 	bl	8008e7c <clear_lock>
#endif
	return FR_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3758      	adds	r7, #88	; 0x58
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	41615252 	.word	0x41615252
 800a420:	61417272 	.word	0x61417272
 800a424:	20000450 	.word	0x20000450

0800a428 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d01a      	beq.n	800a46e <validate+0x46>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d016      	beq.n	800a46e <validate+0x46>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d011      	beq.n	800a46e <validate+0x46>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	88da      	ldrh	r2, [r3, #6]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	889b      	ldrh	r3, [r3, #4]
 800a454:	429a      	cmp	r2, r3
 800a456:	d10a      	bne.n	800a46e <validate+0x46>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	785b      	ldrb	r3, [r3, #1]
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fa26 	bl	80088b0 <disk_status>
 800a464:	4603      	mov	r3, r0
 800a466:	f003 0301 	and.w	r3, r3, #1
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d005      	beq.n	800a47a <validate+0x52>
		*fs = 0;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2200      	movs	r2, #0
 800a472:	601a      	str	r2, [r3, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 800a474:	2309      	movs	r3, #9
 800a476:	73fb      	strb	r3, [r7, #15]
 800a478:	e005      	b.n	800a486 <validate+0x5e>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	601a      	str	r2, [r3, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800a486:	7bfb      	ldrb	r3, [r7, #15]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b088      	sub	sp, #32
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	4613      	mov	r3, r2
 800a49c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a4a2:	f107 0310 	add.w	r3, r7, #16
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7ff fcd7 	bl	8009e5a <get_ldnumber>
 800a4ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	da01      	bge.n	800a4b8 <f_mount+0x28>
 800a4b4:	230b      	movs	r3, #11
 800a4b6:	e02b      	b.n	800a510 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a4b8:	4a17      	ldr	r2, [pc, #92]	; (800a518 <f_mount+0x88>)
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a4c8:	69b8      	ldr	r0, [r7, #24]
 800a4ca:	f7fe fcd7 	bl	8008e7c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	490d      	ldr	r1, [pc, #52]	; (800a518 <f_mount+0x88>)
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <f_mount+0x66>
 800a4f0:	79fb      	ldrb	r3, [r7, #7]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d001      	beq.n	800a4fa <f_mount+0x6a>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	e00a      	b.n	800a510 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a4fa:	f107 010c 	add.w	r1, r7, #12
 800a4fe:	f107 0308 	add.w	r3, r7, #8
 800a502:	2200      	movs	r2, #0
 800a504:	4618      	mov	r0, r3
 800a506:	f7ff fd43 	bl	8009f90 <find_volume>
 800a50a:	4603      	mov	r3, r0
 800a50c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3720      	adds	r7, #32
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	20000448 	.word	0x20000448

0800a51c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b098      	sub	sp, #96	; 0x60
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	4613      	mov	r3, r2
 800a528:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <f_open+0x18>
 800a530:	2309      	movs	r3, #9
 800a532:	e1ad      	b.n	800a890 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a534:	79fb      	ldrb	r3, [r7, #7]
 800a536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a53a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a53c:	79fa      	ldrb	r2, [r7, #7]
 800a53e:	f107 0110 	add.w	r1, r7, #16
 800a542:	f107 0308 	add.w	r3, r7, #8
 800a546:	4618      	mov	r0, r3
 800a548:	f7ff fd22 	bl	8009f90 <find_volume>
 800a54c:	4603      	mov	r3, r0
 800a54e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a556:	2b00      	cmp	r3, #0
 800a558:	f040 8191 	bne.w	800a87e <f_open+0x362>
		dj.obj.fs = fs;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	f107 0314 	add.w	r3, r7, #20
 800a566:	4611      	mov	r1, r2
 800a568:	4618      	mov	r0, r3
 800a56a:	f7ff fc05 	bl	8009d78 <follow_path>
 800a56e:	4603      	mov	r3, r0
 800a570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d11a      	bne.n	800a5b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a57c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a580:	b25b      	sxtb	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	da03      	bge.n	800a58e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a586:	2306      	movs	r3, #6
 800a588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a58c:	e011      	b.n	800a5b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a58e:	79fb      	ldrb	r3, [r7, #7]
 800a590:	f023 0301 	bic.w	r3, r3, #1
 800a594:	2b00      	cmp	r3, #0
 800a596:	bf14      	ite	ne
 800a598:	2301      	movne	r3, #1
 800a59a:	2300      	moveq	r3, #0
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	461a      	mov	r2, r3
 800a5a0:	f107 0314 	add.w	r3, r7, #20
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe fb20 	bl	8008bec <chk_lock>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a5b2:	79fb      	ldrb	r3, [r7, #7]
 800a5b4:	f003 031c 	and.w	r3, r3, #28
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d07f      	beq.n	800a6bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a5bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d017      	beq.n	800a5f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a5c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5c8:	2b04      	cmp	r3, #4
 800a5ca:	d10e      	bne.n	800a5ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a5cc:	f7fe fb6a 	bl	8008ca4 <enq_lock>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d006      	beq.n	800a5e4 <f_open+0xc8>
 800a5d6:	f107 0314 	add.w	r3, r7, #20
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7ff faa6 	bl	8009b2c <dir_register>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	e000      	b.n	800a5e6 <f_open+0xca>
 800a5e4:	2312      	movs	r3, #18
 800a5e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	f043 0308 	orr.w	r3, r3, #8
 800a5f0:	71fb      	strb	r3, [r7, #7]
 800a5f2:	e010      	b.n	800a616 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a5f4:	7ebb      	ldrb	r3, [r7, #26]
 800a5f6:	f003 0311 	and.w	r3, r3, #17
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <f_open+0xea>
					res = FR_DENIED;
 800a5fe:	2307      	movs	r3, #7
 800a600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a604:	e007      	b.n	800a616 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a606:	79fb      	ldrb	r3, [r7, #7]
 800a608:	f003 0304 	and.w	r3, r3, #4
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d002      	beq.n	800a616 <f_open+0xfa>
 800a610:	2308      	movs	r3, #8
 800a612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d168      	bne.n	800a6f0 <f_open+0x1d4>
 800a61e:	79fb      	ldrb	r3, [r7, #7]
 800a620:	f003 0308 	and.w	r3, r3, #8
 800a624:	2b00      	cmp	r3, #0
 800a626:	d063      	beq.n	800a6f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a628:	f002 fca4 	bl	800cf74 <get_fattime>
 800a62c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a630:	330e      	adds	r3, #14
 800a632:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a634:	4618      	mov	r0, r3
 800a636:	f7fe fa2f 	bl	8008a98 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63c:	3316      	adds	r3, #22
 800a63e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fa29 	bl	8008a98 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a648:	330b      	adds	r3, #11
 800a64a:	2220      	movs	r2, #32
 800a64c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a652:	4611      	mov	r1, r2
 800a654:	4618      	mov	r0, r3
 800a656:	f7ff f978 	bl	800994a <ld_clust>
 800a65a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a660:	2200      	movs	r2, #0
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff f990 	bl	8009988 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66a:	331c      	adds	r3, #28
 800a66c:	2100      	movs	r1, #0
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe fa12 	bl	8008a98 <st_dword>
					fs->wflag = 1;
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	2201      	movs	r2, #1
 800a678:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a67a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d037      	beq.n	800a6f0 <f_open+0x1d4>
						dw = fs->winsect;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a686:	f107 0314 	add.w	r3, r7, #20
 800a68a:	2200      	movs	r2, #0
 800a68c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fe fea3 	bl	80093da <remove_chain>
 800a694:	4603      	mov	r3, r0
 800a696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a69a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d126      	bne.n	800a6f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fc50 	bl	8008f4c <move_window>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6b6:	3a01      	subs	r2, #1
 800a6b8:	60da      	str	r2, [r3, #12]
 800a6ba:	e019      	b.n	800a6f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a6bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d115      	bne.n	800a6f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a6c4:	7ebb      	ldrb	r3, [r7, #26]
 800a6c6:	f003 0310 	and.w	r3, r3, #16
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a6ce:	2304      	movs	r3, #4
 800a6d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a6d4:	e00c      	b.n	800a6f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a6d6:	79fb      	ldrb	r3, [r7, #7]
 800a6d8:	f003 0302 	and.w	r3, r3, #2
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d007      	beq.n	800a6f0 <f_open+0x1d4>
 800a6e0:	7ebb      	ldrb	r3, [r7, #26]
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d002      	beq.n	800a6f0 <f_open+0x1d4>
						res = FR_DENIED;
 800a6ea:	2307      	movs	r3, #7
 800a6ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a6f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d128      	bne.n	800a74a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	f003 0308 	and.w	r3, r3, #8
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d003      	beq.n	800a70a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a702:	79fb      	ldrb	r3, [r7, #7]
 800a704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a708:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a718:	79fb      	ldrb	r3, [r7, #7]
 800a71a:	f023 0301 	bic.w	r3, r3, #1
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bf14      	ite	ne
 800a722:	2301      	movne	r3, #1
 800a724:	2300      	moveq	r3, #0
 800a726:	b2db      	uxtb	r3, r3
 800a728:	461a      	mov	r2, r3
 800a72a:	f107 0314 	add.w	r3, r7, #20
 800a72e:	4611      	mov	r1, r2
 800a730:	4618      	mov	r0, r3
 800a732:	f7fe fad9 	bl	8008ce8 <inc_lock>
 800a736:	4602      	mov	r2, r0
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	691b      	ldr	r3, [r3, #16]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d102      	bne.n	800a74a <f_open+0x22e>
 800a744:	2302      	movs	r3, #2
 800a746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a74a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f040 8095 	bne.w	800a87e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a758:	4611      	mov	r1, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7ff f8f5 	bl	800994a <ld_clust>
 800a760:	4602      	mov	r2, r0
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a768:	331c      	adds	r3, #28
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe f956 	bl	8008a1c <ld_dword>
 800a770:	4602      	mov	r2, r0
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	88da      	ldrh	r2, [r3, #6]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	79fa      	ldrb	r2, [r7, #7]
 800a78e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2200      	movs	r2, #0
 800a79a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3330      	adds	r3, #48	; 0x30
 800a7a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fe f9c0 	bl	8008b32 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a7b2:	79fb      	ldrb	r3, [r7, #7]
 800a7b4:	f003 0320 	and.w	r3, r3, #32
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d060      	beq.n	800a87e <f_open+0x362>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d05c      	beq.n	800a87e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	68da      	ldr	r2, [r3, #12]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	895b      	ldrh	r3, [r3, #10]
 800a7d0:	025b      	lsls	r3, r3, #9
 800a7d2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	657b      	str	r3, [r7, #84]	; 0x54
 800a7e0:	e016      	b.n	800a810 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe fc6b 	bl	80090c2 <get_fat>
 800a7ec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a7ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d802      	bhi.n	800a7fa <f_open+0x2de>
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a7fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a800:	d102      	bne.n	800a808 <f_open+0x2ec>
 800a802:	2301      	movs	r3, #1
 800a804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a808:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a80a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	657b      	str	r3, [r7, #84]	; 0x54
 800a810:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a814:	2b00      	cmp	r3, #0
 800a816:	d103      	bne.n	800a820 <f_open+0x304>
 800a818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a81a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d8e0      	bhi.n	800a7e2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a824:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d127      	bne.n	800a87e <f_open+0x362>
 800a82e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a834:	2b00      	cmp	r3, #0
 800a836:	d022      	beq.n	800a87e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fe fc21 	bl	8009084 <clust2sect>
 800a842:	6478      	str	r0, [r7, #68]	; 0x44
 800a844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a846:	2b00      	cmp	r3, #0
 800a848:	d103      	bne.n	800a852 <f_open+0x336>
						res = FR_INT_ERR;
 800a84a:	2302      	movs	r3, #2
 800a84c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a850:	e015      	b.n	800a87e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a854:	0a5a      	lsrs	r2, r3, #9
 800a856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a858:	441a      	add	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	7858      	ldrb	r0, [r3, #1]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6a1a      	ldr	r2, [r3, #32]
 800a86c:	2301      	movs	r3, #1
 800a86e:	f7fe f85f 	bl	8008930 <disk_read>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d002      	beq.n	800a87e <f_open+0x362>
 800a878:	2301      	movs	r3, #1
 800a87a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a87e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a882:	2b00      	cmp	r3, #0
 800a884:	d002      	beq.n	800a88c <f_open+0x370>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a88c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a890:	4618      	mov	r0, r3
 800a892:	3760      	adds	r7, #96	; 0x60
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b08e      	sub	sp, #56	; 0x38
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
 800a8a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f107 0214 	add.w	r2, r7, #20
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7ff fdb5 	bl	800a428 <validate>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a8c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d107      	bne.n	800a8dc <f_read+0x44>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	7d5b      	ldrb	r3, [r3, #21]
 800a8d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a8d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <f_read+0x4a>
 800a8dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8e0:	e115      	b.n	800ab0e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	7d1b      	ldrb	r3, [r3, #20]
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d101      	bne.n	800a8f2 <f_read+0x5a>
 800a8ee:	2307      	movs	r3, #7
 800a8f0:	e10d      	b.n	800ab0e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	68da      	ldr	r2, [r3, #12]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	429a      	cmp	r2, r3
 800a904:	f240 80fe 	bls.w	800ab04 <f_read+0x26c>
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a90c:	e0fa      	b.n	800ab04 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a916:	2b00      	cmp	r3, #0
 800a918:	f040 80c6 	bne.w	800aaa8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	0a5b      	lsrs	r3, r3, #9
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	8952      	ldrh	r2, [r2, #10]
 800a926:	3a01      	subs	r2, #1
 800a928:	4013      	ands	r3, r2
 800a92a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d12f      	bne.n	800a992 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d103      	bne.n	800a942 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	633b      	str	r3, [r7, #48]	; 0x30
 800a940:	e013      	b.n	800a96a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d007      	beq.n	800a95a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	4619      	mov	r1, r3
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f7fe fe3f 	bl	80095d4 <clmt_clust>
 800a956:	6338      	str	r0, [r7, #48]	; 0x30
 800a958:	e007      	b.n	800a96a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	69db      	ldr	r3, [r3, #28]
 800a960:	4619      	mov	r1, r3
 800a962:	4610      	mov	r0, r2
 800a964:	f7fe fbad 	bl	80090c2 <get_fat>
 800a968:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d804      	bhi.n	800a97a <f_read+0xe2>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2202      	movs	r2, #2
 800a974:	755a      	strb	r2, [r3, #21]
 800a976:	2302      	movs	r3, #2
 800a978:	e0c9      	b.n	800ab0e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a980:	d104      	bne.n	800a98c <f_read+0xf4>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2201      	movs	r2, #1
 800a986:	755a      	strb	r2, [r3, #21]
 800a988:	2301      	movs	r3, #1
 800a98a:	e0c0      	b.n	800ab0e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a990:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	4619      	mov	r1, r3
 800a99a:	4610      	mov	r0, r2
 800a99c:	f7fe fb72 	bl	8009084 <clust2sect>
 800a9a0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d104      	bne.n	800a9b2 <f_read+0x11a>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	755a      	strb	r2, [r3, #21]
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	e0ad      	b.n	800ab0e <f_read+0x276>
			sect += csect;
 800a9b2:	69ba      	ldr	r2, [r7, #24]
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	0a5b      	lsrs	r3, r3, #9
 800a9be:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d039      	beq.n	800aa3a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a9c6:	69fa      	ldr	r2, [r7, #28]
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	4413      	add	r3, r2
 800a9cc:	697a      	ldr	r2, [r7, #20]
 800a9ce:	8952      	ldrh	r2, [r2, #10]
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d905      	bls.n	800a9e0 <f_read+0x148>
					cc = fs->csize - csect;
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	895b      	ldrh	r3, [r3, #10]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	7858      	ldrb	r0, [r3, #1]
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	69ba      	ldr	r2, [r7, #24]
 800a9e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9ea:	f7fd ffa1 	bl	8008930 <disk_read>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d004      	beq.n	800a9fe <f_read+0x166>
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	755a      	strb	r2, [r3, #21]
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e087      	b.n	800ab0e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	7d1b      	ldrb	r3, [r3, #20]
 800aa02:	b25b      	sxtb	r3, r3
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	da14      	bge.n	800aa32 <f_read+0x19a>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6a1a      	ldr	r2, [r3, #32]
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	1ad2      	subs	r2, r2, r3
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d20d      	bcs.n	800aa32 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6a1a      	ldr	r2, [r3, #32]
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	025b      	lsls	r3, r3, #9
 800aa20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa22:	18d0      	adds	r0, r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	3330      	adds	r3, #48	; 0x30
 800aa28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	f7fe f85f 	bl	8008af0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa34:	025b      	lsls	r3, r3, #9
 800aa36:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800aa38:	e050      	b.n	800aadc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6a1a      	ldr	r2, [r3, #32]
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d02e      	beq.n	800aaa2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	7d1b      	ldrb	r3, [r3, #20]
 800aa48:	b25b      	sxtb	r3, r3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	da18      	bge.n	800aa80 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	7858      	ldrb	r0, [r3, #1]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6a1a      	ldr	r2, [r3, #32]
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	f7fd ff87 	bl	8008970 <disk_write>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d004      	beq.n	800aa72 <f_read+0x1da>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	755a      	strb	r2, [r3, #21]
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e04d      	b.n	800ab0e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	7d1b      	ldrb	r3, [r3, #20]
 800aa76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	7858      	ldrb	r0, [r3, #1]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	69ba      	ldr	r2, [r7, #24]
 800aa8e:	f7fd ff4f 	bl	8008930 <disk_read>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d004      	beq.n	800aaa2 <f_read+0x20a>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	755a      	strb	r2, [r3, #21]
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e035      	b.n	800ab0e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	69ba      	ldr	r2, [r7, #24]
 800aaa6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800aab4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800aab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d901      	bls.n	800aac2 <f_read+0x22a>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	699b      	ldr	r3, [r3, #24]
 800aacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad0:	4413      	add	r3, r2
 800aad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aad4:	4619      	mov	r1, r3
 800aad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aad8:	f7fe f80a 	bl	8008af0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800aadc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	4413      	add	r3, r2
 800aae2:	627b      	str	r3, [r7, #36]	; 0x24
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	699a      	ldr	r2, [r3, #24]
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	441a      	add	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	619a      	str	r2, [r3, #24]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf6:	441a      	add	r2, r3
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	601a      	str	r2, [r3, #0]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab00:	1ad3      	subs	r3, r2, r3
 800ab02:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f47f af01 	bne.w	800a90e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3738      	adds	r7, #56	; 0x38
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b08c      	sub	sp, #48	; 0x30
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	607a      	str	r2, [r7, #4]
 800ab22:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f107 0210 	add.w	r2, r7, #16
 800ab34:	4611      	mov	r1, r2
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7ff fc76 	bl	800a428 <validate>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ab42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d107      	bne.n	800ab5a <f_write+0x44>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	7d5b      	ldrb	r3, [r3, #21]
 800ab4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ab52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d002      	beq.n	800ab60 <f_write+0x4a>
 800ab5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab5e:	e14b      	b.n	800adf8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	7d1b      	ldrb	r3, [r3, #20]
 800ab64:	f003 0302 	and.w	r3, r3, #2
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <f_write+0x5a>
 800ab6c:	2307      	movs	r3, #7
 800ab6e:	e143      	b.n	800adf8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	699a      	ldr	r2, [r3, #24]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	441a      	add	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	f080 812d 	bcs.w	800addc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	43db      	mvns	r3, r3
 800ab88:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ab8a:	e127      	b.n	800addc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f040 80e3 	bne.w	800ad60 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	0a5b      	lsrs	r3, r3, #9
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	8952      	ldrh	r2, [r2, #10]
 800aba4:	3a01      	subs	r2, #1
 800aba6:	4013      	ands	r3, r2
 800aba8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d143      	bne.n	800ac38 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10c      	bne.n	800abd2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800abbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d11a      	bne.n	800abfa <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2100      	movs	r1, #0
 800abc8:	4618      	mov	r0, r3
 800abca:	f7fe fc6b 	bl	80094a4 <create_chain>
 800abce:	62b8      	str	r0, [r7, #40]	; 0x28
 800abd0:	e013      	b.n	800abfa <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d007      	beq.n	800abea <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	4619      	mov	r1, r3
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f7fe fcf7 	bl	80095d4 <clmt_clust>
 800abe6:	62b8      	str	r0, [r7, #40]	; 0x28
 800abe8:	e007      	b.n	800abfa <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	69db      	ldr	r3, [r3, #28]
 800abf0:	4619      	mov	r1, r3
 800abf2:	4610      	mov	r0, r2
 800abf4:	f7fe fc56 	bl	80094a4 <create_chain>
 800abf8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800abfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f000 80f2 	beq.w	800ade6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ac02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d104      	bne.n	800ac12 <f_write+0xfc>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	755a      	strb	r2, [r3, #21]
 800ac0e:	2302      	movs	r3, #2
 800ac10:	e0f2      	b.n	800adf8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac18:	d104      	bne.n	800ac24 <f_write+0x10e>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	755a      	strb	r2, [r3, #21]
 800ac20:	2301      	movs	r3, #1
 800ac22:	e0e9      	b.n	800adf8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac28:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d102      	bne.n	800ac38 <f_write+0x122>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac36:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	7d1b      	ldrb	r3, [r3, #20]
 800ac3c:	b25b      	sxtb	r3, r3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	da18      	bge.n	800ac74 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	7858      	ldrb	r0, [r3, #1]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6a1a      	ldr	r2, [r3, #32]
 800ac50:	2301      	movs	r3, #1
 800ac52:	f7fd fe8d 	bl	8008970 <disk_write>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d004      	beq.n	800ac66 <f_write+0x150>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	755a      	strb	r2, [r3, #21]
 800ac62:	2301      	movs	r3, #1
 800ac64:	e0c8      	b.n	800adf8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	7d1b      	ldrb	r3, [r3, #20]
 800ac6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	69db      	ldr	r3, [r3, #28]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	f7fe fa01 	bl	8009084 <clust2sect>
 800ac82:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d104      	bne.n	800ac94 <f_write+0x17e>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	755a      	strb	r2, [r3, #21]
 800ac90:	2302      	movs	r3, #2
 800ac92:	e0b1      	b.n	800adf8 <f_write+0x2e2>
			sect += csect;
 800ac94:	697a      	ldr	r2, [r7, #20]
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	4413      	add	r3, r2
 800ac9a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	0a5b      	lsrs	r3, r3, #9
 800aca0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800aca2:	6a3b      	ldr	r3, [r7, #32]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d03c      	beq.n	800ad22 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aca8:	69ba      	ldr	r2, [r7, #24]
 800acaa:	6a3b      	ldr	r3, [r7, #32]
 800acac:	4413      	add	r3, r2
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	8952      	ldrh	r2, [r2, #10]
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d905      	bls.n	800acc2 <f_write+0x1ac>
					cc = fs->csize - csect;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	895b      	ldrh	r3, [r3, #10]
 800acba:	461a      	mov	r2, r3
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	7858      	ldrb	r0, [r3, #1]
 800acc6:	6a3b      	ldr	r3, [r7, #32]
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	69f9      	ldr	r1, [r7, #28]
 800accc:	f7fd fe50 	bl	8008970 <disk_write>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d004      	beq.n	800ace0 <f_write+0x1ca>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2201      	movs	r2, #1
 800acda:	755a      	strb	r2, [r3, #21]
 800acdc:	2301      	movs	r3, #1
 800acde:	e08b      	b.n	800adf8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6a1a      	ldr	r2, [r3, #32]
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	1ad2      	subs	r2, r2, r3
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	429a      	cmp	r2, r3
 800acec:	d215      	bcs.n	800ad1a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6a1a      	ldr	r2, [r3, #32]
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	025b      	lsls	r3, r3, #9
 800acfe:	69fa      	ldr	r2, [r7, #28]
 800ad00:	4413      	add	r3, r2
 800ad02:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad06:	4619      	mov	r1, r3
 800ad08:	f7fd fef2 	bl	8008af0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	7d1b      	ldrb	r3, [r3, #20]
 800ad10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ad1a:	6a3b      	ldr	r3, [r7, #32]
 800ad1c:	025b      	lsls	r3, r3, #9
 800ad1e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ad20:	e03f      	b.n	800ada2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6a1a      	ldr	r2, [r3, #32]
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d016      	beq.n	800ad5a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	699a      	ldr	r2, [r3, #24]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d210      	bcs.n	800ad5a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	7858      	ldrb	r0, [r3, #1]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad42:	2301      	movs	r3, #1
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	f7fd fdf3 	bl	8008930 <disk_read>
 800ad4a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d004      	beq.n	800ad5a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2201      	movs	r2, #1
 800ad54:	755a      	strb	r2, [r3, #21]
 800ad56:	2301      	movs	r3, #1
 800ad58:	e04e      	b.n	800adf8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	697a      	ldr	r2, [r7, #20]
 800ad5e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ad6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ad6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d901      	bls.n	800ad7a <f_write+0x264>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad88:	4413      	add	r3, r2
 800ad8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad8c:	69f9      	ldr	r1, [r7, #28]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fd feae 	bl	8008af0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	7d1b      	ldrb	r3, [r3, #20]
 800ad98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ada2:	69fa      	ldr	r2, [r7, #28]
 800ada4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada6:	4413      	add	r3, r2
 800ada8:	61fb      	str	r3, [r7, #28]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	699a      	ldr	r2, [r3, #24]
 800adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb0:	441a      	add	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	619a      	str	r2, [r3, #24]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	68da      	ldr	r2, [r3, #12]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	bf38      	it	cc
 800adc2:	461a      	movcc	r2, r3
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	60da      	str	r2, [r3, #12]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adce:	441a      	add	r2, r3
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	f47f aed4 	bne.w	800ab8c <f_write+0x76>
 800ade4:	e000      	b.n	800ade8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ade6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	7d1b      	ldrb	r3, [r3, #20]
 800adec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adf0:	b2da      	uxtb	r2, r3
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3730      	adds	r7, #48	; 0x30
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f107 0208 	add.w	r2, r7, #8
 800ae0e:	4611      	mov	r1, r2
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff fb09 	bl	800a428 <validate>
 800ae16:	4603      	mov	r3, r0
 800ae18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae1a:	7dfb      	ldrb	r3, [r7, #23]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d168      	bne.n	800aef2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	7d1b      	ldrb	r3, [r3, #20]
 800ae24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d062      	beq.n	800aef2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	7d1b      	ldrb	r3, [r3, #20]
 800ae30:	b25b      	sxtb	r3, r3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	da15      	bge.n	800ae62 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	7858      	ldrb	r0, [r3, #1]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a1a      	ldr	r2, [r3, #32]
 800ae44:	2301      	movs	r3, #1
 800ae46:	f7fd fd93 	bl	8008970 <disk_write>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <f_sync+0x54>
 800ae50:	2301      	movs	r3, #1
 800ae52:	e04f      	b.n	800aef4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	7d1b      	ldrb	r3, [r3, #20]
 800ae58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae5c:	b2da      	uxtb	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ae62:	f002 f887 	bl	800cf74 <get_fattime>
 800ae66:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6e:	4619      	mov	r1, r3
 800ae70:	4610      	mov	r0, r2
 800ae72:	f7fe f86b 	bl	8008f4c <move_window>
 800ae76:	4603      	mov	r3, r0
 800ae78:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ae7a:	7dfb      	ldrb	r3, [r7, #23]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d138      	bne.n	800aef2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae84:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	330b      	adds	r3, #11
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	320b      	adds	r2, #11
 800ae8e:	7812      	ldrb	r2, [r2, #0]
 800ae90:	f042 0220 	orr.w	r2, r2, #32
 800ae94:	b2d2      	uxtb	r2, r2
 800ae96:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6818      	ldr	r0, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	461a      	mov	r2, r3
 800aea2:	68f9      	ldr	r1, [r7, #12]
 800aea4:	f7fe fd70 	bl	8009988 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f103 021c 	add.w	r2, r3, #28
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	f7fd fdef 	bl	8008a98 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3316      	adds	r3, #22
 800aebe:	6939      	ldr	r1, [r7, #16]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fd fde9 	bl	8008a98 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3312      	adds	r3, #18
 800aeca:	2100      	movs	r1, #0
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fd fdc8 	bl	8008a62 <st_word>
					fs->wflag = 1;
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2201      	movs	r2, #1
 800aed6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fe f864 	bl	8008fa8 <sync_fs>
 800aee0:	4603      	mov	r3, r0
 800aee2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	7d1b      	ldrb	r3, [r3, #20]
 800aee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aeec:	b2da      	uxtb	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7ff ff7b 	bl	800ae00 <f_sync>
 800af0a:	4603      	mov	r3, r0
 800af0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d118      	bne.n	800af46 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f107 0208 	add.w	r2, r7, #8
 800af1a:	4611      	mov	r1, r2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7ff fa83 	bl	800a428 <validate>
 800af22:	4603      	mov	r3, r0
 800af24:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10c      	bne.n	800af46 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	4618      	mov	r0, r3
 800af32:	f7fd ff67 	bl	8008e04 <dec_lock>
 800af36:	4603      	mov	r3, r0
 800af38:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d102      	bne.n	800af46 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800af46:	7bfb      	ldrb	r3, [r7, #15]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <f_opendir+0x14>
 800af60:	2309      	movs	r3, #9
 800af62:	e064      	b.n	800b02e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800af68:	f107 010c 	add.w	r1, r7, #12
 800af6c:	463b      	mov	r3, r7
 800af6e:	2200      	movs	r2, #0
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff f80d 	bl	8009f90 <find_volume>
 800af76:	4603      	mov	r3, r0
 800af78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d14f      	bne.n	800b020 <f_opendir+0xd0>
		obj->fs = fs;
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	4619      	mov	r1, r3
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7fe fef4 	bl	8009d78 <follow_path>
 800af90:	4603      	mov	r3, r0
 800af92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800af94:	7dfb      	ldrb	r3, [r7, #23]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d13d      	bne.n	800b016 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800afa0:	b25b      	sxtb	r3, r3
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	db12      	blt.n	800afcc <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	799b      	ldrb	r3, [r3, #6]
 800afaa:	f003 0310 	and.w	r3, r3, #16
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00a      	beq.n	800afc8 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a1b      	ldr	r3, [r3, #32]
 800afb8:	4619      	mov	r1, r3
 800afba:	4610      	mov	r0, r2
 800afbc:	f7fe fcc5 	bl	800994a <ld_clust>
 800afc0:	4602      	mov	r2, r0
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	609a      	str	r2, [r3, #8]
 800afc6:	e001      	b.n	800afcc <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800afc8:	2305      	movs	r3, #5
 800afca:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800afcc:	7dfb      	ldrb	r3, [r7, #23]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d121      	bne.n	800b016 <f_opendir+0xc6>
				obj->id = fs->id;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	88da      	ldrh	r2, [r3, #6]
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800afda:	2100      	movs	r1, #0
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7fe fb2d 	bl	800963c <dir_sdi>
 800afe2:	4603      	mov	r3, r0
 800afe4:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d114      	bne.n	800b016 <f_opendir+0xc6>
					if (obj->sclust) {
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00d      	beq.n	800b010 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800aff4:	2100      	movs	r1, #0
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f7fd fe76 	bl	8008ce8 <inc_lock>
 800affc:	4602      	mov	r2, r0
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d105      	bne.n	800b016 <f_opendir+0xc6>
 800b00a:	2312      	movs	r3, #18
 800b00c:	75fb      	strb	r3, [r7, #23]
 800b00e:	e002      	b.n	800b016 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	2200      	movs	r2, #0
 800b014:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	2b04      	cmp	r3, #4
 800b01a:	d101      	bne.n	800b020 <f_opendir+0xd0>
 800b01c:	2305      	movs	r3, #5
 800b01e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b020:	7dfb      	ldrb	r3, [r7, #23]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d002      	beq.n	800b02c <f_opendir+0xdc>
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	2200      	movs	r2, #0
 800b02a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3718      	adds	r7, #24
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b084      	sub	sp, #16
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f107 0208 	add.w	r2, r7, #8
 800b044:	4611      	mov	r1, r2
 800b046:	4618      	mov	r0, r3
 800b048:	f7ff f9ee 	bl	800a428 <validate>
 800b04c:	4603      	mov	r3, r0
 800b04e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b050:	7bfb      	ldrb	r3, [r7, #15]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d110      	bne.n	800b078 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d006      	beq.n	800b06c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	4618      	mov	r0, r3
 800b064:	f7fd fece 	bl	8008e04 <dec_lock>
 800b068:	4603      	mov	r3, r0
 800b06a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d102      	bne.n	800b078 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800b078:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f107 0208 	add.w	r2, r7, #8
 800b092:	4611      	mov	r1, r2
 800b094:	4618      	mov	r0, r3
 800b096:	f7ff f9c7 	bl	800a428 <validate>
 800b09a:	4603      	mov	r3, r0
 800b09c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d126      	bne.n	800b0f2 <f_readdir+0x70>
		if (!fno) {
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d106      	bne.n	800b0b8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7fe fac5 	bl	800963c <dir_sdi>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	73fb      	strb	r3, [r7, #15]
 800b0b6:	e01c      	b.n	800b0f2 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7fe fc84 	bl	80099c8 <dir_read>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
 800b0c6:	2b04      	cmp	r3, #4
 800b0c8:	d101      	bne.n	800b0ce <f_readdir+0x4c>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10e      	bne.n	800b0f2 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b0d4:	6839      	ldr	r1, [r7, #0]
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7fe fd5a 	bl	8009b90 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b0dc:	2100      	movs	r1, #0
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7fe fb27 	bl	8009732 <dir_next>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	2b04      	cmp	r3, #4
 800b0ec:	d101      	bne.n	800b0f2 <f_readdir+0x70>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800b0fc:	b590      	push	{r4, r7, lr}
 800b0fe:	b09d      	sub	sp, #116	; 0x74
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	607a      	str	r2, [r7, #4]
 800b106:	603b      	str	r3, [r7, #0]
 800b108:	460b      	mov	r3, r1
 800b10a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800b10c:	2301      	movs	r3, #1
 800b10e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800b110:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b114:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800b116:	f107 030c 	add.w	r3, r7, #12
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fe fe9d 	bl	8009e5a <get_ldnumber>
 800b120:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b124:	2b00      	cmp	r3, #0
 800b126:	da02      	bge.n	800b12e <f_mkfs+0x32>
 800b128:	230b      	movs	r3, #11
 800b12a:	f000 bc0d 	b.w	800b948 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800b12e:	4a94      	ldr	r2, [pc, #592]	; (800b380 <f_mkfs+0x284>)
 800b130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d005      	beq.n	800b146 <f_mkfs+0x4a>
 800b13a:	4a91      	ldr	r2, [pc, #580]	; (800b380 <f_mkfs+0x284>)
 800b13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b13e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b142:	2200      	movs	r2, #0
 800b144:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800b146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b148:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800b14c:	2300      	movs	r3, #0
 800b14e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800b152:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b156:	4618      	mov	r0, r3
 800b158:	f7fd fbc4 	bl	80088e4 <disk_initialize>
 800b15c:	4603      	mov	r3, r0
 800b15e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800b162:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b166:	f003 0301 	and.w	r3, r3, #1
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <f_mkfs+0x76>
 800b16e:	2303      	movs	r3, #3
 800b170:	e3ea      	b.n	800b948 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800b172:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b176:	f003 0304 	and.w	r3, r3, #4
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d001      	beq.n	800b182 <f_mkfs+0x86>
 800b17e:	230a      	movs	r3, #10
 800b180:	e3e2      	b.n	800b948 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800b182:	f107 0214 	add.w	r2, r7, #20
 800b186:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b18a:	2103      	movs	r1, #3
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fd fc0f 	bl	80089b0 <disk_ioctl>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10c      	bne.n	800b1b2 <f_mkfs+0xb6>
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d009      	beq.n	800b1b2 <f_mkfs+0xb6>
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1a4:	d805      	bhi.n	800b1b2 <f_mkfs+0xb6>
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	1e5a      	subs	r2, r3, #1
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d001      	beq.n	800b1b6 <f_mkfs+0xba>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800b1b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1ba:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <f_mkfs+0xce>
 800b1c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d809      	bhi.n	800b1de <f_mkfs+0xe2>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b1d0:	d805      	bhi.n	800b1de <f_mkfs+0xe2>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	1e5a      	subs	r2, r3, #1
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4013      	ands	r3, r2
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <f_mkfs+0xe6>
 800b1de:	2313      	movs	r3, #19
 800b1e0:	e3b2      	b.n	800b948 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800b1e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ea:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800b1f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b1f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800b1fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b200:	fb02 f303 	mul.w	r3, r2, r3
 800b204:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <f_mkfs+0x114>
 800b20c:	230e      	movs	r3, #14
 800b20e:	e39b      	b.n	800b948 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800b210:	f107 0210 	add.w	r2, r7, #16
 800b214:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b218:	2101      	movs	r1, #1
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fd fbc8 	bl	80089b0 <disk_ioctl>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <f_mkfs+0x12e>
 800b226:	2301      	movs	r3, #1
 800b228:	e38e      	b.n	800b948 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800b22a:	7afb      	ldrb	r3, [r7, #11]
 800b22c:	f003 0308 	and.w	r3, r3, #8
 800b230:	2b00      	cmp	r3, #0
 800b232:	d001      	beq.n	800b238 <f_mkfs+0x13c>
 800b234:	2300      	movs	r3, #0
 800b236:	e000      	b.n	800b23a <f_mkfs+0x13e>
 800b238:	233f      	movs	r3, #63	; 0x3f
 800b23a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b240:	429a      	cmp	r2, r3
 800b242:	d201      	bcs.n	800b248 <f_mkfs+0x14c>
 800b244:	230e      	movs	r3, #14
 800b246:	e37f      	b.n	800b948 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800b248:	693a      	ldr	r2, [r7, #16]
 800b24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	2b7f      	cmp	r3, #127	; 0x7f
 800b254:	d801      	bhi.n	800b25a <f_mkfs+0x15e>
 800b256:	230e      	movs	r3, #14
 800b258:	e376      	b.n	800b948 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2b80      	cmp	r3, #128	; 0x80
 800b25e:	d901      	bls.n	800b264 <f_mkfs+0x168>
 800b260:	2313      	movs	r3, #19
 800b262:	e371      	b.n	800b948 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800b264:	7afb      	ldrb	r3, [r7, #11]
 800b266:	f003 0302 	and.w	r3, r3, #2
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00d      	beq.n	800b28a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800b26e:	7afb      	ldrb	r3, [r7, #11]
 800b270:	f003 0307 	and.w	r3, r3, #7
 800b274:	2b02      	cmp	r3, #2
 800b276:	d004      	beq.n	800b282 <f_mkfs+0x186>
 800b278:	7afb      	ldrb	r3, [r7, #11]
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d103      	bne.n	800b28a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800b282:	2303      	movs	r3, #3
 800b284:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b288:	e009      	b.n	800b29e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800b28a:	7afb      	ldrb	r3, [r7, #11]
 800b28c:	f003 0301 	and.w	r3, r3, #1
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <f_mkfs+0x19c>
 800b294:	2313      	movs	r3, #19
 800b296:	e357      	b.n	800b948 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800b298:	2302      	movs	r3, #2
 800b29a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	66bb      	str	r3, [r7, #104]	; 0x68
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800b2a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b2a6:	2b03      	cmp	r3, #3
 800b2a8:	d13c      	bne.n	800b324 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800b2aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d11b      	bne.n	800b2e8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	0c5b      	lsrs	r3, r3, #17
 800b2b4:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2be:	e005      	b.n	800b2cc <f_mkfs+0x1d0>
 800b2c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2c8:	005b      	lsls	r3, r3, #1
 800b2ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2cc:	4a2d      	ldr	r2, [pc, #180]	; (800b384 <f_mkfs+0x288>)
 800b2ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d007      	beq.n	800b2e8 <f_mkfs+0x1ec>
 800b2d8:	4a2a      	ldr	r2, [pc, #168]	; (800b384 <f_mkfs+0x288>)
 800b2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d9eb      	bls.n	800b2c0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2f0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	3302      	adds	r3, #2
 800b2f6:	009a      	lsls	r2, r3, #2
 800b2f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b2fa:	4413      	add	r3, r2
 800b2fc:	1e5a      	subs	r2, r3, #1
 800b2fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b300:	fbb2 f3f3 	udiv	r3, r2, r3
 800b304:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 32;	/* Number of reserved sectors */
 800b306:	2320      	movs	r3, #32
 800b308:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800b30a:	2300      	movs	r3, #0
 800b30c:	64fb      	str	r3, [r7, #76]	; 0x4c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b314:	4293      	cmp	r3, r2
 800b316:	d903      	bls.n	800b320 <f_mkfs+0x224>
 800b318:	6a3b      	ldr	r3, [r7, #32]
 800b31a:	4a1b      	ldr	r2, [pc, #108]	; (800b388 <f_mkfs+0x28c>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d952      	bls.n	800b3c6 <f_mkfs+0x2ca>
 800b320:	230e      	movs	r3, #14
 800b322:	e311      	b.n	800b948 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800b324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b326:	2b00      	cmp	r3, #0
 800b328:	d11b      	bne.n	800b362 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	0b1b      	lsrs	r3, r3, #12
 800b32e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b330:	2300      	movs	r3, #0
 800b332:	64bb      	str	r3, [r7, #72]	; 0x48
 800b334:	2301      	movs	r3, #1
 800b336:	66bb      	str	r3, [r7, #104]	; 0x68
 800b338:	e005      	b.n	800b346 <f_mkfs+0x24a>
 800b33a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b33c:	3301      	adds	r3, #1
 800b33e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b342:	005b      	lsls	r3, r3, #1
 800b344:	66bb      	str	r3, [r7, #104]	; 0x68
 800b346:	4a11      	ldr	r2, [pc, #68]	; (800b38c <f_mkfs+0x290>)
 800b348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b34a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d007      	beq.n	800b362 <f_mkfs+0x266>
 800b352:	4a0e      	ldr	r2, [pc, #56]	; (800b38c <f_mkfs+0x290>)
 800b354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b35a:	461a      	mov	r2, r3
 800b35c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b35e:	429a      	cmp	r2, r3
 800b360:	d9eb      	bls.n	800b33a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b366:	fbb2 f3f3 	udiv	r3, r2, r3
 800b36a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800b36c:	6a3b      	ldr	r3, [r7, #32]
 800b36e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b372:	4293      	cmp	r3, r2
 800b374:	d90c      	bls.n	800b390 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800b376:	6a3b      	ldr	r3, [r7, #32]
 800b378:	3302      	adds	r3, #2
 800b37a:	005b      	lsls	r3, r3, #1
 800b37c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b37e:	e012      	b.n	800b3a6 <f_mkfs+0x2aa>
 800b380:	20000448 	.word	0x20000448
 800b384:	08015f28 	.word	0x08015f28
 800b388:	0ffffff5 	.word	0x0ffffff5
 800b38c:	08015f38 	.word	0x08015f38
				} else {
					fmt = FS_FAT12;
 800b390:	2301      	movs	r3, #1
 800b392:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800b396:	6a3a      	ldr	r2, [r7, #32]
 800b398:	4613      	mov	r3, r2
 800b39a:	005b      	lsls	r3, r3, #1
 800b39c:	4413      	add	r3, r2
 800b39e:	3301      	adds	r3, #1
 800b3a0:	085b      	lsrs	r3, r3, #1
 800b3a2:	3303      	adds	r3, #3
 800b3a4:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800b3a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b3a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3aa:	4413      	add	r3, r2
 800b3ac:	1e5a      	subs	r2, r3, #1
 800b3ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b3b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3b4:	653b      	str	r3, [r7, #80]	; 0x50
				sz_rsv = 1;						/* Number of reserved sectors */
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800b3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3bc:	015a      	lsls	r2, r3, #5
 800b3be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b3c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3c4:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800b3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3ca:	4413      	add	r3, r2
 800b3cc:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800b3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3d2:	fb02 f203 	mul.w	r2, r2, r3
 800b3d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3d8:	441a      	add	r2, r3
 800b3da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3dc:	4413      	add	r3, r2
 800b3de:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800b3e0:	697a      	ldr	r2, [r7, #20]
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	1e5a      	subs	r2, r3, #1
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	425b      	negs	r3, r3
 800b3ec:	401a      	ands	r2, r3
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800b3f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b3f8:	2b03      	cmp	r3, #3
 800b3fa:	d108      	bne.n	800b40e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800b3fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b400:	4413      	add	r3, r2
 800b402:	657b      	str	r3, [r7, #84]	; 0x54
 800b404:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b408:	4413      	add	r3, r2
 800b40a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b40c:	e006      	b.n	800b41c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800b40e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b412:	fbb2 f3f3 	udiv	r3, r2, r3
 800b416:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b418:	4413      	add	r3, r2
 800b41a:	653b      	str	r3, [r7, #80]	; 0x50
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800b41c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b41e:	011a      	lsls	r2, r3, #4
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	441a      	add	r2, r3
 800b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b426:	1ad2      	subs	r2, r2, r3
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d901      	bls.n	800b432 <f_mkfs+0x336>
 800b42e:	230e      	movs	r3, #14
 800b430:	e28a      	b.n	800b948 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800b432:	693a      	ldr	r2, [r7, #16]
 800b434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b436:	1ad2      	subs	r2, r2, r3
 800b438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b43a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b43c:	fb01 f303 	mul.w	r3, r1, r3
 800b440:	1ad2      	subs	r2, r2, r3
 800b442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b444:	1ad2      	subs	r2, r2, r3
 800b446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b448:	fbb2 f3f3 	udiv	r3, r2, r3
 800b44c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800b44e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b452:	2b03      	cmp	r3, #3
 800b454:	d10f      	bne.n	800b476 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800b456:	6a3b      	ldr	r3, [r7, #32]
 800b458:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d80a      	bhi.n	800b476 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d105      	bne.n	800b472 <f_mkfs+0x376>
 800b466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b468:	085b      	lsrs	r3, r3, #1
 800b46a:	607b      	str	r3, [r7, #4]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d144      	bne.n	800b4fc <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800b472:	230e      	movs	r3, #14
 800b474:	e268      	b.n	800b948 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800b476:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d133      	bne.n	800b4e6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800b47e:	6a3b      	ldr	r3, [r7, #32]
 800b480:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b484:	4293      	cmp	r3, r2
 800b486:	d91e      	bls.n	800b4c6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d107      	bne.n	800b49e <f_mkfs+0x3a2>
 800b48e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b490:	005b      	lsls	r3, r3, #1
 800b492:	2b40      	cmp	r3, #64	; 0x40
 800b494:	d803      	bhi.n	800b49e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800b496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b498:	005b      	lsls	r3, r3, #1
 800b49a:	607b      	str	r3, [r7, #4]
 800b49c:	e033      	b.n	800b506 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800b49e:	7afb      	ldrb	r3, [r7, #11]
 800b4a0:	f003 0302 	and.w	r3, r3, #2
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d003      	beq.n	800b4b0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b4ae:	e02a      	b.n	800b506 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d105      	bne.n	800b4c2 <f_mkfs+0x3c6>
 800b4b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4b8:	005b      	lsls	r3, r3, #1
 800b4ba:	607b      	str	r3, [r7, #4]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b80      	cmp	r3, #128	; 0x80
 800b4c0:	d91e      	bls.n	800b500 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800b4c2:	230e      	movs	r3, #14
 800b4c4:	e240      	b.n	800b948 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d80a      	bhi.n	800b4e6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d105      	bne.n	800b4e2 <f_mkfs+0x3e6>
 800b4d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4d8:	005b      	lsls	r3, r3, #1
 800b4da:	607b      	str	r3, [r7, #4]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b80      	cmp	r3, #128	; 0x80
 800b4e0:	d910      	bls.n	800b504 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800b4e2:	230e      	movs	r3, #14
 800b4e4:	e230      	b.n	800b948 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800b4e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d10c      	bne.n	800b508 <f_mkfs+0x40c>
 800b4ee:	6a3b      	ldr	r3, [r7, #32]
 800b4f0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d907      	bls.n	800b508 <f_mkfs+0x40c>
 800b4f8:	230e      	movs	r3, #14
 800b4fa:	e225      	b.n	800b948 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b4fc:	bf00      	nop
 800b4fe:	e6ce      	b.n	800b29e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b500:	bf00      	nop
 800b502:	e6cc      	b.n	800b29e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b504:	bf00      	nop
			pau = au;
 800b506:	e6ca      	b.n	800b29e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800b508:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800b50a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b50c:	461a      	mov	r2, r3
 800b50e:	2100      	movs	r1, #0
 800b510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b512:	f7fd fb0e 	bl	8008b32 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800b516:	220b      	movs	r2, #11
 800b518:	49bc      	ldr	r1, [pc, #752]	; (800b80c <f_mkfs+0x710>)
 800b51a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b51c:	f7fd fae8 	bl	8008af0 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	330b      	adds	r3, #11
 800b524:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b526:	4611      	mov	r1, r2
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fd fa9a 	bl	8008a62 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	330d      	adds	r3, #13
 800b532:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b534:	b2d2      	uxtb	r2, r2
 800b536:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53a:	330e      	adds	r3, #14
 800b53c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b53e:	b292      	uxth	r2, r2
 800b540:	4611      	mov	r1, r2
 800b542:	4618      	mov	r0, r3
 800b544:	f7fd fa8d 	bl	8008a62 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800b548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54a:	3310      	adds	r3, #16
 800b54c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b54e:	b2d2      	uxtb	r2, r2
 800b550:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b554:	f103 0211 	add.w	r2, r3, #17
 800b558:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b55c:	2b03      	cmp	r3, #3
 800b55e:	d002      	beq.n	800b566 <f_mkfs+0x46a>
 800b560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b562:	b29b      	uxth	r3, r3
 800b564:	e000      	b.n	800b568 <f_mkfs+0x46c>
 800b566:	2300      	movs	r3, #0
 800b568:	4619      	mov	r1, r3
 800b56a:	4610      	mov	r0, r2
 800b56c:	f7fd fa79 	bl	8008a62 <st_word>
		if (sz_vol < 0x10000) {
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b576:	d208      	bcs.n	800b58a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800b578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57a:	3313      	adds	r3, #19
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	b292      	uxth	r2, r2
 800b580:	4611      	mov	r1, r2
 800b582:	4618      	mov	r0, r3
 800b584:	f7fd fa6d 	bl	8008a62 <st_word>
 800b588:	e006      	b.n	800b598 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58c:	3320      	adds	r3, #32
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	4611      	mov	r1, r2
 800b592:	4618      	mov	r0, r3
 800b594:	f7fd fa80 	bl	8008a98 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800b598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59a:	3315      	adds	r3, #21
 800b59c:	22f8      	movs	r2, #248	; 0xf8
 800b59e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a2:	3318      	adds	r3, #24
 800b5a4:	213f      	movs	r1, #63	; 0x3f
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fd fa5b 	bl	8008a62 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ae:	331a      	adds	r3, #26
 800b5b0:	21ff      	movs	r1, #255	; 0xff
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fd fa55 	bl	8008a62 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ba:	331c      	adds	r3, #28
 800b5bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fd fa6a 	bl	8008a98 <st_dword>
		if (fmt == FS_FAT32) {
 800b5c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b5c8:	2b03      	cmp	r3, #3
 800b5ca:	d131      	bne.n	800b630 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ce:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800b5d2:	f001 fccf 	bl	800cf74 <get_fattime>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	4619      	mov	r1, r3
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f7fd fa5c 	bl	8008a98 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800b5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e2:	3324      	adds	r3, #36	; 0x24
 800b5e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fd fa56 	bl	8008a98 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800b5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ee:	332c      	adds	r3, #44	; 0x2c
 800b5f0:	2102      	movs	r1, #2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fd fa50 	bl	8008a98 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800b5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fa:	3330      	adds	r3, #48	; 0x30
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fd fa2f 	bl	8008a62 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800b604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b606:	3332      	adds	r3, #50	; 0x32
 800b608:	2106      	movs	r1, #6
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fd fa29 	bl	8008a62 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b612:	3340      	adds	r3, #64	; 0x40
 800b614:	2280      	movs	r2, #128	; 0x80
 800b616:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800b618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61a:	3342      	adds	r3, #66	; 0x42
 800b61c:	2229      	movs	r2, #41	; 0x29
 800b61e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800b620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b622:	3347      	adds	r3, #71	; 0x47
 800b624:	2213      	movs	r2, #19
 800b626:	497a      	ldr	r1, [pc, #488]	; (800b810 <f_mkfs+0x714>)
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fd fa61 	bl	8008af0 <mem_cpy>
 800b62e:	e020      	b.n	800b672 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800b630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b632:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800b636:	f001 fc9d 	bl	800cf74 <get_fattime>
 800b63a:	4603      	mov	r3, r0
 800b63c:	4619      	mov	r1, r3
 800b63e:	4620      	mov	r0, r4
 800b640:	f7fd fa2a 	bl	8008a98 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	3316      	adds	r3, #22
 800b648:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b64a:	b292      	uxth	r2, r2
 800b64c:	4611      	mov	r1, r2
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fd fa07 	bl	8008a62 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800b654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b656:	3324      	adds	r3, #36	; 0x24
 800b658:	2280      	movs	r2, #128	; 0x80
 800b65a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800b65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65e:	3326      	adds	r3, #38	; 0x26
 800b660:	2229      	movs	r2, #41	; 0x29
 800b662:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b666:	332b      	adds	r3, #43	; 0x2b
 800b668:	2213      	movs	r2, #19
 800b66a:	496a      	ldr	r1, [pc, #424]	; (800b814 <f_mkfs+0x718>)
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fd fa3f 	bl	8008af0 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b678:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7fd f9f0 	bl	8008a62 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800b682:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b686:	2301      	movs	r3, #1
 800b688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b68a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b68c:	f7fd f970 	bl	8008970 <disk_write>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d001      	beq.n	800b69a <f_mkfs+0x59e>
 800b696:	2301      	movs	r3, #1
 800b698:	e156      	b.n	800b948 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800b69a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d140      	bne.n	800b724 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a4:	1d9a      	adds	r2, r3, #6
 800b6a6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6ae:	f7fd f95f 	bl	8008970 <disk_write>
			mem_set(buf, 0, ss);
 800b6b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6ba:	f7fd fa3a 	bl	8008b32 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800b6be:	4956      	ldr	r1, [pc, #344]	; (800b818 <f_mkfs+0x71c>)
 800b6c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6c2:	f7fd f9e9 	bl	8008a98 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b6cc:	4953      	ldr	r1, [pc, #332]	; (800b81c <f_mkfs+0x720>)
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7fd f9e2 	bl	8008a98 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800b6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b6da:	6a3b      	ldr	r3, [r7, #32]
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	4619      	mov	r1, r3
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	f7fd f9d9 	bl	8008a98 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b6ec:	2102      	movs	r1, #2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fd f9d2 	bl	8008a98 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b6fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fd f9af 	bl	8008a62 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	1dda      	adds	r2, r3, #7
 800b708:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b70c:	2301      	movs	r3, #1
 800b70e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b710:	f7fd f92e 	bl	8008970 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	1c5a      	adds	r2, r3, #1
 800b718:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b71c:	2301      	movs	r3, #1
 800b71e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b720:	f7fd f926 	bl	8008970 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800b724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b726:	2100      	movs	r1, #0
 800b728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b72a:	f7fd fa02 	bl	8008b32 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800b72e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b730:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800b732:	2300      	movs	r3, #0
 800b734:	64bb      	str	r3, [r7, #72]	; 0x48
 800b736:	e04b      	b.n	800b7d0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800b738:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	d113      	bne.n	800b768 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800b740:	f06f 0107 	mvn.w	r1, #7
 800b744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b746:	f7fd f9a7 	bl	8008a98 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	3304      	adds	r3, #4
 800b74e:	f04f 31ff 	mov.w	r1, #4294967295
 800b752:	4618      	mov	r0, r3
 800b754:	f7fd f9a0 	bl	8008a98 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800b758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75a:	3308      	adds	r3, #8
 800b75c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b760:	4618      	mov	r0, r3
 800b762:	f7fd f999 	bl	8008a98 <st_dword>
 800b766:	e00b      	b.n	800b780 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800b768:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d101      	bne.n	800b774 <f_mkfs+0x678>
 800b770:	4b2b      	ldr	r3, [pc, #172]	; (800b820 <f_mkfs+0x724>)
 800b772:	e001      	b.n	800b778 <f_mkfs+0x67c>
 800b774:	f06f 0307 	mvn.w	r3, #7
 800b778:	4619      	mov	r1, r3
 800b77a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b77c:	f7fd f98c 	bl	8008a98 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800b780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b782:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800b784:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b788:	4293      	cmp	r3, r2
 800b78a:	bf28      	it	cs
 800b78c:	4613      	movcs	r3, r2
 800b78e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800b790:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b796:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b79a:	f7fd f8e9 	bl	8008970 <disk_write>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <f_mkfs+0x6ac>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e0cf      	b.n	800b948 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800b7a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7b0:	f7fd f9bf 	bl	8008b32 <mem_set>
				sect += n; nsect -= n;
 800b7b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b7b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7b8:	4413      	add	r3, r2
 800b7ba:	667b      	str	r3, [r7, #100]	; 0x64
 800b7bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800b7c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1dc      	bne.n	800b784 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800b7ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d3af      	bcc.n	800b738 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800b7d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b7dc:	2b03      	cmp	r3, #3
 800b7de:	d101      	bne.n	800b7e4 <f_mkfs+0x6e8>
 800b7e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7e2:	e000      	b.n	800b7e6 <f_mkfs+0x6ea>
 800b7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7e6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800b7e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	bf28      	it	cs
 800b7f0:	4613      	movcs	r3, r2
 800b7f2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800b7f4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b7f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b7fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7fe:	f7fd f8b7 	bl	8008970 <disk_write>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d00d      	beq.n	800b824 <f_mkfs+0x728>
 800b808:	2301      	movs	r3, #1
 800b80a:	e09d      	b.n	800b948 <f_mkfs+0x84c>
 800b80c:	08012fa8 	.word	0x08012fa8
 800b810:	08012fb4 	.word	0x08012fb4
 800b814:	08012fc8 	.word	0x08012fc8
 800b818:	41615252 	.word	0x41615252
 800b81c:	61417272 	.word	0x61417272
 800b820:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800b824:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b828:	4413      	add	r3, r2
 800b82a:	667b      	str	r3, [r7, #100]	; 0x64
 800b82c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b82e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800b834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1d6      	bne.n	800b7e8 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800b83a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b83e:	2b03      	cmp	r3, #3
 800b840:	d103      	bne.n	800b84a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800b842:	230c      	movs	r3, #12
 800b844:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800b848:	e010      	b.n	800b86c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b850:	d303      	bcc.n	800b85a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800b852:	2306      	movs	r3, #6
 800b854:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800b858:	e008      	b.n	800b86c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800b85a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d101      	bne.n	800b866 <f_mkfs+0x76a>
 800b862:	2304      	movs	r3, #4
 800b864:	e000      	b.n	800b868 <f_mkfs+0x76c>
 800b866:	2301      	movs	r3, #1
 800b868:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800b86c:	7afb      	ldrb	r3, [r7, #11]
 800b86e:	f003 0308 	and.w	r3, r3, #8
 800b872:	2b00      	cmp	r3, #0
 800b874:	d15b      	bne.n	800b92e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800b876:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b878:	461a      	mov	r2, r3
 800b87a:	2100      	movs	r1, #0
 800b87c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b87e:	f7fd f958 	bl	8008b32 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800b882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b884:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b888:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fd f8e8 	bl	8008a62 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b898:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	2200      	movs	r2, #0
 800b89e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	3302      	adds	r3, #2
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	3303      	adds	r3, #3
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800b8c0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800b8c2:	693a      	ldr	r2, [r7, #16]
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c6:	441a      	add	r2, r3
 800b8c8:	4b21      	ldr	r3, [pc, #132]	; (800b950 <f_mkfs+0x854>)
 800b8ca:	fba3 1302 	umull	r1, r3, r3, r2
 800b8ce:	1ad2      	subs	r2, r2, r3
 800b8d0:	0852      	lsrs	r2, r2, #1
 800b8d2:	4413      	add	r3, r2
 800b8d4:	0b5b      	lsrs	r3, r3, #13
 800b8d6:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	3305      	adds	r3, #5
 800b8dc:	22fe      	movs	r2, #254	; 0xfe
 800b8de:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	3306      	adds	r3, #6
 800b8e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b8e6:	0892      	lsrs	r2, r2, #2
 800b8e8:	b2d2      	uxtb	r2, r2
 800b8ea:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800b8ee:	b2d2      	uxtb	r2, r2
 800b8f0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	3307      	adds	r3, #7
 800b8f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b8f8:	b2d2      	uxtb	r2, r2
 800b8fa:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	3308      	adds	r3, #8
 800b900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b902:	4618      	mov	r0, r3
 800b904:	f7fd f8c8 	bl	8008a98 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	330c      	adds	r3, #12
 800b90c:	693a      	ldr	r2, [r7, #16]
 800b90e:	4611      	mov	r1, r2
 800b910:	4618      	mov	r0, r3
 800b912:	f7fd f8c1 	bl	8008a98 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800b916:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b91a:	2301      	movs	r3, #1
 800b91c:	2200      	movs	r2, #0
 800b91e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b920:	f7fd f826 	bl	8008970 <disk_write>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <f_mkfs+0x832>
 800b92a:	2301      	movs	r3, #1
 800b92c:	e00c      	b.n	800b948 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800b92e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b932:	2200      	movs	r2, #0
 800b934:	2100      	movs	r1, #0
 800b936:	4618      	mov	r0, r3
 800b938:	f7fd f83a 	bl	80089b0 <disk_ioctl>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <f_mkfs+0x84a>
 800b942:	2301      	movs	r3, #1
 800b944:	e000      	b.n	800b948 <f_mkfs+0x84c>

	return FR_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3774      	adds	r7, #116	; 0x74
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd90      	pop	{r4, r7, pc}
 800b950:	0515565b 	.word	0x0515565b

0800b954 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b954:	b480      	push	{r7}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	4613      	mov	r3, r2
 800b960:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b962:	2301      	movs	r3, #1
 800b964:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b96a:	4b1f      	ldr	r3, [pc, #124]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b96c:	7b9b      	ldrb	r3, [r3, #14]
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	2b01      	cmp	r3, #1
 800b972:	d831      	bhi.n	800b9d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b974:	4b1c      	ldr	r3, [pc, #112]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b976:	7b9b      	ldrb	r3, [r3, #14]
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	461a      	mov	r2, r3
 800b97c:	4b1a      	ldr	r3, [pc, #104]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b97e:	2100      	movs	r1, #0
 800b980:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b982:	4b19      	ldr	r3, [pc, #100]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b984:	7b9b      	ldrb	r3, [r3, #14]
 800b986:	b2db      	uxtb	r3, r3
 800b988:	4a17      	ldr	r2, [pc, #92]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	4413      	add	r3, r2
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b992:	4b15      	ldr	r3, [pc, #84]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b994:	7b9b      	ldrb	r3, [r3, #14]
 800b996:	b2db      	uxtb	r3, r3
 800b998:	461a      	mov	r2, r3
 800b99a:	4b13      	ldr	r3, [pc, #76]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b99c:	4413      	add	r3, r2
 800b99e:	79fa      	ldrb	r2, [r7, #7]
 800b9a0:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800b9a2:	4b11      	ldr	r3, [pc, #68]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b9a4:	7b9b      	ldrb	r3, [r3, #14]
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	1c5a      	adds	r2, r3, #1
 800b9aa:	b2d1      	uxtb	r1, r2
 800b9ac:	4a0e      	ldr	r2, [pc, #56]	; (800b9e8 <FATFS_LinkDriverEx+0x94>)
 800b9ae:	7391      	strb	r1, [r2, #14]
 800b9b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b9b2:	7dbb      	ldrb	r3, [r7, #22]
 800b9b4:	3330      	adds	r3, #48	; 0x30
 800b9b6:	b2da      	uxtb	r2, r3
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	223a      	movs	r2, #58	; 0x3a
 800b9c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	3302      	adds	r3, #2
 800b9c8:	222f      	movs	r2, #47	; 0x2f
 800b9ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	3303      	adds	r3, #3
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	371c      	adds	r7, #28
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	20000474 	.word	0x20000474

0800b9ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	6839      	ldr	r1, [r7, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7ff ffaa 	bl	800b954 <FATFS_LinkDriverEx>
 800ba00:	4603      	mov	r3, r0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	460b      	mov	r3, r1
 800ba16:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800ba20:	4b15      	ldr	r3, [pc, #84]	; (800ba78 <FATFS_UnLinkDriverEx+0x6c>)
 800ba22:	7b9b      	ldrb	r3, [r3, #14]
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d01e      	beq.n	800ba68 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	3b30      	subs	r3, #48	; 0x30
 800ba30:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800ba32:	7bbb      	ldrb	r3, [r7, #14]
 800ba34:	4a10      	ldr	r2, [pc, #64]	; (800ba78 <FATFS_UnLinkDriverEx+0x6c>)
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	4413      	add	r3, r2
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d013      	beq.n	800ba68 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800ba40:	7bbb      	ldrb	r3, [r7, #14]
 800ba42:	4a0d      	ldr	r2, [pc, #52]	; (800ba78 <FATFS_UnLinkDriverEx+0x6c>)
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	4413      	add	r3, r2
 800ba48:	2200      	movs	r2, #0
 800ba4a:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800ba4c:	7bbb      	ldrb	r3, [r7, #14]
 800ba4e:	4a0a      	ldr	r2, [pc, #40]	; (800ba78 <FATFS_UnLinkDriverEx+0x6c>)
 800ba50:	4413      	add	r3, r2
 800ba52:	2200      	movs	r2, #0
 800ba54:	731a      	strb	r2, [r3, #12]
      disk.nbr--;
 800ba56:	4b08      	ldr	r3, [pc, #32]	; (800ba78 <FATFS_UnLinkDriverEx+0x6c>)
 800ba58:	7b9b      	ldrb	r3, [r3, #14]
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	b2da      	uxtb	r2, r3
 800ba60:	4b05      	ldr	r3, [pc, #20]	; (800ba78 <FATFS_UnLinkDriverEx+0x6c>)
 800ba62:	739a      	strb	r2, [r3, #14]
      ret = 0;
 800ba64:	2300      	movs	r3, #0
 800ba66:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	20000474 	.word	0x20000474

0800ba7c <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800ba84:	2100      	movs	r1, #0
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f7ff ffc0 	bl	800ba0c <FATFS_UnLinkDriverEx>
 800ba8c:	4603      	mov	r3, r0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800baa2:	2300      	movs	r3, #0
 800baa4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	7c1b      	ldrb	r3, [r3, #16]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10e      	bne.n	800bacc <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800baae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bab2:	2202      	movs	r2, #2
 800bab4:	2181      	movs	r1, #129	; 0x81
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f003 ff5e 	bl	800f978 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800babc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bac0:	2202      	movs	r2, #2
 800bac2:	2101      	movs	r1, #1
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f003 ff57 	bl	800f978 <USBD_LL_OpenEP>
 800baca:	e00b      	b.n	800bae4 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800bacc:	2340      	movs	r3, #64	; 0x40
 800bace:	2202      	movs	r2, #2
 800bad0:	2181      	movs	r1, #129	; 0x81
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f003 ff50 	bl	800f978 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800bad8:	2340      	movs	r3, #64	; 0x40
 800bada:	2202      	movs	r2, #2
 800badc:	2101      	movs	r1, #1
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f003 ff4a 	bl	800f978 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800bae4:	2308      	movs	r3, #8
 800bae6:	2203      	movs	r2, #3
 800bae8:	2182      	movs	r1, #130	; 0x82
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f003 ff44 	bl	800f978 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800baf0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800baf4:	f004 fc92 	bl	801041c <malloc>
 800baf8:	4603      	mov	r3, r0
 800bafa:	461a      	mov	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d102      	bne.n	800bb12 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	73fb      	strb	r3, [r7, #15]
 800bb10:	e026      	b.n	800bb60 <USBD_CDC_Init+0xca>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bb18:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	7c1b      	ldrb	r3, [r3, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d109      	bne.n	800bb50 <USBD_CDC_Init+0xba>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb46:	2101      	movs	r1, #1
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f004 f891 	bl	800fc70 <USBD_LL_PrepareReceive>
 800bb4e:	e007      	b.n	800bb60 <USBD_CDC_Init+0xca>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb56:	2340      	movs	r3, #64	; 0x40
 800bb58:	2101      	movs	r1, #1
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f004 f888 	bl	800fc70 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b084      	sub	sp, #16
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	460b      	mov	r3, r1
 800bb74:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800bb76:	2300      	movs	r3, #0
 800bb78:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800bb7a:	2181      	movs	r1, #129	; 0x81
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f003 ff39 	bl	800f9f4 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800bb82:	2101      	movs	r1, #1
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f003 ff35 	bl	800f9f4 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800bb8a:	2182      	movs	r1, #130	; 0x82
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f003 ff31 	bl	800f9f4 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00e      	beq.n	800bbba <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bbac:	4618      	mov	r0, r3
 800bbae:	f004 fc3d 	bl	801042c <free>
    pdev->pClassData = NULL;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800bbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bbd4:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d03a      	beq.n	800bc58 <USBD_CDC_Setup+0x94>
 800bbe2:	2b20      	cmp	r3, #32
 800bbe4:	d000      	beq.n	800bbe8 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800bbe6:	e043      	b.n	800bc70 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	88db      	ldrh	r3, [r3, #6]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d029      	beq.n	800bc44 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	b25b      	sxtb	r3, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	da11      	bge.n	800bc1e <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	683a      	ldr	r2, [r7, #0]
 800bc04:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800bc06:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bc08:	683a      	ldr	r2, [r7, #0]
 800bc0a:	88d2      	ldrh	r2, [r2, #6]
 800bc0c:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 800bc0e:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	88db      	ldrh	r3, [r3, #6]
 800bc14:	461a      	mov	r2, r3
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f001 f848 	bl	800ccac <USBD_CtlSendData>
    break;
 800bc1c:	e029      	b.n	800bc72 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	785a      	ldrb	r2, [r3, #1]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	88db      	ldrh	r3, [r3, #6]
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 800bc34:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	88db      	ldrh	r3, [r3, #6]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f001 f863 	bl	800cd08 <USBD_CtlPrepareRx>
    break;
 800bc42:	e016      	b.n	800bc72 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	683a      	ldr	r2, [r7, #0]
 800bc4e:	7850      	ldrb	r0, [r2, #1]
 800bc50:	2200      	movs	r2, #0
 800bc52:	6839      	ldr	r1, [r7, #0]
 800bc54:	4798      	blx	r3
    break;
 800bc56:	e00c      	b.n	800bc72 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	785b      	ldrb	r3, [r3, #1]
 800bc5c:	2b0a      	cmp	r3, #10
 800bc5e:	d001      	beq.n	800bc64 <USBD_CDC_Setup+0xa0>
 800bc60:	2b0b      	cmp	r3, #11
      break;
 800bc62:	e005      	b.n	800bc70 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 800bc64:	2201      	movs	r2, #1
 800bc66:	4905      	ldr	r1, [pc, #20]	; (800bc7c <USBD_CDC_Setup+0xb8>)
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f001 f81f 	bl	800ccac <USBD_CtlSendData>
      break;
 800bc6e:	bf00      	nop
    break;
 800bc70:	bf00      	nop
  }
  return USBD_OK;
 800bc72:	2300      	movs	r3, #0
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	20000484 	.word	0x20000484

0800bc80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bc92:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d005      	beq.n	800bcaa <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800bca6:	2300      	movs	r3, #0
 800bca8:	e000      	b.n	800bcac <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800bcaa:	2302      	movs	r3, #2
  }
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bcca:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800bccc:	78fb      	ldrb	r3, [r7, #3]
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f004 f807 	bl	800fce4 <USBD_LL_GetRxDataSize>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00d      	beq.n	800bd04 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bcf6:	68fa      	ldr	r2, [r7, #12]
 800bcf8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	4798      	blx	r3

    return USBD_OK;
 800bd00:	2300      	movs	r3, #0
 800bd02:	e000      	b.n	800bd06 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bd04:	2302      	movs	r3, #2
  }
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b084      	sub	sp, #16
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bd1c:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d015      	beq.n	800bd54 <USBD_CDC_EP0_RxReady+0x46>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bd2e:	2bff      	cmp	r3, #255	; 0xff
 800bd30:	d010      	beq.n	800bd54 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bd40:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bd48:	b292      	uxth	r2, r2
 800bd4a:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	22ff      	movs	r2, #255	; 0xff
 800bd50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
	...

0800bd60 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2243      	movs	r2, #67	; 0x43
 800bd6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800bd6e:	4b03      	ldr	r3, [pc, #12]	; (800bd7c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	2000009c 	.word	0x2000009c

0800bd80 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2243      	movs	r2, #67	; 0x43
 800bd8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800bd8e:	4b03      	ldr	r3, [pc, #12]	; (800bd9c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	20000058 	.word	0x20000058

0800bda0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2243      	movs	r2, #67	; 0x43
 800bdac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800bdae:	4b03      	ldr	r3, [pc, #12]	; (800bdbc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	200000e0 	.word	0x200000e0

0800bdc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	220a      	movs	r2, #10
 800bdcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800bdce:	4b03      	ldr	r3, [pc, #12]	; (800bddc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	20000014 	.word	0x20000014

0800bde0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800bdea:	2302      	movs	r3, #2
 800bdec:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d005      	beq.n	800be00 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800be00:	7bfb      	ldrb	r3, [r7, #15]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3714      	adds	r7, #20
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800be0e:	b480      	push	{r7}
 800be10:	b087      	sub	sp, #28
 800be12:	af00      	add	r7, sp, #0
 800be14:	60f8      	str	r0, [r7, #12]
 800be16:	60b9      	str	r1, [r7, #8]
 800be18:	4613      	mov	r3, r2
 800be1a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800be22:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	68ba      	ldr	r2, [r7, #8]
 800be28:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800be2c:	88fa      	ldrh	r2, [r7, #6]
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	371c      	adds	r7, #28
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr

0800be42 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800be42:	b480      	push	{r7}
 800be44:	b085      	sub	sp, #20
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800be52:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3714      	adds	r7, #20
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b084      	sub	sp, #16
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800be78:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800be80:	2b00      	cmp	r3, #0
 800be82:	d017      	beq.n	800beb4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	7c1b      	ldrb	r3, [r3, #16]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d109      	bne.n	800bea0 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be96:	2101      	movs	r1, #1
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f003 fee9 	bl	800fc70 <USBD_LL_PrepareReceive>
 800be9e:	e007      	b.n	800beb0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bea6:	2340      	movs	r3, #64	; 0x40
 800bea8:	2101      	movs	r1, #1
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f003 fee0 	bl	800fc70 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	e000      	b.n	800beb6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800beb4:	2302      	movs	r3, #2
  }
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b084      	sub	sp, #16
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	60f8      	str	r0, [r7, #12]
 800bec6:	60b9      	str	r1, [r7, #8]
 800bec8:	4613      	mov	r3, r2
 800beca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d101      	bne.n	800bed6 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800bed2:	2302      	movs	r3, #2
 800bed4:	e01a      	b.n	800bf0c <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d003      	beq.n	800bee8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d003      	beq.n	800bef6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	79fa      	ldrb	r2, [r7, #7]
 800bf02:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f003 fcad 	bl	800f864 <USBD_LL_Init>
  
  return USBD_OK; 
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d006      	beq.n	800bf36 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	73fb      	strb	r3, [r7, #15]
 800bf34:	e001      	b.n	800bf3a <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800bf36:	2302      	movs	r3, #2
 800bf38:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800bf3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3714      	adds	r7, #20
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f003 fcdf 	bl	800f914 <USBD_LL_Start>
  
  return USBD_OK;  
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b084      	sub	sp, #16
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800bf82:	2302      	movs	r3, #2
 800bf84:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00c      	beq.n	800bfaa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	78fa      	ldrb	r2, [r7, #3]
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	4798      	blx	r3
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d101      	bne.n	800bfaa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 800bfaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3710      	adds	r7, #16
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	78fa      	ldrb	r2, [r7, #3]
 800bfca:	4611      	mov	r1, r2
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	4798      	blx	r3
  return USBD_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b082      	sub	sp, #8
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
 800bfe2:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 fdb4 	bl	800cb5a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2201      	movs	r2, #1
 800bff6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800c000:	461a      	mov	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800c00e:	f003 031f 	and.w	r3, r3, #31
 800c012:	2b01      	cmp	r3, #1
 800c014:	d00b      	beq.n	800c02e <USBD_LL_SetupStage+0x54>
 800c016:	2b02      	cmp	r3, #2
 800c018:	d011      	beq.n	800c03e <USBD_LL_SetupStage+0x64>
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d117      	bne.n	800c04e <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c024:	4619      	mov	r1, r3
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f9c6 	bl	800c3b8 <USBD_StdDevReq>
    break;
 800c02c:	e01a      	b.n	800c064 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 fa0e 	bl	800c458 <USBD_StdItfReq>
    break;
 800c03c:	e012      	b.n	800c064 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c044:	4619      	mov	r1, r3
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 fa39 	bl	800c4be <USBD_StdEPReq>
    break;
 800c04c:	e00a      	b.n	800c064 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800c054:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	4619      	mov	r1, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f003 fcff 	bl	800fa60 <USBD_LL_StallEP>
    break;
 800c062:	bf00      	nop
  }  
  return USBD_OK;  
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b086      	sub	sp, #24
 800c072:	af00      	add	r7, sp, #0
 800c074:	60f8      	str	r0, [r7, #12]
 800c076:	460b      	mov	r3, r1
 800c078:	607a      	str	r2, [r7, #4]
 800c07a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800c07c:	7afb      	ldrb	r3, [r7, #11]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d138      	bne.n	800c0f4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800c088:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800c090:	2b03      	cmp	r3, #3
 800c092:	d142      	bne.n	800c11a <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	689a      	ldr	r2, [r3, #8]
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d914      	bls.n	800c0ca <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	689a      	ldr	r2, [r3, #8]
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	1ad2      	subs	r2, r2, r3
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	68da      	ldr	r2, [r3, #12]
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	bf28      	it	cs
 800c0ba:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	461a      	mov	r2, r3
 800c0c0:	6879      	ldr	r1, [r7, #4]
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f000 fe3e 	bl	800cd44 <USBD_CtlContinueRx>
 800c0c8:	e027      	b.n	800c11a <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0d0:	691b      	ldr	r3, [r3, #16]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00a      	beq.n	800c0ec <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d105      	bne.n	800c0ec <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f000 fe3b 	bl	800cd68 <USBD_CtlSendStatus>
 800c0f2:	e012      	b.n	800c11a <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0fa:	699b      	ldr	r3, [r3, #24]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00c      	beq.n	800c11a <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 800c106:	2b03      	cmp	r3, #3
 800c108:	d107      	bne.n	800c11a <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	7afa      	ldrb	r2, [r7, #11]
 800c114:	4611      	mov	r1, r2
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	4798      	blx	r3
  }  
  return USBD_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3718      	adds	r7, #24
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	460b      	mov	r3, r1
 800c12e:	607a      	str	r2, [r7, #4]
 800c130:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800c132:	7afb      	ldrb	r3, [r7, #11]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d16c      	bne.n	800c212 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	3314      	adds	r3, #20
 800c13c:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800c144:	2b02      	cmp	r3, #2
 800c146:	d157      	bne.n	800c1f8 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	689a      	ldr	r2, [r3, #8]
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	429a      	cmp	r2, r3
 800c152:	d915      	bls.n	800c180 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	689a      	ldr	r2, [r3, #8]
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	1ad2      	subs	r2, r2, r3
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800c166:	b29b      	uxth	r3, r3
 800c168:	461a      	mov	r2, r3
 800c16a:	6879      	ldr	r1, [r7, #4]
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f000 fdb9 	bl	800cce4 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800c172:	2300      	movs	r3, #0
 800c174:	2200      	movs	r2, #0
 800c176:	2100      	movs	r1, #0
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f003 fd79 	bl	800fc70 <USBD_LL_PrepareReceive>
 800c17e:	e03b      	b.n	800c1f8 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	697a      	ldr	r2, [r7, #20]
 800c186:	68d2      	ldr	r2, [r2, #12]
 800c188:	fbb3 f1f2 	udiv	r1, r3, r2
 800c18c:	fb02 f201 	mul.w	r2, r2, r1
 800c190:	1a9b      	subs	r3, r3, r2
 800c192:	2b00      	cmp	r3, #0
 800c194:	d11c      	bne.n	800c1d0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	685a      	ldr	r2, [r3, #4]
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d316      	bcc.n	800c1d0 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	685a      	ldr	r2, [r3, #4]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d20f      	bcs.n	800c1d0 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f000 fd95 	bl	800cce4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f003 fd51 	bl	800fc70 <USBD_LL_PrepareReceive>
 800c1ce:	e013      	b.n	800c1f8 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00a      	beq.n	800c1f2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c1e2:	2b03      	cmp	r3, #3
 800c1e4:	d105      	bne.n	800c1f2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	f000 fdcb 	bl	800cd8e <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d11a      	bne.n	800c238 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f7ff feac 	bl	800bf60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800c210:	e012      	b.n	800c238 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00c      	beq.n	800c238 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800c224:	2b03      	cmp	r3, #3
 800c226:	d107      	bne.n	800c238 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c22e:	695b      	ldr	r3, [r3, #20]
 800c230:	7afa      	ldrb	r2, [r7, #11]
 800c232:	4611      	mov	r1, r2
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	4798      	blx	r3
  }  
  return USBD_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3718      	adds	r7, #24
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b082      	sub	sp, #8
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800c24a:	2340      	movs	r3, #64	; 0x40
 800c24c:	2200      	movs	r2, #0
 800c24e:	2100      	movs	r1, #0
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f003 fb91 	bl	800f978 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2240      	movs	r2, #64	; 0x40
 800c25a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800c25e:	2340      	movs	r3, #64	; 0x40
 800c260:	2200      	movs	r2, #0
 800c262:	2180      	movs	r1, #128	; 0x80
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f003 fb87 	bl	800f978 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2240      	movs	r2, #64	; 0x40
 800c26e:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d009      	beq.n	800c296 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	6852      	ldr	r2, [r2, #4]
 800c28e:	b2d2      	uxtb	r2, r2
 800c290:	4611      	mov	r1, r2
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	4798      	blx	r3
 
  
  return USBD_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	78fa      	ldrb	r2, [r7, #3]
 800c2b0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2204      	movs	r2, #4
 800c2d8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	370c      	adds	r7, #12
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b083      	sub	sp, #12
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c31a:	2b03      	cmp	r3, #3
 800c31c:	d10b      	bne.n	800c336 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c324:	69db      	ldr	r3, [r3, #28]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d005      	beq.n	800c336 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c330:	69db      	ldr	r3, [r3, #28]
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800c336:	2300      	movs	r3, #0
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	460b      	mov	r3, r1
 800c34a:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	370c      	adds	r7, #12
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr

0800c35a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c35a:	b480      	push	{r7}
 800c35c:	b083      	sub	sp, #12
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	460b      	mov	r3, r1
 800c364:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	4618      	mov	r0, r3
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b082      	sub	sp, #8
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2201      	movs	r2, #1
 800c396:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	6852      	ldr	r2, [r2, #4]
 800c3a6:	b2d2      	uxtb	r2, r2
 800c3a8:	4611      	mov	r1, r2
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	4798      	blx	r3
   
  return USBD_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	785b      	ldrb	r3, [r3, #1]
 800c3ca:	2b09      	cmp	r3, #9
 800c3cc:	d839      	bhi.n	800c442 <USBD_StdDevReq+0x8a>
 800c3ce:	a201      	add	r2, pc, #4	; (adr r2, 800c3d4 <USBD_StdDevReq+0x1c>)
 800c3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d4:	0800c425 	.word	0x0800c425
 800c3d8:	0800c439 	.word	0x0800c439
 800c3dc:	0800c443 	.word	0x0800c443
 800c3e0:	0800c42f 	.word	0x0800c42f
 800c3e4:	0800c443 	.word	0x0800c443
 800c3e8:	0800c407 	.word	0x0800c407
 800c3ec:	0800c3fd 	.word	0x0800c3fd
 800c3f0:	0800c443 	.word	0x0800c443
 800c3f4:	0800c41b 	.word	0x0800c41b
 800c3f8:	0800c411 	.word	0x0800c411
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800c3fc:	6839      	ldr	r1, [r7, #0]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f936 	bl	800c670 <USBD_GetDescriptor>
    break;
 800c404:	e022      	b.n	800c44c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 fa41 	bl	800c890 <USBD_SetAddress>
    break;
 800c40e:	e01d      	b.n	800c44c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800c410:	6839      	ldr	r1, [r7, #0]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fa7a 	bl	800c90c <USBD_SetConfig>
    break;
 800c418:	e018      	b.n	800c44c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800c41a:	6839      	ldr	r1, [r7, #0]
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 fafd 	bl	800ca1c <USBD_GetConfig>
    break;
 800c422:	e013      	b.n	800c44c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fb2a 	bl	800ca80 <USBD_GetStatus>
    break;
 800c42c:	e00e      	b.n	800c44c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 fb4f 	bl	800cad4 <USBD_SetFeature>
    break;
 800c436:	e009      	b.n	800c44c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fb65 	bl	800cb0a <USBD_ClrFeature>
    break;
 800c440:	e004      	b.n	800c44c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800c442:	6839      	ldr	r1, [r7, #0]
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f000 fbc5 	bl	800cbd4 <USBD_CtlError>
    break;
 800c44a:	bf00      	nop
  }
  
  return ret;
 800c44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop

0800c458 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800c462:	2300      	movs	r3, #0
 800c464:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c46c:	2b03      	cmp	r3, #3
 800c46e:	d11b      	bne.n	800c4a8 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	889b      	ldrh	r3, [r3, #4]
 800c474:	b2db      	uxtb	r3, r3
 800c476:	2b01      	cmp	r3, #1
 800c478:	d811      	bhi.n	800c49e <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	88db      	ldrh	r3, [r3, #6]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d110      	bne.n	800c4b2 <USBD_StdItfReq+0x5a>
 800c490:	7bfb      	ldrb	r3, [r7, #15]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d10d      	bne.n	800c4b2 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fc66 	bl	800cd68 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800c49c:	e009      	b.n	800c4b2 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800c49e:	6839      	ldr	r1, [r7, #0]
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 fb97 	bl	800cbd4 <USBD_CtlError>
    break;
 800c4a6:	e004      	b.n	800c4b2 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 800c4a8:	6839      	ldr	r1, [r7, #0]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 fb92 	bl	800cbd4 <USBD_CtlError>
    break;
 800c4b0:	e000      	b.n	800c4b4 <USBD_StdItfReq+0x5c>
    break;
 800c4b2:	bf00      	nop
  }
  return USBD_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b084      	sub	sp, #16
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	889b      	ldrh	r3, [r3, #4]
 800c4d0:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4da:	2b20      	cmp	r3, #32
 800c4dc:	d108      	bne.n	800c4f0 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	4798      	blx	r3
    
    return USBD_OK;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	e0ba      	b.n	800c666 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	785b      	ldrb	r3, [r3, #1]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d039      	beq.n	800c56c <USBD_StdEPReq+0xae>
 800c4f8:	2b03      	cmp	r3, #3
 800c4fa:	d002      	beq.n	800c502 <USBD_StdEPReq+0x44>
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d06b      	beq.n	800c5d8 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 800c500:	e0b0      	b.n	800c664 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c508:	2b02      	cmp	r3, #2
 800c50a:	d002      	beq.n	800c512 <USBD_StdEPReq+0x54>
 800c50c:	2b03      	cmp	r3, #3
 800c50e:	d00c      	beq.n	800c52a <USBD_StdEPReq+0x6c>
 800c510:	e025      	b.n	800c55e <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800c512:	7bbb      	ldrb	r3, [r7, #14]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d027      	beq.n	800c568 <USBD_StdEPReq+0xaa>
 800c518:	7bbb      	ldrb	r3, [r7, #14]
 800c51a:	2b80      	cmp	r3, #128	; 0x80
 800c51c:	d024      	beq.n	800c568 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 800c51e:	7bbb      	ldrb	r3, [r7, #14]
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f003 fa9c 	bl	800fa60 <USBD_LL_StallEP>
      break;	
 800c528:	e01e      	b.n	800c568 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	885b      	ldrh	r3, [r3, #2]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d10a      	bne.n	800c548 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800c532:	7bbb      	ldrb	r3, [r7, #14]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d007      	beq.n	800c548 <USBD_StdEPReq+0x8a>
 800c538:	7bbb      	ldrb	r3, [r7, #14]
 800c53a:	2b80      	cmp	r3, #128	; 0x80
 800c53c:	d004      	beq.n	800c548 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 800c53e:	7bbb      	ldrb	r3, [r7, #14]
 800c540:	4619      	mov	r1, r3
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f003 fa8c 	bl	800fa60 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	6839      	ldr	r1, [r7, #0]
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fc06 	bl	800cd68 <USBD_CtlSendStatus>
      break;
 800c55c:	e005      	b.n	800c56a <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 800c55e:	6839      	ldr	r1, [r7, #0]
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 fb37 	bl	800cbd4 <USBD_CtlError>
      break;    
 800c566:	e000      	b.n	800c56a <USBD_StdEPReq+0xac>
      break;	
 800c568:	bf00      	nop
    break;
 800c56a:	e07b      	b.n	800c664 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c572:	2b02      	cmp	r3, #2
 800c574:	d002      	beq.n	800c57c <USBD_StdEPReq+0xbe>
 800c576:	2b03      	cmp	r3, #3
 800c578:	d00c      	beq.n	800c594 <USBD_StdEPReq+0xd6>
 800c57a:	e024      	b.n	800c5c6 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800c57c:	7bbb      	ldrb	r3, [r7, #14]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d026      	beq.n	800c5d0 <USBD_StdEPReq+0x112>
 800c582:	7bbb      	ldrb	r3, [r7, #14]
 800c584:	2b80      	cmp	r3, #128	; 0x80
 800c586:	d023      	beq.n	800c5d0 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 800c588:	7bbb      	ldrb	r3, [r7, #14]
 800c58a:	4619      	mov	r1, r3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f003 fa67 	bl	800fa60 <USBD_LL_StallEP>
      break;	
 800c592:	e01d      	b.n	800c5d0 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	885b      	ldrh	r3, [r3, #2]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d11b      	bne.n	800c5d4 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 800c59c:	7bbb      	ldrb	r3, [r7, #14]
 800c59e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00b      	beq.n	800c5be <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800c5a6:	7bbb      	ldrb	r3, [r7, #14]
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f003 fa8e 	bl	800facc <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	6839      	ldr	r1, [r7, #0]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fbd2 	bl	800cd68 <USBD_CtlSendStatus>
      break;
 800c5c4:	e006      	b.n	800c5d4 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 800c5c6:	6839      	ldr	r1, [r7, #0]
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 fb03 	bl	800cbd4 <USBD_CtlError>
      break;    
 800c5ce:	e002      	b.n	800c5d6 <USBD_StdEPReq+0x118>
      break;	
 800c5d0:	bf00      	nop
 800c5d2:	e047      	b.n	800c664 <USBD_StdEPReq+0x1a6>
      break;
 800c5d4:	bf00      	nop
    break;
 800c5d6:	e045      	b.n	800c664 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	d002      	beq.n	800c5e8 <USBD_StdEPReq+0x12a>
 800c5e2:	2b03      	cmp	r3, #3
 800c5e4:	d00b      	beq.n	800c5fe <USBD_StdEPReq+0x140>
 800c5e6:	e036      	b.n	800c656 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 800c5e8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d036      	beq.n	800c660 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 800c5f2:	7bbb      	ldrb	r3, [r7, #14]
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f003 fa32 	bl	800fa60 <USBD_LL_StallEP>
      break;	
 800c5fc:	e030      	b.n	800c660 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800c5fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c602:	2b00      	cmp	r3, #0
 800c604:	da08      	bge.n	800c618 <USBD_StdEPReq+0x15a>
 800c606:	7bbb      	ldrb	r3, [r7, #14]
 800c608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c60c:	3301      	adds	r3, #1
 800c60e:	011b      	lsls	r3, r3, #4
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	4413      	add	r3, r2
 800c614:	3304      	adds	r3, #4
 800c616:	e007      	b.n	800c628 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800c618:	7bbb      	ldrb	r3, [r7, #14]
 800c61a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800c61e:	3310      	adds	r3, #16
 800c620:	011b      	lsls	r3, r3, #4
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	4413      	add	r3, r2
 800c626:	3304      	adds	r3, #4
 800c628:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800c62a:	7bbb      	ldrb	r3, [r7, #14]
 800c62c:	4619      	mov	r1, r3
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f003 fa82 	bl	800fb38 <USBD_LL_IsStallEP>
 800c634:	4603      	mov	r3, r0
 800c636:	2b00      	cmp	r3, #0
 800c638:	d003      	beq.n	800c642 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2201      	movs	r2, #1
 800c63e:	601a      	str	r2, [r3, #0]
 800c640:	e002      	b.n	800c648 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	2200      	movs	r2, #0
 800c646:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 800c648:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 800c64a:	2202      	movs	r2, #2
 800c64c:	4619      	mov	r1, r3
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 fb2c 	bl	800ccac <USBD_CtlSendData>
      break;
 800c654:	e005      	b.n	800c662 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 fabb 	bl	800cbd4 <USBD_CtlError>
      break;
 800c65e:	e000      	b.n	800c662 <USBD_StdEPReq+0x1a4>
      break;	
 800c660:	bf00      	nop
    break;
 800c662:	bf00      	nop
  }
  return ret;
 800c664:	7bfb      	ldrb	r3, [r7, #15]
}
 800c666:	4618      	mov	r0, r3
 800c668:	3710      	adds	r7, #16
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
	...

0800c670 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	885b      	ldrh	r3, [r3, #2]
 800c67e:	0a1b      	lsrs	r3, r3, #8
 800c680:	b29b      	uxth	r3, r3
 800c682:	3b01      	subs	r3, #1
 800c684:	2b0e      	cmp	r3, #14
 800c686:	f200 80e5 	bhi.w	800c854 <USBD_GetDescriptor+0x1e4>
 800c68a:	a201      	add	r2, pc, #4	; (adr r2, 800c690 <USBD_GetDescriptor+0x20>)
 800c68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c690:	0800c6e5 	.word	0x0800c6e5
 800c694:	0800c6fd 	.word	0x0800c6fd
 800c698:	0800c73d 	.word	0x0800c73d
 800c69c:	0800c855 	.word	0x0800c855
 800c6a0:	0800c855 	.word	0x0800c855
 800c6a4:	0800c801 	.word	0x0800c801
 800c6a8:	0800c827 	.word	0x0800c827
 800c6ac:	0800c855 	.word	0x0800c855
 800c6b0:	0800c855 	.word	0x0800c855
 800c6b4:	0800c855 	.word	0x0800c855
 800c6b8:	0800c855 	.word	0x0800c855
 800c6bc:	0800c855 	.word	0x0800c855
 800c6c0:	0800c855 	.word	0x0800c855
 800c6c4:	0800c855 	.word	0x0800c855
 800c6c8:	0800c6cd 	.word	0x0800c6cd
  { 
#if (USBD_LPM_ENABLED == 1)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c6d2:	69db      	ldr	r3, [r3, #28]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	7c12      	ldrb	r2, [r2, #16]
 800c6d8:	f107 010a 	add.w	r1, r7, #10
 800c6dc:	4610      	mov	r0, r2
 800c6de:	4798      	blx	r3
 800c6e0:	60f8      	str	r0, [r7, #12]
    break;
 800c6e2:	e0bc      	b.n	800c85e <USBD_GetDescriptor+0x1ee>
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	7c12      	ldrb	r2, [r2, #16]
 800c6f0:	f107 010a 	add.w	r1, r7, #10
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	4798      	blx	r3
 800c6f8:	60f8      	str	r0, [r7, #12]
    break;
 800c6fa:	e0b0      	b.n	800c85e <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	7c1b      	ldrb	r3, [r3, #16]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d10d      	bne.n	800c720 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70c:	f107 020a 	add.w	r2, r7, #10
 800c710:	4610      	mov	r0, r2
 800c712:	4798      	blx	r3
 800c714:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3301      	adds	r3, #1
 800c71a:	2202      	movs	r2, #2
 800c71c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c71e:	e09e      	b.n	800c85e <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c728:	f107 020a 	add.w	r2, r7, #10
 800c72c:	4610      	mov	r0, r2
 800c72e:	4798      	blx	r3
 800c730:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	3301      	adds	r3, #1
 800c736:	2202      	movs	r2, #2
 800c738:	701a      	strb	r2, [r3, #0]
    break;
 800c73a:	e090      	b.n	800c85e <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	885b      	ldrh	r3, [r3, #2]
 800c740:	b2db      	uxtb	r3, r3
 800c742:	2b05      	cmp	r3, #5
 800c744:	d856      	bhi.n	800c7f4 <USBD_GetDescriptor+0x184>
 800c746:	a201      	add	r2, pc, #4	; (adr r2, 800c74c <USBD_GetDescriptor+0xdc>)
 800c748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c74c:	0800c765 	.word	0x0800c765
 800c750:	0800c77d 	.word	0x0800c77d
 800c754:	0800c795 	.word	0x0800c795
 800c758:	0800c7ad 	.word	0x0800c7ad
 800c75c:	0800c7c5 	.word	0x0800c7c5
 800c760:	0800c7dd 	.word	0x0800c7dd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	7c12      	ldrb	r2, [r2, #16]
 800c770:	f107 010a 	add.w	r1, r7, #10
 800c774:	4610      	mov	r0, r2
 800c776:	4798      	blx	r3
 800c778:	60f8      	str	r0, [r7, #12]
      break;
 800c77a:	e040      	b.n	800c7fe <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	7c12      	ldrb	r2, [r2, #16]
 800c788:	f107 010a 	add.w	r1, r7, #10
 800c78c:	4610      	mov	r0, r2
 800c78e:	4798      	blx	r3
 800c790:	60f8      	str	r0, [r7, #12]
      break;
 800c792:	e034      	b.n	800c7fe <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	7c12      	ldrb	r2, [r2, #16]
 800c7a0:	f107 010a 	add.w	r1, r7, #10
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	4798      	blx	r3
 800c7a8:	60f8      	str	r0, [r7, #12]
      break;
 800c7aa:	e028      	b.n	800c7fe <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c7b2:	691b      	ldr	r3, [r3, #16]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	7c12      	ldrb	r2, [r2, #16]
 800c7b8:	f107 010a 	add.w	r1, r7, #10
 800c7bc:	4610      	mov	r0, r2
 800c7be:	4798      	blx	r3
 800c7c0:	60f8      	str	r0, [r7, #12]
      break;
 800c7c2:	e01c      	b.n	800c7fe <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c7ca:	695b      	ldr	r3, [r3, #20]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	7c12      	ldrb	r2, [r2, #16]
 800c7d0:	f107 010a 	add.w	r1, r7, #10
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	4798      	blx	r3
 800c7d8:	60f8      	str	r0, [r7, #12]
      break;
 800c7da:	e010      	b.n	800c7fe <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c7e2:	699b      	ldr	r3, [r3, #24]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	7c12      	ldrb	r2, [r2, #16]
 800c7e8:	f107 010a 	add.w	r1, r7, #10
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	4798      	blx	r3
 800c7f0:	60f8      	str	r0, [r7, #12]
      break;
 800c7f2:	e004      	b.n	800c7fe <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800c7f4:	6839      	ldr	r1, [r7, #0]
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 f9ec 	bl	800cbd4 <USBD_CtlError>
      return;
 800c7fc:	e044      	b.n	800c888 <USBD_GetDescriptor+0x218>
#endif   
    }
    break;
 800c7fe:	e02e      	b.n	800c85e <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	7c1b      	ldrb	r3, [r3, #16]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d109      	bne.n	800c81c <USBD_GetDescriptor+0x1ac>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c810:	f107 020a 	add.w	r2, r7, #10
 800c814:	4610      	mov	r0, r2
 800c816:	4798      	blx	r3
 800c818:	60f8      	str	r0, [r7, #12]
      break;
 800c81a:	e020      	b.n	800c85e <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f9d8 	bl	800cbd4 <USBD_CtlError>
      return;
 800c824:	e030      	b.n	800c888 <USBD_GetDescriptor+0x218>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	7c1b      	ldrb	r3, [r3, #16]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10d      	bne.n	800c84a <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c836:	f107 020a 	add.w	r2, r7, #10
 800c83a:	4610      	mov	r0, r2
 800c83c:	4798      	blx	r3
 800c83e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	3301      	adds	r3, #1
 800c844:	2207      	movs	r2, #7
 800c846:	701a      	strb	r2, [r3, #0]
      break; 
 800c848:	e009      	b.n	800c85e <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f9c1 	bl	800cbd4 <USBD_CtlError>
      return;
 800c852:	e019      	b.n	800c888 <USBD_GetDescriptor+0x218>
    }

  default: 
     USBD_CtlError(pdev , req);
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 f9bc 	bl	800cbd4 <USBD_CtlError>
    return;
 800c85c:	e014      	b.n	800c888 <USBD_GetDescriptor+0x218>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800c85e:	897b      	ldrh	r3, [r7, #10]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d011      	beq.n	800c888 <USBD_GetDescriptor+0x218>
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	88db      	ldrh	r3, [r3, #6]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00d      	beq.n	800c888 <USBD_GetDescriptor+0x218>
  {
    
    len = MIN(len , req->wLength);
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	88da      	ldrh	r2, [r3, #6]
 800c870:	897b      	ldrh	r3, [r7, #10]
 800c872:	4293      	cmp	r3, r2
 800c874:	bf28      	it	cs
 800c876:	4613      	movcs	r3, r2
 800c878:	b29b      	uxth	r3, r3
 800c87a:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800c87c:	897b      	ldrh	r3, [r7, #10]
 800c87e:	461a      	mov	r2, r3
 800c880:	68f9      	ldr	r1, [r7, #12]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fa12 	bl	800ccac <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop

0800c890 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	889b      	ldrh	r3, [r3, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d12c      	bne.n	800c8fc <USBD_SetAddress+0x6c>
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	88db      	ldrh	r3, [r3, #6]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d128      	bne.n	800c8fc <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	885b      	ldrh	r3, [r3, #2]
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8b4:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c8bc:	2b03      	cmp	r3, #3
 800c8be:	d104      	bne.n	800c8ca <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800c8c0:	6839      	ldr	r1, [r7, #0]
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f986 	bl	800cbd4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800c8c8:	e01c      	b.n	800c904 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	7bfa      	ldrb	r2, [r7, #15]
 800c8ce:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800c8d2:	7bfb      	ldrb	r3, [r7, #15]
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f003 f95a 	bl	800fb90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 fa43 	bl	800cd68 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800c8e2:	7bfb      	ldrb	r3, [r7, #15]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d004      	beq.n	800c8f2 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2202      	movs	r2, #2
 800c8ec:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800c8f0:	e008      	b.n	800c904 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800c8fa:	e003      	b.n	800c904 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800c8fc:	6839      	ldr	r1, [r7, #0]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f968 	bl	800cbd4 <USBD_CtlError>
  } 
}
 800c904:	bf00      	nop
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	885b      	ldrh	r3, [r3, #2]
 800c91a:	b2da      	uxtb	r2, r3
 800c91c:	4b3e      	ldr	r3, [pc, #248]	; (800ca18 <USBD_SetConfig+0x10c>)
 800c91e:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800c920:	4b3d      	ldr	r3, [pc, #244]	; (800ca18 <USBD_SetConfig+0x10c>)
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d904      	bls.n	800c932 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 800c928:	6839      	ldr	r1, [r7, #0]
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f952 	bl	800cbd4 <USBD_CtlError>
 800c930:	e06f      	b.n	800ca12 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d002      	beq.n	800c942 <USBD_SetConfig+0x36>
 800c93c:	2b03      	cmp	r3, #3
 800c93e:	d023      	beq.n	800c988 <USBD_SetConfig+0x7c>
 800c940:	e062      	b.n	800ca08 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800c942:	4b35      	ldr	r3, [pc, #212]	; (800ca18 <USBD_SetConfig+0x10c>)
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d01a      	beq.n	800c980 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800c94a:	4b33      	ldr	r3, [pc, #204]	; (800ca18 <USBD_SetConfig+0x10c>)
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	461a      	mov	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2203      	movs	r2, #3
 800c958:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800c95c:	4b2e      	ldr	r3, [pc, #184]	; (800ca18 <USBD_SetConfig+0x10c>)
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	4619      	mov	r1, r3
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f7ff fb07 	bl	800bf76 <USBD_SetClassConfig>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d104      	bne.n	800c978 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800c96e:	6839      	ldr	r1, [r7, #0]
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 f92f 	bl	800cbd4 <USBD_CtlError>
          return;
 800c976:	e04c      	b.n	800ca12 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 f9f5 	bl	800cd68 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800c97e:	e048      	b.n	800ca12 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 f9f1 	bl	800cd68 <USBD_CtlSendStatus>
      break;
 800c986:	e044      	b.n	800ca12 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800c988:	4b23      	ldr	r3, [pc, #140]	; (800ca18 <USBD_SetConfig+0x10c>)
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d112      	bne.n	800c9b6 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2202      	movs	r2, #2
 800c994:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800c998:	4b1f      	ldr	r3, [pc, #124]	; (800ca18 <USBD_SetConfig+0x10c>)
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	461a      	mov	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800c9a2:	4b1d      	ldr	r3, [pc, #116]	; (800ca18 <USBD_SetConfig+0x10c>)
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7ff fb03 	bl	800bfb4 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 f9da 	bl	800cd68 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c9b4:	e02d      	b.n	800ca12 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 800c9b6:	4b18      	ldr	r3, [pc, #96]	; (800ca18 <USBD_SetConfig+0x10c>)
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d01d      	beq.n	800ca00 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7ff faf1 	bl	800bfb4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c9d2:	4b11      	ldr	r3, [pc, #68]	; (800ca18 <USBD_SetConfig+0x10c>)
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800c9dc:	4b0e      	ldr	r3, [pc, #56]	; (800ca18 <USBD_SetConfig+0x10c>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7ff fac7 	bl	800bf76 <USBD_SetClassConfig>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d104      	bne.n	800c9f8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800c9ee:	6839      	ldr	r1, [r7, #0]
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 f8ef 	bl	800cbd4 <USBD_CtlError>
          return;
 800c9f6:	e00c      	b.n	800ca12 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 f9b5 	bl	800cd68 <USBD_CtlSendStatus>
      break;
 800c9fe:	e008      	b.n	800ca12 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 f9b1 	bl	800cd68 <USBD_CtlSendStatus>
      break;
 800ca06:	e004      	b.n	800ca12 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800ca08:	6839      	ldr	r1, [r7, #0]
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f8e2 	bl	800cbd4 <USBD_CtlError>
      break;
 800ca10:	bf00      	nop
    }
  }
}
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	20000485 	.word	0x20000485

0800ca1c <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	88db      	ldrh	r3, [r3, #6]
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d004      	beq.n	800ca38 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800ca2e:	6839      	ldr	r1, [r7, #0]
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 f8cf 	bl	800cbd4 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800ca36:	e01f      	b.n	800ca78 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d002      	beq.n	800ca48 <USBD_GetConfig+0x2c>
 800ca42:	2b03      	cmp	r3, #3
 800ca44:	d00b      	beq.n	800ca5e <USBD_GetConfig+0x42>
 800ca46:	e012      	b.n	800ca6e <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 800ca52:	2201      	movs	r2, #1
 800ca54:	4619      	mov	r1, r3
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 f928 	bl	800ccac <USBD_CtlSendData>
      break;
 800ca5c:	e00c      	b.n	800ca78 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800ca62:	2201      	movs	r2, #1
 800ca64:	4619      	mov	r1, r3
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 f920 	bl	800ccac <USBD_CtlSendData>
      break;
 800ca6c:	e004      	b.n	800ca78 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800ca6e:	6839      	ldr	r1, [r7, #0]
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 f8af 	bl	800cbd4 <USBD_CtlError>
      break;
 800ca76:	bf00      	nop
}
 800ca78:	bf00      	nop
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800ca90:	3b02      	subs	r3, #2
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d815      	bhi.n	800cac2 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2201      	movs	r2, #1
 800ca9a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d005      	beq.n	800cab2 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	f043 0202 	orr.w	r2, r3, #2
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800cab6:	2202      	movs	r2, #2
 800cab8:	4619      	mov	r1, r3
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 f8f6 	bl	800ccac <USBD_CtlSendData>
                      2);
    break;
 800cac0:	e004      	b.n	800cacc <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800cac2:	6839      	ldr	r1, [r7, #0]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 f885 	bl	800cbd4 <USBD_CtlError>
    break;
 800caca:	bf00      	nop
  }
}
 800cacc:	bf00      	nop
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	885b      	ldrh	r3, [r3, #2]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d10d      	bne.n	800cb02 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2201      	movs	r2, #1
 800caea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800caf4:	689b      	ldr	r3, [r3, #8]
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f933 	bl	800cd68 <USBD_CtlSendStatus>
  }

}
 800cb02:	bf00      	nop
 800cb04:	3708      	adds	r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b082      	sub	sp, #8
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
 800cb12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800cb1a:	3b02      	subs	r3, #2
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d812      	bhi.n	800cb46 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	885b      	ldrh	r3, [r3, #2]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d113      	bne.n	800cb50 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	6839      	ldr	r1, [r7, #0]
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f912 	bl	800cd68 <USBD_CtlSendStatus>
    }
    break;
 800cb44:	e004      	b.n	800cb50 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800cb46:	6839      	ldr	r1, [r7, #0]
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 f843 	bl	800cbd4 <USBD_CtlError>
    break;
 800cb4e:	e000      	b.n	800cb52 <USBD_ClrFeature+0x48>
    break;
 800cb50:	bf00      	nop
  }
}
 800cb52:	bf00      	nop
 800cb54:	3708      	adds	r7, #8
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb5a:	b480      	push	{r7}
 800cb5c:	b083      	sub	sp, #12
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
 800cb62:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	781a      	ldrb	r2, [r3, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	785a      	ldrb	r2, [r3, #1]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	3302      	adds	r3, #2
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	b29a      	uxth	r2, r3
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	3303      	adds	r3, #3
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	021b      	lsls	r3, r3, #8
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	4413      	add	r3, r2
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	3304      	adds	r3, #4
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	b29a      	uxth	r2, r3
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	3305      	adds	r3, #5
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	021b      	lsls	r3, r3, #8
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	4413      	add	r3, r2
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	3306      	adds	r3, #6
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	3307      	adds	r3, #7
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	021b      	lsls	r3, r3, #8
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	4413      	add	r3, r2
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	80da      	strh	r2, [r3, #6]

}
 800cbc8:	bf00      	nop
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800cbde:	2180      	movs	r1, #128	; 0x80
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f002 ff3d 	bl	800fa60 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f002 ff39 	bl	800fa60 <USBD_LL_StallEP>
}
 800cbee:	bf00      	nop
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b086      	sub	sp, #24
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	60f8      	str	r0, [r7, #12]
 800cbfe:	60b9      	str	r1, [r7, #8]
 800cc00:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d033      	beq.n	800cc74 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f000 f835 	bl	800cc7c <USBD_GetLen>
 800cc12:	4603      	mov	r3, r0
 800cc14:	3301      	adds	r3, #1
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	005b      	lsls	r3, r3, #1
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800cc20:	7dfb      	ldrb	r3, [r7, #23]
 800cc22:	1c5a      	adds	r2, r3, #1
 800cc24:	75fa      	strb	r2, [r7, #23]
 800cc26:	461a      	mov	r2, r3
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	8812      	ldrh	r2, [r2, #0]
 800cc30:	b2d2      	uxtb	r2, r2
 800cc32:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800cc34:	7dfb      	ldrb	r3, [r7, #23]
 800cc36:	1c5a      	adds	r2, r3, #1
 800cc38:	75fa      	strb	r2, [r7, #23]
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	4413      	add	r3, r2
 800cc40:	2203      	movs	r2, #3
 800cc42:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 800cc44:	e012      	b.n	800cc6c <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 800cc46:	7dfb      	ldrb	r3, [r7, #23]
 800cc48:	1c5a      	adds	r2, r3, #1
 800cc4a:	75fa      	strb	r2, [r7, #23]
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	441a      	add	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	1c59      	adds	r1, r3, #1
 800cc56:	60f9      	str	r1, [r7, #12]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
 800cc5e:	1c5a      	adds	r2, r3, #1
 800cc60:	75fa      	strb	r2, [r7, #23]
 800cc62:	461a      	mov	r2, r3
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	4413      	add	r3, r2
 800cc68:	2200      	movs	r2, #0
 800cc6a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1e8      	bne.n	800cc46 <USBD_GetString+0x50>
    }
  } 
}
 800cc74:	bf00      	nop
 800cc76:	3718      	adds	r7, #24
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 800cc88:	e005      	b.n	800cc96 <USBD_GetLen+0x1a>
    {
        len++;
 800cc8a:	7bfb      	ldrb	r3, [r7, #15]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	73fb      	strb	r3, [r7, #15]
        buf++;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	3301      	adds	r3, #1
 800cc94:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1f5      	bne.n	800cc8a <USBD_GetLen+0xe>
    }

    return len;
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3714      	adds	r7, #20
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2202      	movs	r2, #2
 800ccbe:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800ccc2:	88fa      	ldrh	r2, [r7, #6]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800ccc8:	88fa      	ldrh	r2, [r7, #6]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800ccce:	88fb      	ldrh	r3, [r7, #6]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f002 ff91 	bl	800fbfc <USBD_LL_Transmit>
  
  return USBD_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3710      	adds	r7, #16
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800ccf2:	88fb      	ldrh	r3, [r7, #6]
 800ccf4:	68ba      	ldr	r2, [r7, #8]
 800ccf6:	2100      	movs	r1, #0
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f002 ff7f 	bl	800fbfc <USBD_LL_Transmit>
  
  return USBD_OK;
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3710      	adds	r7, #16
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	4613      	mov	r3, r2
 800cd14:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2203      	movs	r2, #3
 800cd1a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800cd1e:	88fa      	ldrh	r2, [r7, #6]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800cd26:	88fa      	ldrh	r2, [r7, #6]
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800cd2e:	88fb      	ldrh	r3, [r7, #6]
 800cd30:	68ba      	ldr	r2, [r7, #8]
 800cd32:	2100      	movs	r1, #0
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f002 ff9b 	bl	800fc70 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800cd3a:	2300      	movs	r3, #0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 800cd52:	88fb      	ldrh	r3, [r7, #6]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	2100      	movs	r1, #0
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f002 ff89 	bl	800fc70 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2204      	movs	r2, #4
 800cd74:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800cd78:	2300      	movs	r3, #0
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f002 ff3c 	bl	800fbfc <USBD_LL_Transmit>
  
  return USBD_OK;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b082      	sub	sp, #8
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2205      	movs	r2, #5
 800cd9a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800cd9e:	2300      	movs	r3, #0
 800cda0:	2200      	movs	r2, #0
 800cda2:	2100      	movs	r1, #0
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f002 ff63 	bl	800fc70 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device 
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
  uint8_t sdramstatus = SDRAM_OK;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	71fb      	strb	r3, [r7, #7]
  
  /* place for custom code */
  
  return sdramstatus;
 800cdbe:	79fb      	ldrb	r3, [r7, #7]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{ 
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	75fb      	strb	r3, [r7, #23]
  
  if(HAL_SDRAM_Read_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 800cddc:	68f9      	ldr	r1, [r7, #12]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	4806      	ldr	r0, [pc, #24]	; (800cdfc <BSP_SDRAM_ReadData+0x30>)
 800cde4:	f7f9 fa1a 	bl	800621c <HAL_SDRAM_Read_32b>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d001      	beq.n	800cdf2 <BSP_SDRAM_ReadData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 800cdf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3718      	adds	r7, #24
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	2000134c 	.word	0x2000134c

0800ce00 <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status : SDRAM_OK or SDRAM_ERROR.
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{ 
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b086      	sub	sp, #24
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
  uint8_t sdramstatus = SDRAM_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	75fb      	strb	r3, [r7, #23]
  
  if(HAL_SDRAM_Write_32b(&hsdram1, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 800ce10:	68f9      	ldr	r1, [r7, #12]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	4806      	ldr	r0, [pc, #24]	; (800ce30 <BSP_SDRAM_WriteData+0x30>)
 800ce18:	f7f9 fa3f 	bl	800629a <HAL_SDRAM_Write_32b>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <BSP_SDRAM_WriteData+0x26>
  {
    sdramstatus = SDRAM_ERROR;
 800ce22:	2301      	movs	r3, #1
 800ce24:	75fb      	strb	r3, [r7, #23]
  }

  return sdramstatus;
 800ce26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3718      	adds	r7, #24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	2000134c 	.word	0x2000134c

0800ce34 <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	2201      	movs	r2, #1
 800ce46:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	2210      	movs	r2, #16
 800ce4c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	2201      	movs	r2, #1
 800ce52:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	2200      	movs	r2, #0
 800ce58:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800ce5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce5e:	6839      	ldr	r1, [r7, #0]
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7f9 fa5d 	bl	8006320 <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800ce66:	2001      	movs	r0, #1
 800ce68:	f7f4 fee8 	bl	8001c3c <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	2202      	movs	r2, #2
 800ce70:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	2210      	movs	r2, #16
 800ce76:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	2200      	movs	r2, #0
 800ce82:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800ce84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce88:	6839      	ldr	r1, [r7, #0]
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7f9 fa48 	bl	8006320 <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	2203      	movs	r2, #3
 800ce94:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	2210      	movs	r2, #16
 800ce9a:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	2208      	movs	r2, #8
 800cea0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2200      	movs	r2, #0
 800cea6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800cea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ceac:	6839      	ldr	r1, [r7, #0]
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f7f9 fa36 	bl	8006320 <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800ceb4:	f44f 7308 	mov.w	r3, #544	; 0x220
 800ceb8:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	2204      	movs	r2, #4
 800cebe:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	2210      	movs	r2, #16
 800cec4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	2201      	movs	r2, #1
 800ceca:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800ced2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ced6:	6839      	ldr	r1, [r7, #0]
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f7f9 fa21 	bl	8006320 <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  hsdram->Instance->SDRTR = REFRESH_COUNT;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f240 6203 	movw	r2, #1539	; 0x603
 800cee6:	615a      	str	r2, [r3, #20]

}
 800cee8:	bf00      	nop
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800cef0:	b480      	push	{r7}
 800cef2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800cef4:	4a14      	ldr	r2, [pc, #80]	; (800cf48 <DWT_Delay_Init+0x58>)
 800cef6:	4b14      	ldr	r3, [pc, #80]	; (800cf48 <DWT_Delay_Init+0x58>)
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cefe:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800cf00:	4a11      	ldr	r2, [pc, #68]	; (800cf48 <DWT_Delay_Init+0x58>)
 800cf02:	4b11      	ldr	r3, [pc, #68]	; (800cf48 <DWT_Delay_Init+0x58>)
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf0a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800cf0c:	4a0f      	ldr	r2, [pc, #60]	; (800cf4c <DWT_Delay_Init+0x5c>)
 800cf0e:	4b0f      	ldr	r3, [pc, #60]	; (800cf4c <DWT_Delay_Init+0x5c>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f023 0301 	bic.w	r3, r3, #1
 800cf16:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800cf18:	4a0c      	ldr	r2, [pc, #48]	; (800cf4c <DWT_Delay_Init+0x5c>)
 800cf1a:	4b0c      	ldr	r3, [pc, #48]	; (800cf4c <DWT_Delay_Init+0x5c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f043 0301 	orr.w	r3, r3, #1
 800cf22:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800cf24:	4b09      	ldr	r3, [pc, #36]	; (800cf4c <DWT_Delay_Init+0x5c>)
 800cf26:	2200      	movs	r2, #0
 800cf28:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800cf2a:	bf00      	nop
     __ASM volatile ("NOP");
 800cf2c:	bf00      	nop
  __ASM volatile ("NOP");
 800cf2e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800cf30:	4b06      	ldr	r3, [pc, #24]	; (800cf4c <DWT_Delay_Init+0x5c>)
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d001      	beq.n	800cf3c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800cf38:	2300      	movs	r3, #0
 800cf3a:	e000      	b.n	800cf3e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800cf3c:	2301      	movs	r3, #1
  }
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr
 800cf48:	e000edf0 	.word	0xe000edf0
 800cf4c:	e0001000 	.word	0xe0001000

0800cf50 <MX_FATFS_Init>:

/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void) {
 800cf50:	b580      	push	{r7, lr}
 800cf52:	af00      	add	r7, sp, #0
	/*## FatFS: Link the SDRAMDISK driver ###########################*/
	retSDRAMDISK = FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMDISKPath);
 800cf54:	4904      	ldr	r1, [pc, #16]	; (800cf68 <MX_FATFS_Init+0x18>)
 800cf56:	4805      	ldr	r0, [pc, #20]	; (800cf6c <MX_FATFS_Init+0x1c>)
 800cf58:	f7fe fd48 	bl	800b9ec <FATFS_LinkDriver>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	461a      	mov	r2, r3
 800cf60:	4b03      	ldr	r3, [pc, #12]	; (800cf70 <MX_FATFS_Init+0x20>)
 800cf62:	701a      	strb	r2, [r3, #0]

	/* USER CODE BEGIN Init */
	/* additional user code for init */
	/* USER CODE END Init */
}
 800cf64:	bf00      	nop
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	2000055c 	.word	0x2000055c
 800cf6c:	08015f48 	.word	0x08015f48
 800cf70:	200009c0 	.word	0x200009c0

0800cf74 <get_fattime>:
/**
 * @brief  Gets Time from RTC
 * @param  None
 * @retval Time in DWORD
 */
DWORD get_fattime(void) {
 800cf74:	b480      	push	{r7}
 800cf76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN get_fattime */
	return 0;
 800cf78:	2300      	movs	r3, #0
	/* USER CODE END get_fattime */
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800cf8c:	4b0c      	ldr	r3, [pc, #48]	; (800cfc0 <DWT_Delay_us+0x3c>)
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800cf92:	f7f8 fcbb 	bl	800590c <HAL_RCC_GetHCLKFreq>
 800cf96:	4602      	mov	r2, r0
 800cf98:	4b0a      	ldr	r3, [pc, #40]	; (800cfc4 <DWT_Delay_us+0x40>)
 800cf9a:	fba3 2302 	umull	r2, r3, r3, r2
 800cf9e:	0c9b      	lsrs	r3, r3, #18
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	fb02 f303 	mul.w	r3, r2, r3
 800cfa6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800cfa8:	bf00      	nop
 800cfaa:	4b05      	ldr	r3, [pc, #20]	; (800cfc0 <DWT_Delay_us+0x3c>)
 800cfac:	685a      	ldr	r2, [r3, #4]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	1ad2      	subs	r2, r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d3f8      	bcc.n	800cfaa <DWT_Delay_us+0x26>
}
 800cfb8:	bf00      	nop
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	e0001000 	.word	0xe0001000
 800cfc4:	431bde83 	.word	0x431bde83

0800cfc8 <initArray>:
#include <ctype.h>

#include "main.h"
#include "dwt_stm32_delay.h"

void initArray(Array *a, size_t initialSize) {
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
	a->array = (uint16_t *) malloc(initialSize * sizeof(uint16_t));
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	005b      	lsls	r3, r3, #1
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f003 fa20 	bl	801041c <malloc>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	461a      	mov	r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	601a      	str	r2, [r3, #0]
	a->used = 0;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	605a      	str	r2, [r3, #4]
	a->size = initialSize;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	609a      	str	r2, [r3, #8]
}
 800cff0:	bf00      	nop
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <insertArray>:

void insertArray(Array *a, uint32_t newsize) {
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
	a->size = newsize;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	683a      	ldr	r2, [r7, #0]
 800d006:	609a      	str	r2, [r3, #8]
	a->array = (uint16_t *) realloc(a->array, a->size * sizeof(uint16_t));
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	005b      	lsls	r3, r3, #1
 800d012:	4619      	mov	r1, r3
 800d014:	4610      	mov	r0, r2
 800d016:	f003 ffcb 	bl	8010fb0 <realloc>
 800d01a:	4602      	mov	r2, r0
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	601a      	str	r2, [r3, #0]
	a->used = 0;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	605a      	str	r2, [r3, #4]
}
 800d026:	bf00      	nop
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <freeArray>:

void freeArray(Array *a) {
 800d02e:	b580      	push	{r7, lr}
 800d030:	b082      	sub	sp, #8
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
	free(a->array);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f003 f9f6 	bl	801042c <free>
	a->array = NULL;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	601a      	str	r2, [r3, #0]
	a->used = a->size = 0;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	609a      	str	r2, [r3, #8]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	689a      	ldr	r2, [r3, #8]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	605a      	str	r2, [r3, #4]
}
 800d054:	bf00      	nop
 800d056:	3708      	adds	r7, #8
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <string_parser>:

size_t string_parser(char *input, char ***word_array) {
 800d05c:	b590      	push	{r4, r7, lr}
 800d05e:	b089      	sub	sp, #36	; 0x24
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
	size_t n = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	61fb      	str	r3, [r7, #28]
	const char *p = input;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	61bb      	str	r3, [r7, #24]

	while (*p) {
 800d06e:	e02d      	b.n	800d0cc <string_parser+0x70>
		while (isspace((unsigned char )*p))
			++p;
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	3301      	adds	r3, #1
 800d074:	61bb      	str	r3, [r7, #24]
		while (isspace((unsigned char )*p))
 800d076:	f003 f9c3 	bl	8010400 <__locale_ctype_ptr>
 800d07a:	4602      	mov	r2, r0
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	3301      	adds	r3, #1
 800d082:	4413      	add	r3, r2
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	f003 0308 	and.w	r3, r3, #8
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1f0      	bne.n	800d070 <string_parser+0x14>
		n += *p != '\0';
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	bf14      	ite	ne
 800d096:	2301      	movne	r3, #1
 800d098:	2300      	moveq	r3, #0
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	461a      	mov	r2, r3
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	61fb      	str	r3, [r7, #28]
		while (*p && !isspace((unsigned char )*p))
 800d0a4:	e002      	b.n	800d0ac <string_parser+0x50>
			++p;
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	61bb      	str	r3, [r7, #24]
		while (*p && !isspace((unsigned char )*p))
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00b      	beq.n	800d0cc <string_parser+0x70>
 800d0b4:	f003 f9a4 	bl	8010400 <__locale_ctype_ptr>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	4413      	add	r3, r2
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	f003 0308 	and.w	r3, r3, #8
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d0ec      	beq.n	800d0a6 <string_parser+0x4a>
	while (*p) {
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d1d0      	bne.n	800d076 <string_parser+0x1a>
	}

	if (n) {
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d062      	beq.n	800d1a0 <string_parser+0x144>
		size_t i = 0;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	617b      	str	r3, [r7, #20]

		*word_array = (char**) malloc(n * sizeof(char *));
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f003 f99a 	bl	801041c <malloc>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	601a      	str	r2, [r3, #0]

		p = input;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	61bb      	str	r3, [r7, #24]

		while (*p) {
 800d0f4:	e050      	b.n	800d198 <string_parser+0x13c>
			while (isspace((unsigned char )*p))
				++p;
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	61bb      	str	r3, [r7, #24]
			while (isspace((unsigned char )*p))
 800d0fc:	f003 f980 	bl	8010400 <__locale_ctype_ptr>
 800d100:	4602      	mov	r2, r0
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	3301      	adds	r3, #1
 800d108:	4413      	add	r3, r2
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	f003 0308 	and.w	r3, r3, #8
 800d110:	2b00      	cmp	r3, #0
 800d112:	d1f0      	bne.n	800d0f6 <string_parser+0x9a>
			if (*p) {
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d03d      	beq.n	800d198 <string_parser+0x13c>
				const char *q = p;
 800d11c:	69bb      	ldr	r3, [r7, #24]
 800d11e:	613b      	str	r3, [r7, #16]
				while (*p && !isspace((unsigned char )*p))
 800d120:	e002      	b.n	800d128 <string_parser+0xcc>
					++p;
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	3301      	adds	r3, #1
 800d126:	61bb      	str	r3, [r7, #24]
				while (*p && !isspace((unsigned char )*p))
 800d128:	69bb      	ldr	r3, [r7, #24]
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00b      	beq.n	800d148 <string_parser+0xec>
 800d130:	f003 f966 	bl	8010400 <__locale_ctype_ptr>
 800d134:	4602      	mov	r2, r0
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	3301      	adds	r3, #1
 800d13c:	4413      	add	r3, r2
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	f003 0308 	and.w	r3, r3, #8
 800d144:	2b00      	cmp	r3, #0
 800d146:	d0ec      	beq.n	800d122 <string_parser+0xc6>

				size_t length = p - q;
 800d148:	69ba      	ldr	r2, [r7, #24]
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	1ad3      	subs	r3, r2, r3
 800d14e:	60fb      	str	r3, [r7, #12]

				(*word_array)[i] = (char *) malloc(length + 1);
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	18d4      	adds	r4, r2, r3
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	3301      	adds	r3, #1
 800d15e:	4618      	mov	r0, r3
 800d160:	f003 f95c 	bl	801041c <malloc>
 800d164:	4603      	mov	r3, r0
 800d166:	6023      	str	r3, [r4, #0]

				strncpy((*word_array)[i], q, length);
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	4413      	add	r3, r2
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	6939      	ldr	r1, [r7, #16]
 800d178:	4618      	mov	r0, r3
 800d17a:	f004 f868 	bl	801124e <strncpy>
				(*word_array)[i][length] = '\0';
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	009b      	lsls	r3, r3, #2
 800d186:	4413      	add	r3, r2
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	4413      	add	r3, r2
 800d18e:	2200      	movs	r2, #0
 800d190:	701a      	strb	r2, [r3, #0]

				++i;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	3301      	adds	r3, #1
 800d196:	617b      	str	r3, [r7, #20]
		while (*p) {
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1ad      	bne.n	800d0fc <string_parser+0xa0>
			}
		}
	}

	return n;
 800d1a0:	69fb      	ldr	r3, [r7, #28]
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3724      	adds	r7, #36	; 0x24
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd90      	pop	{r4, r7, pc}

0800d1aa <PlotData>:

void PlotData(uint32_t XCoordinate, uint32_t YCoordinate) {
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b082      	sub	sp, #8
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
 800d1b2:	6039      	str	r1, [r7, #0]
	// Plot at x,y
	BSP_LCD_DrawPixel((uint16_t) XCoordinate, (uint16_t) YCoordinate, 1);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	b291      	uxth	r1, r2
 800d1bc:	2201      	movs	r2, #1
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7f4 fa26 	bl	8001610 <BSP_LCD_DrawPixel>
}
 800d1c4:	bf00      	nop
 800d1c6:	3708      	adds	r7, #8
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <InitScreen>:

void InitScreen(uint32_t BackGroundColor, uint32_t ForeGroundColor) {
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]

	BSP_LCD_Clear(BackGroundColor);
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7f4 f86e 	bl	80012b8 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(BackGroundColor);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f7f4 f821 	bl	8001224 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(ForeGroundColor);
 800d1e2:	6838      	ldr	r0, [r7, #0]
 800d1e4:	f7f4 f806 	bl	80011f4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 800d1e8:	4803      	ldr	r0, [pc, #12]	; (800d1f8 <InitScreen+0x2c>)
 800d1ea:	f7f4 f835 	bl	8001258 <BSP_LCD_SetFont>
}
 800d1ee:	bf00      	nop
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	20000008 	.word	0x20000008

0800d1fc <LCDWrite>:

void LCDWrite(uint32_t Line, char Str[]) {
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b090      	sub	sp, #64	; 0x40
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
	char IntStr[50];

	BSP_LCD_ClearStringLine(Line);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f7f4 f87e 	bl	8001308 <BSP_LCD_ClearStringLine>
	snprintf(IntStr, 50, Str);
 800d20c:	f107 030c 	add.w	r3, r7, #12
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	2132      	movs	r1, #50	; 0x32
 800d214:	4618      	mov	r0, r3
 800d216:	f003 ff77 	bl	8011108 <sniprintf>
	BSP_LCD_DisplayStringAtLine((uint16_t) Line, (uint8_t *) IntStr);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	f107 020c 	add.w	r2, r7, #12
 800d222:	4611      	mov	r1, r2
 800d224:	4618      	mov	r0, r3
 800d226:	f7f4 f9db 	bl	80015e0 <BSP_LCD_DisplayStringAtLine>
}
 800d22a:	bf00      	nop
 800d22c:	3740      	adds	r7, #64	; 0x40
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
	...

0800d234 <CountDown>:

void CountDown(uint32_t millisecs) {
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800d23c:	f04f 31ff 	mov.w	r1, #4294967295
 800d240:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d244:	f7ff ffc2 	bl	800d1cc <InitScreen>

	LCDWrite(5, " ");
 800d248:	491c      	ldr	r1, [pc, #112]	; (800d2bc <CountDown+0x88>)
 800d24a:	2005      	movs	r0, #5
 800d24c:	f7ff ffd6 	bl	800d1fc <LCDWrite>
	DWT_Delay_us(1000);
 800d250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d254:	f7ff fe96 	bl	800cf84 <DWT_Delay_us>

	LCDWrite(5, "Starting in 3... ");
 800d258:	4919      	ldr	r1, [pc, #100]	; (800d2c0 <CountDown+0x8c>)
 800d25a:	2005      	movs	r0, #5
 800d25c:	f7ff ffce 	bl	800d1fc <LCDWrite>
	DWT_Delay_us(millisecs * 1000);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d266:	fb02 f303 	mul.w	r3, r2, r3
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7ff fe8a 	bl	800cf84 <DWT_Delay_us>

	LCDWrite(5, "Starting in 2... ");
 800d270:	4914      	ldr	r1, [pc, #80]	; (800d2c4 <CountDown+0x90>)
 800d272:	2005      	movs	r0, #5
 800d274:	f7ff ffc2 	bl	800d1fc <LCDWrite>
	DWT_Delay_us(millisecs * 1000);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d27e:	fb02 f303 	mul.w	r3, r2, r3
 800d282:	4618      	mov	r0, r3
 800d284:	f7ff fe7e 	bl	800cf84 <DWT_Delay_us>

	LCDWrite(5, "Starting in 1... ");
 800d288:	490f      	ldr	r1, [pc, #60]	; (800d2c8 <CountDown+0x94>)
 800d28a:	2005      	movs	r0, #5
 800d28c:	f7ff ffb6 	bl	800d1fc <LCDWrite>
	DWT_Delay_us(millisecs * 1000);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d296:	fb02 f303 	mul.w	r3, r2, r3
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7ff fe72 	bl	800cf84 <DWT_Delay_us>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 800d2a0:	490a      	ldr	r1, [pc, #40]	; (800d2cc <CountDown+0x98>)
 800d2a2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d2a6:	f7ff ff91 	bl	800d1cc <InitScreen>
	LCDWrite(5, "GO!");
 800d2aa:	4909      	ldr	r1, [pc, #36]	; (800d2d0 <CountDown+0x9c>)
 800d2ac:	2005      	movs	r0, #5
 800d2ae:	f7ff ffa5 	bl	800d1fc <LCDWrite>
}
 800d2b2:	bf00      	nop
 800d2b4:	3708      	adds	r7, #8
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	08012fdc 	.word	0x08012fdc
 800d2c0:	08012fe0 	.word	0x08012fe0
 800d2c4:	08012ff4 	.word	0x08012ff4
 800d2c8:	08013008 	.word	0x08013008
 800d2cc:	ffff0000 	.word	0xffff0000
 800d2d0:	0801301c 	.word	0x0801301c

0800d2d4 <scan_files>:

FRESULT scan_files(char* path
// Start node to be scanned, also used as work area
		) {
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b090      	sub	sp, #64	; 0x40
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	UINT i;
	static FILINFO fno;

	res = f_opendir(&dir, path); /* Open the directory */
 800d2dc:	f107 0308 	add.w	r3, r7, #8
 800d2e0:	6879      	ldr	r1, [r7, #4]
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fd fe34 	bl	800af50 <f_opendir>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800d2ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d140      	bne.n	800d378 <scan_files+0xa4>
		for (;;) {
			res = f_readdir(&dir, &fno); /* Read a directory item */
 800d2f6:	f107 0308 	add.w	r3, r7, #8
 800d2fa:	4922      	ldr	r1, [pc, #136]	; (800d384 <scan_files+0xb0>)
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fd fec0 	bl	800b082 <f_readdir>
 800d302:	4603      	mov	r3, r0
 800d304:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (res != FR_OK || fno.fname[0] == 0)
 800d308:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d12e      	bne.n	800d36e <scan_files+0x9a>
 800d310:	4b1c      	ldr	r3, [pc, #112]	; (800d384 <scan_files+0xb0>)
 800d312:	7a5b      	ldrb	r3, [r3, #9]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d02a      	beq.n	800d36e <scan_files+0x9a>
				break; /* Break on error or end of dir */
			if (fno.fattrib & AM_DIR) { /* It is a directory */
 800d318:	4b1a      	ldr	r3, [pc, #104]	; (800d384 <scan_files+0xb0>)
 800d31a:	7a1b      	ldrb	r3, [r3, #8]
 800d31c:	f003 0310 	and.w	r3, r3, #16
 800d320:	2b00      	cmp	r3, #0
 800d322:	d01b      	beq.n	800d35c <scan_files+0x88>
				i = strlen(path);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f7f2 ffcd 	bl	80002c4 <strlen>
 800d32a:	63b8      	str	r0, [r7, #56]	; 0x38
				sprintf(&path[i], "/%s", fno.fname);
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d330:	4413      	add	r3, r2
 800d332:	4a15      	ldr	r2, [pc, #84]	; (800d388 <scan_files+0xb4>)
 800d334:	4915      	ldr	r1, [pc, #84]	; (800d38c <scan_files+0xb8>)
 800d336:	4618      	mov	r0, r3
 800d338:	f003 ff1a 	bl	8011170 <siprintf>
				res = scan_files(path); /* Enter the directory */
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7ff ffc9 	bl	800d2d4 <scan_files>
 800d342:	4603      	mov	r3, r0
 800d344:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				if (res != FR_OK)
 800d348:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d10d      	bne.n	800d36c <scan_files+0x98>
					break;
				path[i] = 0;
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d354:	4413      	add	r3, r2
 800d356:	2200      	movs	r2, #0
 800d358:	701a      	strb	r2, [r3, #0]
 800d35a:	e7cc      	b.n	800d2f6 <scan_files+0x22>
			} else { /* It is a file. */
				printf("%s/%s 		%lu \r\n", path, fno.fname, fno.fsize);
 800d35c:	4b09      	ldr	r3, [pc, #36]	; (800d384 <scan_files+0xb0>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a09      	ldr	r2, [pc, #36]	; (800d388 <scan_files+0xb4>)
 800d362:	6879      	ldr	r1, [r7, #4]
 800d364:	480a      	ldr	r0, [pc, #40]	; (800d390 <scan_files+0xbc>)
 800d366:	f003 fda7 	bl	8010eb8 <iprintf>
			res = f_readdir(&dir, &fno); /* Read a directory item */
 800d36a:	e7c4      	b.n	800d2f6 <scan_files+0x22>
					break;
 800d36c:	bf00      	nop
			}
		}
		f_closedir(&dir);
 800d36e:	f107 0308 	add.w	r3, r7, #8
 800d372:	4618      	mov	r0, r3
 800d374:	f7fd fe5f 	bl	800b036 <f_closedir>
	}

	return res;
 800d378:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3740      	adds	r7, #64	; 0x40
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	20000488 	.word	0x20000488
 800d388:	20000491 	.word	0x20000491
 800d38c:	08013020 	.word	0x08013020
 800d390:	08013024 	.word	0x08013024

0800d394 <SamplePoints>:

void SamplePoints(Array *Data, uint32_t NoOfPoints, uint32_t Period_us) {
 800d394:	b590      	push	{r4, r7, lr}
 800d396:	b087      	sub	sp, #28
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	607a      	str	r2, [r7, #4]
	uint32_t i;

	HAL_ADC_Start(&hadc3);
 800d3a0:	4815      	ldr	r0, [pc, #84]	; (800d3f8 <SamplePoints+0x64>)
 800d3a2:	f7f4 fcb1 	bl	8001d08 <HAL_ADC_Start>

	// Measure NoOfPoints values (f.ex. 19200)
	for (i = 0; i < NoOfPoints; i++) {
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	617b      	str	r3, [r7, #20]
 800d3aa:	e010      	b.n	800d3ce <SamplePoints+0x3a>
		Data->array[i] = (uint16_t) HAL_ADC_GetValue(&hadc3);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	005b      	lsls	r3, r3, #1
 800d3b4:	18d4      	adds	r4, r2, r3
 800d3b6:	4810      	ldr	r0, [pc, #64]	; (800d3f8 <SamplePoints+0x64>)
 800d3b8:	f7f4 fd4a 	bl	8001e50 <HAL_ADC_GetValue>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	8023      	strh	r3, [r4, #0]
		DWT_Delay_us(Period_us);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f7ff fdde 	bl	800cf84 <DWT_Delay_us>
	for (i = 0; i < NoOfPoints; i++) {
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	617b      	str	r3, [r7, #20]
 800d3ce:	697a      	ldr	r2, [r7, #20]
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d3ea      	bcc.n	800d3ac <SamplePoints+0x18>
	}

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800d3d6:	f04f 31ff 	mov.w	r1, #4294967295
 800d3da:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d3de:	f7ff fef5 	bl	800d1cc <InitScreen>
	LCDWrite(5, "DONE!");
 800d3e2:	4906      	ldr	r1, [pc, #24]	; (800d3fc <SamplePoints+0x68>)
 800d3e4:	2005      	movs	r0, #5
 800d3e6:	f7ff ff09 	bl	800d1fc <LCDWrite>

	printf("Sampling done.\r\n");
 800d3ea:	4805      	ldr	r0, [pc, #20]	; (800d400 <SamplePoints+0x6c>)
 800d3ec:	f003 fdd8 	bl	8010fa0 <puts>
}
 800d3f0:	bf00      	nop
 800d3f2:	371c      	adds	r7, #28
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd90      	pop	{r4, r7, pc}
 800d3f8:	20001020 	.word	0x20001020
 800d3fc:	08013034 	.word	0x08013034
 800d400:	0801303c 	.word	0x0801303c

0800d404 <AvgAndPlotPoints>:

void AvgAndPlotPoints(Array *Data, uint32_t NoOfPoints, uint32_t AvgSize) {
 800d404:	b5b0      	push	{r4, r5, r7, lr}
 800d406:	b09a      	sub	sp, #104	; 0x68
 800d408:	af02      	add	r7, sp, #8
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]

	uint32_t BufferSum, BufferAvg;
	uint32_t XCoord, YCoord;
	char MyStr[50];

	printf("Start averaging... \r\n");
 800d410:	4842      	ldr	r0, [pc, #264]	; (800d51c <AvgAndPlotPoints+0x118>)
 800d412:	f003 fdc5 	bl	8010fa0 <puts>

	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_RED);
 800d416:	4942      	ldr	r1, [pc, #264]	; (800d520 <AvgAndPlotPoints+0x11c>)
 800d418:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d41c:	f7ff fed6 	bl	800d1cc <InitScreen>

	for (i1 = 0; i1 < NoOfPoints; i1++) {
 800d420:	2300      	movs	r3, #0
 800d422:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d424:	e059      	b.n	800d4da <AvgAndPlotPoints+0xd6>
		BufferSum = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	657b      	str	r3, [r7, #84]	; 0x54

		// Read AvgSize samples
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 800d42a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d42c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d42e:	e00c      	b.n	800d44a <AvgAndPlotPoints+0x46>
			BufferSum = BufferSum + (uint32_t) Data->array[i2];
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d436:	005b      	lsls	r3, r3, #1
 800d438:	4413      	add	r3, r2
 800d43a:	881b      	ldrh	r3, [r3, #0]
 800d43c:	461a      	mov	r2, r3
 800d43e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d440:	4413      	add	r3, r2
 800d442:	657b      	str	r3, [r7, #84]	; 0x54
		for (i2 = i1; i2 < i1 + AvgSize; i2++) {
 800d444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d446:	3301      	adds	r3, #1
 800d448:	65bb      	str	r3, [r7, #88]	; 0x58
 800d44a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	441a      	add	r2, r3
 800d450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d452:	429a      	cmp	r2, r3
 800d454:	d8ec      	bhi.n	800d430 <AvgAndPlotPoints+0x2c>
		}

		BufferAvg = BufferSum / AvgSize;
 800d456:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d45e:	653b      	str	r3, [r7, #80]	; 0x50

		// Calculate two coords and plot
		XCoord = ((i1 * 480.0) / NoOfPoints);
 800d460:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d462:	f7f3 f879 	bl	8000558 <__aeabi_ui2d>
 800d466:	f04f 0200 	mov.w	r2, #0
 800d46a:	4b2e      	ldr	r3, [pc, #184]	; (800d524 <AvgAndPlotPoints+0x120>)
 800d46c:	f7f3 f8ea 	bl	8000644 <__aeabi_dmul>
 800d470:	4603      	mov	r3, r0
 800d472:	460c      	mov	r4, r1
 800d474:	4625      	mov	r5, r4
 800d476:	461c      	mov	r4, r3
 800d478:	68b8      	ldr	r0, [r7, #8]
 800d47a:	f7f3 f86d 	bl	8000558 <__aeabi_ui2d>
 800d47e:	4602      	mov	r2, r0
 800d480:	460b      	mov	r3, r1
 800d482:	4620      	mov	r0, r4
 800d484:	4629      	mov	r1, r5
 800d486:	f7f3 fa07 	bl	8000898 <__aeabi_ddiv>
 800d48a:	4603      	mov	r3, r0
 800d48c:	460c      	mov	r4, r1
 800d48e:	4618      	mov	r0, r3
 800d490:	4621      	mov	r1, r4
 800d492:	f7f3 fbaf 	bl	8000bf4 <__aeabi_d2uiz>
 800d496:	4603      	mov	r3, r0
 800d498:	64fb      	str	r3, [r7, #76]	; 0x4c
		YCoord = (272.0 * (BufferAvg / 65536.0));
 800d49a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d49c:	f7f3 f85c 	bl	8000558 <__aeabi_ui2d>
 800d4a0:	f04f 0200 	mov.w	r2, #0
 800d4a4:	4b20      	ldr	r3, [pc, #128]	; (800d528 <AvgAndPlotPoints+0x124>)
 800d4a6:	f7f3 f9f7 	bl	8000898 <__aeabi_ddiv>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	460c      	mov	r4, r1
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	4621      	mov	r1, r4
 800d4b2:	f04f 0200 	mov.w	r2, #0
 800d4b6:	4b1d      	ldr	r3, [pc, #116]	; (800d52c <AvgAndPlotPoints+0x128>)
 800d4b8:	f7f3 f8c4 	bl	8000644 <__aeabi_dmul>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	460c      	mov	r4, r1
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	4621      	mov	r1, r4
 800d4c4:	f7f3 fb96 	bl	8000bf4 <__aeabi_d2uiz>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	64bb      	str	r3, [r7, #72]	; 0x48

		PlotData(XCoord, YCoord);
 800d4cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d4ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d4d0:	f7ff fe6b 	bl	800d1aa <PlotData>
	for (i1 = 0; i1 < NoOfPoints; i1++) {
 800d4d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d3a1      	bcc.n	800d426 <AvgAndPlotPoints+0x22>
	}

	printf("Averaging done, Points = %lu Avg = %lu \r\n", i1, AvgSize);
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d4e6:	4812      	ldr	r0, [pc, #72]	; (800d530 <AvgAndPlotPoints+0x12c>)
 800d4e8:	f003 fce6 	bl	8010eb8 <iprintf>

	LCDWrite(0, "");
 800d4ec:	4911      	ldr	r1, [pc, #68]	; (800d534 <AvgAndPlotPoints+0x130>)
 800d4ee:	2000      	movs	r0, #0
 800d4f0:	f7ff fe84 	bl	800d1fc <LCDWrite>
	snprintf(MyStr, 50, "Pnts = %lu Avg = %lu", NoOfPoints, AvgSize);
 800d4f4:	f107 0014 	add.w	r0, r7, #20
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	4a0e      	ldr	r2, [pc, #56]	; (800d538 <AvgAndPlotPoints+0x134>)
 800d500:	2132      	movs	r1, #50	; 0x32
 800d502:	f003 fe01 	bl	8011108 <sniprintf>
	LCDWrite(0, MyStr);
 800d506:	f107 0314 	add.w	r3, r7, #20
 800d50a:	4619      	mov	r1, r3
 800d50c:	2000      	movs	r0, #0
 800d50e:	f7ff fe75 	bl	800d1fc <LCDWrite>
}
 800d512:	bf00      	nop
 800d514:	3760      	adds	r7, #96	; 0x60
 800d516:	46bd      	mov	sp, r7
 800d518:	bdb0      	pop	{r4, r5, r7, pc}
 800d51a:	bf00      	nop
 800d51c:	0801304c 	.word	0x0801304c
 800d520:	ffff0000 	.word	0xffff0000
 800d524:	407e0000 	.word	0x407e0000
 800d528:	40f00000 	.word	0x40f00000
 800d52c:	40710000 	.word	0x40710000
 800d530:	08013064 	.word	0x08013064
 800d534:	08013090 	.word	0x08013090
 800d538:	08013094 	.word	0x08013094

0800d53c <WriteData2FS>:

void WriteData2FS(Array *Data, uint32_t NoOfPoints, uint32_t MeasNo) {
 800d53c:	b580      	push	{r7, lr}
 800d53e:	f5ad 6dc8 	sub.w	sp, sp, #1600	; 0x640
 800d542:	af00      	add	r7, sp, #0
 800d544:	f107 030c 	add.w	r3, r7, #12
 800d548:	6018      	str	r0, [r3, #0]
 800d54a:	f107 0308 	add.w	r3, r7, #8
 800d54e:	6019      	str	r1, [r3, #0]
 800d550:	1d3b      	adds	r3, r7, #4
 800d552:	601a      	str	r2, [r3, #0]

	// Create file for data, as meas#.txt

	FRESULT res; // FatFs function common result code
	uint32_t byteswritten, totalbytes; //File write counts
	char buffer[1000] = " ";
 800d554:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800d558:	2220      	movs	r2, #32
 800d55a:	601a      	str	r2, [r3, #0]
 800d55c:	3304      	adds	r3, #4
 800d55e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d562:	2100      	movs	r1, #0
 800d564:	4618      	mov	r0, r3
 800d566:	f002 ff86 	bl	8010476 <memset>

	char* fname = (char *) (sprintf("1:\\meas_%lu.txt", (char *) MeasNo));
 800d56a:	1d3b      	adds	r3, r7, #4
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4619      	mov	r1, r3
 800d570:	483b      	ldr	r0, [pc, #236]	; (800d660 <WriteData2FS+0x124>)
 800d572:	f003 fdfd 	bl	8011170 <siprintf>
 800d576:	4603      	mov	r3, r0
 800d578:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
	FIL MyFile;
	uint32_t idx;

	totalbytes = 0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c

	if (f_open(&MyFile, fname, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 800d582:	f107 0314 	add.w	r3, r7, #20
 800d586:	220a      	movs	r2, #10
 800d588:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7fc ffc5 	bl	800a51c <f_open>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d004      	beq.n	800d5a2 <WriteData2FS+0x66>

		// File Open for write Error
		_Error_Handler(__FILE__, __LINE__);
 800d598:	21d9      	movs	r1, #217	; 0xd9
 800d59a:	4832      	ldr	r0, [pc, #200]	; (800d664 <WriteData2FS+0x128>)
 800d59c:	f001 fb16 	bl	800ebcc <_Error_Handler>
		/*##-6- Close the open text file #################################*/
		f_close(&MyFile);

		printf("Closed file %s OK \r\n", fname);
	}
}
 800d5a0:	e059      	b.n	800d656 <WriteData2FS+0x11a>
		printf("Opened file %s OK \r\n", fname);
 800d5a2:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 800d5a6:	4830      	ldr	r0, [pc, #192]	; (800d668 <WriteData2FS+0x12c>)
 800d5a8:	f003 fc86 	bl	8010eb8 <iprintf>
		for (idx = 0; idx < NoOfPoints; idx++) {
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
 800d5b2:	e038      	b.n	800d626 <WriteData2FS+0xea>
			sprintf(buffer, "%lu \r\n", ((uint32_t) Data->array[idx]));
 800d5b4:	f107 030c 	add.w	r3, r7, #12
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 800d5c0:	005b      	lsls	r3, r3, #1
 800d5c2:	4413      	add	r3, r2
 800d5c4:	881b      	ldrh	r3, [r3, #0]
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800d5cc:	4927      	ldr	r1, [pc, #156]	; (800d66c <WriteData2FS+0x130>)
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f003 fdce 	bl	8011170 <siprintf>
			res = f_write(&MyFile, buffer, strlen(buffer),
 800d5d4:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7f2 fe73 	bl	80002c4 <strlen>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 800d5e4:	f507 7111 	add.w	r1, r7, #580	; 0x244
 800d5e8:	f107 0014 	add.w	r0, r7, #20
 800d5ec:	f7fd fa93 	bl	800ab16 <f_write>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	f887 3633 	strb.w	r3, [r7, #1587]	; 0x633
			totalbytes += byteswritten;
 800d5f6:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800d5fa:	f8d7 263c 	ldr.w	r2, [r7, #1596]	; 0x63c
 800d5fe:	4413      	add	r3, r2
 800d600:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
			if ((byteswritten == 0) || (res != FR_OK)) {
 800d604:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d003      	beq.n	800d614 <WriteData2FS+0xd8>
 800d60c:	f897 3633 	ldrb.w	r3, [r7, #1587]	; 0x633
 800d610:	2b00      	cmp	r3, #0
 800d612:	d003      	beq.n	800d61c <WriteData2FS+0xe0>
				_Error_Handler(__FILE__, __LINE__);
 800d614:	21e5      	movs	r1, #229	; 0xe5
 800d616:	4813      	ldr	r0, [pc, #76]	; (800d664 <WriteData2FS+0x128>)
 800d618:	f001 fad8 	bl	800ebcc <_Error_Handler>
		for (idx = 0; idx < NoOfPoints; idx++) {
 800d61c:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 800d620:	3301      	adds	r3, #1
 800d622:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638
 800d626:	f107 0308 	add.w	r3, r7, #8
 800d62a:	f8d7 2638 	ldr.w	r2, [r7, #1592]	; 0x638
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	429a      	cmp	r2, r3
 800d632:	d3bf      	bcc.n	800d5b4 <WriteData2FS+0x78>
		printf("File %s, %lu bytes written \r\n", fname, totalbytes);
 800d634:	f8d7 263c 	ldr.w	r2, [r7, #1596]	; 0x63c
 800d638:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 800d63c:	480c      	ldr	r0, [pc, #48]	; (800d670 <WriteData2FS+0x134>)
 800d63e:	f003 fc3b 	bl	8010eb8 <iprintf>
		f_close(&MyFile);
 800d642:	f107 0314 	add.w	r3, r7, #20
 800d646:	4618      	mov	r0, r3
 800d648:	f7fd fc58 	bl	800aefc <f_close>
		printf("Closed file %s OK \r\n", fname);
 800d64c:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 800d650:	4808      	ldr	r0, [pc, #32]	; (800d674 <WriteData2FS+0x138>)
 800d652:	f003 fc31 	bl	8010eb8 <iprintf>
}
 800d656:	bf00      	nop
 800d658:	f507 67c8 	add.w	r7, r7, #1600	; 0x640
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	080130ac 	.word	0x080130ac
 800d664:	080130bc 	.word	0x080130bc
 800d668:	080130d0 	.word	0x080130d0
 800d66c:	080130e8 	.word	0x080130e8
 800d670:	080130f0 	.word	0x080130f0
 800d674:	08013110 	.word	0x08013110

0800d678 <DirList>:

void DirList(void) {
 800d678:	b580      	push	{r7, lr}
 800d67a:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 800d67e:	af00      	add	r7, sp, #0
	char buff[256];

	// Should be mounted already
	// res = f_mount(&fs, "", 1);
	// if (res == FR_OK) {
			strcpy(buff, "/");
 800d680:	1d3b      	adds	r3, r7, #4
 800d682:	222f      	movs	r2, #47	; 0x2f
 800d684:	801a      	strh	r2, [r3, #0]
			res = scan_files(buff);
 800d686:	1d3b      	adds	r3, r7, #4
 800d688:	4618      	mov	r0, r3
 800d68a:	f7ff fe23 	bl	800d2d4 <scan_files>
 800d68e:	4603      	mov	r3, r0
 800d690:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	//}
	}
 800d694:	bf00      	nop
 800d696:	f507 774e 	add.w	r7, r7, #824	; 0x338
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
	...

0800d6a0 <SCB_EnableICache>:
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800d6a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d6a8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800d6ac:	4b09      	ldr	r3, [pc, #36]	; (800d6d4 <SCB_EnableICache+0x34>)
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800d6b4:	4a07      	ldr	r2, [pc, #28]	; (800d6d4 <SCB_EnableICache+0x34>)
 800d6b6:	4b07      	ldr	r3, [pc, #28]	; (800d6d4 <SCB_EnableICache+0x34>)
 800d6b8:	695b      	ldr	r3, [r3, #20]
 800d6ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d6be:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800d6c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d6c4:	f3bf 8f6f 	isb	sy
}
 800d6c8:	bf00      	nop
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr
 800d6d2:	bf00      	nop
 800d6d4:	e000ed00 	.word	0xe000ed00

0800d6d8 <SCB_EnableDCache>:
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b085      	sub	sp, #20
 800d6dc:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800d6de:	4b1d      	ldr	r3, [pc, #116]	; (800d754 <SCB_EnableDCache+0x7c>)
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800d6e6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800d6ea:	4b1a      	ldr	r3, [pc, #104]	; (800d754 <SCB_EnableDCache+0x7c>)
 800d6ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6f0:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	0b5b      	lsrs	r3, r3, #13
 800d6f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d6fa:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	08db      	lsrs	r3, r3, #3
 800d700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d704:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d706:	4913      	ldr	r1, [pc, #76]	; (800d754 <SCB_EnableDCache+0x7c>)
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	015a      	lsls	r2, r3, #5
 800d70c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800d710:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800d712:	68ba      	ldr	r2, [r7, #8]
 800d714:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d716:	4313      	orrs	r3, r2
 800d718:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	1e5a      	subs	r2, r3, #1
 800d720:	60ba      	str	r2, [r7, #8]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d1ef      	bne.n	800d706 <SCB_EnableDCache+0x2e>
    } while(sets--);
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	1e5a      	subs	r2, r3, #1
 800d72a:	60fa      	str	r2, [r7, #12]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1e5      	bne.n	800d6fc <SCB_EnableDCache+0x24>
 800d730:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800d734:	4a07      	ldr	r2, [pc, #28]	; (800d754 <SCB_EnableDCache+0x7c>)
 800d736:	4b07      	ldr	r3, [pc, #28]	; (800d754 <SCB_EnableDCache+0x7c>)
 800d738:	695b      	ldr	r3, [r3, #20]
 800d73a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d73e:	6153      	str	r3, [r2, #20]
 800d740:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d744:	f3bf 8f6f 	isb	sy
}
 800d748:	bf00      	nop
 800d74a:	3714      	adds	r7, #20
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr
 800d754:	e000ed00 	.word	0xe000ed00

0800d758 <main>:
/**
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void) {
 800d758:	b5b0      	push	{r4, r5, r7, lr}
 800d75a:	f5ad 6da9 	sub.w	sp, sp, #1352	; 0x548
 800d75e:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 800d760:	4baa      	ldr	r3, [pc, #680]	; (800da0c <main+0x2b4>)
 800d762:	f507 649c 	add.w	r4, r7, #1248	; 0x4e0
 800d766:	461d      	mov	r5, r3
 800d768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d76a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d76c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d76e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d770:	682b      	ldr	r3, [r5, #0]
 800d772:	7023      	strb	r3, [r4, #0]
	uint8_t rtext[100]; /* File read buffer */

	char buffer[1000] = " ";
 800d774:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800d778:	2220      	movs	r2, #32
 800d77a:	601a      	str	r2, [r3, #0]
 800d77c:	3304      	adds	r3, #4
 800d77e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d782:	2100      	movs	r1, #0
 800d784:	4618      	mov	r0, r3
 800d786:	f002 fe76 	bl	8010476 <memset>

	/* USER CODE END 1 */

	/* Enable I-Cache-------------------------------------------------------------*/
	SCB_EnableICache();
 800d78a:	f7ff ff89 	bl	800d6a0 <SCB_EnableICache>

	/* Enable D-Cache-------------------------------------------------------------*/
	SCB_EnableDCache();
 800d78e:	f7ff ffa3 	bl	800d6d8 <SCB_EnableDCache>

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800d792:	f7f4 fa17 	bl	8001bc4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800d796:	f000 fb49 	bl	800de2c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800d79a:	f000 fe61 	bl	800e460 <MX_GPIO_Init>
	MX_DMA_Init();
 800d79e:	f000 fda7 	bl	800e2f0 <MX_DMA_Init>
	MX_FMC_Init();
 800d7a2:	f000 fe11 	bl	800e3c8 <MX_FMC_Init>
	MX_ADC3_Init();
 800d7a6:	f000 fbef 	bl	800df88 <MX_ADC3_Init>
	MX_USART1_UART_Init();
 800d7aa:	f000 fd6d 	bl	800e288 <MX_USART1_UART_Init>
	MX_LTDC_Init();
 800d7ae:	f000 fce9 	bl	800e184 <MX_LTDC_Init>
	MX_FATFS_Init();
 800d7b2:	f7ff fbcd 	bl	800cf50 <MX_FATFS_Init>
	MX_I2C3_Init();
 800d7b6:	f000 fc9b 	bl	800e0f0 <MX_I2C3_Init>
	MX_DMA2D_Init();
 800d7ba:	f000 fc5f 	bl	800e07c <MX_DMA2D_Init>
	MX_CRC_Init();
 800d7be:	f000 fc35 	bl	800e02c <MX_CRC_Init>
	MX_USB_DEVICE_Init();
 800d7c2:	f001 fe37 	bl	800f434 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	// Start SDRAM
	FMC_SDRAM_CommandTypeDef hsdram1Command;
	BSP_SDRAM_Initialization_Sequence(&hsdram1, &hsdram1Command);
 800d7c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	4890      	ldr	r0, [pc, #576]	; (800da10 <main+0x2b8>)
 800d7ce:	f7ff fb31 	bl	800ce34 <BSP_SDRAM_Initialization_Sequence>

	// Start LCD
	BSP_LCD_Init();
 800d7d2:	f7f3 fc07 	bl	8000fe4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800d7d6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800d7da:	2000      	movs	r0, #0
 800d7dc:	f7f3 fc9a 	bl	8001114 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	f7f3 fcf7 	bl	80011d4 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 800d7e6:	f7f3 ffd5 	bl	8001794 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800d7ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ee:	f7f3 fd63 	bl	80012b8 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800d7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f6:	f7f3 fd15 	bl	8001224 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800d7fa:	4886      	ldr	r0, [pc, #536]	; (800da14 <main+0x2bc>)
 800d7fc:	f7f3 fcfa 	bl	80011f4 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 1!");
 800d800:	4985      	ldr	r1, [pc, #532]	; (800da18 <main+0x2c0>)
 800d802:	2005      	movs	r0, #5
 800d804:	f7f3 feec 	bl	80015e0 <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 800d808:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d80c:	f7f4 fa16 	bl	8001c3c <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLUE);
 800d810:	4880      	ldr	r0, [pc, #512]	; (800da14 <main+0x2bc>)
 800d812:	f7f3 fd51 	bl	80012b8 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800d816:	487f      	ldr	r0, [pc, #508]	; (800da14 <main+0x2bc>)
 800d818:	f7f3 fd04 	bl	8001224 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d81c:	f04f 30ff 	mov.w	r0, #4294967295
 800d820:	f7f3 fce8 	bl	80011f4 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello to everyone 2!");
 800d824:	497d      	ldr	r1, [pc, #500]	; (800da1c <main+0x2c4>)
 800d826:	2005      	movs	r0, #5
 800d828:	f7f3 feda 	bl	80015e0 <BSP_LCD_DisplayStringAtLine>
	HAL_Delay(3000);
 800d82c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d830:	f7f4 fa04 	bl	8001c3c <HAL_Delay>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 800d834:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d838:	f7f3 fd3e 	bl	80012b8 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800d83c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d840:	f7f3 fcf0 	bl	8001224 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d844:	f04f 30ff 	mov.w	r0, #4294967295
 800d848:	f7f3 fcd4 	bl	80011f4 <BSP_LCD_SetTextColor>

	if (DWT_Delay_Init()) {
 800d84c:	f7ff fb50 	bl	800cef0 <DWT_Delay_Init>
		//_Error_Handler(__FILE__, __LINE__); /* Call Error Handler */
	}

	/* USER CODE START 2 */

	BYTE lun = 0;
 800d850:	2300      	movs	r3, #0
 800d852:	f887 3517 	strb.w	r3, [r7, #1303]	; 0x517
	BYTE RES;
	BYTE *DataBuffer = (BYTE *) malloc(1500);
 800d856:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800d85a:	f002 fddf 	bl	801041c <malloc>
 800d85e:	4603      	mov	r3, r0
 800d860:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510

	DRESULT DRES;

	/*##-1- Link the SDRAM disk I/O driver ##################################*/
	if (FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMPath) == 0) {
 800d864:	496e      	ldr	r1, [pc, #440]	; (800da20 <main+0x2c8>)
 800d866:	486f      	ldr	r0, [pc, #444]	; (800da24 <main+0x2cc>)
 800d868:	f7fe f8c0 	bl	800b9ec <FATFS_LinkDriver>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f040 8099 	bne.w	800d9a6 <main+0x24e>
		printf("SDRAM FATFS link Success 1. \r\n");
 800d874:	486c      	ldr	r0, [pc, #432]	; (800da28 <main+0x2d0>)
 800d876:	f003 fb93 	bl	8010fa0 <puts>
		/*##-2- Register the file system object to the FatFs module ##############*/
		if (f_mount(&SDRAMFatFs, (TCHAR const*) SDRAMPath, 0) != FR_OK) {
 800d87a:	2200      	movs	r2, #0
 800d87c:	4968      	ldr	r1, [pc, #416]	; (800da20 <main+0x2c8>)
 800d87e:	486b      	ldr	r0, [pc, #428]	; (800da2c <main+0x2d4>)
 800d880:	f7fc fe06 	bl	800a490 <f_mount>
 800d884:	4603      	mov	r3, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d004      	beq.n	800d894 <main+0x13c>
			/* FatFs Initialization Error */
			_Error_Handler(__FILE__, __LINE__);
 800d88a:	21d4      	movs	r1, #212	; 0xd4
 800d88c:	4868      	ldr	r0, [pc, #416]	; (800da30 <main+0x2d8>)
 800d88e:	f001 f99d 	bl	800ebcc <_Error_Handler>
 800d892:	e088      	b.n	800d9a6 <main+0x24e>
		} else {
			printf("SDRAM FATFS mount Success 2. \r\n");
 800d894:	4867      	ldr	r0, [pc, #412]	; (800da34 <main+0x2dc>)
 800d896:	f003 fb83 	bl	8010fa0 <puts>
			/*##-3- Create a FAT file system (format) on the logical drive #########*/
			/* WARNING: Formatting the uSD card will delete all content on the device */
			if (f_mkfs((TCHAR const*) SDRAMPath, FM_ANY, 0, workBuffer,
 800d89a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d89e:	9300      	str	r3, [sp, #0]
 800d8a0:	4b65      	ldr	r3, [pc, #404]	; (800da38 <main+0x2e0>)
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	2107      	movs	r1, #7
 800d8a6:	485e      	ldr	r0, [pc, #376]	; (800da20 <main+0x2c8>)
 800d8a8:	f7fd fc28 	bl	800b0fc <f_mkfs>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d004      	beq.n	800d8bc <main+0x164>
					sizeof(workBuffer)) != FR_OK) {
				/* FatFs Format Error */
				_Error_Handler(__FILE__, __LINE__);
 800d8b2:	21dc      	movs	r1, #220	; 0xdc
 800d8b4:	485e      	ldr	r0, [pc, #376]	; (800da30 <main+0x2d8>)
 800d8b6:	f001 f989 	bl	800ebcc <_Error_Handler>
 800d8ba:	e074      	b.n	800d9a6 <main+0x24e>
			} else {
				printf("SDRAM FATFS format Success 3. \r\n");
 800d8bc:	485f      	ldr	r0, [pc, #380]	; (800da3c <main+0x2e4>)
 800d8be:	f003 fb6f 	bl	8010fa0 <puts>
				/*##-4- Create and Open a new text file object with write access #####*/
				if (f_open(&MyFile, "1:\\STM32.TXT",
 800d8c2:	220a      	movs	r2, #10
 800d8c4:	495e      	ldr	r1, [pc, #376]	; (800da40 <main+0x2e8>)
 800d8c6:	485f      	ldr	r0, [pc, #380]	; (800da44 <main+0x2ec>)
 800d8c8:	f7fc fe28 	bl	800a51c <f_open>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d004      	beq.n	800d8dc <main+0x184>
						FA_CREATE_ALWAYS | FA_WRITE)
						!= FR_OK) {
					/* 'STM32.TXT' file Open for write Error */
					_Error_Handler(__FILE__, __LINE__);
 800d8d2:	21e4      	movs	r1, #228	; 0xe4
 800d8d4:	4856      	ldr	r0, [pc, #344]	; (800da30 <main+0x2d8>)
 800d8d6:	f001 f979 	bl	800ebcc <_Error_Handler>
 800d8da:	e064      	b.n	800d9a6 <main+0x24e>
				} else {
					printf("SDRAM FATFS fopen Success 4. \r\n");
 800d8dc:	485a      	ldr	r0, [pc, #360]	; (800da48 <main+0x2f0>)
 800d8de:	f003 fb5f 	bl	8010fa0 <puts>
					/*##-5- Write data to the text file ################################*/
					res = f_write(&MyFile, wtext, sizeof(wtext),
 800d8e2:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800d8e6:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 800d8ea:	2221      	movs	r2, #33	; 0x21
 800d8ec:	4855      	ldr	r0, [pc, #340]	; (800da44 <main+0x2ec>)
 800d8ee:	f7fd f912 	bl	800ab16 <f_write>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
							(void *) &byteswritten);

					if ((byteswritten == 0) || (res != FR_OK)) {
 800d8f8:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d003      	beq.n	800d908 <main+0x1b0>
 800d900:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 800d904:	2b00      	cmp	r3, #0
 800d906:	d004      	beq.n	800d912 <main+0x1ba>
						/* 'STM32.TXT' file Write or EOF Error */
						_Error_Handler(__FILE__, __LINE__);
 800d908:	21ed      	movs	r1, #237	; 0xed
 800d90a:	4849      	ldr	r0, [pc, #292]	; (800da30 <main+0x2d8>)
 800d90c:	f001 f95e 	bl	800ebcc <_Error_Handler>
 800d910:	e049      	b.n	800d9a6 <main+0x24e>
					} else {
						printf("SDRAM FATFS write Success 5. \r\n");
 800d912:	484e      	ldr	r0, [pc, #312]	; (800da4c <main+0x2f4>)
 800d914:	f003 fb44 	bl	8010fa0 <puts>
						/*##-6- Close the open text file #################################*/
						f_close(&MyFile);
 800d918:	484a      	ldr	r0, [pc, #296]	; (800da44 <main+0x2ec>)
 800d91a:	f7fd faef 	bl	800aefc <f_close>
						printf("SDRAM FATFS fclose Success 6. \r\n");
 800d91e:	484c      	ldr	r0, [pc, #304]	; (800da50 <main+0x2f8>)
 800d920:	f003 fb3e 	bl	8010fa0 <puts>

						/*##-7- Open the text file object with read access ###############*/
						if (f_open(&MyFile, "1:\\STM32.TXT", FA_READ)
 800d924:	2201      	movs	r2, #1
 800d926:	4946      	ldr	r1, [pc, #280]	; (800da40 <main+0x2e8>)
 800d928:	4846      	ldr	r0, [pc, #280]	; (800da44 <main+0x2ec>)
 800d92a:	f7fc fdf7 	bl	800a51c <f_open>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d004      	beq.n	800d93e <main+0x1e6>
								!= FR_OK) {
							/* 'STM32.TXT' file Open for read Error */
							_Error_Handler(__FILE__, __LINE__);
 800d934:	21f8      	movs	r1, #248	; 0xf8
 800d936:	483e      	ldr	r0, [pc, #248]	; (800da30 <main+0x2d8>)
 800d938:	f001 f948 	bl	800ebcc <_Error_Handler>
 800d93c:	e033      	b.n	800d9a6 <main+0x24e>
						} else {
							printf("SDRAM FATFS fopen(read) Success 7. \r\n");
 800d93e:	4845      	ldr	r0, [pc, #276]	; (800da54 <main+0x2fc>)
 800d940:	f003 fb2e 	bl	8010fa0 <puts>
							/*##-8- Read data from the text file ###########################*/
							res = f_read(&MyFile, rtext, sizeof(rtext),
 800d944:	f207 5304 	addw	r3, r7, #1284	; 0x504
 800d948:	f207 417c 	addw	r1, r7, #1148	; 0x47c
 800d94c:	2264      	movs	r2, #100	; 0x64
 800d94e:	483d      	ldr	r0, [pc, #244]	; (800da44 <main+0x2ec>)
 800d950:	f7fc ffa2 	bl	800a898 <f_read>
 800d954:	4603      	mov	r3, r0
 800d956:	f887 350f 	strb.w	r3, [r7, #1295]	; 0x50f
									(UINT*) &bytesread);

							if ((bytesread == 0) || (res != FR_OK)) {
 800d95a:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d003      	beq.n	800d96a <main+0x212>
 800d962:	f897 350f 	ldrb.w	r3, [r7, #1295]	; 0x50f
 800d966:	2b00      	cmp	r3, #0
 800d968:	d005      	beq.n	800d976 <main+0x21e>
								/* 'STM32.TXT' file Read or EOF Error */
								_Error_Handler(__FILE__, __LINE__);
 800d96a:	f240 1101 	movw	r1, #257	; 0x101
 800d96e:	4830      	ldr	r0, [pc, #192]	; (800da30 <main+0x2d8>)
 800d970:	f001 f92c 	bl	800ebcc <_Error_Handler>
 800d974:	e017      	b.n	800d9a6 <main+0x24e>
							} else {
								printf("SDRAM FATFS read Success 8. \r\n");
 800d976:	4838      	ldr	r0, [pc, #224]	; (800da58 <main+0x300>)
 800d978:	f003 fb12 	bl	8010fa0 <puts>
								/*##-9- Close the open text file #############################*/
								f_close(&MyFile);
 800d97c:	4831      	ldr	r0, [pc, #196]	; (800da44 <main+0x2ec>)
 800d97e:	f7fd fabd 	bl	800aefc <f_close>
								printf("SDRAM FATFS fclose Success 9. \r\n");
 800d982:	4836      	ldr	r0, [pc, #216]	; (800da5c <main+0x304>)
 800d984:	f003 fb0c 	bl	8010fa0 <puts>
								/*##-10- Compare read data with the expected data ############*/
								if ((bytesread != byteswritten)) {
 800d988:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
 800d98c:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 800d990:	429a      	cmp	r2, r3
 800d992:	d005      	beq.n	800d9a0 <main+0x248>
									/* Read data is different from the expected data */
									_Error_Handler(__FILE__, __LINE__);
 800d994:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800d998:	4825      	ldr	r0, [pc, #148]	; (800da30 <main+0x2d8>)
 800d99a:	f001 f917 	bl	800ebcc <_Error_Handler>
 800d99e:	e002      	b.n	800d9a6 <main+0x24e>
								} else {
									/* Success of the demo: no error occurrence */
									printf("SDRAM FATFS Success 10. \r\n");
 800d9a0:	482f      	ldr	r0, [pc, #188]	; (800da60 <main+0x308>)
 800d9a2:	f003 fafd 	bl	8010fa0 <puts>
	}

	char CmdBuffer[30];
	char Arg[30];
	char Cmd[30];
	size_t n = 0;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
	uint32_t MeasNo = 0;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530

	uint32_t NoOfPoints = 19200;
 800d9b2:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800d9b6:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
	uint32_t AvgSize = 10;
 800d9ba:	230a      	movs	r3, #10
 800d9bc:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
	uint32_t Period_us = 100;
 800d9c0:	2364      	movs	r3, #100	; 0x64
 800d9c2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	uint32_t Count_ms = 1000;
 800d9c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d9ca:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520

	// Clear screen, set it up
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800d9ce:	f04f 31ff 	mov.w	r1, #4294967295
 800d9d2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d9d6:	f7ff fbf9 	bl	800d1cc <InitScreen>

	// Initialize data storage
	// https://stackoverflow.com/questions/3536153/c-dynamically-growing-array
	Array Data;
	initArray(&Data, NoOfPoints);  // initially 19200 elements
 800d9da:	f107 0318 	add.w	r3, r7, #24
 800d9de:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7ff faf0 	bl	800cfc8 <initArray>

	LCDWrite(5, "Ready.");
 800d9e8:	491e      	ldr	r1, [pc, #120]	; (800da64 <main+0x30c>)
 800d9ea:	2005      	movs	r0, #5
 800d9ec:	f7ff fc06 	bl	800d1fc <LCDWrite>

	Cmd[0] = '\0';
 800d9f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	701a      	strb	r2, [r3, #0]
	Arg[0] = '\0';
 800d9f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	701a      	strb	r2, [r3, #0]
	CmdBuffer[0] = '\0';
 800da00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800da04:	2200      	movs	r2, #0
 800da06:	701a      	strb	r2, [r3, #0]

	while (!((strcmp(Cmd, "quit") == 0) && (n == 1))) {
 800da08:	e1be      	b.n	800dd88 <main+0x630>
 800da0a:	bf00      	nop
 800da0c:	08013438 	.word	0x08013438
 800da10:	2000134c 	.word	0x2000134c
 800da14:	ff0000ff 	.word	0xff0000ff
 800da18:	08013128 	.word	0x08013128
 800da1c:	08013140 	.word	0x08013140
 800da20:	200010d8 	.word	0x200010d8
 800da24:	08015f48 	.word	0x08015f48
 800da28:	08013158 	.word	0x08013158
 800da2c:	20001380 	.word	0x20001380
 800da30:	08013178 	.word	0x08013178
 800da34:	08013188 	.word	0x08013188
 800da38:	20000e20 	.word	0x20000e20
 800da3c:	080131a8 	.word	0x080131a8
 800da40:	080131c8 	.word	0x080131c8
 800da44:	200010dc 	.word	0x200010dc
 800da48:	080131d8 	.word	0x080131d8
 800da4c:	080131f8 	.word	0x080131f8
 800da50:	08013218 	.word	0x08013218
 800da54:	08013238 	.word	0x08013238
 800da58:	08013260 	.word	0x08013260
 800da5c:	08013280 	.word	0x08013280
 800da60:	080132a0 	.word	0x080132a0
 800da64:	080132bc 	.word	0x080132bc

		printf(
				"Ready. Settings are Points=%lu, Avg=%lu, Period_us=%lu, Count_ms=%lu. "
						"Sampling will take apprx %f secs \r\n", NoOfPoints,
				AvgSize, Period_us, Count_ms,
				((float) (NoOfPoints * Period_us / 1000000.0)));
 800da68:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800da6c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800da70:	fb02 f303 	mul.w	r3, r2, r3
 800da74:	4618      	mov	r0, r3
 800da76:	f7f2 fd6f 	bl	8000558 <__aeabi_ui2d>
 800da7a:	a3ea      	add	r3, pc, #936	; (adr r3, 800de24 <main+0x6cc>)
 800da7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da80:	f7f2 ff0a 	bl	8000898 <__aeabi_ddiv>
 800da84:	4603      	mov	r3, r0
 800da86:	460c      	mov	r4, r1
 800da88:	4618      	mov	r0, r3
 800da8a:	4621      	mov	r1, r4
 800da8c:	f7f3 f8d2 	bl	8000c34 <__aeabi_d2f>
 800da90:	4603      	mov	r3, r0
		printf(
 800da92:	4618      	mov	r0, r3
 800da94:	f7f2 fd82 	bl	800059c <__aeabi_f2d>
 800da98:	4603      	mov	r3, r0
 800da9a:	460c      	mov	r4, r1
 800da9c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800daa0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800daaa:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800daae:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 800dab2:	48c9      	ldr	r0, [pc, #804]	; (800ddd8 <main+0x680>)
 800dab4:	f003 fa00 	bl	8010eb8 <iprintf>

		Cmd[0] = '\0';
 800dab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dabc:	2200      	movs	r2, #0
 800dabe:	701a      	strb	r2, [r3, #0]
		Arg[0] = '\0';
 800dac0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dac4:	2200      	movs	r2, #0
 800dac6:	701a      	strb	r2, [r3, #0]
		CmdBuffer[0] = '\0';
 800dac8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800dacc:	2200      	movs	r2, #0
 800dace:	701a      	strb	r2, [r3, #0]

		//## -3- Put UART peripheral in reception process
		// Any data received will be stored "CmdBuffer" buffer : the number max of
		// data received is 30 */
		// gets(CmdBuffer);
		fflush(stdin);
 800dad0:	4bc2      	ldr	r3, [pc, #776]	; (800dddc <main+0x684>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f002 fb06 	bl	80100e8 <fflush>
		fgets(CmdBuffer, sizeof(CmdBuffer), stdin);
 800dadc:	4bbf      	ldr	r3, [pc, #764]	; (800dddc <main+0x684>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	685a      	ldr	r2, [r3, #4]
 800dae2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800dae6:	211e      	movs	r1, #30
 800dae8:	4618      	mov	r0, r3
 800daea:	f002 fb71 	bl	80101d0 <fgets>
		//    transfer, but application may perform other tasks while transfer operation
		//    is ongoing.
		//while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY) {
		//}

		printf("I got %s \r\n", CmdBuffer);
 800daee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800daf2:	4619      	mov	r1, r3
 800daf4:	48ba      	ldr	r0, [pc, #744]	; (800dde0 <main+0x688>)
 800daf6:	f003 f9df 	bl	8010eb8 <iprintf>

		// Parse command and possible numeric arg
		char s[] = "Initial string";
 800dafa:	f107 0308 	add.w	r3, r7, #8
 800dafe:	4ab9      	ldr	r2, [pc, #740]	; (800dde4 <main+0x68c>)
 800db00:	461c      	mov	r4, r3
 800db02:	4613      	mov	r3, r2
 800db04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db06:	c407      	stmia	r4!, {r0, r1, r2}
 800db08:	8023      	strh	r3, [r4, #0]
 800db0a:	3402      	adds	r4, #2
 800db0c:	0c1b      	lsrs	r3, r3, #16
 800db0e:	7023      	strb	r3, [r4, #0]
		char ** word_array = NULL;
 800db10:	1d3b      	adds	r3, r7, #4
 800db12:	2200      	movs	r2, #0
 800db14:	601a      	str	r2, [r3, #0]

		strcpy(s, CmdBuffer);
 800db16:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800db1a:	f107 0308 	add.w	r3, r7, #8
 800db1e:	4611      	mov	r1, r2
 800db20:	4618      	mov	r0, r3
 800db22:	f003 fb8c 	bl	801123e <strcpy>
		n = string_parser(s, &word_array);
 800db26:	1d3a      	adds	r2, r7, #4
 800db28:	f107 0308 	add.w	r3, r7, #8
 800db2c:	4611      	mov	r1, r2
 800db2e:	4618      	mov	r0, r3
 800db30:	f7ff fa94 	bl	800d05c <string_parser>
 800db34:	f8c7 0534 	str.w	r0, [r7, #1332]	; 0x534

		for (size_t i = 0; i < n; i++) {
 800db38:	2300      	movs	r3, #0
 800db3a:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800db3e:	e02d      	b.n	800db9c <main+0x444>
			if (i == 0) {
 800db40:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800db44:	2b00      	cmp	r3, #0
 800db46:	d10c      	bne.n	800db62 <main+0x40a>
				strcpy(Cmd, word_array[i]);
 800db48:	1d3b      	adds	r3, r7, #4
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	4413      	add	r3, r2
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db5a:	4611      	mov	r1, r2
 800db5c:	4618      	mov	r0, r3
 800db5e:	f003 fb6e 	bl	801123e <strcpy>
			}
			if (i == 1) {
 800db62:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800db66:	2b01      	cmp	r3, #1
 800db68:	d10c      	bne.n	800db84 <main+0x42c>
				strcpy(Arg, word_array[i]);
 800db6a:	1d3b      	adds	r3, r7, #4
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4413      	add	r3, r2
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800db7c:	4611      	mov	r1, r2
 800db7e:	4618      	mov	r0, r3
 800db80:	f003 fb5d 	bl	801123e <strcpy>
			}
			if (i > 1) {
 800db84:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d902      	bls.n	800db92 <main+0x43a>
				printf("Wrong number of arguments \r\n");
 800db8c:	4896      	ldr	r0, [pc, #600]	; (800dde8 <main+0x690>)
 800db8e:	f003 fa07 	bl	8010fa0 <puts>
		for (size_t i = 0; i < n; i++) {
 800db92:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800db96:	3301      	adds	r3, #1
 800db98:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800db9c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800dba0:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d3cb      	bcc.n	800db40 <main+0x3e8>
			}
		}

		printf("Cmd = %s Arg = %s n = %u \r\n", Cmd, Arg, n);
 800dba8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800dbac:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800dbb0:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800dbb4:	488d      	ldr	r0, [pc, #564]	; (800ddec <main+0x694>)
 800dbb6:	f003 f97f 	bl	8010eb8 <iprintf>

		for (size_t i = 0; i < n; i++)
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 800dbc0:	e00e      	b.n	800dbe0 <main+0x488>
			free(word_array[i]);
 800dbc2:	1d3b      	adds	r3, r7, #4
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	4413      	add	r3, r2
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f002 fc2b 	bl	801042c <free>
		for (size_t i = 0; i < n; i++)
 800dbd6:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 800dbda:	3301      	adds	r3, #1
 800dbdc:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 800dbe0:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 800dbe4:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d3ea      	bcc.n	800dbc2 <main+0x46a>
		free(word_array);
 800dbec:	1d3b      	adds	r3, r7, #4
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f002 fc1b 	bl	801042c <free>

		// Branch based on command
		// meas: Sample and plot a data set
		if ((strcmp(Cmd, "meas") == 0) && (n == 1)) {
 800dbf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dbfa:	497d      	ldr	r1, [pc, #500]	; (800ddf0 <main+0x698>)
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7f2 fb57 	bl	80002b0 <strcmp>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d128      	bne.n	800dc5a <main+0x502>
 800dc08:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d124      	bne.n	800dc5a <main+0x502>

			// Countdown
			CountDown(Count_ms);
 800dc10:	f8d7 0520 	ldr.w	r0, [r7, #1312]	; 0x520
 800dc14:	f7ff fb0e 	bl	800d234 <CountDown>

			MeasNo++;
 800dc18:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530

			// Sample & plot data one time
			SamplePoints(&Data, NoOfPoints, Period_us);
 800dc22:	f107 0318 	add.w	r3, r7, #24
 800dc26:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800dc2a:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7ff fbb0 	bl	800d394 <SamplePoints>
			AvgAndPlotPoints(&Data, NoOfPoints, AvgSize);
 800dc34:	f107 0318 	add.w	r3, r7, #24
 800dc38:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800dc3c:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff fbdf 	bl	800d404 <AvgAndPlotPoints>

			// Write the unaveraged (full) data to file meas#.txt
			WriteData2FS(&Data, NoOfPoints, MeasNo);
 800dc46:	f107 0318 	add.w	r3, r7, #24
 800dc4a:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 800dc4e:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7ff fc72 	bl	800d53c <WriteData2FS>
 800dc58:	e096      	b.n	800dd88 <main+0x630>
		}

		// setpoints: Adjust sampled points
		else if ((strcmp(Cmd, "setpoints") == 0) && (n == 2)) {
 800dc5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc5e:	4965      	ldr	r1, [pc, #404]	; (800ddf4 <main+0x69c>)
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7f2 fb25 	bl	80002b0 <strcmp>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d125      	bne.n	800dcb8 <main+0x560>
 800dc6c:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800dc70:	2b02      	cmp	r3, #2
 800dc72:	d121      	bne.n	800dcb8 <main+0x560>
			// Allocate more or less data space
			NoOfPoints = (uint32_t) strtol(Arg, NULL, 10);
 800dc74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dc78:	220a      	movs	r2, #10
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f003 fb7b 	bl	8011378 <strtol>
 800dc82:	4603      	mov	r3, r0
 800dc84:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
			printf("Old Data size is %u New NoOfPOints = %lu \r\n",
 800dc88:	f107 0318 	add.w	r3, r7, #24
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	f8d7 252c 	ldr.w	r2, [r7, #1324]	; 0x52c
 800dc92:	4619      	mov	r1, r3
 800dc94:	4858      	ldr	r0, [pc, #352]	; (800ddf8 <main+0x6a0>)
 800dc96:	f003 f90f 	bl	8010eb8 <iprintf>
					Data.size, NoOfPoints);

			insertArray(&Data, NoOfPoints);
 800dc9a:	f107 0318 	add.w	r3, r7, #24
 800dc9e:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7ff f9a8 	bl	800cff8 <insertArray>
			printf("New Array size is %u \r\n", Data.size);
 800dca8:	f107 0318 	add.w	r3, r7, #24
 800dcac:	689b      	ldr	r3, [r3, #8]
 800dcae:	4619      	mov	r1, r3
 800dcb0:	4852      	ldr	r0, [pc, #328]	; (800ddfc <main+0x6a4>)
 800dcb2:	f003 f901 	bl	8010eb8 <iprintf>
 800dcb6:	e067      	b.n	800dd88 <main+0x630>
		}

		// setavg: Adjust average amount in samples
		else if ((strcmp(Cmd, "setavg") == 0) && (n == 2)) {
 800dcb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcbc:	4950      	ldr	r1, [pc, #320]	; (800de00 <main+0x6a8>)
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7f2 faf6 	bl	80002b0 <strcmp>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d10e      	bne.n	800dce8 <main+0x590>
 800dcca:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d10a      	bne.n	800dce8 <main+0x590>
			AvgSize = (uint32_t) strtol(Arg, NULL, 10);
 800dcd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dcd6:	220a      	movs	r2, #10
 800dcd8:	2100      	movs	r1, #0
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f003 fb4c 	bl	8011378 <strtol>
 800dce0:	4603      	mov	r3, r0
 800dce2:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 800dce6:	e04f      	b.n	800dd88 <main+0x630>
		}

		// setperiod: Adjust sample period in us
		else if ((strcmp(Cmd, "setperiod") == 0) && (n == 2)) {
 800dce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcec:	4945      	ldr	r1, [pc, #276]	; (800de04 <main+0x6ac>)
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7f2 fade 	bl	80002b0 <strcmp>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10e      	bne.n	800dd18 <main+0x5c0>
 800dcfa:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800dcfe:	2b02      	cmp	r3, #2
 800dd00:	d10a      	bne.n	800dd18 <main+0x5c0>
			Period_us = (uint32_t) strtol(Arg, NULL, 10);
 800dd02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dd06:	220a      	movs	r2, #10
 800dd08:	2100      	movs	r1, #0
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f003 fb34 	bl	8011378 <strtol>
 800dd10:	4603      	mov	r3, r0
 800dd12:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800dd16:	e037      	b.n	800dd88 <main+0x630>
		}

		// setcount: Adjust countdown period in ms
		else if ((strcmp(Cmd, "setcount") == 0) && (n == 2)) {
 800dd18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd1c:	493a      	ldr	r1, [pc, #232]	; (800de08 <main+0x6b0>)
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7f2 fac6 	bl	80002b0 <strcmp>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d10e      	bne.n	800dd48 <main+0x5f0>
 800dd2a:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	d10a      	bne.n	800dd48 <main+0x5f0>
			Count_ms = (uint32_t) strtol(Arg, NULL, 10);
 800dd32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dd36:	220a      	movs	r2, #10
 800dd38:	2100      	movs	r1, #0
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f003 fb1c 	bl	8011378 <strtol>
 800dd40:	4603      	mov	r3, r0
 800dd42:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800dd46:	e01f      	b.n	800dd88 <main+0x630>
		}
		// dir: Print file listing
		else if ((strcmp(Cmd, "dir") == 0) && (n == 1)) {
 800dd48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd4c:	492f      	ldr	r1, [pc, #188]	; (800de0c <main+0x6b4>)
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7f2 faae 	bl	80002b0 <strcmp>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d106      	bne.n	800dd68 <main+0x610>
 800dd5a:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d102      	bne.n	800dd68 <main+0x610>
			DirList();
 800dd62:	f7ff fc89 	bl	800d678 <DirList>
 800dd66:	e00f      	b.n	800dd88 <main+0x630>
		}

		// quit: Exit on next while
		else if ((strcmp(Cmd, "quit") == 0) && (n == 1)) {
 800dd68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd6c:	4928      	ldr	r1, [pc, #160]	; (800de10 <main+0x6b8>)
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7f2 fa9e 	bl	80002b0 <strcmp>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d103      	bne.n	800dd82 <main+0x62a>
 800dd7a:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d002      	beq.n	800dd88 <main+0x630>
			// Do nothing yet
		} else {
			printf("Wrong command or argument \r\n");
 800dd82:	4824      	ldr	r0, [pc, #144]	; (800de14 <main+0x6bc>)
 800dd84:	f003 f90c 	bl	8010fa0 <puts>
	while (!((strcmp(Cmd, "quit") == 0) && (n == 1))) {
 800dd88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd8c:	4920      	ldr	r1, [pc, #128]	; (800de10 <main+0x6b8>)
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7f2 fa8e 	bl	80002b0 <strcmp>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f47f ae66 	bne.w	800da68 <main+0x310>
 800dd9c:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	f47f ae61 	bne.w	800da68 <main+0x310>
		}
	}

	// Free memory after quit
	freeArray(&Data);
 800dda6:	f107 0318 	add.w	r3, r7, #24
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7ff f93f 	bl	800d02e <freeArray>

	// Unlink the SDRAM disk I/O driver
	FATFS_UnLinkDriver(SDRAMPath);
 800ddb0:	4819      	ldr	r0, [pc, #100]	; (800de18 <main+0x6c0>)
 800ddb2:	f7fd fe63 	bl	800ba7c <FATFS_UnLinkDriver>

	// Print informative messages
	InitScreen(LCD_COLOR_BLACK, LCD_COLOR_WHITE);
 800ddb6:	f04f 31ff 	mov.w	r1, #4294967295
 800ddba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ddbe:	f7ff fa05 	bl	800d1cc <InitScreen>
	LCDWrite(5, "Stop.");
 800ddc2:	4916      	ldr	r1, [pc, #88]	; (800de1c <main+0x6c4>)
 800ddc4:	2005      	movs	r0, #5
 800ddc6:	f7ff fa19 	bl	800d1fc <LCDWrite>

	printf("Exit. Data freed. Stop. \r\n");
 800ddca:	4815      	ldr	r0, [pc, #84]	; (800de20 <main+0x6c8>)
 800ddcc:	f003 f8e8 	bl	8010fa0 <puts>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800ddd0:	e7fe      	b.n	800ddd0 <main+0x678>
 800ddd2:	bf00      	nop
 800ddd4:	f3af 8000 	nop.w
 800ddd8:	080132c4 	.word	0x080132c4
 800dddc:	2000017c 	.word	0x2000017c
 800dde0:	08013330 	.word	0x08013330
 800dde4:	0801345c 	.word	0x0801345c
 800dde8:	0801333c 	.word	0x0801333c
 800ddec:	08013358 	.word	0x08013358
 800ddf0:	08013374 	.word	0x08013374
 800ddf4:	0801337c 	.word	0x0801337c
 800ddf8:	08013388 	.word	0x08013388
 800ddfc:	080133b4 	.word	0x080133b4
 800de00:	080133cc 	.word	0x080133cc
 800de04:	080133d4 	.word	0x080133d4
 800de08:	080133e0 	.word	0x080133e0
 800de0c:	080133ec 	.word	0x080133ec
 800de10:	080133f0 	.word	0x080133f0
 800de14:	080133f8 	.word	0x080133f8
 800de18:	200010d8 	.word	0x200010d8
 800de1c:	08013414 	.word	0x08013414
 800de20:	0801341c 	.word	0x0801341c
 800de24:	00000000 	.word	0x00000000
 800de28:	412e8480 	.word	0x412e8480

0800de2c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b0b4      	sub	sp, #208	; 0xd0
 800de30:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 800de32:	4a50      	ldr	r2, [pc, #320]	; (800df74 <SystemClock_Config+0x148>)
 800de34:	4b4f      	ldr	r3, [pc, #316]	; (800df74 <SystemClock_Config+0x148>)
 800de36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de3c:	6413      	str	r3, [r2, #64]	; 0x40
 800de3e:	4b4d      	ldr	r3, [pc, #308]	; (800df74 <SystemClock_Config+0x148>)
 800de40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de46:	607b      	str	r3, [r7, #4]
 800de48:	687b      	ldr	r3, [r7, #4]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800de4a:	4a4b      	ldr	r2, [pc, #300]	; (800df78 <SystemClock_Config+0x14c>)
 800de4c:	4b4a      	ldr	r3, [pc, #296]	; (800df78 <SystemClock_Config+0x14c>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800de54:	6013      	str	r3, [r2, #0]
 800de56:	4b48      	ldr	r3, [pc, #288]	; (800df78 <SystemClock_Config+0x14c>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800de5e:	603b      	str	r3, [r7, #0]
 800de60:	683b      	ldr	r3, [r7, #0]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800de62:	2301      	movs	r3, #1
 800de64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800de68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800de6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800de70:	2302      	movs	r3, #2
 800de72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800de76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800de7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 800de7e:	2319      	movs	r3, #25
 800de80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 800de84:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800de88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800de8c:	2302      	movs	r3, #2
 800de8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 800de92:	2309      	movs	r3, #9
 800de94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800de98:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7f7 f927 	bl	80050f0 <HAL_RCC_OscConfig>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d004      	beq.n	800deb2 <SystemClock_Config+0x86>
		_Error_Handler(__FILE__, __LINE__);
 800dea8:	f240 11df 	movw	r1, #479	; 0x1df
 800deac:	4833      	ldr	r0, [pc, #204]	; (800df7c <SystemClock_Config+0x150>)
 800deae:	f000 fe8d 	bl	800ebcc <_Error_Handler>
	}

	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800deb2:	f7f7 f8cd 	bl	8005050 <HAL_PWREx_EnableOverDrive>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d004      	beq.n	800dec6 <SystemClock_Config+0x9a>
		_Error_Handler(__FILE__, __LINE__);
 800debc:	f240 11e5 	movw	r1, #485	; 0x1e5
 800dec0:	482e      	ldr	r0, [pc, #184]	; (800df7c <SystemClock_Config+0x150>)
 800dec2:	f000 fe83 	bl	800ebcc <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800dec6:	230f      	movs	r3, #15
 800dec8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800decc:	2302      	movs	r3, #2
 800dece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ded2:	2300      	movs	r3, #0
 800ded4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ded8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800dedc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800dee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 800dee8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800deec:	2106      	movs	r1, #6
 800deee:	4618      	mov	r0, r3
 800def0:	f7f7 fb6e 	bl	80055d0 <HAL_RCC_ClockConfig>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d004      	beq.n	800df04 <SystemClock_Config+0xd8>
		_Error_Handler(__FILE__, __LINE__);
 800defa:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800defe:	481f      	ldr	r0, [pc, #124]	; (800df7c <SystemClock_Config+0x150>)
 800df00:	f000 fe64 	bl	800ebcc <_Error_Handler>
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 800df04:	4b1e      	ldr	r3, [pc, #120]	; (800df80 <SystemClock_Config+0x154>)
 800df06:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800df08:	23c0      	movs	r3, #192	; 0xc0
 800df0a:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800df0c:	2305      	movs	r3, #5
 800df0e:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800df10:	2302      	movs	r3, #2
 800df12:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800df14:	2300      	movs	r3, #0
 800df16:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800df18:	2301      	movs	r3, #1
 800df1a:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800df1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800df20:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800df22:	2300      	movs	r3, #0
 800df24:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800df26:	2300      	movs	r3, #0
 800df28:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800df2a:	f107 0308 	add.w	r3, r7, #8
 800df2e:	4618      	mov	r0, r3
 800df30:	f7f7 fd52 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	d004      	beq.n	800df44 <SystemClock_Config+0x118>
		_Error_Handler(__FILE__, __LINE__);
 800df3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df3e:	480f      	ldr	r0, [pc, #60]	; (800df7c <SystemClock_Config+0x150>)
 800df40:	f000 fe44 	bl	800ebcc <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800df44:	f7f7 fce2 	bl	800590c <HAL_RCC_GetHCLKFreq>
 800df48:	4602      	mov	r2, r0
 800df4a:	4b0e      	ldr	r3, [pc, #56]	; (800df84 <SystemClock_Config+0x158>)
 800df4c:	fba3 2302 	umull	r2, r3, r3, r2
 800df50:	099b      	lsrs	r3, r3, #6
 800df52:	4618      	mov	r0, r3
 800df54:	f7f4 fab7 	bl	80024c6 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800df58:	2004      	movs	r0, #4
 800df5a:	f7f4 fac1 	bl	80024e0 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800df5e:	2200      	movs	r2, #0
 800df60:	2100      	movs	r1, #0
 800df62:	f04f 30ff 	mov.w	r0, #4294967295
 800df66:	f7f4 fa84 	bl	8002472 <HAL_NVIC_SetPriority>
}
 800df6a:	bf00      	nop
 800df6c:	37d0      	adds	r7, #208	; 0xd0
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	40023800 	.word	0x40023800
 800df78:	40007000 	.word	0x40007000
 800df7c:	08013178 	.word	0x08013178
 800df80:	00010048 	.word	0x00010048
 800df84:	10624dd3 	.word	0x10624dd3

0800df88 <MX_ADC3_Init>:

/* ADC3 init function */
static void MX_ADC3_Init(void) {
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig;

	/**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800df8e:	4b23      	ldr	r3, [pc, #140]	; (800e01c <MX_ADC3_Init+0x94>)
 800df90:	4a23      	ldr	r2, [pc, #140]	; (800e020 <MX_ADC3_Init+0x98>)
 800df92:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800df94:	4b21      	ldr	r3, [pc, #132]	; (800e01c <MX_ADC3_Init+0x94>)
 800df96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800df9a:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800df9c:	4b1f      	ldr	r3, [pc, #124]	; (800e01c <MX_ADC3_Init+0x94>)
 800df9e:	2200      	movs	r2, #0
 800dfa0:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 800dfa2:	4b1e      	ldr	r3, [pc, #120]	; (800e01c <MX_ADC3_Init+0x94>)
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800dfa8:	4b1c      	ldr	r3, [pc, #112]	; (800e01c <MX_ADC3_Init+0x94>)
 800dfaa:	2200      	movs	r2, #0
 800dfac:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800dfae:	4b1b      	ldr	r3, [pc, #108]	; (800e01c <MX_ADC3_Init+0x94>)
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	621a      	str	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800dfb4:	4b19      	ldr	r3, [pc, #100]	; (800e01c <MX_ADC3_Init+0x94>)
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800dfba:	4b18      	ldr	r3, [pc, #96]	; (800e01c <MX_ADC3_Init+0x94>)
 800dfbc:	4a19      	ldr	r2, [pc, #100]	; (800e024 <MX_ADC3_Init+0x9c>)
 800dfbe:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800dfc0:	4b16      	ldr	r3, [pc, #88]	; (800e01c <MX_ADC3_Init+0x94>)
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 800dfc6:	4b15      	ldr	r3, [pc, #84]	; (800e01c <MX_ADC3_Init+0x94>)
 800dfc8:	2201      	movs	r2, #1
 800dfca:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800dfcc:	4b13      	ldr	r3, [pc, #76]	; (800e01c <MX_ADC3_Init+0x94>)
 800dfce:	2200      	movs	r2, #0
 800dfd0:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800dfd2:	4b12      	ldr	r3, [pc, #72]	; (800e01c <MX_ADC3_Init+0x94>)
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 800dfd8:	4810      	ldr	r0, [pc, #64]	; (800e01c <MX_ADC3_Init+0x94>)
 800dfda:	f7f3 fe51 	bl	8001c80 <HAL_ADC_Init>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d004      	beq.n	800dfee <MX_ADC3_Init+0x66>
		_Error_Handler(__FILE__, __LINE__);
 800dfe4:	f240 2123 	movw	r1, #547	; 0x223
 800dfe8:	480f      	ldr	r0, [pc, #60]	; (800e028 <MX_ADC3_Init+0xa0>)
 800dfea:	f000 fdef 	bl	800ebcc <_Error_Handler>
	}

	/**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800dfee:	2300      	movs	r3, #0
 800dff0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800dff2:	2301      	movs	r3, #1
 800dff4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800dff6:	2300      	movs	r3, #0
 800dff8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800dffa:	463b      	mov	r3, r7
 800dffc:	4619      	mov	r1, r3
 800dffe:	4807      	ldr	r0, [pc, #28]	; (800e01c <MX_ADC3_Init+0x94>)
 800e000:	f7f3 ff34 	bl	8001e6c <HAL_ADC_ConfigChannel>
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d004      	beq.n	800e014 <MX_ADC3_Init+0x8c>
		_Error_Handler(__FILE__, __LINE__);
 800e00a:	f44f 710b 	mov.w	r1, #556	; 0x22c
 800e00e:	4806      	ldr	r0, [pc, #24]	; (800e028 <MX_ADC3_Init+0xa0>)
 800e010:	f000 fddc 	bl	800ebcc <_Error_Handler>
	}

}
 800e014:	bf00      	nop
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	20001020 	.word	0x20001020
 800e020:	40012200 	.word	0x40012200
 800e024:	0f000001 	.word	0x0f000001
 800e028:	08013178 	.word	0x08013178

0800e02c <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void) {
 800e02c:	b580      	push	{r7, lr}
 800e02e:	af00      	add	r7, sp, #0

	hcrc.Instance = CRC;
 800e030:	4b0f      	ldr	r3, [pc, #60]	; (800e070 <MX_CRC_Init+0x44>)
 800e032:	4a10      	ldr	r2, [pc, #64]	; (800e074 <MX_CRC_Init+0x48>)
 800e034:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800e036:	4b0e      	ldr	r3, [pc, #56]	; (800e070 <MX_CRC_Init+0x44>)
 800e038:	2200      	movs	r2, #0
 800e03a:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800e03c:	4b0c      	ldr	r3, [pc, #48]	; (800e070 <MX_CRC_Init+0x44>)
 800e03e:	2200      	movs	r2, #0
 800e040:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800e042:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <MX_CRC_Init+0x44>)
 800e044:	2200      	movs	r2, #0
 800e046:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800e048:	4b09      	ldr	r3, [pc, #36]	; (800e070 <MX_CRC_Init+0x44>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800e04e:	4b08      	ldr	r3, [pc, #32]	; (800e070 <MX_CRC_Init+0x44>)
 800e050:	2201      	movs	r2, #1
 800e052:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800e054:	4806      	ldr	r0, [pc, #24]	; (800e070 <MX_CRC_Init+0x44>)
 800e056:	f7f4 fa6d 	bl	8002534 <HAL_CRC_Init>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d004      	beq.n	800e06a <MX_CRC_Init+0x3e>
		_Error_Handler(__FILE__, __LINE__);
 800e060:	f240 213b 	movw	r1, #571	; 0x23b
 800e064:	4804      	ldr	r0, [pc, #16]	; (800e078 <MX_CRC_Init+0x4c>)
 800e066:	f000 fdb1 	bl	800ebcc <_Error_Handler>
	}

}
 800e06a:	bf00      	nop
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	20000d54 	.word	0x20000d54
 800e074:	40023000 	.word	0x40023000
 800e078:	08013178 	.word	0x08013178

0800e07c <MX_DMA2D_Init>:

/* DMA2D init function */
static void MX_DMA2D_Init(void) {
 800e07c:	b580      	push	{r7, lr}
 800e07e:	af00      	add	r7, sp, #0

	hdma2d.Instance = DMA2D;
 800e080:	4b18      	ldr	r3, [pc, #96]	; (800e0e4 <MX_DMA2D_Init+0x68>)
 800e082:	4a19      	ldr	r2, [pc, #100]	; (800e0e8 <MX_DMA2D_Init+0x6c>)
 800e084:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 800e086:	4b17      	ldr	r3, [pc, #92]	; (800e0e4 <MX_DMA2D_Init+0x68>)
 800e088:	2200      	movs	r2, #0
 800e08a:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800e08c:	4b15      	ldr	r3, [pc, #84]	; (800e0e4 <MX_DMA2D_Init+0x68>)
 800e08e:	2200      	movs	r2, #0
 800e090:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 800e092:	4b14      	ldr	r3, [pc, #80]	; (800e0e4 <MX_DMA2D_Init+0x68>)
 800e094:	2200      	movs	r2, #0
 800e096:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 800e098:	4b12      	ldr	r3, [pc, #72]	; (800e0e4 <MX_DMA2D_Init+0x68>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800e09e:	4b11      	ldr	r3, [pc, #68]	; (800e0e4 <MX_DMA2D_Init+0x68>)
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800e0a4:	4b0f      	ldr	r3, [pc, #60]	; (800e0e4 <MX_DMA2D_Init+0x68>)
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800e0aa:	4b0e      	ldr	r3, [pc, #56]	; (800e0e4 <MX_DMA2D_Init+0x68>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 800e0b0:	480c      	ldr	r0, [pc, #48]	; (800e0e4 <MX_DMA2D_Init+0x68>)
 800e0b2:	f7f4 fe05 	bl	8002cc0 <HAL_DMA2D_Init>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d004      	beq.n	800e0c6 <MX_DMA2D_Init+0x4a>
		_Error_Handler(__FILE__, __LINE__);
 800e0bc:	f44f 7113 	mov.w	r1, #588	; 0x24c
 800e0c0:	480a      	ldr	r0, [pc, #40]	; (800e0ec <MX_DMA2D_Init+0x70>)
 800e0c2:	f000 fd83 	bl	800ebcc <_Error_Handler>
	}

	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 800e0c6:	2101      	movs	r1, #1
 800e0c8:	4806      	ldr	r0, [pc, #24]	; (800e0e4 <MX_DMA2D_Init+0x68>)
 800e0ca:	f7f4 ff57 	bl	8002f7c <HAL_DMA2D_ConfigLayer>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d004      	beq.n	800e0de <MX_DMA2D_Init+0x62>
		_Error_Handler(__FILE__, __LINE__);
 800e0d4:	f44f 7114 	mov.w	r1, #592	; 0x250
 800e0d8:	4804      	ldr	r0, [pc, #16]	; (800e0ec <MX_DMA2D_Init+0x70>)
 800e0da:	f000 fd77 	bl	800ebcc <_Error_Handler>
	}

}
 800e0de:	bf00      	nop
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	2000130c 	.word	0x2000130c
 800e0e8:	4002b000 	.word	0x4002b000
 800e0ec:	08013178 	.word	0x08013178

0800e0f0 <MX_I2C3_Init>:

/* I2C3 init function */
static void MX_I2C3_Init(void) {
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	af00      	add	r7, sp, #0

	hi2c3.Instance = I2C3;
 800e0f4:	4b1f      	ldr	r3, [pc, #124]	; (800e174 <MX_I2C3_Init+0x84>)
 800e0f6:	4a20      	ldr	r2, [pc, #128]	; (800e178 <MX_I2C3_Init+0x88>)
 800e0f8:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 800e0fa:	4b1e      	ldr	r3, [pc, #120]	; (800e174 <MX_I2C3_Init+0x84>)
 800e0fc:	4a1f      	ldr	r2, [pc, #124]	; (800e17c <MX_I2C3_Init+0x8c>)
 800e0fe:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 224;
 800e100:	4b1c      	ldr	r3, [pc, #112]	; (800e174 <MX_I2C3_Init+0x84>)
 800e102:	22e0      	movs	r2, #224	; 0xe0
 800e104:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800e106:	4b1b      	ldr	r3, [pc, #108]	; (800e174 <MX_I2C3_Init+0x84>)
 800e108:	2201      	movs	r2, #1
 800e10a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800e10c:	4b19      	ldr	r3, [pc, #100]	; (800e174 <MX_I2C3_Init+0x84>)
 800e10e:	2200      	movs	r2, #0
 800e110:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800e112:	4b18      	ldr	r3, [pc, #96]	; (800e174 <MX_I2C3_Init+0x84>)
 800e114:	2200      	movs	r2, #0
 800e116:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800e118:	4b16      	ldr	r3, [pc, #88]	; (800e174 <MX_I2C3_Init+0x84>)
 800e11a:	2200      	movs	r2, #0
 800e11c:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800e11e:	4b15      	ldr	r3, [pc, #84]	; (800e174 <MX_I2C3_Init+0x84>)
 800e120:	2200      	movs	r2, #0
 800e122:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800e124:	4b13      	ldr	r3, [pc, #76]	; (800e174 <MX_I2C3_Init+0x84>)
 800e126:	2200      	movs	r2, #0
 800e128:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800e12a:	4812      	ldr	r0, [pc, #72]	; (800e174 <MX_I2C3_Init+0x84>)
 800e12c:	f7f5 fa24 	bl	8003578 <HAL_I2C_Init>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d004      	beq.n	800e140 <MX_I2C3_Init+0x50>
		_Error_Handler(__FILE__, __LINE__);
 800e136:	f240 2162 	movw	r1, #610	; 0x262
 800e13a:	4811      	ldr	r0, [pc, #68]	; (800e180 <MX_I2C3_Init+0x90>)
 800e13c:	f000 fd46 	bl	800ebcc <_Error_Handler>
	}

	/**Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 800e140:	2100      	movs	r1, #0
 800e142:	480c      	ldr	r0, [pc, #48]	; (800e174 <MX_I2C3_Init+0x84>)
 800e144:	f7f5 faa6 	bl	8003694 <HAL_I2CEx_ConfigAnalogFilter>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d004      	beq.n	800e158 <MX_I2C3_Init+0x68>
			!= HAL_OK) {
		_Error_Handler(__FILE__, __LINE__);
 800e14e:	f240 2169 	movw	r1, #617	; 0x269
 800e152:	480b      	ldr	r0, [pc, #44]	; (800e180 <MX_I2C3_Init+0x90>)
 800e154:	f000 fd3a 	bl	800ebcc <_Error_Handler>
	}

	/**Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 800e158:	2100      	movs	r1, #0
 800e15a:	4806      	ldr	r0, [pc, #24]	; (800e174 <MX_I2C3_Init+0x84>)
 800e15c:	f7f5 fae5 	bl	800372a <HAL_I2CEx_ConfigDigitalFilter>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	d004      	beq.n	800e170 <MX_I2C3_Init+0x80>
		_Error_Handler(__FILE__, __LINE__);
 800e166:	f240 216f 	movw	r1, #623	; 0x26f
 800e16a:	4805      	ldr	r0, [pc, #20]	; (800e180 <MX_I2C3_Init+0x90>)
 800e16c:	f000 fd2e 	bl	800ebcc <_Error_Handler>
	}

}
 800e170:	bf00      	nop
 800e172:	bd80      	pop	{r7, pc}
 800e174:	20000c48 	.word	0x20000c48
 800e178:	40005c00 	.word	0x40005c00
 800e17c:	00c0eaff 	.word	0x00c0eaff
 800e180:	08013178 	.word	0x08013178

0800e184 <MX_LTDC_Init>:

/* LTDC init function */
static void MX_LTDC_Init(void) {
 800e184:	b580      	push	{r7, lr}
 800e186:	b08e      	sub	sp, #56	; 0x38
 800e188:	af00      	add	r7, sp, #0

	LTDC_LayerCfgTypeDef pLayerCfg;

	hltdc.Instance = LTDC;
 800e18a:	4b3c      	ldr	r3, [pc, #240]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e18c:	4a3c      	ldr	r2, [pc, #240]	; (800e280 <MX_LTDC_Init+0xfc>)
 800e18e:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800e190:	4b3a      	ldr	r3, [pc, #232]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e192:	2200      	movs	r2, #0
 800e194:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800e196:	4b39      	ldr	r3, [pc, #228]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e198:	2200      	movs	r2, #0
 800e19a:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800e19c:	4b37      	ldr	r3, [pc, #220]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e19e:	2200      	movs	r2, #0
 800e1a0:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800e1a2:	4b36      	ldr	r3, [pc, #216]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 800e1a8:	4b34      	ldr	r3, [pc, #208]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e1aa:	2228      	movs	r2, #40	; 0x28
 800e1ac:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 800e1ae:	4b33      	ldr	r3, [pc, #204]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e1b0:	2209      	movs	r2, #9
 800e1b2:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 800e1b4:	4b31      	ldr	r3, [pc, #196]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e1b6:	2235      	movs	r2, #53	; 0x35
 800e1b8:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 800e1ba:	4b30      	ldr	r3, [pc, #192]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e1bc:	220b      	movs	r2, #11
 800e1be:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 800e1c0:	4b2e      	ldr	r3, [pc, #184]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e1c2:	f240 2215 	movw	r2, #533	; 0x215
 800e1c6:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 800e1c8:	4b2c      	ldr	r3, [pc, #176]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e1ca:	f240 121b 	movw	r2, #283	; 0x11b
 800e1ce:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 800e1d0:	4b2a      	ldr	r3, [pc, #168]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e1d2:	f240 2235 	movw	r2, #565	; 0x235
 800e1d6:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 800e1d8:	4b28      	ldr	r3, [pc, #160]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e1da:	f240 121d 	movw	r2, #285	; 0x11d
 800e1de:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 800e1e0:	4b26      	ldr	r3, [pc, #152]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 800e1e8:	4b24      	ldr	r3, [pc, #144]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 800e1f0:	4b22      	ldr	r3, [pc, #136]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 800e1f8:	4820      	ldr	r0, [pc, #128]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e1fa:	f7f5 fae5 	bl	80037c8 <HAL_LTDC_Init>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d004      	beq.n	800e20e <MX_LTDC_Init+0x8a>
		_Error_Handler(__FILE__, __LINE__);
 800e204:	f240 218a 	movw	r1, #650	; 0x28a
 800e208:	481e      	ldr	r0, [pc, #120]	; (800e284 <MX_LTDC_Init+0x100>)
 800e20a:	f000 fcdf 	bl	800ebcc <_Error_Handler>
	}

	pLayerCfg.WindowX0 = 0;
 800e20e:	2300      	movs	r3, #0
 800e210:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 800e212:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800e216:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 800e218:	2300      	movs	r3, #0
 800e21a:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 800e21c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e220:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800e222:	2300      	movs	r3, #0
 800e224:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 800e226:	23ff      	movs	r3, #255	; 0xff
 800e228:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 800e22a:	2300      	movs	r3, #0
 800e22c:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800e22e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e232:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800e234:	2305      	movs	r3, #5
 800e236:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = LCD_FB_START_ADDRESS;
 800e238:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800e23c:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 0;
 800e23e:	2300      	movs	r3, #0
 800e240:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 0;
 800e242:	2300      	movs	r3, #0
 800e244:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 800e246:	2300      	movs	r3, #0
 800e248:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 800e24c:	2300      	movs	r3, #0
 800e24e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 800e252:	2300      	movs	r3, #0
 800e254:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800e258:	1d3b      	adds	r3, r7, #4
 800e25a:	2200      	movs	r2, #0
 800e25c:	4619      	mov	r1, r3
 800e25e:	4807      	ldr	r0, [pc, #28]	; (800e27c <MX_LTDC_Init+0xf8>)
 800e260:	f7f5 fb8e 	bl	8003980 <HAL_LTDC_ConfigLayer>
 800e264:	4603      	mov	r3, r0
 800e266:	2b00      	cmp	r3, #0
 800e268:	d004      	beq.n	800e274 <MX_LTDC_Init+0xf0>
		_Error_Handler(__FILE__, __LINE__);
 800e26a:	f240 219d 	movw	r1, #669	; 0x29d
 800e26e:	4805      	ldr	r0, [pc, #20]	; (800e284 <MX_LTDC_Init+0x100>)
 800e270:	f000 fcac 	bl	800ebcc <_Error_Handler>
	}

}
 800e274:	bf00      	nop
 800e276:	3738      	adds	r7, #56	; 0x38
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	20000d78 	.word	0x20000d78
 800e280:	40016800 	.word	0x40016800
 800e284:	08013178 	.word	0x08013178

0800e288 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void) {
 800e288:	b580      	push	{r7, lr}
 800e28a:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 800e28c:	4b15      	ldr	r3, [pc, #84]	; (800e2e4 <MX_USART1_UART_Init+0x5c>)
 800e28e:	4a16      	ldr	r2, [pc, #88]	; (800e2e8 <MX_USART1_UART_Init+0x60>)
 800e290:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800e292:	4b14      	ldr	r3, [pc, #80]	; (800e2e4 <MX_USART1_UART_Init+0x5c>)
 800e294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e298:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e29a:	4b12      	ldr	r3, [pc, #72]	; (800e2e4 <MX_USART1_UART_Init+0x5c>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800e2a0:	4b10      	ldr	r3, [pc, #64]	; (800e2e4 <MX_USART1_UART_Init+0x5c>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800e2a6:	4b0f      	ldr	r3, [pc, #60]	; (800e2e4 <MX_USART1_UART_Init+0x5c>)
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800e2ac:	4b0d      	ldr	r3, [pc, #52]	; (800e2e4 <MX_USART1_UART_Init+0x5c>)
 800e2ae:	220c      	movs	r2, #12
 800e2b0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e2b2:	4b0c      	ldr	r3, [pc, #48]	; (800e2e4 <MX_USART1_UART_Init+0x5c>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e2b8:	4b0a      	ldr	r3, [pc, #40]	; (800e2e4 <MX_USART1_UART_Init+0x5c>)
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e2be:	4b09      	ldr	r3, [pc, #36]	; (800e2e4 <MX_USART1_UART_Init+0x5c>)
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e2c4:	4b07      	ldr	r3, [pc, #28]	; (800e2e4 <MX_USART1_UART_Init+0x5c>)
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800e2ca:	4806      	ldr	r0, [pc, #24]	; (800e2e4 <MX_USART1_UART_Init+0x5c>)
 800e2cc:	f7f8 faae 	bl	800682c <HAL_UART_Init>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d004      	beq.n	800e2e0 <MX_USART1_UART_Init+0x58>
		_Error_Handler(__FILE__, __LINE__);
 800e2d6:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 800e2da:	4804      	ldr	r0, [pc, #16]	; (800e2ec <MX_USART1_UART_Init+0x64>)
 800e2dc:	f000 fc76 	bl	800ebcc <_Error_Handler>
	}

}
 800e2e0:	bf00      	nop
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	20001068 	.word	0x20001068
 800e2e8:	40011000 	.word	0x40011000
 800e2ec:	08013178 	.word	0x08013178

0800e2f0 <MX_DMA_Init>:
/**
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void) {
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE()
 800e2f6:	4a30      	ldr	r2, [pc, #192]	; (800e3b8 <MX_DMA_Init+0xc8>)
 800e2f8:	4b2f      	ldr	r3, [pc, #188]	; (800e3b8 <MX_DMA_Init+0xc8>)
 800e2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e300:	6313      	str	r3, [r2, #48]	; 0x30
 800e302:	4b2d      	ldr	r3, [pc, #180]	; (800e3b8 <MX_DMA_Init+0xc8>)
 800e304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e30a:	607b      	str	r3, [r7, #4]
 800e30c:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_DMA1_CLK_ENABLE()
 800e30e:	4a2a      	ldr	r2, [pc, #168]	; (800e3b8 <MX_DMA_Init+0xc8>)
 800e310:	4b29      	ldr	r3, [pc, #164]	; (800e3b8 <MX_DMA_Init+0xc8>)
 800e312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e318:	6313      	str	r3, [r2, #48]	; 0x30
 800e31a:	4b27      	ldr	r3, [pc, #156]	; (800e3b8 <MX_DMA_Init+0xc8>)
 800e31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e31e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e322:	603b      	str	r3, [r7, #0]
 800e324:	683b      	ldr	r3, [r7, #0]
	;

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800e326:	4b25      	ldr	r3, [pc, #148]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e328:	4a25      	ldr	r2, [pc, #148]	; (800e3c0 <MX_DMA_Init+0xd0>)
 800e32a:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 800e32c:	4b23      	ldr	r3, [pc, #140]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e32e:	2200      	movs	r2, #0
 800e330:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800e332:	4b22      	ldr	r3, [pc, #136]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e334:	2280      	movs	r2, #128	; 0x80
 800e336:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800e338:	4b20      	ldr	r3, [pc, #128]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e33a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e33e:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800e340:	4b1e      	ldr	r3, [pc, #120]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e346:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e348:	4b1c      	ldr	r3, [pc, #112]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e34e:	4b1b      	ldr	r3, [pc, #108]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e350:	2200      	movs	r2, #0
 800e352:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800e354:	4b19      	ldr	r3, [pc, #100]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e356:	2200      	movs	r2, #0
 800e358:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800e35a:	4b18      	ldr	r3, [pc, #96]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e35c:	2200      	movs	r2, #0
 800e35e:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e360:	4b16      	ldr	r3, [pc, #88]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e362:	2204      	movs	r2, #4
 800e364:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e366:	4b15      	ldr	r3, [pc, #84]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e368:	2203      	movs	r2, #3
 800e36a:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800e36c:	4b13      	ldr	r3, [pc, #76]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e36e:	2200      	movs	r2, #0
 800e370:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800e372:	4b12      	ldr	r3, [pc, #72]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e374:	2200      	movs	r2, #0
 800e376:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK) {
 800e378:	4810      	ldr	r0, [pc, #64]	; (800e3bc <MX_DMA_Init+0xcc>)
 800e37a:	f7f4 f9b9 	bl	80026f0 <HAL_DMA_Init>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d004      	beq.n	800e38e <MX_DMA_Init+0x9e>
		_Error_Handler(__FILE__, __LINE__);
 800e384:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800e388:	480e      	ldr	r0, [pc, #56]	; (800e3c4 <MX_DMA_Init+0xd4>)
 800e38a:	f000 fc1f 	bl	800ebcc <_Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800e38e:	2200      	movs	r2, #0
 800e390:	2100      	movs	r1, #0
 800e392:	200c      	movs	r0, #12
 800e394:	f7f4 f86d 	bl	8002472 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800e398:	200c      	movs	r0, #12
 800e39a:	f7f4 f886 	bl	80024aa <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800e39e:	2200      	movs	r2, #0
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	200f      	movs	r0, #15
 800e3a4:	f7f4 f865 	bl	8002472 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800e3a8:	200f      	movs	r0, #15
 800e3aa:	f7f4 f87e 	bl	80024aa <HAL_NVIC_EnableIRQ>

}
 800e3ae:	bf00      	nop
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	40023800 	.word	0x40023800
 800e3bc:	20000cf4 	.word	0x20000cf4
 800e3c0:	40026410 	.word	0x40026410
 800e3c4:	08013178 	.word	0x08013178

0800e3c8 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void) {
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b088      	sub	sp, #32
 800e3cc:	af00      	add	r7, sp, #0
	FMC_SDRAM_TimingTypeDef SdramTiming;

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 800e3ce:	4b21      	ldr	r3, [pc, #132]	; (800e454 <MX_FMC_Init+0x8c>)
 800e3d0:	4a21      	ldr	r2, [pc, #132]	; (800e458 <MX_FMC_Init+0x90>)
 800e3d2:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800e3d4:	4b1f      	ldr	r3, [pc, #124]	; (800e454 <MX_FMC_Init+0x8c>)
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800e3da:	4b1e      	ldr	r3, [pc, #120]	; (800e454 <MX_FMC_Init+0x8c>)
 800e3dc:	2200      	movs	r2, #0
 800e3de:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800e3e0:	4b1c      	ldr	r3, [pc, #112]	; (800e454 <MX_FMC_Init+0x8c>)
 800e3e2:	2204      	movs	r2, #4
 800e3e4:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800e3e6:	4b1b      	ldr	r3, [pc, #108]	; (800e454 <MX_FMC_Init+0x8c>)
 800e3e8:	2210      	movs	r2, #16
 800e3ea:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800e3ec:	4b19      	ldr	r3, [pc, #100]	; (800e454 <MX_FMC_Init+0x8c>)
 800e3ee:	2240      	movs	r2, #64	; 0x40
 800e3f0:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800e3f2:	4b18      	ldr	r3, [pc, #96]	; (800e454 <MX_FMC_Init+0x8c>)
 800e3f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e3f8:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800e3fa:	4b16      	ldr	r3, [pc, #88]	; (800e454 <MX_FMC_Init+0x8c>)
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800e400:	4b14      	ldr	r3, [pc, #80]	; (800e454 <MX_FMC_Init+0x8c>)
 800e402:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e406:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800e408:	4b12      	ldr	r3, [pc, #72]	; (800e454 <MX_FMC_Init+0x8c>)
 800e40a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e40e:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800e410:	4b10      	ldr	r3, [pc, #64]	; (800e454 <MX_FMC_Init+0x8c>)
 800e412:	2200      	movs	r2, #0
 800e414:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 800e416:	2302      	movs	r3, #2
 800e418:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 800e41a:	2307      	movs	r3, #7
 800e41c:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 800e41e:	2304      	movs	r3, #4
 800e420:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 6;
 800e422:	2306      	movs	r3, #6
 800e424:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 2;
 800e426:	2302      	movs	r3, #2
 800e428:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 800e42a:	2302      	movs	r3, #2
 800e42c:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 800e42e:	2302      	movs	r3, #2
 800e430:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 800e432:	1d3b      	adds	r3, r7, #4
 800e434:	4619      	mov	r1, r3
 800e436:	4807      	ldr	r0, [pc, #28]	; (800e454 <MX_FMC_Init+0x8c>)
 800e438:	f7f7 febc 	bl	80061b4 <HAL_SDRAM_Init>
 800e43c:	4603      	mov	r3, r0
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d004      	beq.n	800e44c <MX_FMC_Init+0x84>
		_Error_Handler(__FILE__, __LINE__);
 800e442:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 800e446:	4805      	ldr	r0, [pc, #20]	; (800e45c <MX_FMC_Init+0x94>)
 800e448:	f000 fbc0 	bl	800ebcc <_Error_Handler>
	}

}
 800e44c:	bf00      	nop
 800e44e:	3720      	adds	r7, #32
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	2000134c 	.word	0x2000134c
 800e458:	a0000140 	.word	0xa0000140
 800e45c:	08013178 	.word	0x08013178

0800e460 <MX_GPIO_Init>:
 PH10   ------> DCMI_D1
 PA7   ------> ETH_CRS_DV
 PB14   ------> SPI2_MISO
 PB15   ------> SPI2_MOSI
 */
static void MX_GPIO_Init(void) {
 800e460:	b580      	push	{r7, lr}
 800e462:	b090      	sub	sp, #64	; 0x40
 800e464:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800e466:	4aae      	ldr	r2, [pc, #696]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e468:	4bad      	ldr	r3, [pc, #692]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e46c:	f043 0310 	orr.w	r3, r3, #16
 800e470:	6313      	str	r3, [r2, #48]	; 0x30
 800e472:	4bab      	ldr	r3, [pc, #684]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e476:	f003 0310 	and.w	r3, r3, #16
 800e47a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800e47e:	4aa8      	ldr	r2, [pc, #672]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e480:	4ba7      	ldr	r3, [pc, #668]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e488:	6313      	str	r3, [r2, #48]	; 0x30
 800e48a:	4ba5      	ldr	r3, [pc, #660]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e48e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e492:	627b      	str	r3, [r7, #36]	; 0x24
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800e496:	4aa2      	ldr	r2, [pc, #648]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e498:	4ba1      	ldr	r3, [pc, #644]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e49c:	f043 0302 	orr.w	r3, r3, #2
 800e4a0:	6313      	str	r3, [r2, #48]	; 0x30
 800e4a2:	4b9f      	ldr	r3, [pc, #636]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a6:	f003 0302 	and.w	r3, r3, #2
 800e4aa:	623b      	str	r3, [r7, #32]
 800e4ac:	6a3b      	ldr	r3, [r7, #32]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800e4ae:	4a9c      	ldr	r2, [pc, #624]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e4b0:	4b9b      	ldr	r3, [pc, #620]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4b4:	f043 0308 	orr.w	r3, r3, #8
 800e4b8:	6313      	str	r3, [r2, #48]	; 0x30
 800e4ba:	4b99      	ldr	r3, [pc, #612]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4be:	f003 0308 	and.w	r3, r3, #8
 800e4c2:	61fb      	str	r3, [r7, #28]
 800e4c4:	69fb      	ldr	r3, [r7, #28]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800e4c6:	4a96      	ldr	r2, [pc, #600]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e4c8:	4b95      	ldr	r3, [pc, #596]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4cc:	f043 0304 	orr.w	r3, r3, #4
 800e4d0:	6313      	str	r3, [r2, #48]	; 0x30
 800e4d2:	4b93      	ldr	r3, [pc, #588]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4d6:	f003 0304 	and.w	r3, r3, #4
 800e4da:	61bb      	str	r3, [r7, #24]
 800e4dc:	69bb      	ldr	r3, [r7, #24]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800e4de:	4a90      	ldr	r2, [pc, #576]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e4e0:	4b8f      	ldr	r3, [pc, #572]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4e4:	f043 0301 	orr.w	r3, r3, #1
 800e4e8:	6313      	str	r3, [r2, #48]	; 0x30
 800e4ea:	4b8d      	ldr	r3, [pc, #564]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ee:	f003 0301 	and.w	r3, r3, #1
 800e4f2:	617b      	str	r3, [r7, #20]
 800e4f4:	697b      	ldr	r3, [r7, #20]
	;
	__HAL_RCC_GPIOJ_CLK_ENABLE()
 800e4f6:	4a8a      	ldr	r2, [pc, #552]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e4f8:	4b89      	ldr	r3, [pc, #548]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e500:	6313      	str	r3, [r2, #48]	; 0x30
 800e502:	4b87      	ldr	r3, [pc, #540]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e50a:	613b      	str	r3, [r7, #16]
 800e50c:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOI_CLK_ENABLE()
 800e50e:	4a84      	ldr	r2, [pc, #528]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e510:	4b83      	ldr	r3, [pc, #524]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e518:	6313      	str	r3, [r2, #48]	; 0x30
 800e51a:	4b81      	ldr	r3, [pc, #516]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e51e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e522:	60fb      	str	r3, [r7, #12]
 800e524:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOK_CLK_ENABLE()
 800e526:	4a7e      	ldr	r2, [pc, #504]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e528:	4b7d      	ldr	r3, [pc, #500]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e52c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e530:	6313      	str	r3, [r2, #48]	; 0x30
 800e532:	4b7b      	ldr	r3, [pc, #492]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e53a:	60bb      	str	r3, [r7, #8]
 800e53c:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
 800e53e:	4a78      	ldr	r2, [pc, #480]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e540:	4b77      	ldr	r3, [pc, #476]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e544:	f043 0320 	orr.w	r3, r3, #32
 800e548:	6313      	str	r3, [r2, #48]	; 0x30
 800e54a:	4b75      	ldr	r3, [pc, #468]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e54e:	f003 0320 	and.w	r3, r3, #32
 800e552:	607b      	str	r3, [r7, #4]
 800e554:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800e556:	4a72      	ldr	r2, [pc, #456]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e558:	4b71      	ldr	r3, [pc, #452]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e55c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e560:	6313      	str	r3, [r2, #48]	; 0x30
 800e562:	4b6f      	ldr	r3, [pc, #444]	; (800e720 <MX_GPIO_Init+0x2c0>)
 800e564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e56a:	603b      	str	r3, [r7, #0]
 800e56c:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800e56e:	2201      	movs	r2, #1
 800e570:	2120      	movs	r1, #32
 800e572:	486c      	ldr	r0, [pc, #432]	; (800e724 <MX_GPIO_Init+0x2c4>)
 800e574:	f7f4 ffe6 	bl	8003544 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin,
 800e578:	2200      	movs	r2, #0
 800e57a:	f241 010c 	movw	r1, #4108	; 0x100c
 800e57e:	486a      	ldr	r0, [pc, #424]	; (800e728 <MX_GPIO_Init+0x2c8>)
 800e580:	f7f4 ffe0 	bl	8003544 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800e584:	2200      	movs	r2, #0
 800e586:	2108      	movs	r1, #8
 800e588:	4868      	ldr	r0, [pc, #416]	; (800e72c <MX_GPIO_Init+0x2cc>)
 800e58a:	f7f4 ffdb 	bl	8003544 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800e58e:	2200      	movs	r2, #0
 800e590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e594:	4866      	ldr	r0, [pc, #408]	; (800e730 <MX_GPIO_Init+0x2d0>)
 800e596:	f7f4 ffd5 	bl	8003544 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 800e59a:	2200      	movs	r2, #0
 800e59c:	21c8      	movs	r1, #200	; 0xc8
 800e59e:	4865      	ldr	r0, [pc, #404]	; (800e734 <MX_GPIO_Init+0x2d4>)
 800e5a0:	f7f4 ffd0 	bl	8003544 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800e5a4:	2308      	movs	r3, #8
 800e5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800e5b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	4860      	ldr	r0, [pc, #384]	; (800e738 <MX_GPIO_Init+0x2d8>)
 800e5b8:	f7f4 fe1a 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800e5bc:	2304      	movs	r3, #4
 800e5be:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5c0:	2302      	movs	r3, #2
 800e5c2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e5c8:	2303      	movs	r3, #3
 800e5ca:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800e5cc:	2309      	movs	r3, #9
 800e5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800e5d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	4858      	ldr	r0, [pc, #352]	; (800e738 <MX_GPIO_Init+0x2d8>)
 800e5d8:	f7f4 fe0a 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 800e5dc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800e5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5e2:	2302      	movs	r3, #2
 800e5e4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e5ea:	2303      	movs	r3, #3
 800e5ec:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e5ee:	230b      	movs	r3, #11
 800e5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e5f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	484e      	ldr	r0, [pc, #312]	; (800e734 <MX_GPIO_Init+0x2d4>)
 800e5fa:	f7f4 fdf9 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 800e5fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e602:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e604:	2312      	movs	r3, #18
 800e606:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e608:	2301      	movs	r3, #1
 800e60a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e60c:	2300      	movs	r3, #0
 800e60e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e610:	2304      	movs	r3, #4
 800e612:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e618:	4619      	mov	r1, r3
 800e61a:	4848      	ldr	r0, [pc, #288]	; (800e73c <MX_GPIO_Init+0x2dc>)
 800e61c:	f7f4 fde8 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800e620:	2310      	movs	r3, #16
 800e622:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e624:	2302      	movs	r3, #2
 800e626:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e628:	2300      	movs	r3, #0
 800e62a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e62c:	2300      	movs	r3, #0
 800e62e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e630:	2302      	movs	r3, #2
 800e632:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800e634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e638:	4619      	mov	r1, r3
 800e63a:	4840      	ldr	r0, [pc, #256]	; (800e73c <MX_GPIO_Init+0x2dc>)
 800e63c:	f7f4 fdd8 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800e640:	2380      	movs	r3, #128	; 0x80
 800e642:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e644:	2302      	movs	r3, #2
 800e646:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e648:	2300      	movs	r3, #0
 800e64a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e64c:	2300      	movs	r3, #0
 800e64e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800e650:	2308      	movs	r3, #8
 800e652:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800e654:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e658:	4619      	mov	r1, r3
 800e65a:	4832      	ldr	r0, [pc, #200]	; (800e724 <MX_GPIO_Init+0x2c4>)
 800e65c:	f7f4 fdc8 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
	 PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
 800e660:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800e664:	62fb      	str	r3, [r7, #44]	; 0x2c
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e666:	2302      	movs	r3, #2
 800e668:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e66a:	2300      	movs	r3, #0
 800e66c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e66e:	2303      	movs	r3, #3
 800e670:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800e672:	230c      	movs	r3, #12
 800e674:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e67a:	4619      	mov	r1, r3
 800e67c:	4830      	ldr	r0, [pc, #192]	; (800e740 <MX_GPIO_Init+0x2e0>)
 800e67e:	f7f4 fdb7 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800e682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e686:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e688:	2302      	movs	r3, #2
 800e68a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e68c:	2300      	movs	r3, #0
 800e68e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e690:	2300      	movs	r3, #0
 800e692:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800e694:	2301      	movs	r3, #1
 800e696:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800e698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e69c:	4619      	mov	r1, r3
 800e69e:	4829      	ldr	r0, [pc, #164]	; (800e744 <MX_GPIO_Init+0x2e4>)
 800e6a0:	f7f4 fda6 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin | DCMI_D7_Pin;
 800e6a4:	2360      	movs	r3, #96	; 0x60
 800e6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6a8:	2302      	movs	r3, #2
 800e6aa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800e6b4:	230d      	movs	r3, #13
 800e6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e6b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e6bc:	4619      	mov	r1, r3
 800e6be:	481e      	ldr	r0, [pc, #120]	; (800e738 <MX_GPIO_Init+0x2d8>)
 800e6c0:	f7f4 fd96 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800e6c4:	2340      	movs	r3, #64	; 0x40
 800e6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6c8:	2302      	movs	r3, #2
 800e6ca:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e6d0:	2303      	movs	r3, #3
 800e6d2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800e6d4:	230a      	movs	r3, #10
 800e6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800e6d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e6dc:	4619      	mov	r1, r3
 800e6de:	4817      	ldr	r0, [pc, #92]	; (800e73c <MX_GPIO_Init+0x2dc>)
 800e6e0:	f7f4 fd86 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800e6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800e6f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	4813      	ldr	r0, [pc, #76]	; (800e748 <MX_GPIO_Init+0x2e8>)
 800e6fa:	f7f4 fd79 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800e6fe:	2340      	movs	r3, #64	; 0x40
 800e700:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800e702:	4b12      	ldr	r3, [pc, #72]	; (800e74c <MX_GPIO_Init+0x2ec>)
 800e704:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e706:	2300      	movs	r3, #0
 800e708:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800e70a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e70e:	4619      	mov	r1, r3
 800e710:	4804      	ldr	r0, [pc, #16]	; (800e724 <MX_GPIO_Init+0x2c4>)
 800e712:	f7f4 fd6d 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800e716:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e71a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e71c:	e018      	b.n	800e750 <MX_GPIO_Init+0x2f0>
 800e71e:	bf00      	nop
 800e720:	40023800 	.word	0x40023800
 800e724:	40020c00 	.word	0x40020c00
 800e728:	40022000 	.word	0x40022000
 800e72c:	40022800 	.word	0x40022800
 800e730:	40021c00 	.word	0x40021c00
 800e734:	40021800 	.word	0x40021800
 800e738:	40021000 	.word	0x40021000
 800e73c:	40020400 	.word	0x40020400
 800e740:	40020800 	.word	0x40020800
 800e744:	40020000 	.word	0x40020000
 800e748:	40022400 	.word	0x40022400
 800e74c:	10120000 	.word	0x10120000
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e750:	2302      	movs	r3, #2
 800e752:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e754:	2300      	movs	r3, #0
 800e756:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e758:	2303      	movs	r3, #3
 800e75a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e75c:	230a      	movs	r3, #10
 800e75e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e764:	4619      	mov	r1, r3
 800e766:	48bb      	ldr	r0, [pc, #748]	; (800ea54 <MX_GPIO_Init+0x5f4>)
 800e768:	f7f4 fd42 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
	GPIO_InitStruct.Pin = SAI2_MCLKA_Pin | SAI2_SCKA_Pin | SAI2_FSA_Pin
 800e76c:	23f0      	movs	r3, #240	; 0xf0
 800e76e:	62fb      	str	r3, [r7, #44]	; 0x2c
			| SAI2_SDA_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e770:	2302      	movs	r3, #2
 800e772:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e774:	2300      	movs	r3, #0
 800e776:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e778:	2300      	movs	r3, #0
 800e77a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800e77c:	230a      	movs	r3, #10
 800e77e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e784:	4619      	mov	r1, r3
 800e786:	48b4      	ldr	r0, [pc, #720]	; (800ea58 <MX_GPIO_Init+0x5f8>)
 800e788:	f7f4 fd32 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SAI2_SDB_Pin */
	GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800e78c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e790:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e792:	2302      	movs	r3, #2
 800e794:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e796:	2300      	movs	r3, #0
 800e798:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e79a:	2300      	movs	r3, #0
 800e79c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800e79e:	230a      	movs	r3, #10
 800e7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800e7a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	48ac      	ldr	r0, [pc, #688]	; (800ea5c <MX_GPIO_Init+0x5fc>)
 800e7aa:	f7f4 fd21 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800e7ae:	2320      	movs	r3, #32
 800e7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800e7be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	48a6      	ldr	r0, [pc, #664]	; (800ea60 <MX_GPIO_Init+0x600>)
 800e7c6:	f7f4 fd13 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800e7ca:	2308      	movs	r3, #8
 800e7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7ce:	2302      	movs	r3, #2
 800e7d0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800e7da:	230d      	movs	r3, #13
 800e7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800e7de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	489e      	ldr	r0, [pc, #632]	; (800ea60 <MX_GPIO_Init+0x600>)
 800e7e6:	f7f4 fd03 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800e7ea:	f241 030c 	movw	r3, #4108	; 0x100c
 800e7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e7fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e800:	4619      	mov	r1, r3
 800e802:	4895      	ldr	r0, [pc, #596]	; (800ea58 <MX_GPIO_Init+0x5f8>)
 800e804:	f7f4 fcf4 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800e808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e80c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e80e:	2300      	movs	r3, #0
 800e810:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e812:	2300      	movs	r3, #0
 800e814:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800e816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e81a:	4619      	mov	r1, r3
 800e81c:	4891      	ldr	r0, [pc, #580]	; (800ea64 <MX_GPIO_Init+0x604>)
 800e81e:	f7f4 fce7 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800e822:	2308      	movs	r3, #8
 800e824:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e826:	2301      	movs	r3, #1
 800e828:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e82a:	2300      	movs	r3, #0
 800e82c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e82e:	2300      	movs	r3, #0
 800e830:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800e832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e836:	4619      	mov	r1, r3
 800e838:	488b      	ldr	r0, [pc, #556]	; (800ea68 <MX_GPIO_Init+0x608>)
 800e83a:	f7f4 fcd9 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800e83e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e842:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e844:	2302      	movs	r3, #2
 800e846:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e848:	2300      	movs	r3, #0
 800e84a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e84c:	2300      	movs	r3, #0
 800e84e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800e850:	230d      	movs	r3, #13
 800e852:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800e854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e858:	4619      	mov	r1, r3
 800e85a:	4880      	ldr	r0, [pc, #512]	; (800ea5c <MX_GPIO_Init+0x5fc>)
 800e85c:	f7f4 fcc8 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800e860:	2310      	movs	r3, #16
 800e862:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e864:	2300      	movs	r3, #0
 800e866:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e868:	2300      	movs	r3, #0
 800e86a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800e86c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e870:	4619      	mov	r1, r3
 800e872:	487b      	ldr	r0, [pc, #492]	; (800ea60 <MX_GPIO_Init+0x600>)
 800e874:	f7f4 fcbc 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800e878:	2304      	movs	r3, #4
 800e87a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e87c:	2302      	movs	r3, #2
 800e87e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e880:	2300      	movs	r3, #0
 800e882:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e884:	2303      	movs	r3, #3
 800e886:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800e888:	230c      	movs	r3, #12
 800e88a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800e88c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e890:	4619      	mov	r1, r3
 800e892:	4873      	ldr	r0, [pc, #460]	; (800ea60 <MX_GPIO_Init+0x600>)
 800e894:	f7f4 fcac 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800e898:	f248 0304 	movw	r3, #32772	; 0x8004
 800e89c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e8a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	486f      	ldr	r0, [pc, #444]	; (800ea6c <MX_GPIO_Init+0x60c>)
 800e8ae:	f7f4 fc9f 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800e8b2:	2302      	movs	r3, #2
 800e8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8b6:	2302      	movs	r3, #2
 800e8b8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e8c2:	2305      	movs	r3, #5
 800e8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800e8c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	4862      	ldr	r0, [pc, #392]	; (800ea58 <MX_GPIO_Init+0x5f8>)
 800e8ce:	f7f4 fc8f 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800e8d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800e8e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	4860      	ldr	r0, [pc, #384]	; (800ea6c <MX_GPIO_Init+0x60c>)
 800e8ec:	f7f4 fc80 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
	 DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin | DCMI_D3_Pin | DCMI_D0_Pin | DCMI_D2_Pin
 800e8f0:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800e8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
			| DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8f6:	2302      	movs	r3, #2
 800e8f8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8fe:	2300      	movs	r3, #0
 800e900:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800e902:	230d      	movs	r3, #13
 800e904:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e90a:	4619      	mov	r1, r3
 800e90c:	4857      	ldr	r0, [pc, #348]	; (800ea6c <MX_GPIO_Init+0x60c>)
 800e90e:	f7f4 fc6f 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_CS_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 800e912:	2301      	movs	r3, #1
 800e914:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e916:	2302      	movs	r3, #2
 800e918:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e91a:	2300      	movs	r3, #0
 800e91c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e91e:	2300      	movs	r3, #0
 800e920:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800e922:	2302      	movs	r3, #2
 800e924:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 800e926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e92a:	4619      	mov	r1, r3
 800e92c:	484a      	ldr	r0, [pc, #296]	; (800ea58 <MX_GPIO_Init+0x5f8>)
 800e92e:	f7f4 fc5f 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 800e932:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e936:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e938:	2302      	movs	r3, #2
 800e93a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e93c:	2300      	movs	r3, #0
 800e93e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e940:	2300      	movs	r3, #0
 800e942:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800e944:	2301      	movs	r3, #1
 800e946:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 800e948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e94c:	4619      	mov	r1, r3
 800e94e:	4841      	ldr	r0, [pc, #260]	; (800ea54 <MX_GPIO_Init+0x5f4>)
 800e950:	f7f4 fc4e 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800e954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e958:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800e95a:	4b45      	ldr	r3, [pc, #276]	; (800ea70 <MX_GPIO_Init+0x610>)
 800e95c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e95e:	2300      	movs	r3, #0
 800e960:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800e962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e966:	4619      	mov	r1, r3
 800e968:	483b      	ldr	r0, [pc, #236]	; (800ea58 <MX_GPIO_Init+0x5f8>)
 800e96a:	f7f4 fc41 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 800e96e:	23c0      	movs	r3, #192	; 0xc0
 800e970:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e972:	2302      	movs	r3, #2
 800e974:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e976:	2300      	movs	r3, #0
 800e978:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e97a:	2303      	movs	r3, #3
 800e97c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800e97e:	2308      	movs	r3, #8
 800e980:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e986:	4619      	mov	r1, r3
 800e988:	4836      	ldr	r0, [pc, #216]	; (800ea64 <MX_GPIO_Init+0x604>)
 800e98a:	f7f4 fc31 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800e98e:	23c8      	movs	r3, #200	; 0xc8
 800e990:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e992:	2301      	movs	r3, #1
 800e994:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e996:	2300      	movs	r3, #0
 800e998:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e99a:	2300      	movs	r3, #0
 800e99c:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e99e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	482d      	ldr	r0, [pc, #180]	; (800ea5c <MX_GPIO_Init+0x5fc>)
 800e9a6:	f7f4 fc23 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800e9aa:	2332      	movs	r3, #50	; 0x32
 800e9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9ae:	2302      	movs	r3, #2
 800e9b0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9b6:	2303      	movs	r3, #3
 800e9b8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e9ba:	230b      	movs	r3, #11
 800e9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e9be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	4827      	ldr	r0, [pc, #156]	; (800ea64 <MX_GPIO_Init+0x604>)
 800e9c6:	f7f4 fc13 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e9ca:	2304      	movs	r3, #4
 800e9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9ce:	2302      	movs	r3, #2
 800e9d0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9d6:	2303      	movs	r3, #3
 800e9d8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800e9da:	2309      	movs	r3, #9
 800e9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e9de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	4823      	ldr	r0, [pc, #140]	; (800ea74 <MX_GPIO_Init+0x614>)
 800e9e6:	f7f4 fc03 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 800e9ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9f0:	2302      	movs	r3, #2
 800e9f2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9f8:	2303      	movs	r3, #3
 800e9fa:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800e9fc:	2309      	movs	r3, #9
 800e9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ea00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ea04:	4619      	mov	r1, r3
 800ea06:	4816      	ldr	r0, [pc, #88]	; (800ea60 <MX_GPIO_Init+0x600>)
 800ea08:	f7f4 fbf2 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800ea0c:	2304      	movs	r3, #4
 800ea0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ea10:	2300      	movs	r3, #0
 800ea12:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea14:	2300      	movs	r3, #0
 800ea16:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800ea18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	480f      	ldr	r0, [pc, #60]	; (800ea5c <MX_GPIO_Init+0x5fc>)
 800ea20:	f7f4 fbe6 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800ea24:	2386      	movs	r3, #134	; 0x86
 800ea26:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea28:	2302      	movs	r3, #2
 800ea2a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea30:	2303      	movs	r3, #3
 800ea32:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ea34:	230b      	movs	r3, #11
 800ea36:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	4805      	ldr	r0, [pc, #20]	; (800ea54 <MX_GPIO_Init+0x5f4>)
 800ea40:	f7f4 fbd6 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin | GPIO_PIN_6;
 800ea44:	2350      	movs	r3, #80	; 0x50
 800ea46:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea48:	2302      	movs	r3, #2
 800ea4a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea50:	2300      	movs	r3, #0
 800ea52:	e011      	b.n	800ea78 <MX_GPIO_Init+0x618>
 800ea54:	40020000 	.word	0x40020000
 800ea58:	40022000 	.word	0x40022000
 800ea5c:	40021800 	.word	0x40021800
 800ea60:	40020c00 	.word	0x40020c00
 800ea64:	40020800 	.word	0x40020800
 800ea68:	40022800 	.word	0x40022800
 800ea6c:	40021c00 	.word	0x40021c00
 800ea70:	10120000 	.word	0x10120000
 800ea74:	40020400 	.word	0x40020400
 800ea78:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ea7a:	230d      	movs	r3, #13
 800ea7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ea82:	4619      	mov	r1, r3
 800ea84:	4813      	ldr	r0, [pc, #76]	; (800ead4 <MX_GPIO_Init+0x674>)
 800ea86:	f7f4 fbb3 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800ea8a:	2340      	movs	r3, #64	; 0x40
 800ea8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea8e:	2302      	movs	r3, #2
 800ea90:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea92:	2300      	movs	r3, #0
 800ea94:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea96:	2300      	movs	r3, #0
 800ea98:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800ea9a:	2309      	movs	r3, #9
 800ea9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800ea9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	480c      	ldr	r0, [pc, #48]	; (800ead8 <MX_GPIO_Init+0x678>)
 800eaa6:	f7f4 fba3 	bl	80031f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800eaaa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800eaae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eab0:	2302      	movs	r3, #2
 800eab2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eab4:	2300      	movs	r3, #0
 800eab6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eab8:	2300      	movs	r3, #0
 800eaba:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800eabc:	2305      	movs	r3, #5
 800eabe:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eac4:	4619      	mov	r1, r3
 800eac6:	4805      	ldr	r0, [pc, #20]	; (800eadc <MX_GPIO_Init+0x67c>)
 800eac8:	f7f4 fb92 	bl	80031f0 <HAL_GPIO_Init>

}
 800eacc:	bf00      	nop
 800eace:	3740      	adds	r7, #64	; 0x40
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	40020000 	.word	0x40020000
 800ead8:	40021c00 	.word	0x40021c00
 800eadc:	40020400 	.word	0x40020400

0800eae0 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 800eaee:	f107 010c 	add.w	r1, r7, #12
 800eaf2:	230a      	movs	r3, #10
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	4804      	ldr	r0, [pc, #16]	; (800eb08 <__io_putchar+0x28>)
 800eaf8:	f7f7 fee9 	bl	80068ce <HAL_UART_Transmit>
	return ch;
 800eafc:	687b      	ldr	r3, [r7, #4]
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3710      	adds	r7, #16
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	20001068 	.word	0x20001068

0800eb0c <_write>:

int _write(int file, char *ptr, int len) {
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b086      	sub	sp, #24
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800eb18:	2300      	movs	r3, #0
 800eb1a:	617b      	str	r3, [r7, #20]
 800eb1c:	e009      	b.n	800eb32 <_write+0x26>
		__io_putchar(*ptr++);
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	1c5a      	adds	r2, r3, #1
 800eb22:	60ba      	str	r2, [r7, #8]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7ff ffda 	bl	800eae0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	617b      	str	r3, [r7, #20]
 800eb32:	697a      	ldr	r2, [r7, #20]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	dbf1      	blt.n	800eb1e <_write+0x12>
	}
	return len;
 800eb3a:	687b      	ldr	r3, [r7, #4]
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3718      	adds	r7, #24
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <__io_getchar>:

int __io_getchar(int ch) {
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	733b      	strb	r3, [r7, #12]
	HAL_UART_Receive(&huart1, &*c, 1, 10);
 800eb52:	f107 010c 	add.w	r1, r7, #12
 800eb56:	230a      	movs	r3, #10
 800eb58:	2201      	movs	r2, #1
 800eb5a:	4804      	ldr	r0, [pc, #16]	; (800eb6c <__io_getchar+0x28>)
 800eb5c:	f7f7 ff42 	bl	80069e4 <HAL_UART_Receive>
	return ch;
 800eb60:	687b      	ldr	r3, [r7, #4]
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3710      	adds	r7, #16
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	20001068 	.word	0x20001068

0800eb70 <_read>:

int _read(int file, char *ptr, int len) {
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b086      	sub	sp, #24
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	60b9      	str	r1, [r7, #8]
 800eb7a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	617b      	str	r3, [r7, #20]
 800eb80:	e009      	b.n	800eb96 <_read+0x26>
		__io_getchar(*ptr++);
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	1c5a      	adds	r2, r3, #1
 800eb86:	60ba      	str	r2, [r7, #8]
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7ff ffda 	bl	800eb44 <__io_getchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	3301      	adds	r3, #1
 800eb94:	617b      	str	r3, [r7, #20]
 800eb96:	697a      	ldr	r2, [r7, #20]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	dbf1      	blt.n	800eb82 <_read+0x12>
	}
	return len;
 800eb9e:	687b      	ldr	r3, [r7, #4]
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3718      	adds	r7, #24
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4a04      	ldr	r2, [pc, #16]	; (800ebc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d101      	bne.n	800ebbe <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800ebba:	f7f3 f81f 	bl	8001bfc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800ebbe:	bf00      	nop
 800ebc0:	3708      	adds	r7, #8
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	40010000 	.word	0x40010000

0800ebcc <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	printf("Error file = %s Line = %d ", file, line);
 800ebd6:	683a      	ldr	r2, [r7, #0]
 800ebd8:	6879      	ldr	r1, [r7, #4]
 800ebda:	4802      	ldr	r0, [pc, #8]	; (800ebe4 <_Error_Handler+0x18>)
 800ebdc:	f002 f96c 	bl	8010eb8 <iprintf>

	while (1) {
 800ebe0:	e7fe      	b.n	800ebe0 <_Error_Handler+0x14>
 800ebe2:	bf00      	nop
 800ebe4:	0801346c 	.word	0x0801346c

0800ebe8 <SDRAMDISK_initialize>:
/**
 * @brief  Initializes a Drive
 * @param  lun : not used
 * @retval DSTATUS: Operation status
 */
DSTATUS SDRAMDISK_initialize(BYTE lun) {
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	4603      	mov	r3, r0
 800ebf0:	71fb      	strb	r3, [r7, #7]
	Stat = STA_NOINIT;
 800ebf2:	4b0b      	ldr	r3, [pc, #44]	; (800ec20 <SDRAMDISK_initialize+0x38>)
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	701a      	strb	r2, [r3, #0]

	/* Configure the SDRAM device */

	//TV: Assumed ready after main init
	if (BSP_SDRAM_Init() == SDRAM_OK) {
 800ebf8:	f7fe f8dc 	bl	800cdb4 <BSP_SDRAM_Init>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d107      	bne.n	800ec12 <SDRAMDISK_initialize+0x2a>
		Stat &= ~STA_NOINIT;
 800ec02:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <SDRAMDISK_initialize+0x38>)
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	f023 0301 	bic.w	r3, r3, #1
 800ec0c:	b2da      	uxtb	r2, r3
 800ec0e:	4b04      	ldr	r3, [pc, #16]	; (800ec20 <SDRAMDISK_initialize+0x38>)
 800ec10:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800ec12:	4b03      	ldr	r3, [pc, #12]	; (800ec20 <SDRAMDISK_initialize+0x38>)
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	b2db      	uxtb	r3, r3
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3708      	adds	r7, #8
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	20000123 	.word	0x20000123

0800ec24 <SDRAMDISK_status>:
/**
 * @brief  Gets Disk Status
 * @param  lun : not used
 * @retval DSTATUS: Operation status
 */
DSTATUS SDRAMDISK_status(BYTE lun) {
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	71fb      	strb	r3, [r7, #7]

	//TV: Assumed ready after main init
	Stat &= ~STA_NOINIT;
 800ec2e:	4b08      	ldr	r3, [pc, #32]	; (800ec50 <SDRAMDISK_status+0x2c>)
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	f023 0301 	bic.w	r3, r3, #1
 800ec38:	b2da      	uxtb	r2, r3
 800ec3a:	4b05      	ldr	r3, [pc, #20]	; (800ec50 <SDRAMDISK_status+0x2c>)
 800ec3c:	701a      	strb	r2, [r3, #0]

	return Stat;
 800ec3e:	4b04      	ldr	r3, [pc, #16]	; (800ec50 <SDRAMDISK_status+0x2c>)
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	b2db      	uxtb	r3, r3
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	370c      	adds	r7, #12
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr
 800ec50:	20000123 	.word	0x20000123

0800ec54 <SDRAMDISK_read>:
 * @param  *buff: Data buffer to store read data
 * @param  sector: Sector address (LBA)
 * @param  count: Number of sectors to read (1..128)
 * @retval DRESULT: Operation result
 */
DRESULT SDRAMDISK_read(BYTE lun, BYTE *buff, DWORD sector, UINT count) {
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b088      	sub	sp, #32
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60b9      	str	r1, [r7, #8]
 800ec5c:	607a      	str	r2, [r7, #4]
 800ec5e:	603b      	str	r3, [r7, #0]
 800ec60:	4603      	mov	r3, r0
 800ec62:	73fb      	strb	r3, [r7, #15]
	uint32_t *pSrcBuffer = (uint32_t *) &buff;
 800ec64:	f107 0308 	add.w	r3, r7, #8
 800ec68:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	025b      	lsls	r3, r3, #9
 800ec6e:	089b      	lsrs	r3, r3, #2
 800ec70:	61bb      	str	r3, [r7, #24]
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	4b08      	ldr	r3, [pc, #32]	; (800ec98 <SDRAMDISK_read+0x44>)
 800ec76:	4413      	add	r3, r2
 800ec78:	025b      	lsls	r3, r3, #9
	uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 800ec7a:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_ReadData((uint32_t) pSdramAddress,
 800ec7c:	6978      	ldr	r0, [r7, #20]
			(uint32_t *) *pSrcBuffer, BufferSize);
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	681b      	ldr	r3, [r3, #0]
	RES_OK = BSP_SDRAM_ReadData((uint32_t) pSdramAddress,
 800ec82:	69ba      	ldr	r2, [r7, #24]
 800ec84:	4619      	mov	r1, r3
 800ec86:	f7fe f8a1 	bl	800cdcc <BSP_SDRAM_ReadData>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	74fb      	strb	r3, [r7, #19]

	//for (; BufferSize != 0; BufferSize--) {
	//	*pSrcBuffer++ = *(__IO uint32_t *) pSdramAddress++;
	//}

	return RES_OK;
 800ec8e:	7cfb      	ldrb	r3, [r7, #19]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3720      	adds	r7, #32
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	00600800 	.word	0x00600800

0800ec9c <SDRAMDISK_write>:
 * @param  sector: Sector address (LBA)
 * @param  count: Number of sectors to write (1..128)
 * @retval DRESULT: Operation result
 */
#if _USE_WRITE == 1
DRESULT SDRAMDISK_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count) {
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b088      	sub	sp, #32
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60b9      	str	r1, [r7, #8]
 800eca4:	607a      	str	r2, [r7, #4]
 800eca6:	603b      	str	r3, [r7, #0]
 800eca8:	4603      	mov	r3, r0
 800ecaa:	73fb      	strb	r3, [r7, #15]
	uint32_t *pDstBuffer = (uint32_t *) &buff;
 800ecac:	f107 0308 	add.w	r3, r7, #8
 800ecb0:	61fb      	str	r3, [r7, #28]
	uint32_t BufferSize = (BLOCK_SIZE * count) / 4;
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	025b      	lsls	r3, r3, #9
 800ecb6:	089b      	lsrs	r3, r3, #2
 800ecb8:	61bb      	str	r3, [r7, #24]
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
			+ (sector * BLOCK_SIZE));
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	4b08      	ldr	r3, [pc, #32]	; (800ece0 <SDRAMDISK_write+0x44>)
 800ecbe:	4413      	add	r3, r2
 800ecc0:	025b      	lsls	r3, r3, #9
	uint32_t *pSramAddress = (uint32_t *) (SDRAM_DISK_ADDR
 800ecc2:	617b      	str	r3, [r7, #20]

	uint8_t RES_OK;

	//TV: uint32_t *pSramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
	RES_OK = BSP_SDRAM_WriteData((uint32_t) pSramAddress,
 800ecc4:	6978      	ldr	r0, [r7, #20]
			(uint32_t *) *pDstBuffer, BufferSize);
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	681b      	ldr	r3, [r3, #0]
	RES_OK = BSP_SDRAM_WriteData((uint32_t) pSramAddress,
 800ecca:	69ba      	ldr	r2, [r7, #24]
 800eccc:	4619      	mov	r1, r3
 800ecce:	f7fe f897 	bl	800ce00 <BSP_SDRAM_WriteData>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	74fb      	strb	r3, [r7, #19]

	//for (; BufferSize != 0; BufferSize--) {
	//	*(__IO uint32_t *) pSramAddress++ = *pDstBuffer++;
	//}

	return RES_OK;
 800ecd6:	7cfb      	ldrb	r3, [r7, #19]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3720      	adds	r7, #32
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	00600800 	.word	0x00600800

0800ece4 <SDRAMDISK_ioctl>:
 * @param  cmd: Control code
 * @param  *buff: Buffer to send/receive control data
 * @retval DRESULT: Operation result
 */
#if _USE_IOCTL == 1
DRESULT SDRAMDISK_ioctl(BYTE lun, BYTE cmd, void *buff) {
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	4603      	mov	r3, r0
 800ecec:	603a      	str	r2, [r7, #0]
 800ecee:	71fb      	strb	r3, [r7, #7]
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_ERROR;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	73fb      	strb	r3, [r7, #15]

	if (Stat & STA_NOINIT)
 800ecf8:	4b1b      	ldr	r3, [pc, #108]	; (800ed68 <SDRAMDISK_ioctl+0x84>)
 800ecfa:	781b      	ldrb	r3, [r3, #0]
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	f003 0301 	and.w	r3, r3, #1
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d001      	beq.n	800ed0a <SDRAMDISK_ioctl+0x26>
		return RES_NOTRDY;
 800ed06:	2303      	movs	r3, #3
 800ed08:	e027      	b.n	800ed5a <SDRAMDISK_ioctl+0x76>

	switch (cmd) {
 800ed0a:	79bb      	ldrb	r3, [r7, #6]
 800ed0c:	2b03      	cmp	r3, #3
 800ed0e:	d821      	bhi.n	800ed54 <SDRAMDISK_ioctl+0x70>
 800ed10:	a201      	add	r2, pc, #4	; (adr r2, 800ed18 <SDRAMDISK_ioctl+0x34>)
 800ed12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed16:	bf00      	nop
 800ed18:	0800ed29 	.word	0x0800ed29
 800ed1c:	0800ed2f 	.word	0x0800ed2f
 800ed20:	0800ed3b 	.word	0x0800ed3b
 800ed24:	0800ed49 	.word	0x0800ed49
	/* Make sure that no pending write process */
	case CTRL_SYNC:
		res = RES_OK;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	73fb      	strb	r3, [r7, #15]
		break;
 800ed2c:	e014      	b.n	800ed58 <SDRAMDISK_ioctl+0x74>

		/* Get number of sectors on the disk (DWORD) */
	case GET_SECTOR_COUNT:
		*(DWORD*) buff = SDRAM_DISK_SIZE / BLOCK_SIZE;
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	4a0e      	ldr	r2, [pc, #56]	; (800ed6c <SDRAMDISK_ioctl+0x88>)
 800ed32:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 800ed34:	2300      	movs	r3, #0
 800ed36:	73fb      	strb	r3, [r7, #15]
		break;
 800ed38:	e00e      	b.n	800ed58 <SDRAMDISK_ioctl+0x74>

		/* Get R/W sector size (WORD) */
	case GET_SECTOR_SIZE:
		*(WORD*) buff = BLOCK_SIZE;
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed40:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 800ed42:	2300      	movs	r3, #0
 800ed44:	73fb      	strb	r3, [r7, #15]
		break;
 800ed46:	e007      	b.n	800ed58 <SDRAMDISK_ioctl+0x74>

		/* Get erase block size in unit of sector (DWORD) */
	case GET_BLOCK_SIZE:
		*(DWORD*) buff = 1;
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	73fb      	strb	r3, [r7, #15]
		break;
 800ed52:	e001      	b.n	800ed58 <SDRAMDISK_ioctl+0x74>

	default:
		res = RES_PARERR;
 800ed54:	2304      	movs	r3, #4
 800ed56:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ed58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3714      	adds	r7, #20
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	20000123 	.word	0x20000123
 800ed6c:	007ff800 	.word	0x007ff800

0800ed70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ed74:	2003      	movs	r0, #3
 800ed76:	f7f3 fb71 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	2100      	movs	r1, #0
 800ed7e:	f06f 000b 	mvn.w	r0, #11
 800ed82:	f7f3 fb76 	bl	8002472 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800ed86:	2200      	movs	r2, #0
 800ed88:	2100      	movs	r1, #0
 800ed8a:	f06f 000a 	mvn.w	r0, #10
 800ed8e:	f7f3 fb70 	bl	8002472 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800ed92:	2200      	movs	r2, #0
 800ed94:	2100      	movs	r1, #0
 800ed96:	f06f 0009 	mvn.w	r0, #9
 800ed9a:	f7f3 fb6a 	bl	8002472 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800ed9e:	2200      	movs	r2, #0
 800eda0:	2100      	movs	r1, #0
 800eda2:	f06f 0004 	mvn.w	r0, #4
 800eda6:	f7f3 fb64 	bl	8002472 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800edaa:	2200      	movs	r2, #0
 800edac:	2100      	movs	r1, #0
 800edae:	f06f 0003 	mvn.w	r0, #3
 800edb2:	f7f3 fb5e 	bl	8002472 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800edb6:	2200      	movs	r2, #0
 800edb8:	2100      	movs	r1, #0
 800edba:	f06f 0001 	mvn.w	r0, #1
 800edbe:	f7f3 fb58 	bl	8002472 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800edc2:	2200      	movs	r2, #0
 800edc4:	2100      	movs	r1, #0
 800edc6:	f04f 30ff 	mov.w	r0, #4294967295
 800edca:	f7f3 fb52 	bl	8002472 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800edce:	bf00      	nop
 800edd0:	bd80      	pop	{r7, pc}
	...

0800edd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b088      	sub	sp, #32
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4a15      	ldr	r2, [pc, #84]	; (800ee38 <HAL_ADC_MspInit+0x64>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d124      	bne.n	800ee30 <HAL_ADC_MspInit+0x5c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800ede6:	4a15      	ldr	r2, [pc, #84]	; (800ee3c <HAL_ADC_MspInit+0x68>)
 800ede8:	4b14      	ldr	r3, [pc, #80]	; (800ee3c <HAL_ADC_MspInit+0x68>)
 800edea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800edf0:	6453      	str	r3, [r2, #68]	; 0x44
 800edf2:	4b12      	ldr	r3, [pc, #72]	; (800ee3c <HAL_ADC_MspInit+0x68>)
 800edf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800edfa:	60bb      	str	r3, [r7, #8]
 800edfc:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800edfe:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800ee02:	60fb      	str	r3, [r7, #12]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ee04:	2303      	movs	r3, #3
 800ee06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ee0c:	f107 030c 	add.w	r3, r7, #12
 800ee10:	4619      	mov	r1, r3
 800ee12:	480b      	ldr	r0, [pc, #44]	; (800ee40 <HAL_ADC_MspInit+0x6c>)
 800ee14:	f7f4 f9ec 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ee1c:	2303      	movs	r3, #3
 800ee1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee20:	2300      	movs	r3, #0
 800ee22:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800ee24:	f107 030c 	add.w	r3, r7, #12
 800ee28:	4619      	mov	r1, r3
 800ee2a:	4806      	ldr	r0, [pc, #24]	; (800ee44 <HAL_ADC_MspInit+0x70>)
 800ee2c:	f7f4 f9e0 	bl	80031f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800ee30:	bf00      	nop
 800ee32:	3720      	adds	r7, #32
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	40012200 	.word	0x40012200
 800ee3c:	40023800 	.word	0x40023800
 800ee40:	40021400 	.word	0x40021400
 800ee44:	40020000 	.word	0x40020000

0800ee48 <HAL_CRC_MspInit>:
  }

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	4a0a      	ldr	r2, [pc, #40]	; (800ee80 <HAL_CRC_MspInit+0x38>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d10b      	bne.n	800ee72 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800ee5a:	4a0a      	ldr	r2, [pc, #40]	; (800ee84 <HAL_CRC_MspInit+0x3c>)
 800ee5c:	4b09      	ldr	r3, [pc, #36]	; (800ee84 <HAL_CRC_MspInit+0x3c>)
 800ee5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ee64:	6313      	str	r3, [r2, #48]	; 0x30
 800ee66:	4b07      	ldr	r3, [pc, #28]	; (800ee84 <HAL_CRC_MspInit+0x3c>)
 800ee68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ee6e:	60fb      	str	r3, [r7, #12]
 800ee70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800ee72:	bf00      	nop
 800ee74:	3714      	adds	r7, #20
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr
 800ee7e:	bf00      	nop
 800ee80:	40023000 	.word	0x40023000
 800ee84:	40023800 	.word	0x40023800

0800ee88 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a0a      	ldr	r2, [pc, #40]	; (800eec0 <HAL_DMA2D_MspInit+0x38>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d10b      	bne.n	800eeb2 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800ee9a:	4a0a      	ldr	r2, [pc, #40]	; (800eec4 <HAL_DMA2D_MspInit+0x3c>)
 800ee9c:	4b09      	ldr	r3, [pc, #36]	; (800eec4 <HAL_DMA2D_MspInit+0x3c>)
 800ee9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eea0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800eea4:	6313      	str	r3, [r2, #48]	; 0x30
 800eea6:	4b07      	ldr	r3, [pc, #28]	; (800eec4 <HAL_DMA2D_MspInit+0x3c>)
 800eea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eeae:	60fb      	str	r3, [r7, #12]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800eeb2:	bf00      	nop
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	4002b000 	.word	0x4002b000
 800eec4:	40023800 	.word	0x40023800

0800eec8 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b088      	sub	sp, #32
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4a42      	ldr	r2, [pc, #264]	; (800efe0 <HAL_I2C_MspInit+0x118>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d17d      	bne.n	800efd6 <HAL_I2C_MspInit+0x10e>
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800eeda:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800eede:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800eee0:	2312      	movs	r3, #18
 800eee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eee4:	2301      	movs	r3, #1
 800eee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eee8:	2303      	movs	r3, #3
 800eeea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800eeec:	2304      	movs	r3, #4
 800eeee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800eef0:	f107 030c 	add.w	r3, r7, #12
 800eef4:	4619      	mov	r1, r3
 800eef6:	483b      	ldr	r0, [pc, #236]	; (800efe4 <HAL_I2C_MspInit+0x11c>)
 800eef8:	f7f4 f97a 	bl	80031f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800eefc:	4a3a      	ldr	r2, [pc, #232]	; (800efe8 <HAL_I2C_MspInit+0x120>)
 800eefe:	4b3a      	ldr	r3, [pc, #232]	; (800efe8 <HAL_I2C_MspInit+0x120>)
 800ef00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ef06:	6413      	str	r3, [r2, #64]	; 0x40
 800ef08:	4b37      	ldr	r3, [pc, #220]	; (800efe8 <HAL_I2C_MspInit+0x120>)
 800ef0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef10:	60bb      	str	r3, [r7, #8]
 800ef12:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 800ef14:	4b35      	ldr	r3, [pc, #212]	; (800efec <HAL_I2C_MspInit+0x124>)
 800ef16:	4a36      	ldr	r2, [pc, #216]	; (800eff0 <HAL_I2C_MspInit+0x128>)
 800ef18:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 800ef1a:	4b34      	ldr	r3, [pc, #208]	; (800efec <HAL_I2C_MspInit+0x124>)
 800ef1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ef20:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ef22:	4b32      	ldr	r3, [pc, #200]	; (800efec <HAL_I2C_MspInit+0x124>)
 800ef24:	2200      	movs	r2, #0
 800ef26:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ef28:	4b30      	ldr	r3, [pc, #192]	; (800efec <HAL_I2C_MspInit+0x124>)
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ef2e:	4b2f      	ldr	r3, [pc, #188]	; (800efec <HAL_I2C_MspInit+0x124>)
 800ef30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ef34:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ef36:	4b2d      	ldr	r3, [pc, #180]	; (800efec <HAL_I2C_MspInit+0x124>)
 800ef38:	2200      	movs	r2, #0
 800ef3a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ef3c:	4b2b      	ldr	r3, [pc, #172]	; (800efec <HAL_I2C_MspInit+0x124>)
 800ef3e:	2200      	movs	r2, #0
 800ef40:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800ef42:	4b2a      	ldr	r3, [pc, #168]	; (800efec <HAL_I2C_MspInit+0x124>)
 800ef44:	2200      	movs	r2, #0
 800ef46:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ef48:	4b28      	ldr	r3, [pc, #160]	; (800efec <HAL_I2C_MspInit+0x124>)
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ef4e:	4b27      	ldr	r3, [pc, #156]	; (800efec <HAL_I2C_MspInit+0x124>)
 800ef50:	2200      	movs	r2, #0
 800ef52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800ef54:	4825      	ldr	r0, [pc, #148]	; (800efec <HAL_I2C_MspInit+0x124>)
 800ef56:	f7f3 fbcb 	bl	80026f0 <HAL_DMA_Init>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d004      	beq.n	800ef6a <HAL_I2C_MspInit+0xa2>
    {
      _Error_Handler(__FILE__, __LINE__);
 800ef60:	f240 110d 	movw	r1, #269	; 0x10d
 800ef64:	4823      	ldr	r0, [pc, #140]	; (800eff4 <HAL_I2C_MspInit+0x12c>)
 800ef66:	f7ff fe31 	bl	800ebcc <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	4a1f      	ldr	r2, [pc, #124]	; (800efec <HAL_I2C_MspInit+0x124>)
 800ef6e:	63da      	str	r2, [r3, #60]	; 0x3c
 800ef70:	4a1e      	ldr	r2, [pc, #120]	; (800efec <HAL_I2C_MspInit+0x124>)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 800ef76:	4b20      	ldr	r3, [pc, #128]	; (800eff8 <HAL_I2C_MspInit+0x130>)
 800ef78:	4a20      	ldr	r2, [pc, #128]	; (800effc <HAL_I2C_MspInit+0x134>)
 800ef7a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 800ef7c:	4b1e      	ldr	r3, [pc, #120]	; (800eff8 <HAL_I2C_MspInit+0x130>)
 800ef7e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800ef82:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ef84:	4b1c      	ldr	r3, [pc, #112]	; (800eff8 <HAL_I2C_MspInit+0x130>)
 800ef86:	2240      	movs	r2, #64	; 0x40
 800ef88:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ef8a:	4b1b      	ldr	r3, [pc, #108]	; (800eff8 <HAL_I2C_MspInit+0x130>)
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_DISABLE;
 800ef90:	4b19      	ldr	r3, [pc, #100]	; (800eff8 <HAL_I2C_MspInit+0x130>)
 800ef92:	2200      	movs	r2, #0
 800ef94:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ef96:	4b18      	ldr	r3, [pc, #96]	; (800eff8 <HAL_I2C_MspInit+0x130>)
 800ef98:	2200      	movs	r2, #0
 800ef9a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ef9c:	4b16      	ldr	r3, [pc, #88]	; (800eff8 <HAL_I2C_MspInit+0x130>)
 800ef9e:	2200      	movs	r2, #0
 800efa0:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800efa2:	4b15      	ldr	r3, [pc, #84]	; (800eff8 <HAL_I2C_MspInit+0x130>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800efa8:	4b13      	ldr	r3, [pc, #76]	; (800eff8 <HAL_I2C_MspInit+0x130>)
 800efaa:	2200      	movs	r2, #0
 800efac:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800efae:	4b12      	ldr	r3, [pc, #72]	; (800eff8 <HAL_I2C_MspInit+0x130>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 800efb4:	4810      	ldr	r0, [pc, #64]	; (800eff8 <HAL_I2C_MspInit+0x130>)
 800efb6:	f7f3 fb9b 	bl	80026f0 <HAL_DMA_Init>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d004      	beq.n	800efca <HAL_I2C_MspInit+0x102>
    {
      _Error_Handler(__FILE__, __LINE__);
 800efc0:	f240 111f 	movw	r1, #287	; 0x11f
 800efc4:	480b      	ldr	r0, [pc, #44]	; (800eff4 <HAL_I2C_MspInit+0x12c>)
 800efc6:	f7ff fe01 	bl	800ebcc <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4a0a      	ldr	r2, [pc, #40]	; (800eff8 <HAL_I2C_MspInit+0x130>)
 800efce:	639a      	str	r2, [r3, #56]	; 0x38
 800efd0:	4a09      	ldr	r2, [pc, #36]	; (800eff8 <HAL_I2C_MspInit+0x130>)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800efd6:	bf00      	nop
 800efd8:	3720      	adds	r7, #32
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	40005c00 	.word	0x40005c00
 800efe4:	40021c00 	.word	0x40021c00
 800efe8:	40023800 	.word	0x40023800
 800efec:	20000c94 	.word	0x20000c94
 800eff0:	40026028 	.word	0x40026028
 800eff4:	08013488 	.word	0x08013488
 800eff8:	200009c4 	.word	0x200009c4
 800effc:	40026070 	.word	0x40026070

0800f000 <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b088      	sub	sp, #32
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4a32      	ldr	r2, [pc, #200]	; (800f0d8 <HAL_LTDC_MspInit+0xd8>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d15e      	bne.n	800f0d0 <HAL_LTDC_MspInit+0xd0>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800f012:	4a32      	ldr	r2, [pc, #200]	; (800f0dc <HAL_LTDC_MspInit+0xdc>)
 800f014:	4b31      	ldr	r3, [pc, #196]	; (800f0dc <HAL_LTDC_MspInit+0xdc>)
 800f016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f01c:	6453      	str	r3, [r2, #68]	; 0x44
 800f01e:	4b2f      	ldr	r3, [pc, #188]	; (800f0dc <HAL_LTDC_MspInit+0xdc>)
 800f020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f022:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f026:	60bb      	str	r3, [r7, #8]
 800f028:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800f02a:	2310      	movs	r3, #16
 800f02c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f02e:	2302      	movs	r3, #2
 800f030:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f032:	2300      	movs	r3, #0
 800f034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f036:	2300      	movs	r3, #0
 800f038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800f03a:	230e      	movs	r3, #14
 800f03c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800f03e:	f107 030c 	add.w	r3, r7, #12
 800f042:	4619      	mov	r1, r3
 800f044:	4826      	ldr	r0, [pc, #152]	; (800f0e0 <HAL_LTDC_MspInit+0xe0>)
 800f046:	f7f4 f8d3 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800f04a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800f04e:	60fb      	str	r3, [r7, #12]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f050:	2302      	movs	r3, #2
 800f052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f054:	2300      	movs	r3, #0
 800f056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f058:	2300      	movs	r3, #0
 800f05a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800f05c:	230e      	movs	r3, #14
 800f05e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800f060:	f107 030c 	add.w	r3, r7, #12
 800f064:	4619      	mov	r1, r3
 800f066:	481f      	ldr	r0, [pc, #124]	; (800f0e4 <HAL_LTDC_MspInit+0xe4>)
 800f068:	f7f4 f8c2 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800f06c:	23f7      	movs	r3, #247	; 0xf7
 800f06e:	60fb      	str	r3, [r7, #12]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f070:	2302      	movs	r3, #2
 800f072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f074:	2300      	movs	r3, #0
 800f076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f078:	2300      	movs	r3, #0
 800f07a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800f07c:	230e      	movs	r3, #14
 800f07e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800f080:	f107 030c 	add.w	r3, r7, #12
 800f084:	4619      	mov	r1, r3
 800f086:	4818      	ldr	r0, [pc, #96]	; (800f0e8 <HAL_LTDC_MspInit+0xe8>)
 800f088:	f7f4 f8b2 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800f08c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f090:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f092:	2302      	movs	r3, #2
 800f094:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f096:	2300      	movs	r3, #0
 800f098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f09a:	2300      	movs	r3, #0
 800f09c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800f09e:	2309      	movs	r3, #9
 800f0a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800f0a2:	f107 030c 	add.w	r3, r7, #12
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	4810      	ldr	r0, [pc, #64]	; (800f0ec <HAL_LTDC_MspInit+0xec>)
 800f0aa:	f7f4 f8a1 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800f0ae:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800f0b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0b4:	2302      	movs	r3, #2
 800f0b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800f0c0:	230e      	movs	r3, #14
 800f0c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f0c4:	f107 030c 	add.w	r3, r7, #12
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	4809      	ldr	r0, [pc, #36]	; (800f0f0 <HAL_LTDC_MspInit+0xf0>)
 800f0cc:	f7f4 f890 	bl	80031f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800f0d0:	bf00      	nop
 800f0d2:	3720      	adds	r7, #32
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	40016800 	.word	0x40016800
 800f0dc:	40023800 	.word	0x40023800
 800f0e0:	40021000 	.word	0x40021000
 800f0e4:	40022400 	.word	0x40022400
 800f0e8:	40022800 	.word	0x40022800
 800f0ec:	40021800 	.word	0x40021800
 800f0f0:	40022000 	.word	0x40022000

0800f0f4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b088      	sub	sp, #32
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a19      	ldr	r2, [pc, #100]	; (800f168 <HAL_UART_MspInit+0x74>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d12c      	bne.n	800f160 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800f106:	4a19      	ldr	r2, [pc, #100]	; (800f16c <HAL_UART_MspInit+0x78>)
 800f108:	4b18      	ldr	r3, [pc, #96]	; (800f16c <HAL_UART_MspInit+0x78>)
 800f10a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f10c:	f043 0310 	orr.w	r3, r3, #16
 800f110:	6453      	str	r3, [r2, #68]	; 0x44
 800f112:	4b16      	ldr	r3, [pc, #88]	; (800f16c <HAL_UART_MspInit+0x78>)
 800f114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f116:	f003 0310 	and.w	r3, r3, #16
 800f11a:	60bb      	str	r3, [r7, #8]
 800f11c:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800f11e:	2380      	movs	r3, #128	; 0x80
 800f120:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f122:	2302      	movs	r3, #2
 800f124:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f126:	2300      	movs	r3, #0
 800f128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f12a:	2300      	movs	r3, #0
 800f12c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f12e:	2307      	movs	r3, #7
 800f130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800f132:	f107 030c 	add.w	r3, r7, #12
 800f136:	4619      	mov	r1, r3
 800f138:	480d      	ldr	r0, [pc, #52]	; (800f170 <HAL_UART_MspInit+0x7c>)
 800f13a:	f7f4 f859 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800f13e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f142:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f144:	2302      	movs	r3, #2
 800f146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f148:	2300      	movs	r3, #0
 800f14a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f14c:	2300      	movs	r3, #0
 800f14e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f150:	2307      	movs	r3, #7
 800f152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800f154:	f107 030c 	add.w	r3, r7, #12
 800f158:	4619      	mov	r1, r3
 800f15a:	4806      	ldr	r0, [pc, #24]	; (800f174 <HAL_UART_MspInit+0x80>)
 800f15c:	f7f4 f848 	bl	80031f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800f160:	bf00      	nop
 800f162:	3720      	adds	r7, #32
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	40011000 	.word	0x40011000
 800f16c:	40023800 	.word	0x40023800
 800f170:	40020400 	.word	0x40020400
 800f174:	40020000 	.word	0x40020000

0800f178 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800f17e:	4b3b      	ldr	r3, [pc, #236]	; (800f26c <HAL_FMC_MspInit+0xf4>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d16d      	bne.n	800f262 <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 800f186:	4b39      	ldr	r3, [pc, #228]	; (800f26c <HAL_FMC_MspInit+0xf4>)
 800f188:	2201      	movs	r2, #1
 800f18a:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800f18c:	4a38      	ldr	r2, [pc, #224]	; (800f270 <HAL_FMC_MspInit+0xf8>)
 800f18e:	4b38      	ldr	r3, [pc, #224]	; (800f270 <HAL_FMC_MspInit+0xf8>)
 800f190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f192:	f043 0301 	orr.w	r3, r3, #1
 800f196:	6393      	str	r3, [r2, #56]	; 0x38
 800f198:	4b35      	ldr	r3, [pc, #212]	; (800f270 <HAL_FMC_MspInit+0xf8>)
 800f19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f19c:	f003 0301 	and.w	r3, r3, #1
 800f1a0:	603b      	str	r3, [r7, #0]
 800f1a2:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800f1a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 800f1a8:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1aa:	2302      	movs	r3, #2
 800f1ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f1b2:	2303      	movs	r3, #3
 800f1b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f1b6:	230c      	movs	r3, #12
 800f1b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f1ba:	1d3b      	adds	r3, r7, #4
 800f1bc:	4619      	mov	r1, r3
 800f1be:	482d      	ldr	r0, [pc, #180]	; (800f274 <HAL_FMC_MspInit+0xfc>)
 800f1c0:	f7f4 f816 	bl	80031f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800f1c4:	f248 1333 	movw	r3, #33075	; 0x8133
 800f1c8:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1ca:	2302      	movs	r3, #2
 800f1cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f1d2:	2303      	movs	r3, #3
 800f1d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f1d6:	230c      	movs	r3, #12
 800f1d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f1da:	1d3b      	adds	r3, r7, #4
 800f1dc:	4619      	mov	r1, r3
 800f1de:	4826      	ldr	r0, [pc, #152]	; (800f278 <HAL_FMC_MspInit+0x100>)
 800f1e0:	f7f4 f806 	bl	80031f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800f1e4:	f24c 7303 	movw	r3, #50947	; 0xc703
 800f1e8:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1ea:	2302      	movs	r3, #2
 800f1ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f1f2:	2303      	movs	r3, #3
 800f1f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f1f6:	230c      	movs	r3, #12
 800f1f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f1fa:	1d3b      	adds	r3, r7, #4
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	481f      	ldr	r0, [pc, #124]	; (800f27c <HAL_FMC_MspInit+0x104>)
 800f200:	f7f3 fff6 	bl	80031f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800f204:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800f208:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f20a:	2302      	movs	r3, #2
 800f20c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f20e:	2300      	movs	r3, #0
 800f210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f212:	2303      	movs	r3, #3
 800f214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f216:	230c      	movs	r3, #12
 800f218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f21a:	1d3b      	adds	r3, r7, #4
 800f21c:	4619      	mov	r1, r3
 800f21e:	4818      	ldr	r0, [pc, #96]	; (800f280 <HAL_FMC_MspInit+0x108>)
 800f220:	f7f3 ffe6 	bl	80031f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800f224:	2328      	movs	r3, #40	; 0x28
 800f226:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f228:	2302      	movs	r3, #2
 800f22a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f22c:	2300      	movs	r3, #0
 800f22e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f230:	2303      	movs	r3, #3
 800f232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f234:	230c      	movs	r3, #12
 800f236:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f238:	1d3b      	adds	r3, r7, #4
 800f23a:	4619      	mov	r1, r3
 800f23c:	4811      	ldr	r0, [pc, #68]	; (800f284 <HAL_FMC_MspInit+0x10c>)
 800f23e:	f7f3 ffd7 	bl	80031f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800f242:	2308      	movs	r3, #8
 800f244:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f246:	2302      	movs	r3, #2
 800f248:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f24a:	2300      	movs	r3, #0
 800f24c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f24e:	2303      	movs	r3, #3
 800f250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800f252:	230c      	movs	r3, #12
 800f254:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800f256:	1d3b      	adds	r3, r7, #4
 800f258:	4619      	mov	r1, r3
 800f25a:	480b      	ldr	r0, [pc, #44]	; (800f288 <HAL_FMC_MspInit+0x110>)
 800f25c:	f7f3 ffc8 	bl	80031f0 <HAL_GPIO_Init>
 800f260:	e000      	b.n	800f264 <HAL_FMC_MspInit+0xec>
    return;
 800f262:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800f264:	3718      	adds	r7, #24
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	200004a0 	.word	0x200004a0
 800f270:	40023800 	.word	0x40023800
 800f274:	40021000 	.word	0x40021000
 800f278:	40021800 	.word	0x40021800
 800f27c:	40020c00 	.word	0x40020c00
 800f280:	40021400 	.word	0x40021400
 800f284:	40021c00 	.word	0x40021c00
 800f288:	40020800 	.word	0x40020800

0800f28c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800f294:	f7ff ff70 	bl	800f178 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800f298:	bf00      	nop
 800f29a:	3708      	adds	r7, #8
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b08c      	sub	sp, #48	; 0x30
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	6879      	ldr	r1, [r7, #4]
 800f2b4:	2019      	movs	r0, #25
 800f2b6:	f7f3 f8dc 	bl	8002472 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800f2ba:	2019      	movs	r0, #25
 800f2bc:	f7f3 f8f5 	bl	80024aa <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800f2c0:	4a1f      	ldr	r2, [pc, #124]	; (800f340 <HAL_InitTick+0xa0>)
 800f2c2:	4b1f      	ldr	r3, [pc, #124]	; (800f340 <HAL_InitTick+0xa0>)
 800f2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2c6:	f043 0301 	orr.w	r3, r3, #1
 800f2ca:	6453      	str	r3, [r2, #68]	; 0x44
 800f2cc:	4b1c      	ldr	r3, [pc, #112]	; (800f340 <HAL_InitTick+0xa0>)
 800f2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2d0:	f003 0301 	and.w	r3, r3, #1
 800f2d4:	60fb      	str	r3, [r7, #12]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800f2d8:	f107 0210 	add.w	r2, r7, #16
 800f2dc:	f107 0314 	add.w	r3, r7, #20
 800f2e0:	4611      	mov	r1, r2
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7f6 fb46 	bl	8005974 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800f2e8:	f7f6 fb30 	bl	800594c <HAL_RCC_GetPCLK2Freq>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	005b      	lsls	r3, r3, #1
 800f2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800f2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f4:	4a13      	ldr	r2, [pc, #76]	; (800f344 <HAL_InitTick+0xa4>)
 800f2f6:	fba2 2303 	umull	r2, r3, r2, r3
 800f2fa:	0c9b      	lsrs	r3, r3, #18
 800f2fc:	3b01      	subs	r3, #1
 800f2fe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800f300:	4b11      	ldr	r3, [pc, #68]	; (800f348 <HAL_InitTick+0xa8>)
 800f302:	4a12      	ldr	r2, [pc, #72]	; (800f34c <HAL_InitTick+0xac>)
 800f304:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800f306:	4b10      	ldr	r3, [pc, #64]	; (800f348 <HAL_InitTick+0xa8>)
 800f308:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f30c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800f30e:	4a0e      	ldr	r2, [pc, #56]	; (800f348 <HAL_InitTick+0xa8>)
 800f310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f312:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800f314:	4b0c      	ldr	r3, [pc, #48]	; (800f348 <HAL_InitTick+0xa8>)
 800f316:	2200      	movs	r2, #0
 800f318:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f31a:	4b0b      	ldr	r3, [pc, #44]	; (800f348 <HAL_InitTick+0xa8>)
 800f31c:	2200      	movs	r2, #0
 800f31e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800f320:	4809      	ldr	r0, [pc, #36]	; (800f348 <HAL_InitTick+0xa8>)
 800f322:	f7f7 f828 	bl	8006376 <HAL_TIM_Base_Init>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d104      	bne.n	800f336 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800f32c:	4806      	ldr	r0, [pc, #24]	; (800f348 <HAL_InitTick+0xa8>)
 800f32e:	f7f7 f857 	bl	80063e0 <HAL_TIM_Base_Start_IT>
 800f332:	4603      	mov	r3, r0
 800f334:	e000      	b.n	800f338 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800f336:	2301      	movs	r3, #1
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3730      	adds	r7, #48	; 0x30
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	40023800 	.word	0x40023800
 800f344:	431bde83 	.word	0x431bde83
 800f348:	200015b0 	.word	0x200015b0
 800f34c:	40010000 	.word	0x40010000

0800f350 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800f350:	b480      	push	{r7}
 800f352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f354:	bf00      	nop
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr

0800f35e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800f35e:	b480      	push	{r7}
 800f360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f362:	bf00      	nop
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr

0800f36c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 800f370:	f7f3 f8d2 	bl	8002518 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f374:	bf00      	nop
 800f376:	bd80      	pop	{r7, pc}

0800f378 <DMA1_Stream1_IRQHandler>:

/**
* @brief This function handles DMA1 stream1 global interrupt.
*/
void DMA1_Stream1_IRQHandler(void)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800f37c:	4802      	ldr	r0, [pc, #8]	; (800f388 <DMA1_Stream1_IRQHandler+0x10>)
 800f37e:	f7f3 fa65 	bl	800284c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800f382:	bf00      	nop
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	20000c94 	.word	0x20000c94

0800f38c <DMA1_Stream4_IRQHandler>:

/**
* @brief This function handles DMA1 stream4 global interrupt.
*/
void DMA1_Stream4_IRQHandler(void)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800f390:	4802      	ldr	r0, [pc, #8]	; (800f39c <DMA1_Stream4_IRQHandler+0x10>)
 800f392:	f7f3 fa5b 	bl	800284c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800f396:	bf00      	nop
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	200009c4 	.word	0x200009c4

0800f3a0 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800f3a4:	4802      	ldr	r0, [pc, #8]	; (800f3b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800f3a6:	f7f7 f836 	bl	8006416 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800f3aa:	bf00      	nop
 800f3ac:	bd80      	pop	{r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	200015b0 	.word	0x200015b0

0800f3b4 <OTG_HS_IRQHandler>:

/**
* @brief This function handles USB On The Go HS global interrupt.
*/
void OTG_HS_IRQHandler(void)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800f3b8:	4802      	ldr	r0, [pc, #8]	; (800f3c4 <OTG_HS_IRQHandler+0x10>)
 800f3ba:	f7f4 fe05 	bl	8003fc8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800f3be:	bf00      	nop
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	20002814 	.word	0x20002814

0800f3c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f3cc:	4a15      	ldr	r2, [pc, #84]	; (800f424 <SystemInit+0x5c>)
 800f3ce:	4b15      	ldr	r3, [pc, #84]	; (800f424 <SystemInit+0x5c>)
 800f3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f3d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800f3dc:	4a12      	ldr	r2, [pc, #72]	; (800f428 <SystemInit+0x60>)
 800f3de:	4b12      	ldr	r3, [pc, #72]	; (800f428 <SystemInit+0x60>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f043 0301 	orr.w	r3, r3, #1
 800f3e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f3e8:	4b0f      	ldr	r3, [pc, #60]	; (800f428 <SystemInit+0x60>)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800f3ee:	490e      	ldr	r1, [pc, #56]	; (800f428 <SystemInit+0x60>)
 800f3f0:	4b0d      	ldr	r3, [pc, #52]	; (800f428 <SystemInit+0x60>)
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	4b0d      	ldr	r3, [pc, #52]	; (800f42c <SystemInit+0x64>)
 800f3f6:	4013      	ands	r3, r2
 800f3f8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800f3fa:	4b0b      	ldr	r3, [pc, #44]	; (800f428 <SystemInit+0x60>)
 800f3fc:	4a0c      	ldr	r2, [pc, #48]	; (800f430 <SystemInit+0x68>)
 800f3fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800f400:	4a09      	ldr	r2, [pc, #36]	; (800f428 <SystemInit+0x60>)
 800f402:	4b09      	ldr	r3, [pc, #36]	; (800f428 <SystemInit+0x60>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f40a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800f40c:	4b06      	ldr	r3, [pc, #24]	; (800f428 <SystemInit+0x60>)
 800f40e:	2200      	movs	r2, #0
 800f410:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f412:	4b04      	ldr	r3, [pc, #16]	; (800f424 <SystemInit+0x5c>)
 800f414:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f418:	609a      	str	r2, [r3, #8]
#endif
}
 800f41a:	bf00      	nop
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr
 800f424:	e000ed00 	.word	0xe000ed00
 800f428:	40023800 	.word	0x40023800
 800f42c:	fef6ffff 	.word	0xfef6ffff
 800f430:	24003010 	.word	0x24003010

0800f434 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS);
 800f438:	2201      	movs	r2, #1
 800f43a:	4908      	ldr	r1, [pc, #32]	; (800f45c <MX_USB_DEVICE_Init+0x28>)
 800f43c:	4808      	ldr	r0, [pc, #32]	; (800f460 <MX_USB_DEVICE_Init+0x2c>)
 800f43e:	f7fc fd3e 	bl	800bebe <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC);
 800f442:	4908      	ldr	r1, [pc, #32]	; (800f464 <MX_USB_DEVICE_Init+0x30>)
 800f444:	4806      	ldr	r0, [pc, #24]	; (800f460 <MX_USB_DEVICE_Init+0x2c>)
 800f446:	f7fc fd65 	bl	800bf14 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS);
 800f44a:	4907      	ldr	r1, [pc, #28]	; (800f468 <MX_USB_DEVICE_Init+0x34>)
 800f44c:	4804      	ldr	r0, [pc, #16]	; (800f460 <MX_USB_DEVICE_Init+0x2c>)
 800f44e:	f7fc fcc7 	bl	800bde0 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceHS);
 800f452:	4803      	ldr	r0, [pc, #12]	; (800f460 <MX_USB_DEVICE_Init+0x2c>)
 800f454:	f7fc fd78 	bl	800bf48 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f458:	bf00      	nop
 800f45a:	bd80      	pop	{r7, pc}
 800f45c:	20000138 	.word	0x20000138
 800f460:	200015f0 	.word	0x200015f0
 800f464:	20000020 	.word	0x20000020
 800f468:	20000128 	.word	0x20000128

0800f46c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800f470:	2200      	movs	r2, #0
 800f472:	4905      	ldr	r1, [pc, #20]	; (800f488 <CDC_Init_HS+0x1c>)
 800f474:	4805      	ldr	r0, [pc, #20]	; (800f48c <CDC_Init_HS+0x20>)
 800f476:	f7fc fcca 	bl	800be0e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800f47a:	4905      	ldr	r1, [pc, #20]	; (800f490 <CDC_Init_HS+0x24>)
 800f47c:	4803      	ldr	r0, [pc, #12]	; (800f48c <CDC_Init_HS+0x20>)
 800f47e:	f7fc fce0 	bl	800be42 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f482:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800f484:	4618      	mov	r0, r3
 800f486:	bd80      	pop	{r7, pc}
 800f488:	20002014 	.word	0x20002014
 800f48c:	200015f0 	.word	0x200015f0
 800f490:	20001814 	.word	0x20001814

0800f494 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800f494:	b480      	push	{r7}
 800f496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800f498:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr

0800f4a4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	6039      	str	r1, [r7, #0]
 800f4ae:	71fb      	strb	r3, [r7, #7]
 800f4b0:	4613      	mov	r3, r2
 800f4b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800f4b4:	79fb      	ldrb	r3, [r7, #7]
 800f4b6:	2b23      	cmp	r3, #35	; 0x23
 800f4b8:	d84a      	bhi.n	800f550 <CDC_Control_HS+0xac>
 800f4ba:	a201      	add	r2, pc, #4	; (adr r2, 800f4c0 <CDC_Control_HS+0x1c>)
 800f4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c0:	0800f551 	.word	0x0800f551
 800f4c4:	0800f551 	.word	0x0800f551
 800f4c8:	0800f551 	.word	0x0800f551
 800f4cc:	0800f551 	.word	0x0800f551
 800f4d0:	0800f551 	.word	0x0800f551
 800f4d4:	0800f551 	.word	0x0800f551
 800f4d8:	0800f551 	.word	0x0800f551
 800f4dc:	0800f551 	.word	0x0800f551
 800f4e0:	0800f551 	.word	0x0800f551
 800f4e4:	0800f551 	.word	0x0800f551
 800f4e8:	0800f551 	.word	0x0800f551
 800f4ec:	0800f551 	.word	0x0800f551
 800f4f0:	0800f551 	.word	0x0800f551
 800f4f4:	0800f551 	.word	0x0800f551
 800f4f8:	0800f551 	.word	0x0800f551
 800f4fc:	0800f551 	.word	0x0800f551
 800f500:	0800f551 	.word	0x0800f551
 800f504:	0800f551 	.word	0x0800f551
 800f508:	0800f551 	.word	0x0800f551
 800f50c:	0800f551 	.word	0x0800f551
 800f510:	0800f551 	.word	0x0800f551
 800f514:	0800f551 	.word	0x0800f551
 800f518:	0800f551 	.word	0x0800f551
 800f51c:	0800f551 	.word	0x0800f551
 800f520:	0800f551 	.word	0x0800f551
 800f524:	0800f551 	.word	0x0800f551
 800f528:	0800f551 	.word	0x0800f551
 800f52c:	0800f551 	.word	0x0800f551
 800f530:	0800f551 	.word	0x0800f551
 800f534:	0800f551 	.word	0x0800f551
 800f538:	0800f551 	.word	0x0800f551
 800f53c:	0800f551 	.word	0x0800f551
 800f540:	0800f551 	.word	0x0800f551
 800f544:	0800f551 	.word	0x0800f551
 800f548:	0800f551 	.word	0x0800f551
 800f54c:	0800f551 	.word	0x0800f551
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f550:	bf00      	nop
  }

  return (USBD_OK);
 800f552:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800f554:	4618      	mov	r0, r3
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800f56a:	6879      	ldr	r1, [r7, #4]
 800f56c:	4805      	ldr	r0, [pc, #20]	; (800f584 <CDC_Receive_HS+0x24>)
 800f56e:	f7fc fc68 	bl	800be42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800f572:	4804      	ldr	r0, [pc, #16]	; (800f584 <CDC_Receive_HS+0x24>)
 800f574:	f7fc fc79 	bl	800be6a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f578:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	200015f0 	.word	0x200015f0

0800f588 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b08a      	sub	sp, #40	; 0x28
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	4a33      	ldr	r2, [pc, #204]	; (800f664 <HAL_PCD_MspInit+0xdc>)
 800f596:	4293      	cmp	r3, r2
 800f598:	d160      	bne.n	800f65c <HAL_PCD_MspInit+0xd4>
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4 
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800f59a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800f59e:	617b      	str	r3, [r7, #20]
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5a0:	2302      	movs	r3, #2
 800f5a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5a8:	2303      	movs	r3, #3
 800f5aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f5ac:	230a      	movs	r3, #10
 800f5ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f5b0:	f107 0314 	add.w	r3, r7, #20
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	482c      	ldr	r0, [pc, #176]	; (800f668 <HAL_PCD_MspInit+0xe0>)
 800f5b8:	f7f3 fe1a 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800f5bc:	2310      	movs	r3, #16
 800f5be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5c0:	2302      	movs	r3, #2
 800f5c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5c8:	2303      	movs	r3, #3
 800f5ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f5cc:	230a      	movs	r3, #10
 800f5ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800f5d0:	f107 0314 	add.w	r3, r7, #20
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	4825      	ldr	r0, [pc, #148]	; (800f66c <HAL_PCD_MspInit+0xe4>)
 800f5d8:	f7f3 fe0a 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800f5dc:	2305      	movs	r3, #5
 800f5de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5e0:	2302      	movs	r3, #2
 800f5e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5e8:	2303      	movs	r3, #3
 800f5ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f5ec:	230a      	movs	r3, #10
 800f5ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f5f0:	f107 0314 	add.w	r3, r7, #20
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	481e      	ldr	r0, [pc, #120]	; (800f670 <HAL_PCD_MspInit+0xe8>)
 800f5f8:	f7f3 fdfa 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800f5fc:	2328      	movs	r3, #40	; 0x28
 800f5fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f600:	2302      	movs	r3, #2
 800f602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f604:	2300      	movs	r3, #0
 800f606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f608:	2303      	movs	r3, #3
 800f60a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f60c:	230a      	movs	r3, #10
 800f60e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f610:	f107 0314 	add.w	r3, r7, #20
 800f614:	4619      	mov	r1, r3
 800f616:	4817      	ldr	r0, [pc, #92]	; (800f674 <HAL_PCD_MspInit+0xec>)
 800f618:	f7f3 fdea 	bl	80031f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800f61c:	4a16      	ldr	r2, [pc, #88]	; (800f678 <HAL_PCD_MspInit+0xf0>)
 800f61e:	4b16      	ldr	r3, [pc, #88]	; (800f678 <HAL_PCD_MspInit+0xf0>)
 800f620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f622:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f626:	6313      	str	r3, [r2, #48]	; 0x30
 800f628:	4b13      	ldr	r3, [pc, #76]	; (800f678 <HAL_PCD_MspInit+0xf0>)
 800f62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f62c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f630:	613b      	str	r3, [r7, #16]
 800f632:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800f634:	4a10      	ldr	r2, [pc, #64]	; (800f678 <HAL_PCD_MspInit+0xf0>)
 800f636:	4b10      	ldr	r3, [pc, #64]	; (800f678 <HAL_PCD_MspInit+0xf0>)
 800f638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f63a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f63e:	6313      	str	r3, [r2, #48]	; 0x30
 800f640:	4b0d      	ldr	r3, [pc, #52]	; (800f678 <HAL_PCD_MspInit+0xf0>)
 800f642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f648:	60fb      	str	r3, [r7, #12]
 800f64a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800f64c:	2200      	movs	r2, #0
 800f64e:	2100      	movs	r1, #0
 800f650:	204d      	movs	r0, #77	; 0x4d
 800f652:	f7f2 ff0e 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800f656:	204d      	movs	r0, #77	; 0x4d
 800f658:	f7f2 ff27 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800f65c:	bf00      	nop
 800f65e:	3728      	adds	r7, #40	; 0x28
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	40040000 	.word	0x40040000
 800f668:	40020400 	.word	0x40020400
 800f66c:	40021c00 	.word	0x40021c00
 800f670:	40020800 	.word	0x40020800
 800f674:	40020000 	.word	0x40020000
 800f678:	40023800 	.word	0x40023800

0800f67c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800f690:	4619      	mov	r1, r3
 800f692:	4610      	mov	r0, r2
 800f694:	f7fc fca1 	bl	800bfda <USBD_LL_SetupStage>
}
 800f698:	bf00      	nop
 800f69a:	3708      	adds	r7, #8
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800f6b2:	78fa      	ldrb	r2, [r7, #3]
 800f6b4:	6879      	ldr	r1, [r7, #4]
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	00db      	lsls	r3, r3, #3
 800f6ba:	1a9b      	subs	r3, r3, r2
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	440b      	add	r3, r1
 800f6c0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	78fb      	ldrb	r3, [r7, #3]
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	f7fc fcd0 	bl	800c06e <USBD_LL_DataOutStage>
}
 800f6ce:	bf00      	nop
 800f6d0:	3708      	adds	r7, #8
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b082      	sub	sp, #8
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
 800f6de:	460b      	mov	r3, r1
 800f6e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800f6e8:	78fa      	ldrb	r2, [r7, #3]
 800f6ea:	6879      	ldr	r1, [r7, #4]
 800f6ec:	4613      	mov	r3, r2
 800f6ee:	00db      	lsls	r3, r3, #3
 800f6f0:	1a9b      	subs	r3, r3, r2
 800f6f2:	009b      	lsls	r3, r3, #2
 800f6f4:	440b      	add	r3, r1
 800f6f6:	3344      	adds	r3, #68	; 0x44
 800f6f8:	681a      	ldr	r2, [r3, #0]
 800f6fa:	78fb      	ldrb	r3, [r7, #3]
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	f7fc fd11 	bl	800c124 <USBD_LL_DataInStage>
}
 800f702:	bf00      	nop
 800f704:	3708      	adds	r7, #8
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}

0800f70a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b082      	sub	sp, #8
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f718:	4618      	mov	r0, r3
 800f71a:	f7fc fdf7 	bl	800c30c <USBD_LL_SOF>
}
 800f71e:	bf00      	nop
 800f720:	3708      	adds	r7, #8
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800f726:	b580      	push	{r7, lr}
 800f728:	b084      	sub	sp, #16
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f72e:	2301      	movs	r3, #1
 800f730:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	68db      	ldr	r3, [r3, #12]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d002      	beq.n	800f740 <HAL_PCD_ResetCallback+0x1a>
 800f73a:	2b02      	cmp	r3, #2
 800f73c:	d003      	beq.n	800f746 <HAL_PCD_ResetCallback+0x20>
 800f73e:	e005      	b.n	800f74c <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 800f740:	2300      	movs	r3, #0
 800f742:	73fb      	strb	r3, [r7, #15]
    break;
 800f744:	e005      	b.n	800f752 <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800f746:	2301      	movs	r3, #1
 800f748:	73fb      	strb	r3, [r7, #15]
    break;
 800f74a:	e002      	b.n	800f752 <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 800f74c:	2301      	movs	r3, #1
 800f74e:	73fb      	strb	r3, [r7, #15]
    break;    
 800f750:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f758:	7bfa      	ldrb	r2, [r7, #15]
 800f75a:	4611      	mov	r1, r2
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7fc fd9f 	bl	800c2a0 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f768:	4618      	mov	r0, r3
 800f76a:	f7fc fd6a 	bl	800c242 <USBD_LL_Reset>
}
 800f76e:	bf00      	nop
 800f770:	3710      	adds	r7, #16
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
	...

0800f778 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f786:	4618      	mov	r0, r3
 800f788:	f7fc fd9a 	bl	800c2c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f794:	461a      	mov	r2, r3
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f043 0301 	orr.w	r3, r3, #1
 800f7a4:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6a1b      	ldr	r3, [r3, #32]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d005      	beq.n	800f7ba <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f7ae:	4a05      	ldr	r2, [pc, #20]	; (800f7c4 <HAL_PCD_SuspendCallback+0x4c>)
 800f7b0:	4b04      	ldr	r3, [pc, #16]	; (800f7c4 <HAL_PCD_SuspendCallback+0x4c>)
 800f7b2:	691b      	ldr	r3, [r3, #16]
 800f7b4:	f043 0306 	orr.w	r3, r3, #6
 800f7b8:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f7ba:	bf00      	nop
 800f7bc:	3708      	adds	r7, #8
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	e000ed00 	.word	0xe000ed00

0800f7c8 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b082      	sub	sp, #8
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fc fd87 	bl	800c2ea <USBD_LL_Resume>
}
 800f7dc:	bf00      	nop
 800f7de:	3708      	adds	r7, #8
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f7f6:	78fa      	ldrb	r2, [r7, #3]
 800f7f8:	4611      	mov	r1, r2
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fc fdad 	bl	800c35a <USBD_LL_IsoOUTIncomplete>
}
 800f800:	bf00      	nop
 800f802:	3708      	adds	r7, #8
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	460b      	mov	r3, r1
 800f812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f81a:	78fa      	ldrb	r2, [r7, #3]
 800f81c:	4611      	mov	r1, r2
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fc fd8e 	bl	800c340 <USBD_LL_IsoINIncomplete>
}
 800f824:	bf00      	nop
 800f826:	3708      	adds	r7, #8
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7fc fd9a 	bl	800c374 <USBD_LL_DevConnected>
}
 800f840:	bf00      	nop
 800f842:	3708      	adds	r7, #8
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800f856:	4618      	mov	r0, r3
 800f858:	f7fc fd97 	bl	800c38a <USBD_LL_DevDisconnected>
}
 800f85c:	bf00      	nop
 800f85e:	3708      	adds	r7, #8
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	2b01      	cmp	r3, #1
 800f872:	d143      	bne.n	800f8fc <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800f874:	4a24      	ldr	r2, [pc, #144]	; (800f908 <USBD_LL_Init+0xa4>)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_HS;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4a22      	ldr	r2, [pc, #136]	; (800f908 <USBD_LL_Init+0xa4>)
 800f880:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f884:	4b20      	ldr	r3, [pc, #128]	; (800f908 <USBD_LL_Init+0xa4>)
 800f886:	4a21      	ldr	r2, [pc, #132]	; (800f90c <USBD_LL_Init+0xa8>)
 800f888:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 800f88a:	4b1f      	ldr	r3, [pc, #124]	; (800f908 <USBD_LL_Init+0xa4>)
 800f88c:	2208      	movs	r2, #8
 800f88e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f890:	4b1d      	ldr	r3, [pc, #116]	; (800f908 <USBD_LL_Init+0xa4>)
 800f892:	2200      	movs	r2, #0
 800f894:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 800f896:	4b1c      	ldr	r3, [pc, #112]	; (800f908 <USBD_LL_Init+0xa4>)
 800f898:	2200      	movs	r2, #0
 800f89a:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800f89c:	4b1a      	ldr	r3, [pc, #104]	; (800f908 <USBD_LL_Init+0xa4>)
 800f89e:	2201      	movs	r2, #1
 800f8a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f8a2:	4b19      	ldr	r3, [pc, #100]	; (800f908 <USBD_LL_Init+0xa4>)
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f8a8:	4b17      	ldr	r3, [pc, #92]	; (800f908 <USBD_LL_Init+0xa4>)
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800f8ae:	4b16      	ldr	r3, [pc, #88]	; (800f908 <USBD_LL_Init+0xa4>)
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800f8b4:	4b14      	ldr	r3, [pc, #80]	; (800f908 <USBD_LL_Init+0xa4>)
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800f8ba:	4b13      	ldr	r3, [pc, #76]	; (800f908 <USBD_LL_Init+0xa4>)
 800f8bc:	2200      	movs	r2, #0
 800f8be:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f8c0:	4b11      	ldr	r3, [pc, #68]	; (800f908 <USBD_LL_Init+0xa4>)
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800f8c6:	4810      	ldr	r0, [pc, #64]	; (800f908 <USBD_LL_Init+0xa4>)
 800f8c8:	f7f4 fa4e 	bl	8003d68 <HAL_PCD_Init>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d004      	beq.n	800f8dc <USBD_LL_Init+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 800f8d2:	f240 117f 	movw	r1, #383	; 0x17f
 800f8d6:	480e      	ldr	r0, [pc, #56]	; (800f910 <USBD_LL_Init+0xac>)
 800f8d8:	f7ff f978 	bl	800ebcc <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f8dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f8e0:	4809      	ldr	r0, [pc, #36]	; (800f908 <USBD_LL_Init+0xa4>)
 800f8e2:	f7f5 fb7f 	bl	8004fe4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800f8e6:	2280      	movs	r2, #128	; 0x80
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	4807      	ldr	r0, [pc, #28]	; (800f908 <USBD_LL_Init+0xa4>)
 800f8ec:	f7f5 fb2f 	bl	8004f4e <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800f8f0:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800f8f4:	2101      	movs	r1, #1
 800f8f6:	4804      	ldr	r0, [pc, #16]	; (800f908 <USBD_LL_Init+0xa4>)
 800f8f8:	f7f5 fb29 	bl	8004f4e <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f8fc:	2300      	movs	r3, #0
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3708      	adds	r7, #8
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
 800f906:	bf00      	nop
 800f908:	20002814 	.word	0x20002814
 800f90c:	40040000 	.word	0x40040000
 800f910:	080134a4 	.word	0x080134a4

0800f914 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f91c:	2300      	movs	r3, #0
 800f91e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f920:	2300      	movs	r3, #0
 800f922:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7f4 fb2a 	bl	8003f84 <HAL_PCD_Start>
 800f930:	4603      	mov	r3, r0
 800f932:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800f934:	7bbb      	ldrb	r3, [r7, #14]
 800f936:	2b03      	cmp	r3, #3
 800f938:	d816      	bhi.n	800f968 <USBD_LL_Start+0x54>
 800f93a:	a201      	add	r2, pc, #4	; (adr r2, 800f940 <USBD_LL_Start+0x2c>)
 800f93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f940:	0800f951 	.word	0x0800f951
 800f944:	0800f957 	.word	0x0800f957
 800f948:	0800f95d 	.word	0x0800f95d
 800f94c:	0800f963 	.word	0x0800f963
    case HAL_OK :
      usb_status = USBD_OK;
 800f950:	2300      	movs	r3, #0
 800f952:	73fb      	strb	r3, [r7, #15]
    break;
 800f954:	e00b      	b.n	800f96e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f956:	2302      	movs	r3, #2
 800f958:	73fb      	strb	r3, [r7, #15]
    break;
 800f95a:	e008      	b.n	800f96e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f95c:	2301      	movs	r3, #1
 800f95e:	73fb      	strb	r3, [r7, #15]
    break;
 800f960:	e005      	b.n	800f96e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f962:	2302      	movs	r3, #2
 800f964:	73fb      	strb	r3, [r7, #15]
    break;
 800f966:	e002      	b.n	800f96e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f968:	2302      	movs	r3, #2
 800f96a:	73fb      	strb	r3, [r7, #15]
    break;
 800f96c:	bf00      	nop
  }
  return usb_status;
 800f96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f970:	4618      	mov	r0, r3
 800f972:	3710      	adds	r7, #16
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	4608      	mov	r0, r1
 800f982:	4611      	mov	r1, r2
 800f984:	461a      	mov	r2, r3
 800f986:	4603      	mov	r3, r0
 800f988:	70fb      	strb	r3, [r7, #3]
 800f98a:	460b      	mov	r3, r1
 800f98c:	70bb      	strb	r3, [r7, #2]
 800f98e:	4613      	mov	r3, r2
 800f990:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f992:	2300      	movs	r3, #0
 800f994:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f996:	2300      	movs	r3, #0
 800f998:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800f9a0:	78bb      	ldrb	r3, [r7, #2]
 800f9a2:	883a      	ldrh	r2, [r7, #0]
 800f9a4:	78f9      	ldrb	r1, [r7, #3]
 800f9a6:	f7f5 f834 	bl	8004a12 <HAL_PCD_EP_Open>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f9ae:	7bbb      	ldrb	r3, [r7, #14]
 800f9b0:	2b03      	cmp	r3, #3
 800f9b2:	d817      	bhi.n	800f9e4 <USBD_LL_OpenEP+0x6c>
 800f9b4:	a201      	add	r2, pc, #4	; (adr r2, 800f9bc <USBD_LL_OpenEP+0x44>)
 800f9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ba:	bf00      	nop
 800f9bc:	0800f9cd 	.word	0x0800f9cd
 800f9c0:	0800f9d3 	.word	0x0800f9d3
 800f9c4:	0800f9d9 	.word	0x0800f9d9
 800f9c8:	0800f9df 	.word	0x0800f9df
    case HAL_OK :
      usb_status = USBD_OK;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f9d0:	e00b      	b.n	800f9ea <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f9d2:	2302      	movs	r3, #2
 800f9d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f9d6:	e008      	b.n	800f9ea <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	73fb      	strb	r3, [r7, #15]
    break;
 800f9dc:	e005      	b.n	800f9ea <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f9de:	2302      	movs	r3, #2
 800f9e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f9e2:	e002      	b.n	800f9ea <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f9e4:	2302      	movs	r3, #2
 800f9e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f9e8:	bf00      	nop
  }
  return usb_status;
 800f9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3710      	adds	r7, #16
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa00:	2300      	movs	r3, #0
 800fa02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa04:	2300      	movs	r3, #0
 800fa06:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800fa0e:	78fa      	ldrb	r2, [r7, #3]
 800fa10:	4611      	mov	r1, r2
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7f5 f865 	bl	8004ae2 <HAL_PCD_EP_Close>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800fa1c:	7bbb      	ldrb	r3, [r7, #14]
 800fa1e:	2b03      	cmp	r3, #3
 800fa20:	d816      	bhi.n	800fa50 <USBD_LL_CloseEP+0x5c>
 800fa22:	a201      	add	r2, pc, #4	; (adr r2, 800fa28 <USBD_LL_CloseEP+0x34>)
 800fa24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa28:	0800fa39 	.word	0x0800fa39
 800fa2c:	0800fa3f 	.word	0x0800fa3f
 800fa30:	0800fa45 	.word	0x0800fa45
 800fa34:	0800fa4b 	.word	0x0800fa4b
    case HAL_OK :
      usb_status = USBD_OK;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	73fb      	strb	r3, [r7, #15]
    break;
 800fa3c:	e00b      	b.n	800fa56 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa3e:	2302      	movs	r3, #2
 800fa40:	73fb      	strb	r3, [r7, #15]
    break;
 800fa42:	e008      	b.n	800fa56 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa44:	2301      	movs	r3, #1
 800fa46:	73fb      	strb	r3, [r7, #15]
    break;
 800fa48:	e005      	b.n	800fa56 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa4a:	2302      	movs	r3, #2
 800fa4c:	73fb      	strb	r3, [r7, #15]
    break;
 800fa4e:	e002      	b.n	800fa56 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fa50:	2302      	movs	r3, #2
 800fa52:	73fb      	strb	r3, [r7, #15]
    break;
 800fa54:	bf00      	nop
  }
  return usb_status;  
 800fa56:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3710      	adds	r7, #16
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b084      	sub	sp, #16
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	460b      	mov	r3, r1
 800fa6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa70:	2300      	movs	r3, #0
 800fa72:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800fa7a:	78fa      	ldrb	r2, [r7, #3]
 800fa7c:	4611      	mov	r1, r2
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7f5 f925 	bl	8004cce <HAL_PCD_EP_SetStall>
 800fa84:	4603      	mov	r3, r0
 800fa86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fa88:	7bbb      	ldrb	r3, [r7, #14]
 800fa8a:	2b03      	cmp	r3, #3
 800fa8c:	d816      	bhi.n	800fabc <USBD_LL_StallEP+0x5c>
 800fa8e:	a201      	add	r2, pc, #4	; (adr r2, 800fa94 <USBD_LL_StallEP+0x34>)
 800fa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa94:	0800faa5 	.word	0x0800faa5
 800fa98:	0800faab 	.word	0x0800faab
 800fa9c:	0800fab1 	.word	0x0800fab1
 800faa0:	0800fab7 	.word	0x0800fab7
    case HAL_OK :
      usb_status = USBD_OK;
 800faa4:	2300      	movs	r3, #0
 800faa6:	73fb      	strb	r3, [r7, #15]
    break;
 800faa8:	e00b      	b.n	800fac2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800faaa:	2302      	movs	r3, #2
 800faac:	73fb      	strb	r3, [r7, #15]
    break;
 800faae:	e008      	b.n	800fac2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fab0:	2301      	movs	r3, #1
 800fab2:	73fb      	strb	r3, [r7, #15]
    break;
 800fab4:	e005      	b.n	800fac2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fab6:	2302      	movs	r3, #2
 800fab8:	73fb      	strb	r3, [r7, #15]
    break;
 800faba:	e002      	b.n	800fac2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fabc:	2302      	movs	r3, #2
 800fabe:	73fb      	strb	r3, [r7, #15]
    break;
 800fac0:	bf00      	nop
  }
  return usb_status;  
 800fac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	460b      	mov	r3, r1
 800fad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fad8:	2300      	movs	r3, #0
 800fada:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fadc:	2300      	movs	r3, #0
 800fade:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800fae6:	78fa      	ldrb	r2, [r7, #3]
 800fae8:	4611      	mov	r1, r2
 800faea:	4618      	mov	r0, r3
 800faec:	f7f5 f953 	bl	8004d96 <HAL_PCD_EP_ClrStall>
 800faf0:	4603      	mov	r3, r0
 800faf2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800faf4:	7bbb      	ldrb	r3, [r7, #14]
 800faf6:	2b03      	cmp	r3, #3
 800faf8:	d816      	bhi.n	800fb28 <USBD_LL_ClearStallEP+0x5c>
 800fafa:	a201      	add	r2, pc, #4	; (adr r2, 800fb00 <USBD_LL_ClearStallEP+0x34>)
 800fafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb00:	0800fb11 	.word	0x0800fb11
 800fb04:	0800fb17 	.word	0x0800fb17
 800fb08:	0800fb1d 	.word	0x0800fb1d
 800fb0c:	0800fb23 	.word	0x0800fb23
    case HAL_OK :
      usb_status = USBD_OK;
 800fb10:	2300      	movs	r3, #0
 800fb12:	73fb      	strb	r3, [r7, #15]
    break;
 800fb14:	e00b      	b.n	800fb2e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fb16:	2302      	movs	r3, #2
 800fb18:	73fb      	strb	r3, [r7, #15]
    break;
 800fb1a:	e008      	b.n	800fb2e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	73fb      	strb	r3, [r7, #15]
    break;
 800fb20:	e005      	b.n	800fb2e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fb22:	2302      	movs	r3, #2
 800fb24:	73fb      	strb	r3, [r7, #15]
    break;
 800fb26:	e002      	b.n	800fb2e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fb28:	2302      	movs	r3, #2
 800fb2a:	73fb      	strb	r3, [r7, #15]
    break;
 800fb2c:	bf00      	nop
  }
  return usb_status; 
 800fb2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3710      	adds	r7, #16
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b085      	sub	sp, #20
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	460b      	mov	r3, r1
 800fb42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800fb4a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800fb4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	da0b      	bge.n	800fb6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800fb54:	78fb      	ldrb	r3, [r7, #3]
 800fb56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb5a:	68f9      	ldr	r1, [r7, #12]
 800fb5c:	4613      	mov	r3, r2
 800fb5e:	00db      	lsls	r3, r3, #3
 800fb60:	1a9b      	subs	r3, r3, r2
 800fb62:	009b      	lsls	r3, r3, #2
 800fb64:	440b      	add	r3, r1
 800fb66:	333a      	adds	r3, #58	; 0x3a
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	e00b      	b.n	800fb84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800fb6c:	78fb      	ldrb	r3, [r7, #3]
 800fb6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb72:	68f9      	ldr	r1, [r7, #12]
 800fb74:	4613      	mov	r3, r2
 800fb76:	00db      	lsls	r3, r3, #3
 800fb78:	1a9b      	subs	r3, r3, r2
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	440b      	add	r3, r1
 800fb7e:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800fb82:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3714      	adds	r7, #20
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr

0800fb90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	460b      	mov	r3, r1
 800fb9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800fbaa:	78fa      	ldrb	r2, [r7, #3]
 800fbac:	4611      	mov	r1, r2
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7f4 ff0e 	bl	80049d0 <HAL_PCD_SetAddress>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800fbb8:	7bbb      	ldrb	r3, [r7, #14]
 800fbba:	2b03      	cmp	r3, #3
 800fbbc:	d816      	bhi.n	800fbec <USBD_LL_SetUSBAddress+0x5c>
 800fbbe:	a201      	add	r2, pc, #4	; (adr r2, 800fbc4 <USBD_LL_SetUSBAddress+0x34>)
 800fbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc4:	0800fbd5 	.word	0x0800fbd5
 800fbc8:	0800fbdb 	.word	0x0800fbdb
 800fbcc:	0800fbe1 	.word	0x0800fbe1
 800fbd0:	0800fbe7 	.word	0x0800fbe7
    case HAL_OK :
      usb_status = USBD_OK;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	73fb      	strb	r3, [r7, #15]
    break;
 800fbd8:	e00b      	b.n	800fbf2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fbda:	2302      	movs	r3, #2
 800fbdc:	73fb      	strb	r3, [r7, #15]
    break;
 800fbde:	e008      	b.n	800fbf2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	73fb      	strb	r3, [r7, #15]
    break;
 800fbe4:	e005      	b.n	800fbf2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fbe6:	2302      	movs	r3, #2
 800fbe8:	73fb      	strb	r3, [r7, #15]
    break;
 800fbea:	e002      	b.n	800fbf2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800fbec:	2302      	movs	r3, #2
 800fbee:	73fb      	strb	r3, [r7, #15]
    break;
 800fbf0:	bf00      	nop
  }
  return usb_status;  
 800fbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3710      	adds	r7, #16
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b086      	sub	sp, #24
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	607a      	str	r2, [r7, #4]
 800fc06:	461a      	mov	r2, r3
 800fc08:	460b      	mov	r3, r1
 800fc0a:	72fb      	strb	r3, [r7, #11]
 800fc0c:	4613      	mov	r3, r2
 800fc0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc10:	2300      	movs	r3, #0
 800fc12:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc14:	2300      	movs	r3, #0
 800fc16:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800fc1e:	893b      	ldrh	r3, [r7, #8]
 800fc20:	7af9      	ldrb	r1, [r7, #11]
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	f7f5 f80a 	bl	8004c3c <HAL_PCD_EP_Transmit>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800fc2c:	7dbb      	ldrb	r3, [r7, #22]
 800fc2e:	2b03      	cmp	r3, #3
 800fc30:	d816      	bhi.n	800fc60 <USBD_LL_Transmit+0x64>
 800fc32:	a201      	add	r2, pc, #4	; (adr r2, 800fc38 <USBD_LL_Transmit+0x3c>)
 800fc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc38:	0800fc49 	.word	0x0800fc49
 800fc3c:	0800fc4f 	.word	0x0800fc4f
 800fc40:	0800fc55 	.word	0x0800fc55
 800fc44:	0800fc5b 	.word	0x0800fc5b
    case HAL_OK :
      usb_status = USBD_OK;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	75fb      	strb	r3, [r7, #23]
    break;
 800fc4c:	e00b      	b.n	800fc66 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fc4e:	2302      	movs	r3, #2
 800fc50:	75fb      	strb	r3, [r7, #23]
    break;
 800fc52:	e008      	b.n	800fc66 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fc54:	2301      	movs	r3, #1
 800fc56:	75fb      	strb	r3, [r7, #23]
    break;
 800fc58:	e005      	b.n	800fc66 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fc5a:	2302      	movs	r3, #2
 800fc5c:	75fb      	strb	r3, [r7, #23]
    break;
 800fc5e:	e002      	b.n	800fc66 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800fc60:	2302      	movs	r3, #2
 800fc62:	75fb      	strb	r3, [r7, #23]
    break;
 800fc64:	bf00      	nop
  }
  return usb_status;    
 800fc66:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3718      	adds	r7, #24
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b086      	sub	sp, #24
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	607a      	str	r2, [r7, #4]
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	72fb      	strb	r3, [r7, #11]
 800fc80:	4613      	mov	r3, r2
 800fc82:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc84:	2300      	movs	r3, #0
 800fc86:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800fc92:	893b      	ldrh	r3, [r7, #8]
 800fc94:	7af9      	ldrb	r1, [r7, #11]
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	f7f4 ff6d 	bl	8004b76 <HAL_PCD_EP_Receive>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800fca0:	7dbb      	ldrb	r3, [r7, #22]
 800fca2:	2b03      	cmp	r3, #3
 800fca4:	d816      	bhi.n	800fcd4 <USBD_LL_PrepareReceive+0x64>
 800fca6:	a201      	add	r2, pc, #4	; (adr r2, 800fcac <USBD_LL_PrepareReceive+0x3c>)
 800fca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcac:	0800fcbd 	.word	0x0800fcbd
 800fcb0:	0800fcc3 	.word	0x0800fcc3
 800fcb4:	0800fcc9 	.word	0x0800fcc9
 800fcb8:	0800fccf 	.word	0x0800fccf
    case HAL_OK :
      usb_status = USBD_OK;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	75fb      	strb	r3, [r7, #23]
    break;
 800fcc0:	e00b      	b.n	800fcda <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fcc2:	2302      	movs	r3, #2
 800fcc4:	75fb      	strb	r3, [r7, #23]
    break;
 800fcc6:	e008      	b.n	800fcda <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fcc8:	2301      	movs	r3, #1
 800fcca:	75fb      	strb	r3, [r7, #23]
    break;
 800fccc:	e005      	b.n	800fcda <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fcce:	2302      	movs	r3, #2
 800fcd0:	75fb      	strb	r3, [r7, #23]
    break;
 800fcd2:	e002      	b.n	800fcda <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800fcd4:	2302      	movs	r3, #2
 800fcd6:	75fb      	strb	r3, [r7, #23]
    break;
 800fcd8:	bf00      	nop
  }
  return usb_status; 
 800fcda:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3718      	adds	r7, #24
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
 800fcec:	460b      	mov	r3, r1
 800fcee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800fcf6:	78fa      	ldrb	r2, [r7, #3]
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7f4 ff85 	bl	8004c0a <HAL_PCD_EP_GetRxCount>
 800fd00:	4603      	mov	r3, r0
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
	...

0800fd0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	460b      	mov	r3, r1
 800fd16:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800fd18:	78fb      	ldrb	r3, [r7, #3]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d002      	beq.n	800fd24 <HAL_PCDEx_LPM_Callback+0x18>
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d020      	beq.n	800fd64 <HAL_PCDEx_LPM_Callback+0x58>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800fd22:	e03d      	b.n	800fda0 <HAL_PCDEx_LPM_Callback+0x94>
    if (hpcd->Init.low_power_enable)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6a1b      	ldr	r3, [r3, #32]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d007      	beq.n	800fd3c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800fd2c:	f7fe f87e 	bl	800de2c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd30:	4a1d      	ldr	r2, [pc, #116]	; (800fda8 <HAL_PCDEx_LPM_Callback+0x9c>)
 800fd32:	4b1d      	ldr	r3, [pc, #116]	; (800fda8 <HAL_PCDEx_LPM_Callback+0x9c>)
 800fd34:	691b      	ldr	r3, [r3, #16]
 800fd36:	f023 0306 	bic.w	r3, r3, #6
 800fd3a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd44:	461a      	mov	r2, r3
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f023 0301 	bic.w	r3, r3, #1
 800fd54:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7fc fac4 	bl	800c2ea <USBD_LL_Resume>
    break;
 800fd62:	e01d      	b.n	800fda0 <HAL_PCDEx_LPM_Callback+0x94>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	f043 0301 	orr.w	r3, r3, #1
 800fd7c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7fc fa9b 	bl	800c2c0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6a1b      	ldr	r3, [r3, #32]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d005      	beq.n	800fd9e <HAL_PCDEx_LPM_Callback+0x92>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd92:	4a05      	ldr	r2, [pc, #20]	; (800fda8 <HAL_PCDEx_LPM_Callback+0x9c>)
 800fd94:	4b04      	ldr	r3, [pc, #16]	; (800fda8 <HAL_PCDEx_LPM_Callback+0x9c>)
 800fd96:	691b      	ldr	r3, [r3, #16]
 800fd98:	f043 0306 	orr.w	r3, r3, #6
 800fd9c:	6113      	str	r3, [r2, #16]
    break;   
 800fd9e:	bf00      	nop
}
 800fda0:	bf00      	nop
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	e000ed00 	.word	0xe000ed00

0800fdac <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b083      	sub	sp, #12
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	6039      	str	r1, [r7, #0]
 800fdb6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_HS_DeviceDesc);
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	2212      	movs	r2, #18
 800fdbc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800fdbe:	4b03      	ldr	r3, [pc, #12]	; (800fdcc <USBD_HS_DeviceDescriptor+0x20>)
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	370c      	adds	r7, #12
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr
 800fdcc:	20000158 	.word	0x20000158

0800fdd0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	6039      	str	r1, [r7, #0]
 800fdda:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	2204      	movs	r2, #4
 800fde0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fde2:	4b03      	ldr	r3, [pc, #12]	; (800fdf0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	370c      	adds	r7, #12
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr
 800fdf0:	20000178 	.word	0x20000178

0800fdf4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	6039      	str	r1, [r7, #0]
 800fdfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe00:	79fb      	ldrb	r3, [r7, #7]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d105      	bne.n	800fe12 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800fe06:	683a      	ldr	r2, [r7, #0]
 800fe08:	4907      	ldr	r1, [pc, #28]	; (800fe28 <USBD_HS_ProductStrDescriptor+0x34>)
 800fe0a:	4808      	ldr	r0, [pc, #32]	; (800fe2c <USBD_HS_ProductStrDescriptor+0x38>)
 800fe0c:	f7fc fef3 	bl	800cbf6 <USBD_GetString>
 800fe10:	e004      	b.n	800fe1c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800fe12:	683a      	ldr	r2, [r7, #0]
 800fe14:	4904      	ldr	r1, [pc, #16]	; (800fe28 <USBD_HS_ProductStrDescriptor+0x34>)
 800fe16:	4805      	ldr	r0, [pc, #20]	; (800fe2c <USBD_HS_ProductStrDescriptor+0x38>)
 800fe18:	f7fc feed 	bl	800cbf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe1c:	4b02      	ldr	r3, [pc, #8]	; (800fe28 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3708      	adds	r7, #8
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	20002c14 	.word	0x20002c14
 800fe2c:	080134b8 	.word	0x080134b8

0800fe30 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	4603      	mov	r3, r0
 800fe38:	6039      	str	r1, [r7, #0]
 800fe3a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fe3c:	683a      	ldr	r2, [r7, #0]
 800fe3e:	4904      	ldr	r1, [pc, #16]	; (800fe50 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800fe40:	4804      	ldr	r0, [pc, #16]	; (800fe54 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800fe42:	f7fc fed8 	bl	800cbf6 <USBD_GetString>
  return USBD_StrDesc;
 800fe46:	4b02      	ldr	r3, [pc, #8]	; (800fe50 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3708      	adds	r7, #8
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	20002c14 	.word	0x20002c14
 800fe54:	080134d0 	.word	0x080134d0

0800fe58 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	4603      	mov	r3, r0
 800fe60:	6039      	str	r1, [r7, #0]
 800fe62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fe64:	79fb      	ldrb	r3, [r7, #7]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d105      	bne.n	800fe76 <USBD_HS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 800fe6a:	683a      	ldr	r2, [r7, #0]
 800fe6c:	4907      	ldr	r1, [pc, #28]	; (800fe8c <USBD_HS_SerialStrDescriptor+0x34>)
 800fe6e:	4808      	ldr	r0, [pc, #32]	; (800fe90 <USBD_HS_SerialStrDescriptor+0x38>)
 800fe70:	f7fc fec1 	bl	800cbf6 <USBD_GetString>
 800fe74:	e004      	b.n	800fe80 <USBD_HS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 800fe76:	683a      	ldr	r2, [r7, #0]
 800fe78:	4904      	ldr	r1, [pc, #16]	; (800fe8c <USBD_HS_SerialStrDescriptor+0x34>)
 800fe7a:	4805      	ldr	r0, [pc, #20]	; (800fe90 <USBD_HS_SerialStrDescriptor+0x38>)
 800fe7c:	f7fc febb 	bl	800cbf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe80:	4b02      	ldr	r3, [pc, #8]	; (800fe8c <USBD_HS_SerialStrDescriptor+0x34>)
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3708      	adds	r7, #8
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	20002c14 	.word	0x20002c14
 800fe90:	080134e4 	.word	0x080134e4

0800fe94 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	6039      	str	r1, [r7, #0]
 800fe9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fea0:	79fb      	ldrb	r3, [r7, #7]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d105      	bne.n	800feb2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800fea6:	683a      	ldr	r2, [r7, #0]
 800fea8:	4907      	ldr	r1, [pc, #28]	; (800fec8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800feaa:	4808      	ldr	r0, [pc, #32]	; (800fecc <USBD_HS_ConfigStrDescriptor+0x38>)
 800feac:	f7fc fea3 	bl	800cbf6 <USBD_GetString>
 800feb0:	e004      	b.n	800febc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800feb2:	683a      	ldr	r2, [r7, #0]
 800feb4:	4904      	ldr	r1, [pc, #16]	; (800fec8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800feb6:	4805      	ldr	r0, [pc, #20]	; (800fecc <USBD_HS_ConfigStrDescriptor+0x38>)
 800feb8:	f7fc fe9d 	bl	800cbf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800febc:	4b02      	ldr	r3, [pc, #8]	; (800fec8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3708      	adds	r7, #8
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}
 800fec6:	bf00      	nop
 800fec8:	20002c14 	.word	0x20002c14
 800fecc:	080134f4 	.word	0x080134f4

0800fed0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	4603      	mov	r3, r0
 800fed8:	6039      	str	r1, [r7, #0]
 800feda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fedc:	79fb      	ldrb	r3, [r7, #7]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d105      	bne.n	800feee <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800fee2:	683a      	ldr	r2, [r7, #0]
 800fee4:	4907      	ldr	r1, [pc, #28]	; (800ff04 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800fee6:	4808      	ldr	r0, [pc, #32]	; (800ff08 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800fee8:	f7fc fe85 	bl	800cbf6 <USBD_GetString>
 800feec:	e004      	b.n	800fef8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800feee:	683a      	ldr	r2, [r7, #0]
 800fef0:	4904      	ldr	r1, [pc, #16]	; (800ff04 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800fef2:	4805      	ldr	r0, [pc, #20]	; (800ff08 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800fef4:	f7fc fe7f 	bl	800cbf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fef8:	4b02      	ldr	r3, [pc, #8]	; (800ff04 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3708      	adds	r7, #8
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}
 800ff02:	bf00      	nop
 800ff04:	20002c14 	.word	0x20002c14
 800ff08:	08013500 	.word	0x08013500

0800ff0c <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	4603      	mov	r3, r0
 800ff14:	6039      	str	r1, [r7, #0]
 800ff16:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_HS_BOSDesc);
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	220c      	movs	r2, #12
 800ff1c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800ff1e:	4b03      	ldr	r3, [pc, #12]	; (800ff2c <USBD_HS_USR_BOSDescriptor+0x20>)
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	2000016c 	.word	0x2000016c

0800ff30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ff30:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ff68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ff34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ff36:	e003      	b.n	800ff40 <LoopCopyDataInit>

0800ff38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ff38:	4b0c      	ldr	r3, [pc, #48]	; (800ff6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ff3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ff3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ff3e:	3104      	adds	r1, #4

0800ff40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ff40:	480b      	ldr	r0, [pc, #44]	; (800ff70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ff42:	4b0c      	ldr	r3, [pc, #48]	; (800ff74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ff44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ff46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ff48:	d3f6      	bcc.n	800ff38 <CopyDataInit>
  ldr  r2, =_sbss
 800ff4a:	4a0b      	ldr	r2, [pc, #44]	; (800ff78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ff4c:	e002      	b.n	800ff54 <LoopFillZerobss>

0800ff4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ff4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ff50:	f842 3b04 	str.w	r3, [r2], #4

0800ff54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ff54:	4b09      	ldr	r3, [pc, #36]	; (800ff7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ff56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ff58:	d3f9      	bcc.n	800ff4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800ff5a:	f7ff fa35 	bl	800f3c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ff5e:	f000 fa27 	bl	80103b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ff62:	f7fd fbf9 	bl	800d758 <main>
  bx  lr    
 800ff66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ff68:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800ff6c:	08016248 	.word	0x08016248
  ldr  r0, =_sdata
 800ff70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ff74:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 800ff78:	2000034c 	.word	0x2000034c
  ldr  r3, = _ebss
 800ff7c:	20002e18 	.word	0x20002e18

0800ff80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ff80:	e7fe      	b.n	800ff80 <ADC_IRQHandler>
	...

0800ff84 <__sflush_r>:
 800ff84:	898a      	ldrh	r2, [r1, #12]
 800ff86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff8a:	4605      	mov	r5, r0
 800ff8c:	0710      	lsls	r0, r2, #28
 800ff8e:	460c      	mov	r4, r1
 800ff90:	d45a      	bmi.n	8010048 <__sflush_r+0xc4>
 800ff92:	684b      	ldr	r3, [r1, #4]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	dc05      	bgt.n	800ffa4 <__sflush_r+0x20>
 800ff98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	dc02      	bgt.n	800ffa4 <__sflush_r+0x20>
 800ff9e:	2000      	movs	r0, #0
 800ffa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffa6:	2e00      	cmp	r6, #0
 800ffa8:	d0f9      	beq.n	800ff9e <__sflush_r+0x1a>
 800ffaa:	2300      	movs	r3, #0
 800ffac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ffb0:	682f      	ldr	r7, [r5, #0]
 800ffb2:	602b      	str	r3, [r5, #0]
 800ffb4:	d033      	beq.n	801001e <__sflush_r+0x9a>
 800ffb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ffb8:	89a3      	ldrh	r3, [r4, #12]
 800ffba:	075a      	lsls	r2, r3, #29
 800ffbc:	d505      	bpl.n	800ffca <__sflush_r+0x46>
 800ffbe:	6863      	ldr	r3, [r4, #4]
 800ffc0:	1ac0      	subs	r0, r0, r3
 800ffc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ffc4:	b10b      	cbz	r3, 800ffca <__sflush_r+0x46>
 800ffc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ffc8:	1ac0      	subs	r0, r0, r3
 800ffca:	2300      	movs	r3, #0
 800ffcc:	4602      	mov	r2, r0
 800ffce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffd0:	6a21      	ldr	r1, [r4, #32]
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	47b0      	blx	r6
 800ffd6:	1c43      	adds	r3, r0, #1
 800ffd8:	89a3      	ldrh	r3, [r4, #12]
 800ffda:	d106      	bne.n	800ffea <__sflush_r+0x66>
 800ffdc:	6829      	ldr	r1, [r5, #0]
 800ffde:	291d      	cmp	r1, #29
 800ffe0:	d84b      	bhi.n	801007a <__sflush_r+0xf6>
 800ffe2:	4a2b      	ldr	r2, [pc, #172]	; (8010090 <__sflush_r+0x10c>)
 800ffe4:	40ca      	lsrs	r2, r1
 800ffe6:	07d6      	lsls	r6, r2, #31
 800ffe8:	d547      	bpl.n	801007a <__sflush_r+0xf6>
 800ffea:	2200      	movs	r2, #0
 800ffec:	6062      	str	r2, [r4, #4]
 800ffee:	04d9      	lsls	r1, r3, #19
 800fff0:	6922      	ldr	r2, [r4, #16]
 800fff2:	6022      	str	r2, [r4, #0]
 800fff4:	d504      	bpl.n	8010000 <__sflush_r+0x7c>
 800fff6:	1c42      	adds	r2, r0, #1
 800fff8:	d101      	bne.n	800fffe <__sflush_r+0x7a>
 800fffa:	682b      	ldr	r3, [r5, #0]
 800fffc:	b903      	cbnz	r3, 8010000 <__sflush_r+0x7c>
 800fffe:	6560      	str	r0, [r4, #84]	; 0x54
 8010000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010002:	602f      	str	r7, [r5, #0]
 8010004:	2900      	cmp	r1, #0
 8010006:	d0ca      	beq.n	800ff9e <__sflush_r+0x1a>
 8010008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801000c:	4299      	cmp	r1, r3
 801000e:	d002      	beq.n	8010016 <__sflush_r+0x92>
 8010010:	4628      	mov	r0, r5
 8010012:	f000 fa39 	bl	8010488 <_free_r>
 8010016:	2000      	movs	r0, #0
 8010018:	6360      	str	r0, [r4, #52]	; 0x34
 801001a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801001e:	6a21      	ldr	r1, [r4, #32]
 8010020:	2301      	movs	r3, #1
 8010022:	4628      	mov	r0, r5
 8010024:	47b0      	blx	r6
 8010026:	1c41      	adds	r1, r0, #1
 8010028:	d1c6      	bne.n	800ffb8 <__sflush_r+0x34>
 801002a:	682b      	ldr	r3, [r5, #0]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d0c3      	beq.n	800ffb8 <__sflush_r+0x34>
 8010030:	2b1d      	cmp	r3, #29
 8010032:	d001      	beq.n	8010038 <__sflush_r+0xb4>
 8010034:	2b16      	cmp	r3, #22
 8010036:	d101      	bne.n	801003c <__sflush_r+0xb8>
 8010038:	602f      	str	r7, [r5, #0]
 801003a:	e7b0      	b.n	800ff9e <__sflush_r+0x1a>
 801003c:	89a3      	ldrh	r3, [r4, #12]
 801003e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010042:	81a3      	strh	r3, [r4, #12]
 8010044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010048:	690f      	ldr	r7, [r1, #16]
 801004a:	2f00      	cmp	r7, #0
 801004c:	d0a7      	beq.n	800ff9e <__sflush_r+0x1a>
 801004e:	0793      	lsls	r3, r2, #30
 8010050:	680e      	ldr	r6, [r1, #0]
 8010052:	bf08      	it	eq
 8010054:	694b      	ldreq	r3, [r1, #20]
 8010056:	600f      	str	r7, [r1, #0]
 8010058:	bf18      	it	ne
 801005a:	2300      	movne	r3, #0
 801005c:	eba6 0807 	sub.w	r8, r6, r7
 8010060:	608b      	str	r3, [r1, #8]
 8010062:	f1b8 0f00 	cmp.w	r8, #0
 8010066:	dd9a      	ble.n	800ff9e <__sflush_r+0x1a>
 8010068:	4643      	mov	r3, r8
 801006a:	463a      	mov	r2, r7
 801006c:	6a21      	ldr	r1, [r4, #32]
 801006e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010070:	4628      	mov	r0, r5
 8010072:	47b0      	blx	r6
 8010074:	2800      	cmp	r0, #0
 8010076:	dc07      	bgt.n	8010088 <__sflush_r+0x104>
 8010078:	89a3      	ldrh	r3, [r4, #12]
 801007a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801007e:	81a3      	strh	r3, [r4, #12]
 8010080:	f04f 30ff 	mov.w	r0, #4294967295
 8010084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010088:	4407      	add	r7, r0
 801008a:	eba8 0800 	sub.w	r8, r8, r0
 801008e:	e7e8      	b.n	8010062 <__sflush_r+0xde>
 8010090:	20400001 	.word	0x20400001

08010094 <_fflush_r>:
 8010094:	b538      	push	{r3, r4, r5, lr}
 8010096:	690b      	ldr	r3, [r1, #16]
 8010098:	4605      	mov	r5, r0
 801009a:	460c      	mov	r4, r1
 801009c:	b1db      	cbz	r3, 80100d6 <_fflush_r+0x42>
 801009e:	b118      	cbz	r0, 80100a8 <_fflush_r+0x14>
 80100a0:	6983      	ldr	r3, [r0, #24]
 80100a2:	b90b      	cbnz	r3, 80100a8 <_fflush_r+0x14>
 80100a4:	f000 f8de 	bl	8010264 <__sinit>
 80100a8:	4b0c      	ldr	r3, [pc, #48]	; (80100dc <_fflush_r+0x48>)
 80100aa:	429c      	cmp	r4, r3
 80100ac:	d109      	bne.n	80100c2 <_fflush_r+0x2e>
 80100ae:	686c      	ldr	r4, [r5, #4]
 80100b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100b4:	b17b      	cbz	r3, 80100d6 <_fflush_r+0x42>
 80100b6:	4621      	mov	r1, r4
 80100b8:	4628      	mov	r0, r5
 80100ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100be:	f7ff bf61 	b.w	800ff84 <__sflush_r>
 80100c2:	4b07      	ldr	r3, [pc, #28]	; (80100e0 <_fflush_r+0x4c>)
 80100c4:	429c      	cmp	r4, r3
 80100c6:	d101      	bne.n	80100cc <_fflush_r+0x38>
 80100c8:	68ac      	ldr	r4, [r5, #8]
 80100ca:	e7f1      	b.n	80100b0 <_fflush_r+0x1c>
 80100cc:	4b05      	ldr	r3, [pc, #20]	; (80100e4 <_fflush_r+0x50>)
 80100ce:	429c      	cmp	r4, r3
 80100d0:	bf08      	it	eq
 80100d2:	68ec      	ldreq	r4, [r5, #12]
 80100d4:	e7ec      	b.n	80100b0 <_fflush_r+0x1c>
 80100d6:	2000      	movs	r0, #0
 80100d8:	bd38      	pop	{r3, r4, r5, pc}
 80100da:	bf00      	nop
 80100dc:	08015f94 	.word	0x08015f94
 80100e0:	08015fb4 	.word	0x08015fb4
 80100e4:	08015f74 	.word	0x08015f74

080100e8 <fflush>:
 80100e8:	4601      	mov	r1, r0
 80100ea:	b920      	cbnz	r0, 80100f6 <fflush+0xe>
 80100ec:	4b04      	ldr	r3, [pc, #16]	; (8010100 <fflush+0x18>)
 80100ee:	4905      	ldr	r1, [pc, #20]	; (8010104 <fflush+0x1c>)
 80100f0:	6818      	ldr	r0, [r3, #0]
 80100f2:	f000 b93f 	b.w	8010374 <_fwalk_reent>
 80100f6:	4b04      	ldr	r3, [pc, #16]	; (8010108 <fflush+0x20>)
 80100f8:	6818      	ldr	r0, [r3, #0]
 80100fa:	f7ff bfcb 	b.w	8010094 <_fflush_r>
 80100fe:	bf00      	nop
 8010100:	08015fd4 	.word	0x08015fd4
 8010104:	08010095 	.word	0x08010095
 8010108:	2000017c 	.word	0x2000017c

0801010c <_fgets_r>:
 801010c:	2a01      	cmp	r2, #1
 801010e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010112:	4681      	mov	r9, r0
 8010114:	460e      	mov	r6, r1
 8010116:	4690      	mov	r8, r2
 8010118:	461c      	mov	r4, r3
 801011a:	dc02      	bgt.n	8010122 <_fgets_r+0x16>
 801011c:	2000      	movs	r0, #0
 801011e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010122:	b118      	cbz	r0, 801012c <_fgets_r+0x20>
 8010124:	6983      	ldr	r3, [r0, #24]
 8010126:	b90b      	cbnz	r3, 801012c <_fgets_r+0x20>
 8010128:	f000 f89c 	bl	8010264 <__sinit>
 801012c:	4b25      	ldr	r3, [pc, #148]	; (80101c4 <_fgets_r+0xb8>)
 801012e:	429c      	cmp	r4, r3
 8010130:	d110      	bne.n	8010154 <_fgets_r+0x48>
 8010132:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8010136:	f108 38ff 	add.w	r8, r8, #4294967295
 801013a:	4637      	mov	r7, r6
 801013c:	6865      	ldr	r5, [r4, #4]
 801013e:	b9b5      	cbnz	r5, 801016e <_fgets_r+0x62>
 8010140:	4621      	mov	r1, r4
 8010142:	4648      	mov	r0, r9
 8010144:	f000 ff46 	bl	8010fd4 <__srefill_r>
 8010148:	b180      	cbz	r0, 801016c <_fgets_r+0x60>
 801014a:	42b7      	cmp	r7, r6
 801014c:	d0e6      	beq.n	801011c <_fgets_r+0x10>
 801014e:	2300      	movs	r3, #0
 8010150:	703b      	strb	r3, [r7, #0]
 8010152:	e025      	b.n	80101a0 <_fgets_r+0x94>
 8010154:	4b1c      	ldr	r3, [pc, #112]	; (80101c8 <_fgets_r+0xbc>)
 8010156:	429c      	cmp	r4, r3
 8010158:	d102      	bne.n	8010160 <_fgets_r+0x54>
 801015a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801015e:	e7ea      	b.n	8010136 <_fgets_r+0x2a>
 8010160:	4b1a      	ldr	r3, [pc, #104]	; (80101cc <_fgets_r+0xc0>)
 8010162:	429c      	cmp	r4, r3
 8010164:	bf08      	it	eq
 8010166:	f8d9 400c 	ldreq.w	r4, [r9, #12]
 801016a:	e7e4      	b.n	8010136 <_fgets_r+0x2a>
 801016c:	6865      	ldr	r5, [r4, #4]
 801016e:	f8d4 a000 	ldr.w	sl, [r4]
 8010172:	4545      	cmp	r5, r8
 8010174:	bf28      	it	cs
 8010176:	4645      	movcs	r5, r8
 8010178:	462a      	mov	r2, r5
 801017a:	210a      	movs	r1, #10
 801017c:	4650      	mov	r0, sl
 801017e:	f7f0 f847 	bl	8000210 <memchr>
 8010182:	6863      	ldr	r3, [r4, #4]
 8010184:	b178      	cbz	r0, 80101a6 <_fgets_r+0x9a>
 8010186:	3001      	adds	r0, #1
 8010188:	eba0 050a 	sub.w	r5, r0, sl
 801018c:	1b5b      	subs	r3, r3, r5
 801018e:	e884 0009 	stmia.w	r4, {r0, r3}
 8010192:	462a      	mov	r2, r5
 8010194:	4651      	mov	r1, sl
 8010196:	4638      	mov	r0, r7
 8010198:	f000 f962 	bl	8010460 <memcpy>
 801019c:	2300      	movs	r3, #0
 801019e:	557b      	strb	r3, [r7, r5]
 80101a0:	4630      	mov	r0, r6
 80101a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101a6:	1b5b      	subs	r3, r3, r5
 80101a8:	6063      	str	r3, [r4, #4]
 80101aa:	6823      	ldr	r3, [r4, #0]
 80101ac:	442b      	add	r3, r5
 80101ae:	4638      	mov	r0, r7
 80101b0:	6023      	str	r3, [r4, #0]
 80101b2:	462a      	mov	r2, r5
 80101b4:	4651      	mov	r1, sl
 80101b6:	f000 f953 	bl	8010460 <memcpy>
 80101ba:	ebb8 0805 	subs.w	r8, r8, r5
 80101be:	442f      	add	r7, r5
 80101c0:	d1bc      	bne.n	801013c <_fgets_r+0x30>
 80101c2:	e7c4      	b.n	801014e <_fgets_r+0x42>
 80101c4:	08015f94 	.word	0x08015f94
 80101c8:	08015fb4 	.word	0x08015fb4
 80101cc:	08015f74 	.word	0x08015f74

080101d0 <fgets>:
 80101d0:	4613      	mov	r3, r2
 80101d2:	460a      	mov	r2, r1
 80101d4:	4601      	mov	r1, r0
 80101d6:	4802      	ldr	r0, [pc, #8]	; (80101e0 <fgets+0x10>)
 80101d8:	6800      	ldr	r0, [r0, #0]
 80101da:	f7ff bf97 	b.w	801010c <_fgets_r>
 80101de:	bf00      	nop
 80101e0:	2000017c 	.word	0x2000017c

080101e4 <_cleanup_r>:
 80101e4:	4901      	ldr	r1, [pc, #4]	; (80101ec <_cleanup_r+0x8>)
 80101e6:	f000 b8c5 	b.w	8010374 <_fwalk_reent>
 80101ea:	bf00      	nop
 80101ec:	08010095 	.word	0x08010095

080101f0 <std.isra.0>:
 80101f0:	2300      	movs	r3, #0
 80101f2:	b510      	push	{r4, lr}
 80101f4:	4604      	mov	r4, r0
 80101f6:	6003      	str	r3, [r0, #0]
 80101f8:	6043      	str	r3, [r0, #4]
 80101fa:	6083      	str	r3, [r0, #8]
 80101fc:	8181      	strh	r1, [r0, #12]
 80101fe:	6643      	str	r3, [r0, #100]	; 0x64
 8010200:	81c2      	strh	r2, [r0, #14]
 8010202:	6103      	str	r3, [r0, #16]
 8010204:	6143      	str	r3, [r0, #20]
 8010206:	6183      	str	r3, [r0, #24]
 8010208:	4619      	mov	r1, r3
 801020a:	2208      	movs	r2, #8
 801020c:	305c      	adds	r0, #92	; 0x5c
 801020e:	f000 f932 	bl	8010476 <memset>
 8010212:	4b05      	ldr	r3, [pc, #20]	; (8010228 <std.isra.0+0x38>)
 8010214:	6263      	str	r3, [r4, #36]	; 0x24
 8010216:	4b05      	ldr	r3, [pc, #20]	; (801022c <std.isra.0+0x3c>)
 8010218:	62a3      	str	r3, [r4, #40]	; 0x28
 801021a:	4b05      	ldr	r3, [pc, #20]	; (8010230 <std.isra.0+0x40>)
 801021c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801021e:	4b05      	ldr	r3, [pc, #20]	; (8010234 <std.isra.0+0x44>)
 8010220:	6224      	str	r4, [r4, #32]
 8010222:	6323      	str	r3, [r4, #48]	; 0x30
 8010224:	bd10      	pop	{r4, pc}
 8010226:	bf00      	nop
 8010228:	080111b9 	.word	0x080111b9
 801022c:	080111db 	.word	0x080111db
 8010230:	08011213 	.word	0x08011213
 8010234:	08011237 	.word	0x08011237

08010238 <__sfmoreglue>:
 8010238:	b570      	push	{r4, r5, r6, lr}
 801023a:	1e4a      	subs	r2, r1, #1
 801023c:	2568      	movs	r5, #104	; 0x68
 801023e:	4355      	muls	r5, r2
 8010240:	460e      	mov	r6, r1
 8010242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010246:	f000 f96d 	bl	8010524 <_malloc_r>
 801024a:	4604      	mov	r4, r0
 801024c:	b140      	cbz	r0, 8010260 <__sfmoreglue+0x28>
 801024e:	2100      	movs	r1, #0
 8010250:	e880 0042 	stmia.w	r0, {r1, r6}
 8010254:	300c      	adds	r0, #12
 8010256:	60a0      	str	r0, [r4, #8]
 8010258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801025c:	f000 f90b 	bl	8010476 <memset>
 8010260:	4620      	mov	r0, r4
 8010262:	bd70      	pop	{r4, r5, r6, pc}

08010264 <__sinit>:
 8010264:	6983      	ldr	r3, [r0, #24]
 8010266:	b510      	push	{r4, lr}
 8010268:	4604      	mov	r4, r0
 801026a:	bb33      	cbnz	r3, 80102ba <__sinit+0x56>
 801026c:	6483      	str	r3, [r0, #72]	; 0x48
 801026e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8010270:	6503      	str	r3, [r0, #80]	; 0x50
 8010272:	4b12      	ldr	r3, [pc, #72]	; (80102bc <__sinit+0x58>)
 8010274:	4a12      	ldr	r2, [pc, #72]	; (80102c0 <__sinit+0x5c>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	6282      	str	r2, [r0, #40]	; 0x28
 801027a:	4298      	cmp	r0, r3
 801027c:	bf04      	itt	eq
 801027e:	2301      	moveq	r3, #1
 8010280:	6183      	streq	r3, [r0, #24]
 8010282:	f000 f81f 	bl	80102c4 <__sfp>
 8010286:	6060      	str	r0, [r4, #4]
 8010288:	4620      	mov	r0, r4
 801028a:	f000 f81b 	bl	80102c4 <__sfp>
 801028e:	60a0      	str	r0, [r4, #8]
 8010290:	4620      	mov	r0, r4
 8010292:	f000 f817 	bl	80102c4 <__sfp>
 8010296:	2200      	movs	r2, #0
 8010298:	60e0      	str	r0, [r4, #12]
 801029a:	2104      	movs	r1, #4
 801029c:	6860      	ldr	r0, [r4, #4]
 801029e:	f7ff ffa7 	bl	80101f0 <std.isra.0>
 80102a2:	2201      	movs	r2, #1
 80102a4:	2109      	movs	r1, #9
 80102a6:	68a0      	ldr	r0, [r4, #8]
 80102a8:	f7ff ffa2 	bl	80101f0 <std.isra.0>
 80102ac:	2202      	movs	r2, #2
 80102ae:	2112      	movs	r1, #18
 80102b0:	68e0      	ldr	r0, [r4, #12]
 80102b2:	f7ff ff9d 	bl	80101f0 <std.isra.0>
 80102b6:	2301      	movs	r3, #1
 80102b8:	61a3      	str	r3, [r4, #24]
 80102ba:	bd10      	pop	{r4, pc}
 80102bc:	08015fd4 	.word	0x08015fd4
 80102c0:	080101e5 	.word	0x080101e5

080102c4 <__sfp>:
 80102c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102c6:	4b1c      	ldr	r3, [pc, #112]	; (8010338 <__sfp+0x74>)
 80102c8:	681e      	ldr	r6, [r3, #0]
 80102ca:	69b3      	ldr	r3, [r6, #24]
 80102cc:	4607      	mov	r7, r0
 80102ce:	b913      	cbnz	r3, 80102d6 <__sfp+0x12>
 80102d0:	4630      	mov	r0, r6
 80102d2:	f7ff ffc7 	bl	8010264 <__sinit>
 80102d6:	3648      	adds	r6, #72	; 0x48
 80102d8:	68b4      	ldr	r4, [r6, #8]
 80102da:	6873      	ldr	r3, [r6, #4]
 80102dc:	3b01      	subs	r3, #1
 80102de:	d503      	bpl.n	80102e8 <__sfp+0x24>
 80102e0:	6833      	ldr	r3, [r6, #0]
 80102e2:	b133      	cbz	r3, 80102f2 <__sfp+0x2e>
 80102e4:	6836      	ldr	r6, [r6, #0]
 80102e6:	e7f7      	b.n	80102d8 <__sfp+0x14>
 80102e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80102ec:	b16d      	cbz	r5, 801030a <__sfp+0x46>
 80102ee:	3468      	adds	r4, #104	; 0x68
 80102f0:	e7f4      	b.n	80102dc <__sfp+0x18>
 80102f2:	2104      	movs	r1, #4
 80102f4:	4638      	mov	r0, r7
 80102f6:	f7ff ff9f 	bl	8010238 <__sfmoreglue>
 80102fa:	6030      	str	r0, [r6, #0]
 80102fc:	2800      	cmp	r0, #0
 80102fe:	d1f1      	bne.n	80102e4 <__sfp+0x20>
 8010300:	230c      	movs	r3, #12
 8010302:	603b      	str	r3, [r7, #0]
 8010304:	4604      	mov	r4, r0
 8010306:	4620      	mov	r0, r4
 8010308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801030a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801030e:	81e3      	strh	r3, [r4, #14]
 8010310:	2301      	movs	r3, #1
 8010312:	81a3      	strh	r3, [r4, #12]
 8010314:	6665      	str	r5, [r4, #100]	; 0x64
 8010316:	6025      	str	r5, [r4, #0]
 8010318:	60a5      	str	r5, [r4, #8]
 801031a:	6065      	str	r5, [r4, #4]
 801031c:	6125      	str	r5, [r4, #16]
 801031e:	6165      	str	r5, [r4, #20]
 8010320:	61a5      	str	r5, [r4, #24]
 8010322:	2208      	movs	r2, #8
 8010324:	4629      	mov	r1, r5
 8010326:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801032a:	f000 f8a4 	bl	8010476 <memset>
 801032e:	6365      	str	r5, [r4, #52]	; 0x34
 8010330:	63a5      	str	r5, [r4, #56]	; 0x38
 8010332:	64a5      	str	r5, [r4, #72]	; 0x48
 8010334:	64e5      	str	r5, [r4, #76]	; 0x4c
 8010336:	e7e6      	b.n	8010306 <__sfp+0x42>
 8010338:	08015fd4 	.word	0x08015fd4

0801033c <_fwalk>:
 801033c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010340:	4688      	mov	r8, r1
 8010342:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010346:	2600      	movs	r6, #0
 8010348:	b914      	cbnz	r4, 8010350 <_fwalk+0x14>
 801034a:	4630      	mov	r0, r6
 801034c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010350:	68a5      	ldr	r5, [r4, #8]
 8010352:	6867      	ldr	r7, [r4, #4]
 8010354:	3f01      	subs	r7, #1
 8010356:	d501      	bpl.n	801035c <_fwalk+0x20>
 8010358:	6824      	ldr	r4, [r4, #0]
 801035a:	e7f5      	b.n	8010348 <_fwalk+0xc>
 801035c:	89ab      	ldrh	r3, [r5, #12]
 801035e:	2b01      	cmp	r3, #1
 8010360:	d906      	bls.n	8010370 <_fwalk+0x34>
 8010362:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010366:	3301      	adds	r3, #1
 8010368:	d002      	beq.n	8010370 <_fwalk+0x34>
 801036a:	4628      	mov	r0, r5
 801036c:	47c0      	blx	r8
 801036e:	4306      	orrs	r6, r0
 8010370:	3568      	adds	r5, #104	; 0x68
 8010372:	e7ef      	b.n	8010354 <_fwalk+0x18>

08010374 <_fwalk_reent>:
 8010374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010378:	4680      	mov	r8, r0
 801037a:	4689      	mov	r9, r1
 801037c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010380:	2600      	movs	r6, #0
 8010382:	b914      	cbnz	r4, 801038a <_fwalk_reent+0x16>
 8010384:	4630      	mov	r0, r6
 8010386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801038a:	68a5      	ldr	r5, [r4, #8]
 801038c:	6867      	ldr	r7, [r4, #4]
 801038e:	3f01      	subs	r7, #1
 8010390:	d501      	bpl.n	8010396 <_fwalk_reent+0x22>
 8010392:	6824      	ldr	r4, [r4, #0]
 8010394:	e7f5      	b.n	8010382 <_fwalk_reent+0xe>
 8010396:	89ab      	ldrh	r3, [r5, #12]
 8010398:	2b01      	cmp	r3, #1
 801039a:	d907      	bls.n	80103ac <_fwalk_reent+0x38>
 801039c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103a0:	3301      	adds	r3, #1
 80103a2:	d003      	beq.n	80103ac <_fwalk_reent+0x38>
 80103a4:	4629      	mov	r1, r5
 80103a6:	4640      	mov	r0, r8
 80103a8:	47c8      	blx	r9
 80103aa:	4306      	orrs	r6, r0
 80103ac:	3568      	adds	r5, #104	; 0x68
 80103ae:	e7ee      	b.n	801038e <_fwalk_reent+0x1a>

080103b0 <__libc_init_array>:
 80103b0:	b570      	push	{r4, r5, r6, lr}
 80103b2:	4e0d      	ldr	r6, [pc, #52]	; (80103e8 <__libc_init_array+0x38>)
 80103b4:	4c0d      	ldr	r4, [pc, #52]	; (80103ec <__libc_init_array+0x3c>)
 80103b6:	1ba4      	subs	r4, r4, r6
 80103b8:	10a4      	asrs	r4, r4, #2
 80103ba:	2500      	movs	r5, #0
 80103bc:	42a5      	cmp	r5, r4
 80103be:	d109      	bne.n	80103d4 <__libc_init_array+0x24>
 80103c0:	4e0b      	ldr	r6, [pc, #44]	; (80103f0 <__libc_init_array+0x40>)
 80103c2:	4c0c      	ldr	r4, [pc, #48]	; (80103f4 <__libc_init_array+0x44>)
 80103c4:	f002 fdda 	bl	8012f7c <_init>
 80103c8:	1ba4      	subs	r4, r4, r6
 80103ca:	10a4      	asrs	r4, r4, #2
 80103cc:	2500      	movs	r5, #0
 80103ce:	42a5      	cmp	r5, r4
 80103d0:	d105      	bne.n	80103de <__libc_init_array+0x2e>
 80103d2:	bd70      	pop	{r4, r5, r6, pc}
 80103d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80103d8:	4798      	blx	r3
 80103da:	3501      	adds	r5, #1
 80103dc:	e7ee      	b.n	80103bc <__libc_init_array+0xc>
 80103de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80103e2:	4798      	blx	r3
 80103e4:	3501      	adds	r5, #1
 80103e6:	e7f2      	b.n	80103ce <__libc_init_array+0x1e>
 80103e8:	08016240 	.word	0x08016240
 80103ec:	08016240 	.word	0x08016240
 80103f0:	08016240 	.word	0x08016240
 80103f4:	08016244 	.word	0x08016244

080103f8 <__locale_ctype_ptr_l>:
 80103f8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80103fc:	4770      	bx	lr
	...

08010400 <__locale_ctype_ptr>:
 8010400:	4b04      	ldr	r3, [pc, #16]	; (8010414 <__locale_ctype_ptr+0x14>)
 8010402:	4a05      	ldr	r2, [pc, #20]	; (8010418 <__locale_ctype_ptr+0x18>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	6a1b      	ldr	r3, [r3, #32]
 8010408:	2b00      	cmp	r3, #0
 801040a:	bf08      	it	eq
 801040c:	4613      	moveq	r3, r2
 801040e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8010412:	4770      	bx	lr
 8010414:	2000017c 	.word	0x2000017c
 8010418:	200001e0 	.word	0x200001e0

0801041c <malloc>:
 801041c:	4b02      	ldr	r3, [pc, #8]	; (8010428 <malloc+0xc>)
 801041e:	4601      	mov	r1, r0
 8010420:	6818      	ldr	r0, [r3, #0]
 8010422:	f000 b87f 	b.w	8010524 <_malloc_r>
 8010426:	bf00      	nop
 8010428:	2000017c 	.word	0x2000017c

0801042c <free>:
 801042c:	4b02      	ldr	r3, [pc, #8]	; (8010438 <free+0xc>)
 801042e:	4601      	mov	r1, r0
 8010430:	6818      	ldr	r0, [r3, #0]
 8010432:	f000 b829 	b.w	8010488 <_free_r>
 8010436:	bf00      	nop
 8010438:	2000017c 	.word	0x2000017c

0801043c <__ascii_mbtowc>:
 801043c:	b082      	sub	sp, #8
 801043e:	b901      	cbnz	r1, 8010442 <__ascii_mbtowc+0x6>
 8010440:	a901      	add	r1, sp, #4
 8010442:	b142      	cbz	r2, 8010456 <__ascii_mbtowc+0x1a>
 8010444:	b14b      	cbz	r3, 801045a <__ascii_mbtowc+0x1e>
 8010446:	7813      	ldrb	r3, [r2, #0]
 8010448:	600b      	str	r3, [r1, #0]
 801044a:	7812      	ldrb	r2, [r2, #0]
 801044c:	1c10      	adds	r0, r2, #0
 801044e:	bf18      	it	ne
 8010450:	2001      	movne	r0, #1
 8010452:	b002      	add	sp, #8
 8010454:	4770      	bx	lr
 8010456:	4610      	mov	r0, r2
 8010458:	e7fb      	b.n	8010452 <__ascii_mbtowc+0x16>
 801045a:	f06f 0001 	mvn.w	r0, #1
 801045e:	e7f8      	b.n	8010452 <__ascii_mbtowc+0x16>

08010460 <memcpy>:
 8010460:	b510      	push	{r4, lr}
 8010462:	1e43      	subs	r3, r0, #1
 8010464:	440a      	add	r2, r1
 8010466:	4291      	cmp	r1, r2
 8010468:	d100      	bne.n	801046c <memcpy+0xc>
 801046a:	bd10      	pop	{r4, pc}
 801046c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010474:	e7f7      	b.n	8010466 <memcpy+0x6>

08010476 <memset>:
 8010476:	4402      	add	r2, r0
 8010478:	4603      	mov	r3, r0
 801047a:	4293      	cmp	r3, r2
 801047c:	d100      	bne.n	8010480 <memset+0xa>
 801047e:	4770      	bx	lr
 8010480:	f803 1b01 	strb.w	r1, [r3], #1
 8010484:	e7f9      	b.n	801047a <memset+0x4>
	...

08010488 <_free_r>:
 8010488:	b538      	push	{r3, r4, r5, lr}
 801048a:	4605      	mov	r5, r0
 801048c:	2900      	cmp	r1, #0
 801048e:	d045      	beq.n	801051c <_free_r+0x94>
 8010490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010494:	1f0c      	subs	r4, r1, #4
 8010496:	2b00      	cmp	r3, #0
 8010498:	bfb8      	it	lt
 801049a:	18e4      	addlt	r4, r4, r3
 801049c:	f001 ff52 	bl	8012344 <__malloc_lock>
 80104a0:	4a1f      	ldr	r2, [pc, #124]	; (8010520 <_free_r+0x98>)
 80104a2:	6813      	ldr	r3, [r2, #0]
 80104a4:	4610      	mov	r0, r2
 80104a6:	b933      	cbnz	r3, 80104b6 <_free_r+0x2e>
 80104a8:	6063      	str	r3, [r4, #4]
 80104aa:	6014      	str	r4, [r2, #0]
 80104ac:	4628      	mov	r0, r5
 80104ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104b2:	f001 bf48 	b.w	8012346 <__malloc_unlock>
 80104b6:	42a3      	cmp	r3, r4
 80104b8:	d90c      	bls.n	80104d4 <_free_r+0x4c>
 80104ba:	6821      	ldr	r1, [r4, #0]
 80104bc:	1862      	adds	r2, r4, r1
 80104be:	4293      	cmp	r3, r2
 80104c0:	bf04      	itt	eq
 80104c2:	681a      	ldreq	r2, [r3, #0]
 80104c4:	685b      	ldreq	r3, [r3, #4]
 80104c6:	6063      	str	r3, [r4, #4]
 80104c8:	bf04      	itt	eq
 80104ca:	1852      	addeq	r2, r2, r1
 80104cc:	6022      	streq	r2, [r4, #0]
 80104ce:	6004      	str	r4, [r0, #0]
 80104d0:	e7ec      	b.n	80104ac <_free_r+0x24>
 80104d2:	4613      	mov	r3, r2
 80104d4:	685a      	ldr	r2, [r3, #4]
 80104d6:	b10a      	cbz	r2, 80104dc <_free_r+0x54>
 80104d8:	42a2      	cmp	r2, r4
 80104da:	d9fa      	bls.n	80104d2 <_free_r+0x4a>
 80104dc:	6819      	ldr	r1, [r3, #0]
 80104de:	1858      	adds	r0, r3, r1
 80104e0:	42a0      	cmp	r0, r4
 80104e2:	d10b      	bne.n	80104fc <_free_r+0x74>
 80104e4:	6820      	ldr	r0, [r4, #0]
 80104e6:	4401      	add	r1, r0
 80104e8:	1858      	adds	r0, r3, r1
 80104ea:	4282      	cmp	r2, r0
 80104ec:	6019      	str	r1, [r3, #0]
 80104ee:	d1dd      	bne.n	80104ac <_free_r+0x24>
 80104f0:	6810      	ldr	r0, [r2, #0]
 80104f2:	6852      	ldr	r2, [r2, #4]
 80104f4:	605a      	str	r2, [r3, #4]
 80104f6:	4401      	add	r1, r0
 80104f8:	6019      	str	r1, [r3, #0]
 80104fa:	e7d7      	b.n	80104ac <_free_r+0x24>
 80104fc:	d902      	bls.n	8010504 <_free_r+0x7c>
 80104fe:	230c      	movs	r3, #12
 8010500:	602b      	str	r3, [r5, #0]
 8010502:	e7d3      	b.n	80104ac <_free_r+0x24>
 8010504:	6820      	ldr	r0, [r4, #0]
 8010506:	1821      	adds	r1, r4, r0
 8010508:	428a      	cmp	r2, r1
 801050a:	bf04      	itt	eq
 801050c:	6811      	ldreq	r1, [r2, #0]
 801050e:	6852      	ldreq	r2, [r2, #4]
 8010510:	6062      	str	r2, [r4, #4]
 8010512:	bf04      	itt	eq
 8010514:	1809      	addeq	r1, r1, r0
 8010516:	6021      	streq	r1, [r4, #0]
 8010518:	605c      	str	r4, [r3, #4]
 801051a:	e7c7      	b.n	80104ac <_free_r+0x24>
 801051c:	bd38      	pop	{r3, r4, r5, pc}
 801051e:	bf00      	nop
 8010520:	200004a4 	.word	0x200004a4

08010524 <_malloc_r>:
 8010524:	b570      	push	{r4, r5, r6, lr}
 8010526:	1ccd      	adds	r5, r1, #3
 8010528:	f025 0503 	bic.w	r5, r5, #3
 801052c:	3508      	adds	r5, #8
 801052e:	2d0c      	cmp	r5, #12
 8010530:	bf38      	it	cc
 8010532:	250c      	movcc	r5, #12
 8010534:	2d00      	cmp	r5, #0
 8010536:	4606      	mov	r6, r0
 8010538:	db01      	blt.n	801053e <_malloc_r+0x1a>
 801053a:	42a9      	cmp	r1, r5
 801053c:	d903      	bls.n	8010546 <_malloc_r+0x22>
 801053e:	230c      	movs	r3, #12
 8010540:	6033      	str	r3, [r6, #0]
 8010542:	2000      	movs	r0, #0
 8010544:	bd70      	pop	{r4, r5, r6, pc}
 8010546:	f001 fefd 	bl	8012344 <__malloc_lock>
 801054a:	4a23      	ldr	r2, [pc, #140]	; (80105d8 <_malloc_r+0xb4>)
 801054c:	6814      	ldr	r4, [r2, #0]
 801054e:	4621      	mov	r1, r4
 8010550:	b991      	cbnz	r1, 8010578 <_malloc_r+0x54>
 8010552:	4c22      	ldr	r4, [pc, #136]	; (80105dc <_malloc_r+0xb8>)
 8010554:	6823      	ldr	r3, [r4, #0]
 8010556:	b91b      	cbnz	r3, 8010560 <_malloc_r+0x3c>
 8010558:	4630      	mov	r0, r6
 801055a:	f000 fdc5 	bl	80110e8 <_sbrk_r>
 801055e:	6020      	str	r0, [r4, #0]
 8010560:	4629      	mov	r1, r5
 8010562:	4630      	mov	r0, r6
 8010564:	f000 fdc0 	bl	80110e8 <_sbrk_r>
 8010568:	1c43      	adds	r3, r0, #1
 801056a:	d126      	bne.n	80105ba <_malloc_r+0x96>
 801056c:	230c      	movs	r3, #12
 801056e:	6033      	str	r3, [r6, #0]
 8010570:	4630      	mov	r0, r6
 8010572:	f001 fee8 	bl	8012346 <__malloc_unlock>
 8010576:	e7e4      	b.n	8010542 <_malloc_r+0x1e>
 8010578:	680b      	ldr	r3, [r1, #0]
 801057a:	1b5b      	subs	r3, r3, r5
 801057c:	d41a      	bmi.n	80105b4 <_malloc_r+0x90>
 801057e:	2b0b      	cmp	r3, #11
 8010580:	d90f      	bls.n	80105a2 <_malloc_r+0x7e>
 8010582:	600b      	str	r3, [r1, #0]
 8010584:	50cd      	str	r5, [r1, r3]
 8010586:	18cc      	adds	r4, r1, r3
 8010588:	4630      	mov	r0, r6
 801058a:	f001 fedc 	bl	8012346 <__malloc_unlock>
 801058e:	f104 000b 	add.w	r0, r4, #11
 8010592:	1d23      	adds	r3, r4, #4
 8010594:	f020 0007 	bic.w	r0, r0, #7
 8010598:	1ac3      	subs	r3, r0, r3
 801059a:	d01b      	beq.n	80105d4 <_malloc_r+0xb0>
 801059c:	425a      	negs	r2, r3
 801059e:	50e2      	str	r2, [r4, r3]
 80105a0:	bd70      	pop	{r4, r5, r6, pc}
 80105a2:	428c      	cmp	r4, r1
 80105a4:	bf0d      	iteet	eq
 80105a6:	6863      	ldreq	r3, [r4, #4]
 80105a8:	684b      	ldrne	r3, [r1, #4]
 80105aa:	6063      	strne	r3, [r4, #4]
 80105ac:	6013      	streq	r3, [r2, #0]
 80105ae:	bf18      	it	ne
 80105b0:	460c      	movne	r4, r1
 80105b2:	e7e9      	b.n	8010588 <_malloc_r+0x64>
 80105b4:	460c      	mov	r4, r1
 80105b6:	6849      	ldr	r1, [r1, #4]
 80105b8:	e7ca      	b.n	8010550 <_malloc_r+0x2c>
 80105ba:	1cc4      	adds	r4, r0, #3
 80105bc:	f024 0403 	bic.w	r4, r4, #3
 80105c0:	42a0      	cmp	r0, r4
 80105c2:	d005      	beq.n	80105d0 <_malloc_r+0xac>
 80105c4:	1a21      	subs	r1, r4, r0
 80105c6:	4630      	mov	r0, r6
 80105c8:	f000 fd8e 	bl	80110e8 <_sbrk_r>
 80105cc:	3001      	adds	r0, #1
 80105ce:	d0cd      	beq.n	801056c <_malloc_r+0x48>
 80105d0:	6025      	str	r5, [r4, #0]
 80105d2:	e7d9      	b.n	8010588 <_malloc_r+0x64>
 80105d4:	bd70      	pop	{r4, r5, r6, pc}
 80105d6:	bf00      	nop
 80105d8:	200004a4 	.word	0x200004a4
 80105dc:	200004a8 	.word	0x200004a8

080105e0 <__cvt>:
 80105e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105e4:	ec55 4b10 	vmov	r4, r5, d0
 80105e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80105ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80105ee:	2d00      	cmp	r5, #0
 80105f0:	460e      	mov	r6, r1
 80105f2:	4691      	mov	r9, r2
 80105f4:	4619      	mov	r1, r3
 80105f6:	bfb8      	it	lt
 80105f8:	4622      	movlt	r2, r4
 80105fa:	462b      	mov	r3, r5
 80105fc:	f027 0720 	bic.w	r7, r7, #32
 8010600:	bfbb      	ittet	lt
 8010602:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010606:	461d      	movlt	r5, r3
 8010608:	2300      	movge	r3, #0
 801060a:	232d      	movlt	r3, #45	; 0x2d
 801060c:	bfb8      	it	lt
 801060e:	4614      	movlt	r4, r2
 8010610:	2f46      	cmp	r7, #70	; 0x46
 8010612:	700b      	strb	r3, [r1, #0]
 8010614:	d004      	beq.n	8010620 <__cvt+0x40>
 8010616:	2f45      	cmp	r7, #69	; 0x45
 8010618:	d100      	bne.n	801061c <__cvt+0x3c>
 801061a:	3601      	adds	r6, #1
 801061c:	2102      	movs	r1, #2
 801061e:	e000      	b.n	8010622 <__cvt+0x42>
 8010620:	2103      	movs	r1, #3
 8010622:	ab03      	add	r3, sp, #12
 8010624:	9301      	str	r3, [sp, #4]
 8010626:	ab02      	add	r3, sp, #8
 8010628:	9300      	str	r3, [sp, #0]
 801062a:	4632      	mov	r2, r6
 801062c:	4653      	mov	r3, sl
 801062e:	ec45 4b10 	vmov	d0, r4, r5
 8010632:	f001 f835 	bl	80116a0 <_dtoa_r>
 8010636:	2f47      	cmp	r7, #71	; 0x47
 8010638:	4680      	mov	r8, r0
 801063a:	d102      	bne.n	8010642 <__cvt+0x62>
 801063c:	f019 0f01 	tst.w	r9, #1
 8010640:	d026      	beq.n	8010690 <__cvt+0xb0>
 8010642:	2f46      	cmp	r7, #70	; 0x46
 8010644:	eb08 0906 	add.w	r9, r8, r6
 8010648:	d111      	bne.n	801066e <__cvt+0x8e>
 801064a:	f898 3000 	ldrb.w	r3, [r8]
 801064e:	2b30      	cmp	r3, #48	; 0x30
 8010650:	d10a      	bne.n	8010668 <__cvt+0x88>
 8010652:	2200      	movs	r2, #0
 8010654:	2300      	movs	r3, #0
 8010656:	4620      	mov	r0, r4
 8010658:	4629      	mov	r1, r5
 801065a:	f7f0 fa5b 	bl	8000b14 <__aeabi_dcmpeq>
 801065e:	b918      	cbnz	r0, 8010668 <__cvt+0x88>
 8010660:	f1c6 0601 	rsb	r6, r6, #1
 8010664:	f8ca 6000 	str.w	r6, [sl]
 8010668:	f8da 3000 	ldr.w	r3, [sl]
 801066c:	4499      	add	r9, r3
 801066e:	2200      	movs	r2, #0
 8010670:	2300      	movs	r3, #0
 8010672:	4620      	mov	r0, r4
 8010674:	4629      	mov	r1, r5
 8010676:	f7f0 fa4d 	bl	8000b14 <__aeabi_dcmpeq>
 801067a:	b938      	cbnz	r0, 801068c <__cvt+0xac>
 801067c:	2230      	movs	r2, #48	; 0x30
 801067e:	9b03      	ldr	r3, [sp, #12]
 8010680:	4599      	cmp	r9, r3
 8010682:	d905      	bls.n	8010690 <__cvt+0xb0>
 8010684:	1c59      	adds	r1, r3, #1
 8010686:	9103      	str	r1, [sp, #12]
 8010688:	701a      	strb	r2, [r3, #0]
 801068a:	e7f8      	b.n	801067e <__cvt+0x9e>
 801068c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010690:	9b03      	ldr	r3, [sp, #12]
 8010692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010694:	eba3 0308 	sub.w	r3, r3, r8
 8010698:	4640      	mov	r0, r8
 801069a:	6013      	str	r3, [r2, #0]
 801069c:	b004      	add	sp, #16
 801069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080106a2 <__exponent>:
 80106a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80106a4:	4603      	mov	r3, r0
 80106a6:	2900      	cmp	r1, #0
 80106a8:	bfb8      	it	lt
 80106aa:	4249      	neglt	r1, r1
 80106ac:	f803 2b02 	strb.w	r2, [r3], #2
 80106b0:	bfb4      	ite	lt
 80106b2:	222d      	movlt	r2, #45	; 0x2d
 80106b4:	222b      	movge	r2, #43	; 0x2b
 80106b6:	2909      	cmp	r1, #9
 80106b8:	7042      	strb	r2, [r0, #1]
 80106ba:	dd20      	ble.n	80106fe <__exponent+0x5c>
 80106bc:	f10d 0207 	add.w	r2, sp, #7
 80106c0:	4617      	mov	r7, r2
 80106c2:	260a      	movs	r6, #10
 80106c4:	fb91 f5f6 	sdiv	r5, r1, r6
 80106c8:	fb06 1115 	mls	r1, r6, r5, r1
 80106cc:	3130      	adds	r1, #48	; 0x30
 80106ce:	2d09      	cmp	r5, #9
 80106d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80106d4:	f102 34ff 	add.w	r4, r2, #4294967295
 80106d8:	4629      	mov	r1, r5
 80106da:	dc09      	bgt.n	80106f0 <__exponent+0x4e>
 80106dc:	3130      	adds	r1, #48	; 0x30
 80106de:	3a02      	subs	r2, #2
 80106e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80106e4:	42ba      	cmp	r2, r7
 80106e6:	461c      	mov	r4, r3
 80106e8:	d304      	bcc.n	80106f4 <__exponent+0x52>
 80106ea:	1a20      	subs	r0, r4, r0
 80106ec:	b003      	add	sp, #12
 80106ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106f0:	4622      	mov	r2, r4
 80106f2:	e7e7      	b.n	80106c4 <__exponent+0x22>
 80106f4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80106f8:	f803 1b01 	strb.w	r1, [r3], #1
 80106fc:	e7f2      	b.n	80106e4 <__exponent+0x42>
 80106fe:	2230      	movs	r2, #48	; 0x30
 8010700:	461c      	mov	r4, r3
 8010702:	4411      	add	r1, r2
 8010704:	f804 2b02 	strb.w	r2, [r4], #2
 8010708:	7059      	strb	r1, [r3, #1]
 801070a:	e7ee      	b.n	80106ea <__exponent+0x48>

0801070c <_printf_float>:
 801070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010710:	b08d      	sub	sp, #52	; 0x34
 8010712:	460c      	mov	r4, r1
 8010714:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010718:	4616      	mov	r6, r2
 801071a:	461f      	mov	r7, r3
 801071c:	4605      	mov	r5, r0
 801071e:	f001 fd8d 	bl	801223c <_localeconv_r>
 8010722:	6803      	ldr	r3, [r0, #0]
 8010724:	9304      	str	r3, [sp, #16]
 8010726:	4618      	mov	r0, r3
 8010728:	f7ef fdcc 	bl	80002c4 <strlen>
 801072c:	2300      	movs	r3, #0
 801072e:	930a      	str	r3, [sp, #40]	; 0x28
 8010730:	f8d8 3000 	ldr.w	r3, [r8]
 8010734:	9005      	str	r0, [sp, #20]
 8010736:	3307      	adds	r3, #7
 8010738:	f023 0307 	bic.w	r3, r3, #7
 801073c:	f103 0208 	add.w	r2, r3, #8
 8010740:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010744:	f8d4 b000 	ldr.w	fp, [r4]
 8010748:	f8c8 2000 	str.w	r2, [r8]
 801074c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010750:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010754:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010758:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801075c:	9307      	str	r3, [sp, #28]
 801075e:	f8cd 8018 	str.w	r8, [sp, #24]
 8010762:	f04f 32ff 	mov.w	r2, #4294967295
 8010766:	4ba5      	ldr	r3, [pc, #660]	; (80109fc <_printf_float+0x2f0>)
 8010768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801076c:	f7f0 fa04 	bl	8000b78 <__aeabi_dcmpun>
 8010770:	2800      	cmp	r0, #0
 8010772:	f040 81fb 	bne.w	8010b6c <_printf_float+0x460>
 8010776:	f04f 32ff 	mov.w	r2, #4294967295
 801077a:	4ba0      	ldr	r3, [pc, #640]	; (80109fc <_printf_float+0x2f0>)
 801077c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010780:	f7f0 f9dc 	bl	8000b3c <__aeabi_dcmple>
 8010784:	2800      	cmp	r0, #0
 8010786:	f040 81f1 	bne.w	8010b6c <_printf_float+0x460>
 801078a:	2200      	movs	r2, #0
 801078c:	2300      	movs	r3, #0
 801078e:	4640      	mov	r0, r8
 8010790:	4649      	mov	r1, r9
 8010792:	f7f0 f9c9 	bl	8000b28 <__aeabi_dcmplt>
 8010796:	b110      	cbz	r0, 801079e <_printf_float+0x92>
 8010798:	232d      	movs	r3, #45	; 0x2d
 801079a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801079e:	4b98      	ldr	r3, [pc, #608]	; (8010a00 <_printf_float+0x2f4>)
 80107a0:	4a98      	ldr	r2, [pc, #608]	; (8010a04 <_printf_float+0x2f8>)
 80107a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80107a6:	bf8c      	ite	hi
 80107a8:	4690      	movhi	r8, r2
 80107aa:	4698      	movls	r8, r3
 80107ac:	2303      	movs	r3, #3
 80107ae:	f02b 0204 	bic.w	r2, fp, #4
 80107b2:	6123      	str	r3, [r4, #16]
 80107b4:	6022      	str	r2, [r4, #0]
 80107b6:	f04f 0900 	mov.w	r9, #0
 80107ba:	9700      	str	r7, [sp, #0]
 80107bc:	4633      	mov	r3, r6
 80107be:	aa0b      	add	r2, sp, #44	; 0x2c
 80107c0:	4621      	mov	r1, r4
 80107c2:	4628      	mov	r0, r5
 80107c4:	f000 f9e2 	bl	8010b8c <_printf_common>
 80107c8:	3001      	adds	r0, #1
 80107ca:	f040 8093 	bne.w	80108f4 <_printf_float+0x1e8>
 80107ce:	f04f 30ff 	mov.w	r0, #4294967295
 80107d2:	b00d      	add	sp, #52	; 0x34
 80107d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107d8:	6861      	ldr	r1, [r4, #4]
 80107da:	1c4b      	adds	r3, r1, #1
 80107dc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80107e0:	d13f      	bne.n	8010862 <_printf_float+0x156>
 80107e2:	2306      	movs	r3, #6
 80107e4:	6063      	str	r3, [r4, #4]
 80107e6:	2300      	movs	r3, #0
 80107e8:	9303      	str	r3, [sp, #12]
 80107ea:	ab0a      	add	r3, sp, #40	; 0x28
 80107ec:	9302      	str	r3, [sp, #8]
 80107ee:	ab09      	add	r3, sp, #36	; 0x24
 80107f0:	9300      	str	r3, [sp, #0]
 80107f2:	ec49 8b10 	vmov	d0, r8, r9
 80107f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80107fa:	6022      	str	r2, [r4, #0]
 80107fc:	f8cd a004 	str.w	sl, [sp, #4]
 8010800:	6861      	ldr	r1, [r4, #4]
 8010802:	4628      	mov	r0, r5
 8010804:	f7ff feec 	bl	80105e0 <__cvt>
 8010808:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801080c:	2b47      	cmp	r3, #71	; 0x47
 801080e:	4680      	mov	r8, r0
 8010810:	d109      	bne.n	8010826 <_printf_float+0x11a>
 8010812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010814:	1cd8      	adds	r0, r3, #3
 8010816:	db02      	blt.n	801081e <_printf_float+0x112>
 8010818:	6862      	ldr	r2, [r4, #4]
 801081a:	4293      	cmp	r3, r2
 801081c:	dd57      	ble.n	80108ce <_printf_float+0x1c2>
 801081e:	f1aa 0a02 	sub.w	sl, sl, #2
 8010822:	fa5f fa8a 	uxtb.w	sl, sl
 8010826:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801082a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801082c:	d834      	bhi.n	8010898 <_printf_float+0x18c>
 801082e:	3901      	subs	r1, #1
 8010830:	4652      	mov	r2, sl
 8010832:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010836:	9109      	str	r1, [sp, #36]	; 0x24
 8010838:	f7ff ff33 	bl	80106a2 <__exponent>
 801083c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801083e:	1883      	adds	r3, r0, r2
 8010840:	2a01      	cmp	r2, #1
 8010842:	4681      	mov	r9, r0
 8010844:	6123      	str	r3, [r4, #16]
 8010846:	dc02      	bgt.n	801084e <_printf_float+0x142>
 8010848:	6822      	ldr	r2, [r4, #0]
 801084a:	07d1      	lsls	r1, r2, #31
 801084c:	d501      	bpl.n	8010852 <_printf_float+0x146>
 801084e:	3301      	adds	r3, #1
 8010850:	6123      	str	r3, [r4, #16]
 8010852:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010856:	2b00      	cmp	r3, #0
 8010858:	d0af      	beq.n	80107ba <_printf_float+0xae>
 801085a:	232d      	movs	r3, #45	; 0x2d
 801085c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010860:	e7ab      	b.n	80107ba <_printf_float+0xae>
 8010862:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010866:	d002      	beq.n	801086e <_printf_float+0x162>
 8010868:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801086c:	d1bb      	bne.n	80107e6 <_printf_float+0xda>
 801086e:	b189      	cbz	r1, 8010894 <_printf_float+0x188>
 8010870:	2300      	movs	r3, #0
 8010872:	9303      	str	r3, [sp, #12]
 8010874:	ab0a      	add	r3, sp, #40	; 0x28
 8010876:	9302      	str	r3, [sp, #8]
 8010878:	ab09      	add	r3, sp, #36	; 0x24
 801087a:	9300      	str	r3, [sp, #0]
 801087c:	ec49 8b10 	vmov	d0, r8, r9
 8010880:	6022      	str	r2, [r4, #0]
 8010882:	f8cd a004 	str.w	sl, [sp, #4]
 8010886:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801088a:	4628      	mov	r0, r5
 801088c:	f7ff fea8 	bl	80105e0 <__cvt>
 8010890:	4680      	mov	r8, r0
 8010892:	e7be      	b.n	8010812 <_printf_float+0x106>
 8010894:	2301      	movs	r3, #1
 8010896:	e7a5      	b.n	80107e4 <_printf_float+0xd8>
 8010898:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801089c:	d119      	bne.n	80108d2 <_printf_float+0x1c6>
 801089e:	2900      	cmp	r1, #0
 80108a0:	6863      	ldr	r3, [r4, #4]
 80108a2:	dd0c      	ble.n	80108be <_printf_float+0x1b2>
 80108a4:	6121      	str	r1, [r4, #16]
 80108a6:	b913      	cbnz	r3, 80108ae <_printf_float+0x1a2>
 80108a8:	6822      	ldr	r2, [r4, #0]
 80108aa:	07d2      	lsls	r2, r2, #31
 80108ac:	d502      	bpl.n	80108b4 <_printf_float+0x1a8>
 80108ae:	3301      	adds	r3, #1
 80108b0:	440b      	add	r3, r1
 80108b2:	6123      	str	r3, [r4, #16]
 80108b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80108b8:	f04f 0900 	mov.w	r9, #0
 80108bc:	e7c9      	b.n	8010852 <_printf_float+0x146>
 80108be:	b913      	cbnz	r3, 80108c6 <_printf_float+0x1ba>
 80108c0:	6822      	ldr	r2, [r4, #0]
 80108c2:	07d0      	lsls	r0, r2, #31
 80108c4:	d501      	bpl.n	80108ca <_printf_float+0x1be>
 80108c6:	3302      	adds	r3, #2
 80108c8:	e7f3      	b.n	80108b2 <_printf_float+0x1a6>
 80108ca:	2301      	movs	r3, #1
 80108cc:	e7f1      	b.n	80108b2 <_printf_float+0x1a6>
 80108ce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80108d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108d6:	4293      	cmp	r3, r2
 80108d8:	db05      	blt.n	80108e6 <_printf_float+0x1da>
 80108da:	6822      	ldr	r2, [r4, #0]
 80108dc:	6123      	str	r3, [r4, #16]
 80108de:	07d1      	lsls	r1, r2, #31
 80108e0:	d5e8      	bpl.n	80108b4 <_printf_float+0x1a8>
 80108e2:	3301      	adds	r3, #1
 80108e4:	e7e5      	b.n	80108b2 <_printf_float+0x1a6>
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	bfd4      	ite	le
 80108ea:	f1c3 0302 	rsble	r3, r3, #2
 80108ee:	2301      	movgt	r3, #1
 80108f0:	4413      	add	r3, r2
 80108f2:	e7de      	b.n	80108b2 <_printf_float+0x1a6>
 80108f4:	6823      	ldr	r3, [r4, #0]
 80108f6:	055a      	lsls	r2, r3, #21
 80108f8:	d407      	bmi.n	801090a <_printf_float+0x1fe>
 80108fa:	6923      	ldr	r3, [r4, #16]
 80108fc:	4642      	mov	r2, r8
 80108fe:	4631      	mov	r1, r6
 8010900:	4628      	mov	r0, r5
 8010902:	47b8      	blx	r7
 8010904:	3001      	adds	r0, #1
 8010906:	d12b      	bne.n	8010960 <_printf_float+0x254>
 8010908:	e761      	b.n	80107ce <_printf_float+0xc2>
 801090a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801090e:	f240 80e2 	bls.w	8010ad6 <_printf_float+0x3ca>
 8010912:	2200      	movs	r2, #0
 8010914:	2300      	movs	r3, #0
 8010916:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801091a:	f7f0 f8fb 	bl	8000b14 <__aeabi_dcmpeq>
 801091e:	2800      	cmp	r0, #0
 8010920:	d03c      	beq.n	801099c <_printf_float+0x290>
 8010922:	2301      	movs	r3, #1
 8010924:	4a38      	ldr	r2, [pc, #224]	; (8010a08 <_printf_float+0x2fc>)
 8010926:	4631      	mov	r1, r6
 8010928:	4628      	mov	r0, r5
 801092a:	47b8      	blx	r7
 801092c:	3001      	adds	r0, #1
 801092e:	f43f af4e 	beq.w	80107ce <_printf_float+0xc2>
 8010932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010936:	429a      	cmp	r2, r3
 8010938:	db02      	blt.n	8010940 <_printf_float+0x234>
 801093a:	6823      	ldr	r3, [r4, #0]
 801093c:	07d8      	lsls	r0, r3, #31
 801093e:	d50f      	bpl.n	8010960 <_printf_float+0x254>
 8010940:	9b05      	ldr	r3, [sp, #20]
 8010942:	9a04      	ldr	r2, [sp, #16]
 8010944:	4631      	mov	r1, r6
 8010946:	4628      	mov	r0, r5
 8010948:	47b8      	blx	r7
 801094a:	3001      	adds	r0, #1
 801094c:	f43f af3f 	beq.w	80107ce <_printf_float+0xc2>
 8010950:	f04f 0800 	mov.w	r8, #0
 8010954:	f104 091a 	add.w	r9, r4, #26
 8010958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801095a:	3b01      	subs	r3, #1
 801095c:	4598      	cmp	r8, r3
 801095e:	db12      	blt.n	8010986 <_printf_float+0x27a>
 8010960:	6823      	ldr	r3, [r4, #0]
 8010962:	079b      	lsls	r3, r3, #30
 8010964:	d509      	bpl.n	801097a <_printf_float+0x26e>
 8010966:	f04f 0800 	mov.w	r8, #0
 801096a:	f104 0919 	add.w	r9, r4, #25
 801096e:	68e3      	ldr	r3, [r4, #12]
 8010970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010972:	1a9b      	subs	r3, r3, r2
 8010974:	4598      	cmp	r8, r3
 8010976:	f2c0 80ee 	blt.w	8010b56 <_printf_float+0x44a>
 801097a:	68e0      	ldr	r0, [r4, #12]
 801097c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801097e:	4298      	cmp	r0, r3
 8010980:	bfb8      	it	lt
 8010982:	4618      	movlt	r0, r3
 8010984:	e725      	b.n	80107d2 <_printf_float+0xc6>
 8010986:	2301      	movs	r3, #1
 8010988:	464a      	mov	r2, r9
 801098a:	4631      	mov	r1, r6
 801098c:	4628      	mov	r0, r5
 801098e:	47b8      	blx	r7
 8010990:	3001      	adds	r0, #1
 8010992:	f43f af1c 	beq.w	80107ce <_printf_float+0xc2>
 8010996:	f108 0801 	add.w	r8, r8, #1
 801099a:	e7dd      	b.n	8010958 <_printf_float+0x24c>
 801099c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801099e:	2b00      	cmp	r3, #0
 80109a0:	dc34      	bgt.n	8010a0c <_printf_float+0x300>
 80109a2:	2301      	movs	r3, #1
 80109a4:	4a18      	ldr	r2, [pc, #96]	; (8010a08 <_printf_float+0x2fc>)
 80109a6:	4631      	mov	r1, r6
 80109a8:	4628      	mov	r0, r5
 80109aa:	47b8      	blx	r7
 80109ac:	3001      	adds	r0, #1
 80109ae:	f43f af0e 	beq.w	80107ce <_printf_float+0xc2>
 80109b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109b4:	b923      	cbnz	r3, 80109c0 <_printf_float+0x2b4>
 80109b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109b8:	b913      	cbnz	r3, 80109c0 <_printf_float+0x2b4>
 80109ba:	6823      	ldr	r3, [r4, #0]
 80109bc:	07d9      	lsls	r1, r3, #31
 80109be:	d5cf      	bpl.n	8010960 <_printf_float+0x254>
 80109c0:	9b05      	ldr	r3, [sp, #20]
 80109c2:	9a04      	ldr	r2, [sp, #16]
 80109c4:	4631      	mov	r1, r6
 80109c6:	4628      	mov	r0, r5
 80109c8:	47b8      	blx	r7
 80109ca:	3001      	adds	r0, #1
 80109cc:	f43f aeff 	beq.w	80107ce <_printf_float+0xc2>
 80109d0:	f04f 0900 	mov.w	r9, #0
 80109d4:	f104 0a1a 	add.w	sl, r4, #26
 80109d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109da:	425b      	negs	r3, r3
 80109dc:	4599      	cmp	r9, r3
 80109de:	db01      	blt.n	80109e4 <_printf_float+0x2d8>
 80109e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109e2:	e78b      	b.n	80108fc <_printf_float+0x1f0>
 80109e4:	2301      	movs	r3, #1
 80109e6:	4652      	mov	r2, sl
 80109e8:	4631      	mov	r1, r6
 80109ea:	4628      	mov	r0, r5
 80109ec:	47b8      	blx	r7
 80109ee:	3001      	adds	r0, #1
 80109f0:	f43f aeed 	beq.w	80107ce <_printf_float+0xc2>
 80109f4:	f109 0901 	add.w	r9, r9, #1
 80109f8:	e7ee      	b.n	80109d8 <_printf_float+0x2cc>
 80109fa:	bf00      	nop
 80109fc:	7fefffff 	.word	0x7fefffff
 8010a00:	08015fe2 	.word	0x08015fe2
 8010a04:	08015fe6 	.word	0x08015fe6
 8010a08:	08015ff2 	.word	0x08015ff2
 8010a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010a10:	429a      	cmp	r2, r3
 8010a12:	bfa8      	it	ge
 8010a14:	461a      	movge	r2, r3
 8010a16:	2a00      	cmp	r2, #0
 8010a18:	4691      	mov	r9, r2
 8010a1a:	dc38      	bgt.n	8010a8e <_printf_float+0x382>
 8010a1c:	f104 031a 	add.w	r3, r4, #26
 8010a20:	f04f 0b00 	mov.w	fp, #0
 8010a24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010a28:	9306      	str	r3, [sp, #24]
 8010a2a:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010a2e:	ebaa 0309 	sub.w	r3, sl, r9
 8010a32:	459b      	cmp	fp, r3
 8010a34:	db33      	blt.n	8010a9e <_printf_float+0x392>
 8010a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	db3a      	blt.n	8010ab4 <_printf_float+0x3a8>
 8010a3e:	6823      	ldr	r3, [r4, #0]
 8010a40:	07da      	lsls	r2, r3, #31
 8010a42:	d437      	bmi.n	8010ab4 <_printf_float+0x3a8>
 8010a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a48:	eba3 020a 	sub.w	r2, r3, sl
 8010a4c:	eba3 0901 	sub.w	r9, r3, r1
 8010a50:	4591      	cmp	r9, r2
 8010a52:	bfa8      	it	ge
 8010a54:	4691      	movge	r9, r2
 8010a56:	f1b9 0f00 	cmp.w	r9, #0
 8010a5a:	dc33      	bgt.n	8010ac4 <_printf_float+0x3b8>
 8010a5c:	f04f 0800 	mov.w	r8, #0
 8010a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010a64:	f104 0a1a 	add.w	sl, r4, #26
 8010a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a6c:	1a9b      	subs	r3, r3, r2
 8010a6e:	eba3 0309 	sub.w	r3, r3, r9
 8010a72:	4598      	cmp	r8, r3
 8010a74:	f6bf af74 	bge.w	8010960 <_printf_float+0x254>
 8010a78:	2301      	movs	r3, #1
 8010a7a:	4652      	mov	r2, sl
 8010a7c:	4631      	mov	r1, r6
 8010a7e:	4628      	mov	r0, r5
 8010a80:	47b8      	blx	r7
 8010a82:	3001      	adds	r0, #1
 8010a84:	f43f aea3 	beq.w	80107ce <_printf_float+0xc2>
 8010a88:	f108 0801 	add.w	r8, r8, #1
 8010a8c:	e7ec      	b.n	8010a68 <_printf_float+0x35c>
 8010a8e:	4613      	mov	r3, r2
 8010a90:	4631      	mov	r1, r6
 8010a92:	4642      	mov	r2, r8
 8010a94:	4628      	mov	r0, r5
 8010a96:	47b8      	blx	r7
 8010a98:	3001      	adds	r0, #1
 8010a9a:	d1bf      	bne.n	8010a1c <_printf_float+0x310>
 8010a9c:	e697      	b.n	80107ce <_printf_float+0xc2>
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	9a06      	ldr	r2, [sp, #24]
 8010aa2:	4631      	mov	r1, r6
 8010aa4:	4628      	mov	r0, r5
 8010aa6:	47b8      	blx	r7
 8010aa8:	3001      	adds	r0, #1
 8010aaa:	f43f ae90 	beq.w	80107ce <_printf_float+0xc2>
 8010aae:	f10b 0b01 	add.w	fp, fp, #1
 8010ab2:	e7ba      	b.n	8010a2a <_printf_float+0x31e>
 8010ab4:	9b05      	ldr	r3, [sp, #20]
 8010ab6:	9a04      	ldr	r2, [sp, #16]
 8010ab8:	4631      	mov	r1, r6
 8010aba:	4628      	mov	r0, r5
 8010abc:	47b8      	blx	r7
 8010abe:	3001      	adds	r0, #1
 8010ac0:	d1c0      	bne.n	8010a44 <_printf_float+0x338>
 8010ac2:	e684      	b.n	80107ce <_printf_float+0xc2>
 8010ac4:	464b      	mov	r3, r9
 8010ac6:	eb08 020a 	add.w	r2, r8, sl
 8010aca:	4631      	mov	r1, r6
 8010acc:	4628      	mov	r0, r5
 8010ace:	47b8      	blx	r7
 8010ad0:	3001      	adds	r0, #1
 8010ad2:	d1c3      	bne.n	8010a5c <_printf_float+0x350>
 8010ad4:	e67b      	b.n	80107ce <_printf_float+0xc2>
 8010ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ad8:	2a01      	cmp	r2, #1
 8010ada:	dc01      	bgt.n	8010ae0 <_printf_float+0x3d4>
 8010adc:	07db      	lsls	r3, r3, #31
 8010ade:	d537      	bpl.n	8010b50 <_printf_float+0x444>
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	4642      	mov	r2, r8
 8010ae4:	4631      	mov	r1, r6
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	47b8      	blx	r7
 8010aea:	3001      	adds	r0, #1
 8010aec:	f43f ae6f 	beq.w	80107ce <_printf_float+0xc2>
 8010af0:	9b05      	ldr	r3, [sp, #20]
 8010af2:	9a04      	ldr	r2, [sp, #16]
 8010af4:	4631      	mov	r1, r6
 8010af6:	4628      	mov	r0, r5
 8010af8:	47b8      	blx	r7
 8010afa:	3001      	adds	r0, #1
 8010afc:	f43f ae67 	beq.w	80107ce <_printf_float+0xc2>
 8010b00:	2200      	movs	r2, #0
 8010b02:	2300      	movs	r3, #0
 8010b04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010b08:	f7f0 f804 	bl	8000b14 <__aeabi_dcmpeq>
 8010b0c:	b158      	cbz	r0, 8010b26 <_printf_float+0x41a>
 8010b0e:	f04f 0800 	mov.w	r8, #0
 8010b12:	f104 0a1a 	add.w	sl, r4, #26
 8010b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b18:	3b01      	subs	r3, #1
 8010b1a:	4598      	cmp	r8, r3
 8010b1c:	db0d      	blt.n	8010b3a <_printf_float+0x42e>
 8010b1e:	464b      	mov	r3, r9
 8010b20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010b24:	e6eb      	b.n	80108fe <_printf_float+0x1f2>
 8010b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b28:	f108 0201 	add.w	r2, r8, #1
 8010b2c:	3b01      	subs	r3, #1
 8010b2e:	4631      	mov	r1, r6
 8010b30:	4628      	mov	r0, r5
 8010b32:	47b8      	blx	r7
 8010b34:	3001      	adds	r0, #1
 8010b36:	d1f2      	bne.n	8010b1e <_printf_float+0x412>
 8010b38:	e649      	b.n	80107ce <_printf_float+0xc2>
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	4652      	mov	r2, sl
 8010b3e:	4631      	mov	r1, r6
 8010b40:	4628      	mov	r0, r5
 8010b42:	47b8      	blx	r7
 8010b44:	3001      	adds	r0, #1
 8010b46:	f43f ae42 	beq.w	80107ce <_printf_float+0xc2>
 8010b4a:	f108 0801 	add.w	r8, r8, #1
 8010b4e:	e7e2      	b.n	8010b16 <_printf_float+0x40a>
 8010b50:	2301      	movs	r3, #1
 8010b52:	4642      	mov	r2, r8
 8010b54:	e7eb      	b.n	8010b2e <_printf_float+0x422>
 8010b56:	2301      	movs	r3, #1
 8010b58:	464a      	mov	r2, r9
 8010b5a:	4631      	mov	r1, r6
 8010b5c:	4628      	mov	r0, r5
 8010b5e:	47b8      	blx	r7
 8010b60:	3001      	adds	r0, #1
 8010b62:	f43f ae34 	beq.w	80107ce <_printf_float+0xc2>
 8010b66:	f108 0801 	add.w	r8, r8, #1
 8010b6a:	e700      	b.n	801096e <_printf_float+0x262>
 8010b6c:	4642      	mov	r2, r8
 8010b6e:	464b      	mov	r3, r9
 8010b70:	4640      	mov	r0, r8
 8010b72:	4649      	mov	r1, r9
 8010b74:	f7f0 f800 	bl	8000b78 <__aeabi_dcmpun>
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	f43f ae2d 	beq.w	80107d8 <_printf_float+0xcc>
 8010b7e:	4b01      	ldr	r3, [pc, #4]	; (8010b84 <_printf_float+0x478>)
 8010b80:	4a01      	ldr	r2, [pc, #4]	; (8010b88 <_printf_float+0x47c>)
 8010b82:	e60e      	b.n	80107a2 <_printf_float+0x96>
 8010b84:	08015fea 	.word	0x08015fea
 8010b88:	08015fee 	.word	0x08015fee

08010b8c <_printf_common>:
 8010b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b90:	4691      	mov	r9, r2
 8010b92:	461f      	mov	r7, r3
 8010b94:	688a      	ldr	r2, [r1, #8]
 8010b96:	690b      	ldr	r3, [r1, #16]
 8010b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	bfb8      	it	lt
 8010ba0:	4613      	movlt	r3, r2
 8010ba2:	f8c9 3000 	str.w	r3, [r9]
 8010ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010baa:	4606      	mov	r6, r0
 8010bac:	460c      	mov	r4, r1
 8010bae:	b112      	cbz	r2, 8010bb6 <_printf_common+0x2a>
 8010bb0:	3301      	adds	r3, #1
 8010bb2:	f8c9 3000 	str.w	r3, [r9]
 8010bb6:	6823      	ldr	r3, [r4, #0]
 8010bb8:	0699      	lsls	r1, r3, #26
 8010bba:	bf42      	ittt	mi
 8010bbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010bc0:	3302      	addmi	r3, #2
 8010bc2:	f8c9 3000 	strmi.w	r3, [r9]
 8010bc6:	6825      	ldr	r5, [r4, #0]
 8010bc8:	f015 0506 	ands.w	r5, r5, #6
 8010bcc:	d107      	bne.n	8010bde <_printf_common+0x52>
 8010bce:	f104 0a19 	add.w	sl, r4, #25
 8010bd2:	68e3      	ldr	r3, [r4, #12]
 8010bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8010bd8:	1a9b      	subs	r3, r3, r2
 8010bda:	429d      	cmp	r5, r3
 8010bdc:	db29      	blt.n	8010c32 <_printf_common+0xa6>
 8010bde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010be2:	6822      	ldr	r2, [r4, #0]
 8010be4:	3300      	adds	r3, #0
 8010be6:	bf18      	it	ne
 8010be8:	2301      	movne	r3, #1
 8010bea:	0692      	lsls	r2, r2, #26
 8010bec:	d42e      	bmi.n	8010c4c <_printf_common+0xc0>
 8010bee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010bf2:	4639      	mov	r1, r7
 8010bf4:	4630      	mov	r0, r6
 8010bf6:	47c0      	blx	r8
 8010bf8:	3001      	adds	r0, #1
 8010bfa:	d021      	beq.n	8010c40 <_printf_common+0xb4>
 8010bfc:	6823      	ldr	r3, [r4, #0]
 8010bfe:	68e5      	ldr	r5, [r4, #12]
 8010c00:	f8d9 2000 	ldr.w	r2, [r9]
 8010c04:	f003 0306 	and.w	r3, r3, #6
 8010c08:	2b04      	cmp	r3, #4
 8010c0a:	bf08      	it	eq
 8010c0c:	1aad      	subeq	r5, r5, r2
 8010c0e:	68a3      	ldr	r3, [r4, #8]
 8010c10:	6922      	ldr	r2, [r4, #16]
 8010c12:	bf0c      	ite	eq
 8010c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c18:	2500      	movne	r5, #0
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	bfc4      	itt	gt
 8010c1e:	1a9b      	subgt	r3, r3, r2
 8010c20:	18ed      	addgt	r5, r5, r3
 8010c22:	f04f 0900 	mov.w	r9, #0
 8010c26:	341a      	adds	r4, #26
 8010c28:	454d      	cmp	r5, r9
 8010c2a:	d11b      	bne.n	8010c64 <_printf_common+0xd8>
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c32:	2301      	movs	r3, #1
 8010c34:	4652      	mov	r2, sl
 8010c36:	4639      	mov	r1, r7
 8010c38:	4630      	mov	r0, r6
 8010c3a:	47c0      	blx	r8
 8010c3c:	3001      	adds	r0, #1
 8010c3e:	d103      	bne.n	8010c48 <_printf_common+0xbc>
 8010c40:	f04f 30ff 	mov.w	r0, #4294967295
 8010c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c48:	3501      	adds	r5, #1
 8010c4a:	e7c2      	b.n	8010bd2 <_printf_common+0x46>
 8010c4c:	18e1      	adds	r1, r4, r3
 8010c4e:	1c5a      	adds	r2, r3, #1
 8010c50:	2030      	movs	r0, #48	; 0x30
 8010c52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c56:	4422      	add	r2, r4
 8010c58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c60:	3302      	adds	r3, #2
 8010c62:	e7c4      	b.n	8010bee <_printf_common+0x62>
 8010c64:	2301      	movs	r3, #1
 8010c66:	4622      	mov	r2, r4
 8010c68:	4639      	mov	r1, r7
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	47c0      	blx	r8
 8010c6e:	3001      	adds	r0, #1
 8010c70:	d0e6      	beq.n	8010c40 <_printf_common+0xb4>
 8010c72:	f109 0901 	add.w	r9, r9, #1
 8010c76:	e7d7      	b.n	8010c28 <_printf_common+0x9c>

08010c78 <_printf_i>:
 8010c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c7c:	4617      	mov	r7, r2
 8010c7e:	7e0a      	ldrb	r2, [r1, #24]
 8010c80:	b085      	sub	sp, #20
 8010c82:	2a6e      	cmp	r2, #110	; 0x6e
 8010c84:	4698      	mov	r8, r3
 8010c86:	4606      	mov	r6, r0
 8010c88:	460c      	mov	r4, r1
 8010c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c8c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8010c90:	f000 80bc 	beq.w	8010e0c <_printf_i+0x194>
 8010c94:	d81a      	bhi.n	8010ccc <_printf_i+0x54>
 8010c96:	2a63      	cmp	r2, #99	; 0x63
 8010c98:	d02e      	beq.n	8010cf8 <_printf_i+0x80>
 8010c9a:	d80a      	bhi.n	8010cb2 <_printf_i+0x3a>
 8010c9c:	2a00      	cmp	r2, #0
 8010c9e:	f000 80c8 	beq.w	8010e32 <_printf_i+0x1ba>
 8010ca2:	2a58      	cmp	r2, #88	; 0x58
 8010ca4:	f000 808a 	beq.w	8010dbc <_printf_i+0x144>
 8010ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010cac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8010cb0:	e02a      	b.n	8010d08 <_printf_i+0x90>
 8010cb2:	2a64      	cmp	r2, #100	; 0x64
 8010cb4:	d001      	beq.n	8010cba <_printf_i+0x42>
 8010cb6:	2a69      	cmp	r2, #105	; 0x69
 8010cb8:	d1f6      	bne.n	8010ca8 <_printf_i+0x30>
 8010cba:	6821      	ldr	r1, [r4, #0]
 8010cbc:	681a      	ldr	r2, [r3, #0]
 8010cbe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8010cc2:	d023      	beq.n	8010d0c <_printf_i+0x94>
 8010cc4:	1d11      	adds	r1, r2, #4
 8010cc6:	6019      	str	r1, [r3, #0]
 8010cc8:	6813      	ldr	r3, [r2, #0]
 8010cca:	e027      	b.n	8010d1c <_printf_i+0xa4>
 8010ccc:	2a73      	cmp	r2, #115	; 0x73
 8010cce:	f000 80b4 	beq.w	8010e3a <_printf_i+0x1c2>
 8010cd2:	d808      	bhi.n	8010ce6 <_printf_i+0x6e>
 8010cd4:	2a6f      	cmp	r2, #111	; 0x6f
 8010cd6:	d02a      	beq.n	8010d2e <_printf_i+0xb6>
 8010cd8:	2a70      	cmp	r2, #112	; 0x70
 8010cda:	d1e5      	bne.n	8010ca8 <_printf_i+0x30>
 8010cdc:	680a      	ldr	r2, [r1, #0]
 8010cde:	f042 0220 	orr.w	r2, r2, #32
 8010ce2:	600a      	str	r2, [r1, #0]
 8010ce4:	e003      	b.n	8010cee <_printf_i+0x76>
 8010ce6:	2a75      	cmp	r2, #117	; 0x75
 8010ce8:	d021      	beq.n	8010d2e <_printf_i+0xb6>
 8010cea:	2a78      	cmp	r2, #120	; 0x78
 8010cec:	d1dc      	bne.n	8010ca8 <_printf_i+0x30>
 8010cee:	2278      	movs	r2, #120	; 0x78
 8010cf0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8010cf4:	496e      	ldr	r1, [pc, #440]	; (8010eb0 <_printf_i+0x238>)
 8010cf6:	e064      	b.n	8010dc2 <_printf_i+0x14a>
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8010cfe:	1d11      	adds	r1, r2, #4
 8010d00:	6019      	str	r1, [r3, #0]
 8010d02:	6813      	ldr	r3, [r2, #0]
 8010d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d08:	2301      	movs	r3, #1
 8010d0a:	e0a3      	b.n	8010e54 <_printf_i+0x1dc>
 8010d0c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8010d10:	f102 0104 	add.w	r1, r2, #4
 8010d14:	6019      	str	r1, [r3, #0]
 8010d16:	d0d7      	beq.n	8010cc8 <_printf_i+0x50>
 8010d18:	f9b2 3000 	ldrsh.w	r3, [r2]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	da03      	bge.n	8010d28 <_printf_i+0xb0>
 8010d20:	222d      	movs	r2, #45	; 0x2d
 8010d22:	425b      	negs	r3, r3
 8010d24:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010d28:	4962      	ldr	r1, [pc, #392]	; (8010eb4 <_printf_i+0x23c>)
 8010d2a:	220a      	movs	r2, #10
 8010d2c:	e017      	b.n	8010d5e <_printf_i+0xe6>
 8010d2e:	6820      	ldr	r0, [r4, #0]
 8010d30:	6819      	ldr	r1, [r3, #0]
 8010d32:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010d36:	d003      	beq.n	8010d40 <_printf_i+0xc8>
 8010d38:	1d08      	adds	r0, r1, #4
 8010d3a:	6018      	str	r0, [r3, #0]
 8010d3c:	680b      	ldr	r3, [r1, #0]
 8010d3e:	e006      	b.n	8010d4e <_printf_i+0xd6>
 8010d40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010d44:	f101 0004 	add.w	r0, r1, #4
 8010d48:	6018      	str	r0, [r3, #0]
 8010d4a:	d0f7      	beq.n	8010d3c <_printf_i+0xc4>
 8010d4c:	880b      	ldrh	r3, [r1, #0]
 8010d4e:	4959      	ldr	r1, [pc, #356]	; (8010eb4 <_printf_i+0x23c>)
 8010d50:	2a6f      	cmp	r2, #111	; 0x6f
 8010d52:	bf14      	ite	ne
 8010d54:	220a      	movne	r2, #10
 8010d56:	2208      	moveq	r2, #8
 8010d58:	2000      	movs	r0, #0
 8010d5a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8010d5e:	6865      	ldr	r5, [r4, #4]
 8010d60:	60a5      	str	r5, [r4, #8]
 8010d62:	2d00      	cmp	r5, #0
 8010d64:	f2c0 809c 	blt.w	8010ea0 <_printf_i+0x228>
 8010d68:	6820      	ldr	r0, [r4, #0]
 8010d6a:	f020 0004 	bic.w	r0, r0, #4
 8010d6e:	6020      	str	r0, [r4, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d13f      	bne.n	8010df4 <_printf_i+0x17c>
 8010d74:	2d00      	cmp	r5, #0
 8010d76:	f040 8095 	bne.w	8010ea4 <_printf_i+0x22c>
 8010d7a:	4675      	mov	r5, lr
 8010d7c:	2a08      	cmp	r2, #8
 8010d7e:	d10b      	bne.n	8010d98 <_printf_i+0x120>
 8010d80:	6823      	ldr	r3, [r4, #0]
 8010d82:	07da      	lsls	r2, r3, #31
 8010d84:	d508      	bpl.n	8010d98 <_printf_i+0x120>
 8010d86:	6923      	ldr	r3, [r4, #16]
 8010d88:	6862      	ldr	r2, [r4, #4]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	bfde      	ittt	le
 8010d8e:	2330      	movle	r3, #48	; 0x30
 8010d90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010d94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010d98:	ebae 0305 	sub.w	r3, lr, r5
 8010d9c:	6123      	str	r3, [r4, #16]
 8010d9e:	f8cd 8000 	str.w	r8, [sp]
 8010da2:	463b      	mov	r3, r7
 8010da4:	aa03      	add	r2, sp, #12
 8010da6:	4621      	mov	r1, r4
 8010da8:	4630      	mov	r0, r6
 8010daa:	f7ff feef 	bl	8010b8c <_printf_common>
 8010dae:	3001      	adds	r0, #1
 8010db0:	d155      	bne.n	8010e5e <_printf_i+0x1e6>
 8010db2:	f04f 30ff 	mov.w	r0, #4294967295
 8010db6:	b005      	add	sp, #20
 8010db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dbc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8010dc0:	493c      	ldr	r1, [pc, #240]	; (8010eb4 <_printf_i+0x23c>)
 8010dc2:	6822      	ldr	r2, [r4, #0]
 8010dc4:	6818      	ldr	r0, [r3, #0]
 8010dc6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8010dca:	f100 0504 	add.w	r5, r0, #4
 8010dce:	601d      	str	r5, [r3, #0]
 8010dd0:	d001      	beq.n	8010dd6 <_printf_i+0x15e>
 8010dd2:	6803      	ldr	r3, [r0, #0]
 8010dd4:	e002      	b.n	8010ddc <_printf_i+0x164>
 8010dd6:	0655      	lsls	r5, r2, #25
 8010dd8:	d5fb      	bpl.n	8010dd2 <_printf_i+0x15a>
 8010dda:	8803      	ldrh	r3, [r0, #0]
 8010ddc:	07d0      	lsls	r0, r2, #31
 8010dde:	bf44      	itt	mi
 8010de0:	f042 0220 	orrmi.w	r2, r2, #32
 8010de4:	6022      	strmi	r2, [r4, #0]
 8010de6:	b91b      	cbnz	r3, 8010df0 <_printf_i+0x178>
 8010de8:	6822      	ldr	r2, [r4, #0]
 8010dea:	f022 0220 	bic.w	r2, r2, #32
 8010dee:	6022      	str	r2, [r4, #0]
 8010df0:	2210      	movs	r2, #16
 8010df2:	e7b1      	b.n	8010d58 <_printf_i+0xe0>
 8010df4:	4675      	mov	r5, lr
 8010df6:	fbb3 f0f2 	udiv	r0, r3, r2
 8010dfa:	fb02 3310 	mls	r3, r2, r0, r3
 8010dfe:	5ccb      	ldrb	r3, [r1, r3]
 8010e00:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010e04:	4603      	mov	r3, r0
 8010e06:	2800      	cmp	r0, #0
 8010e08:	d1f5      	bne.n	8010df6 <_printf_i+0x17e>
 8010e0a:	e7b7      	b.n	8010d7c <_printf_i+0x104>
 8010e0c:	6808      	ldr	r0, [r1, #0]
 8010e0e:	681a      	ldr	r2, [r3, #0]
 8010e10:	6949      	ldr	r1, [r1, #20]
 8010e12:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010e16:	d004      	beq.n	8010e22 <_printf_i+0x1aa>
 8010e18:	1d10      	adds	r0, r2, #4
 8010e1a:	6018      	str	r0, [r3, #0]
 8010e1c:	6813      	ldr	r3, [r2, #0]
 8010e1e:	6019      	str	r1, [r3, #0]
 8010e20:	e007      	b.n	8010e32 <_printf_i+0x1ba>
 8010e22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010e26:	f102 0004 	add.w	r0, r2, #4
 8010e2a:	6018      	str	r0, [r3, #0]
 8010e2c:	6813      	ldr	r3, [r2, #0]
 8010e2e:	d0f6      	beq.n	8010e1e <_printf_i+0x1a6>
 8010e30:	8019      	strh	r1, [r3, #0]
 8010e32:	2300      	movs	r3, #0
 8010e34:	6123      	str	r3, [r4, #16]
 8010e36:	4675      	mov	r5, lr
 8010e38:	e7b1      	b.n	8010d9e <_printf_i+0x126>
 8010e3a:	681a      	ldr	r2, [r3, #0]
 8010e3c:	1d11      	adds	r1, r2, #4
 8010e3e:	6019      	str	r1, [r3, #0]
 8010e40:	6815      	ldr	r5, [r2, #0]
 8010e42:	6862      	ldr	r2, [r4, #4]
 8010e44:	2100      	movs	r1, #0
 8010e46:	4628      	mov	r0, r5
 8010e48:	f7ef f9e2 	bl	8000210 <memchr>
 8010e4c:	b108      	cbz	r0, 8010e52 <_printf_i+0x1da>
 8010e4e:	1b40      	subs	r0, r0, r5
 8010e50:	6060      	str	r0, [r4, #4]
 8010e52:	6863      	ldr	r3, [r4, #4]
 8010e54:	6123      	str	r3, [r4, #16]
 8010e56:	2300      	movs	r3, #0
 8010e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e5c:	e79f      	b.n	8010d9e <_printf_i+0x126>
 8010e5e:	6923      	ldr	r3, [r4, #16]
 8010e60:	462a      	mov	r2, r5
 8010e62:	4639      	mov	r1, r7
 8010e64:	4630      	mov	r0, r6
 8010e66:	47c0      	blx	r8
 8010e68:	3001      	adds	r0, #1
 8010e6a:	d0a2      	beq.n	8010db2 <_printf_i+0x13a>
 8010e6c:	6823      	ldr	r3, [r4, #0]
 8010e6e:	079b      	lsls	r3, r3, #30
 8010e70:	d507      	bpl.n	8010e82 <_printf_i+0x20a>
 8010e72:	2500      	movs	r5, #0
 8010e74:	f104 0919 	add.w	r9, r4, #25
 8010e78:	68e3      	ldr	r3, [r4, #12]
 8010e7a:	9a03      	ldr	r2, [sp, #12]
 8010e7c:	1a9b      	subs	r3, r3, r2
 8010e7e:	429d      	cmp	r5, r3
 8010e80:	db05      	blt.n	8010e8e <_printf_i+0x216>
 8010e82:	68e0      	ldr	r0, [r4, #12]
 8010e84:	9b03      	ldr	r3, [sp, #12]
 8010e86:	4298      	cmp	r0, r3
 8010e88:	bfb8      	it	lt
 8010e8a:	4618      	movlt	r0, r3
 8010e8c:	e793      	b.n	8010db6 <_printf_i+0x13e>
 8010e8e:	2301      	movs	r3, #1
 8010e90:	464a      	mov	r2, r9
 8010e92:	4639      	mov	r1, r7
 8010e94:	4630      	mov	r0, r6
 8010e96:	47c0      	blx	r8
 8010e98:	3001      	adds	r0, #1
 8010e9a:	d08a      	beq.n	8010db2 <_printf_i+0x13a>
 8010e9c:	3501      	adds	r5, #1
 8010e9e:	e7eb      	b.n	8010e78 <_printf_i+0x200>
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1a7      	bne.n	8010df4 <_printf_i+0x17c>
 8010ea4:	780b      	ldrb	r3, [r1, #0]
 8010ea6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010eaa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010eae:	e765      	b.n	8010d7c <_printf_i+0x104>
 8010eb0:	08016005 	.word	0x08016005
 8010eb4:	08015ff4 	.word	0x08015ff4

08010eb8 <iprintf>:
 8010eb8:	b40f      	push	{r0, r1, r2, r3}
 8010eba:	4b0a      	ldr	r3, [pc, #40]	; (8010ee4 <iprintf+0x2c>)
 8010ebc:	b513      	push	{r0, r1, r4, lr}
 8010ebe:	681c      	ldr	r4, [r3, #0]
 8010ec0:	b124      	cbz	r4, 8010ecc <iprintf+0x14>
 8010ec2:	69a3      	ldr	r3, [r4, #24]
 8010ec4:	b913      	cbnz	r3, 8010ecc <iprintf+0x14>
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f7ff f9cc 	bl	8010264 <__sinit>
 8010ecc:	ab05      	add	r3, sp, #20
 8010ece:	9a04      	ldr	r2, [sp, #16]
 8010ed0:	68a1      	ldr	r1, [r4, #8]
 8010ed2:	9301      	str	r3, [sp, #4]
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	f001 feb5 	bl	8012c44 <_vfiprintf_r>
 8010eda:	b002      	add	sp, #8
 8010edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ee0:	b004      	add	sp, #16
 8010ee2:	4770      	bx	lr
 8010ee4:	2000017c 	.word	0x2000017c

08010ee8 <_puts_r>:
 8010ee8:	b570      	push	{r4, r5, r6, lr}
 8010eea:	460e      	mov	r6, r1
 8010eec:	4605      	mov	r5, r0
 8010eee:	b118      	cbz	r0, 8010ef8 <_puts_r+0x10>
 8010ef0:	6983      	ldr	r3, [r0, #24]
 8010ef2:	b90b      	cbnz	r3, 8010ef8 <_puts_r+0x10>
 8010ef4:	f7ff f9b6 	bl	8010264 <__sinit>
 8010ef8:	69ab      	ldr	r3, [r5, #24]
 8010efa:	68ac      	ldr	r4, [r5, #8]
 8010efc:	b913      	cbnz	r3, 8010f04 <_puts_r+0x1c>
 8010efe:	4628      	mov	r0, r5
 8010f00:	f7ff f9b0 	bl	8010264 <__sinit>
 8010f04:	4b23      	ldr	r3, [pc, #140]	; (8010f94 <_puts_r+0xac>)
 8010f06:	429c      	cmp	r4, r3
 8010f08:	d117      	bne.n	8010f3a <_puts_r+0x52>
 8010f0a:	686c      	ldr	r4, [r5, #4]
 8010f0c:	89a3      	ldrh	r3, [r4, #12]
 8010f0e:	071b      	lsls	r3, r3, #28
 8010f10:	d51d      	bpl.n	8010f4e <_puts_r+0x66>
 8010f12:	6923      	ldr	r3, [r4, #16]
 8010f14:	b1db      	cbz	r3, 8010f4e <_puts_r+0x66>
 8010f16:	3e01      	subs	r6, #1
 8010f18:	68a3      	ldr	r3, [r4, #8]
 8010f1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010f1e:	3b01      	subs	r3, #1
 8010f20:	60a3      	str	r3, [r4, #8]
 8010f22:	b9e9      	cbnz	r1, 8010f60 <_puts_r+0x78>
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	da2e      	bge.n	8010f86 <_puts_r+0x9e>
 8010f28:	4622      	mov	r2, r4
 8010f2a:	210a      	movs	r1, #10
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	f000 fa39 	bl	80113a4 <__swbuf_r>
 8010f32:	3001      	adds	r0, #1
 8010f34:	d011      	beq.n	8010f5a <_puts_r+0x72>
 8010f36:	200a      	movs	r0, #10
 8010f38:	bd70      	pop	{r4, r5, r6, pc}
 8010f3a:	4b17      	ldr	r3, [pc, #92]	; (8010f98 <_puts_r+0xb0>)
 8010f3c:	429c      	cmp	r4, r3
 8010f3e:	d101      	bne.n	8010f44 <_puts_r+0x5c>
 8010f40:	68ac      	ldr	r4, [r5, #8]
 8010f42:	e7e3      	b.n	8010f0c <_puts_r+0x24>
 8010f44:	4b15      	ldr	r3, [pc, #84]	; (8010f9c <_puts_r+0xb4>)
 8010f46:	429c      	cmp	r4, r3
 8010f48:	bf08      	it	eq
 8010f4a:	68ec      	ldreq	r4, [r5, #12]
 8010f4c:	e7de      	b.n	8010f0c <_puts_r+0x24>
 8010f4e:	4621      	mov	r1, r4
 8010f50:	4628      	mov	r0, r5
 8010f52:	f000 fa99 	bl	8011488 <__swsetup_r>
 8010f56:	2800      	cmp	r0, #0
 8010f58:	d0dd      	beq.n	8010f16 <_puts_r+0x2e>
 8010f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f5e:	bd70      	pop	{r4, r5, r6, pc}
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	da04      	bge.n	8010f6e <_puts_r+0x86>
 8010f64:	69a2      	ldr	r2, [r4, #24]
 8010f66:	4293      	cmp	r3, r2
 8010f68:	db06      	blt.n	8010f78 <_puts_r+0x90>
 8010f6a:	290a      	cmp	r1, #10
 8010f6c:	d004      	beq.n	8010f78 <_puts_r+0x90>
 8010f6e:	6823      	ldr	r3, [r4, #0]
 8010f70:	1c5a      	adds	r2, r3, #1
 8010f72:	6022      	str	r2, [r4, #0]
 8010f74:	7019      	strb	r1, [r3, #0]
 8010f76:	e7cf      	b.n	8010f18 <_puts_r+0x30>
 8010f78:	4622      	mov	r2, r4
 8010f7a:	4628      	mov	r0, r5
 8010f7c:	f000 fa12 	bl	80113a4 <__swbuf_r>
 8010f80:	3001      	adds	r0, #1
 8010f82:	d1c9      	bne.n	8010f18 <_puts_r+0x30>
 8010f84:	e7e9      	b.n	8010f5a <_puts_r+0x72>
 8010f86:	6823      	ldr	r3, [r4, #0]
 8010f88:	200a      	movs	r0, #10
 8010f8a:	1c5a      	adds	r2, r3, #1
 8010f8c:	6022      	str	r2, [r4, #0]
 8010f8e:	7018      	strb	r0, [r3, #0]
 8010f90:	bd70      	pop	{r4, r5, r6, pc}
 8010f92:	bf00      	nop
 8010f94:	08015f94 	.word	0x08015f94
 8010f98:	08015fb4 	.word	0x08015fb4
 8010f9c:	08015f74 	.word	0x08015f74

08010fa0 <puts>:
 8010fa0:	4b02      	ldr	r3, [pc, #8]	; (8010fac <puts+0xc>)
 8010fa2:	4601      	mov	r1, r0
 8010fa4:	6818      	ldr	r0, [r3, #0]
 8010fa6:	f7ff bf9f 	b.w	8010ee8 <_puts_r>
 8010faa:	bf00      	nop
 8010fac:	2000017c 	.word	0x2000017c

08010fb0 <realloc>:
 8010fb0:	4b02      	ldr	r3, [pc, #8]	; (8010fbc <realloc+0xc>)
 8010fb2:	460a      	mov	r2, r1
 8010fb4:	4601      	mov	r1, r0
 8010fb6:	6818      	ldr	r0, [r3, #0]
 8010fb8:	f001 bca4 	b.w	8012904 <_realloc_r>
 8010fbc:	2000017c 	.word	0x2000017c

08010fc0 <lflush>:
 8010fc0:	8983      	ldrh	r3, [r0, #12]
 8010fc2:	f003 0309 	and.w	r3, r3, #9
 8010fc6:	2b09      	cmp	r3, #9
 8010fc8:	d101      	bne.n	8010fce <lflush+0xe>
 8010fca:	f7ff b88d 	b.w	80100e8 <fflush>
 8010fce:	2000      	movs	r0, #0
 8010fd0:	4770      	bx	lr
	...

08010fd4 <__srefill_r>:
 8010fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fd6:	460c      	mov	r4, r1
 8010fd8:	4605      	mov	r5, r0
 8010fda:	b118      	cbz	r0, 8010fe4 <__srefill_r+0x10>
 8010fdc:	6983      	ldr	r3, [r0, #24]
 8010fde:	b90b      	cbnz	r3, 8010fe4 <__srefill_r+0x10>
 8010fe0:	f7ff f940 	bl	8010264 <__sinit>
 8010fe4:	4b3b      	ldr	r3, [pc, #236]	; (80110d4 <__srefill_r+0x100>)
 8010fe6:	429c      	cmp	r4, r3
 8010fe8:	d10a      	bne.n	8011000 <__srefill_r+0x2c>
 8010fea:	686c      	ldr	r4, [r5, #4]
 8010fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	6063      	str	r3, [r4, #4]
 8010ff4:	b293      	uxth	r3, r2
 8010ff6:	069e      	lsls	r6, r3, #26
 8010ff8:	d50c      	bpl.n	8011014 <__srefill_r+0x40>
 8010ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8010ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011000:	4b35      	ldr	r3, [pc, #212]	; (80110d8 <__srefill_r+0x104>)
 8011002:	429c      	cmp	r4, r3
 8011004:	d101      	bne.n	801100a <__srefill_r+0x36>
 8011006:	68ac      	ldr	r4, [r5, #8]
 8011008:	e7f0      	b.n	8010fec <__srefill_r+0x18>
 801100a:	4b34      	ldr	r3, [pc, #208]	; (80110dc <__srefill_r+0x108>)
 801100c:	429c      	cmp	r4, r3
 801100e:	bf08      	it	eq
 8011010:	68ec      	ldreq	r4, [r5, #12]
 8011012:	e7eb      	b.n	8010fec <__srefill_r+0x18>
 8011014:	0758      	lsls	r0, r3, #29
 8011016:	d448      	bmi.n	80110aa <__srefill_r+0xd6>
 8011018:	06d9      	lsls	r1, r3, #27
 801101a:	d405      	bmi.n	8011028 <__srefill_r+0x54>
 801101c:	2309      	movs	r3, #9
 801101e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011022:	602b      	str	r3, [r5, #0]
 8011024:	81a2      	strh	r2, [r4, #12]
 8011026:	e7e8      	b.n	8010ffa <__srefill_r+0x26>
 8011028:	071a      	lsls	r2, r3, #28
 801102a:	d50b      	bpl.n	8011044 <__srefill_r+0x70>
 801102c:	4621      	mov	r1, r4
 801102e:	4628      	mov	r0, r5
 8011030:	f7ff f830 	bl	8010094 <_fflush_r>
 8011034:	2800      	cmp	r0, #0
 8011036:	d1e0      	bne.n	8010ffa <__srefill_r+0x26>
 8011038:	89a3      	ldrh	r3, [r4, #12]
 801103a:	60a0      	str	r0, [r4, #8]
 801103c:	f023 0308 	bic.w	r3, r3, #8
 8011040:	81a3      	strh	r3, [r4, #12]
 8011042:	61a0      	str	r0, [r4, #24]
 8011044:	89a3      	ldrh	r3, [r4, #12]
 8011046:	f043 0304 	orr.w	r3, r3, #4
 801104a:	81a3      	strh	r3, [r4, #12]
 801104c:	6923      	ldr	r3, [r4, #16]
 801104e:	b91b      	cbnz	r3, 8011058 <__srefill_r+0x84>
 8011050:	4621      	mov	r1, r4
 8011052:	4628      	mov	r0, r5
 8011054:	f001 f936 	bl	80122c4 <__smakebuf_r>
 8011058:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 801105c:	b2be      	uxth	r6, r7
 801105e:	07b3      	lsls	r3, r6, #30
 8011060:	d00f      	beq.n	8011082 <__srefill_r+0xae>
 8011062:	2301      	movs	r3, #1
 8011064:	81a3      	strh	r3, [r4, #12]
 8011066:	4b1e      	ldr	r3, [pc, #120]	; (80110e0 <__srefill_r+0x10c>)
 8011068:	491e      	ldr	r1, [pc, #120]	; (80110e4 <__srefill_r+0x110>)
 801106a:	6818      	ldr	r0, [r3, #0]
 801106c:	f006 0609 	and.w	r6, r6, #9
 8011070:	f7ff f964 	bl	801033c <_fwalk>
 8011074:	2e09      	cmp	r6, #9
 8011076:	81a7      	strh	r7, [r4, #12]
 8011078:	d103      	bne.n	8011082 <__srefill_r+0xae>
 801107a:	4621      	mov	r1, r4
 801107c:	4628      	mov	r0, r5
 801107e:	f7fe ff81 	bl	800ff84 <__sflush_r>
 8011082:	6922      	ldr	r2, [r4, #16]
 8011084:	6022      	str	r2, [r4, #0]
 8011086:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011088:	6963      	ldr	r3, [r4, #20]
 801108a:	6a21      	ldr	r1, [r4, #32]
 801108c:	4628      	mov	r0, r5
 801108e:	47b0      	blx	r6
 8011090:	2800      	cmp	r0, #0
 8011092:	6060      	str	r0, [r4, #4]
 8011094:	dc1c      	bgt.n	80110d0 <__srefill_r+0xfc>
 8011096:	89a3      	ldrh	r3, [r4, #12]
 8011098:	bf17      	itett	ne
 801109a:	2200      	movne	r2, #0
 801109c:	f043 0320 	orreq.w	r3, r3, #32
 80110a0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80110a4:	6062      	strne	r2, [r4, #4]
 80110a6:	81a3      	strh	r3, [r4, #12]
 80110a8:	e7a7      	b.n	8010ffa <__srefill_r+0x26>
 80110aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110ac:	2900      	cmp	r1, #0
 80110ae:	d0cd      	beq.n	801104c <__srefill_r+0x78>
 80110b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110b4:	4299      	cmp	r1, r3
 80110b6:	d002      	beq.n	80110be <__srefill_r+0xea>
 80110b8:	4628      	mov	r0, r5
 80110ba:	f7ff f9e5 	bl	8010488 <_free_r>
 80110be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80110c0:	6063      	str	r3, [r4, #4]
 80110c2:	2000      	movs	r0, #0
 80110c4:	6360      	str	r0, [r4, #52]	; 0x34
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d0c0      	beq.n	801104c <__srefill_r+0x78>
 80110ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80110cc:	6023      	str	r3, [r4, #0]
 80110ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110d0:	2000      	movs	r0, #0
 80110d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110d4:	08015f94 	.word	0x08015f94
 80110d8:	08015fb4 	.word	0x08015fb4
 80110dc:	08015f74 	.word	0x08015f74
 80110e0:	08015fd4 	.word	0x08015fd4
 80110e4:	08010fc1 	.word	0x08010fc1

080110e8 <_sbrk_r>:
 80110e8:	b538      	push	{r3, r4, r5, lr}
 80110ea:	4c06      	ldr	r4, [pc, #24]	; (8011104 <_sbrk_r+0x1c>)
 80110ec:	2300      	movs	r3, #0
 80110ee:	4605      	mov	r5, r0
 80110f0:	4608      	mov	r0, r1
 80110f2:	6023      	str	r3, [r4, #0]
 80110f4:	f001 ff34 	bl	8012f60 <_sbrk>
 80110f8:	1c43      	adds	r3, r0, #1
 80110fa:	d102      	bne.n	8011102 <_sbrk_r+0x1a>
 80110fc:	6823      	ldr	r3, [r4, #0]
 80110fe:	b103      	cbz	r3, 8011102 <_sbrk_r+0x1a>
 8011100:	602b      	str	r3, [r5, #0]
 8011102:	bd38      	pop	{r3, r4, r5, pc}
 8011104:	20002e14 	.word	0x20002e14

08011108 <sniprintf>:
 8011108:	b40c      	push	{r2, r3}
 801110a:	b530      	push	{r4, r5, lr}
 801110c:	4b17      	ldr	r3, [pc, #92]	; (801116c <sniprintf+0x64>)
 801110e:	1e0c      	subs	r4, r1, #0
 8011110:	b09d      	sub	sp, #116	; 0x74
 8011112:	681d      	ldr	r5, [r3, #0]
 8011114:	da08      	bge.n	8011128 <sniprintf+0x20>
 8011116:	238b      	movs	r3, #139	; 0x8b
 8011118:	602b      	str	r3, [r5, #0]
 801111a:	f04f 30ff 	mov.w	r0, #4294967295
 801111e:	b01d      	add	sp, #116	; 0x74
 8011120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011124:	b002      	add	sp, #8
 8011126:	4770      	bx	lr
 8011128:	f44f 7302 	mov.w	r3, #520	; 0x208
 801112c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011130:	bf14      	ite	ne
 8011132:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011136:	4623      	moveq	r3, r4
 8011138:	9304      	str	r3, [sp, #16]
 801113a:	9307      	str	r3, [sp, #28]
 801113c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011140:	9002      	str	r0, [sp, #8]
 8011142:	9006      	str	r0, [sp, #24]
 8011144:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011148:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801114a:	ab21      	add	r3, sp, #132	; 0x84
 801114c:	a902      	add	r1, sp, #8
 801114e:	4628      	mov	r0, r5
 8011150:	9301      	str	r3, [sp, #4]
 8011152:	f001 fc59 	bl	8012a08 <_svfiprintf_r>
 8011156:	1c43      	adds	r3, r0, #1
 8011158:	bfbc      	itt	lt
 801115a:	238b      	movlt	r3, #139	; 0x8b
 801115c:	602b      	strlt	r3, [r5, #0]
 801115e:	2c00      	cmp	r4, #0
 8011160:	d0dd      	beq.n	801111e <sniprintf+0x16>
 8011162:	9b02      	ldr	r3, [sp, #8]
 8011164:	2200      	movs	r2, #0
 8011166:	701a      	strb	r2, [r3, #0]
 8011168:	e7d9      	b.n	801111e <sniprintf+0x16>
 801116a:	bf00      	nop
 801116c:	2000017c 	.word	0x2000017c

08011170 <siprintf>:
 8011170:	b40e      	push	{r1, r2, r3}
 8011172:	b500      	push	{lr}
 8011174:	b09c      	sub	sp, #112	; 0x70
 8011176:	f44f 7102 	mov.w	r1, #520	; 0x208
 801117a:	ab1d      	add	r3, sp, #116	; 0x74
 801117c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011180:	9002      	str	r0, [sp, #8]
 8011182:	9006      	str	r0, [sp, #24]
 8011184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011188:	480a      	ldr	r0, [pc, #40]	; (80111b4 <siprintf+0x44>)
 801118a:	9104      	str	r1, [sp, #16]
 801118c:	9107      	str	r1, [sp, #28]
 801118e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011192:	f853 2b04 	ldr.w	r2, [r3], #4
 8011196:	f8ad 1016 	strh.w	r1, [sp, #22]
 801119a:	6800      	ldr	r0, [r0, #0]
 801119c:	9301      	str	r3, [sp, #4]
 801119e:	a902      	add	r1, sp, #8
 80111a0:	f001 fc32 	bl	8012a08 <_svfiprintf_r>
 80111a4:	9b02      	ldr	r3, [sp, #8]
 80111a6:	2200      	movs	r2, #0
 80111a8:	701a      	strb	r2, [r3, #0]
 80111aa:	b01c      	add	sp, #112	; 0x70
 80111ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80111b0:	b003      	add	sp, #12
 80111b2:	4770      	bx	lr
 80111b4:	2000017c 	.word	0x2000017c

080111b8 <__sread>:
 80111b8:	b510      	push	{r4, lr}
 80111ba:	460c      	mov	r4, r1
 80111bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111c0:	f001 fe56 	bl	8012e70 <_read_r>
 80111c4:	2800      	cmp	r0, #0
 80111c6:	bfab      	itete	ge
 80111c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80111ca:	89a3      	ldrhlt	r3, [r4, #12]
 80111cc:	181b      	addge	r3, r3, r0
 80111ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80111d2:	bfac      	ite	ge
 80111d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80111d6:	81a3      	strhlt	r3, [r4, #12]
 80111d8:	bd10      	pop	{r4, pc}

080111da <__swrite>:
 80111da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111de:	461f      	mov	r7, r3
 80111e0:	898b      	ldrh	r3, [r1, #12]
 80111e2:	05db      	lsls	r3, r3, #23
 80111e4:	4605      	mov	r5, r0
 80111e6:	460c      	mov	r4, r1
 80111e8:	4616      	mov	r6, r2
 80111ea:	d505      	bpl.n	80111f8 <__swrite+0x1e>
 80111ec:	2302      	movs	r3, #2
 80111ee:	2200      	movs	r2, #0
 80111f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111f4:	f001 f830 	bl	8012258 <_lseek_r>
 80111f8:	89a3      	ldrh	r3, [r4, #12]
 80111fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011202:	81a3      	strh	r3, [r4, #12]
 8011204:	4632      	mov	r2, r6
 8011206:	463b      	mov	r3, r7
 8011208:	4628      	mov	r0, r5
 801120a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801120e:	f000 b929 	b.w	8011464 <_write_r>

08011212 <__sseek>:
 8011212:	b510      	push	{r4, lr}
 8011214:	460c      	mov	r4, r1
 8011216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801121a:	f001 f81d 	bl	8012258 <_lseek_r>
 801121e:	1c43      	adds	r3, r0, #1
 8011220:	89a3      	ldrh	r3, [r4, #12]
 8011222:	bf15      	itete	ne
 8011224:	6560      	strne	r0, [r4, #84]	; 0x54
 8011226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801122a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801122e:	81a3      	strheq	r3, [r4, #12]
 8011230:	bf18      	it	ne
 8011232:	81a3      	strhne	r3, [r4, #12]
 8011234:	bd10      	pop	{r4, pc}

08011236 <__sclose>:
 8011236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801123a:	f000 b993 	b.w	8011564 <_close_r>

0801123e <strcpy>:
 801123e:	4603      	mov	r3, r0
 8011240:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011244:	f803 2b01 	strb.w	r2, [r3], #1
 8011248:	2a00      	cmp	r2, #0
 801124a:	d1f9      	bne.n	8011240 <strcpy+0x2>
 801124c:	4770      	bx	lr

0801124e <strncpy>:
 801124e:	b570      	push	{r4, r5, r6, lr}
 8011250:	4604      	mov	r4, r0
 8011252:	b902      	cbnz	r2, 8011256 <strncpy+0x8>
 8011254:	bd70      	pop	{r4, r5, r6, pc}
 8011256:	4623      	mov	r3, r4
 8011258:	f811 5b01 	ldrb.w	r5, [r1], #1
 801125c:	f803 5b01 	strb.w	r5, [r3], #1
 8011260:	1e56      	subs	r6, r2, #1
 8011262:	b91d      	cbnz	r5, 801126c <strncpy+0x1e>
 8011264:	4414      	add	r4, r2
 8011266:	42a3      	cmp	r3, r4
 8011268:	d103      	bne.n	8011272 <strncpy+0x24>
 801126a:	bd70      	pop	{r4, r5, r6, pc}
 801126c:	461c      	mov	r4, r3
 801126e:	4632      	mov	r2, r6
 8011270:	e7ef      	b.n	8011252 <strncpy+0x4>
 8011272:	f803 5b01 	strb.w	r5, [r3], #1
 8011276:	e7f6      	b.n	8011266 <strncpy+0x18>

08011278 <_strtol_l.isra.0>:
 8011278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801127c:	4680      	mov	r8, r0
 801127e:	4689      	mov	r9, r1
 8011280:	4692      	mov	sl, r2
 8011282:	461f      	mov	r7, r3
 8011284:	468b      	mov	fp, r1
 8011286:	465d      	mov	r5, fp
 8011288:	980a      	ldr	r0, [sp, #40]	; 0x28
 801128a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801128e:	f7ff f8b3 	bl	80103f8 <__locale_ctype_ptr_l>
 8011292:	4420      	add	r0, r4
 8011294:	7846      	ldrb	r6, [r0, #1]
 8011296:	f016 0608 	ands.w	r6, r6, #8
 801129a:	d10b      	bne.n	80112b4 <_strtol_l.isra.0+0x3c>
 801129c:	2c2d      	cmp	r4, #45	; 0x2d
 801129e:	d10b      	bne.n	80112b8 <_strtol_l.isra.0+0x40>
 80112a0:	782c      	ldrb	r4, [r5, #0]
 80112a2:	2601      	movs	r6, #1
 80112a4:	f10b 0502 	add.w	r5, fp, #2
 80112a8:	b167      	cbz	r7, 80112c4 <_strtol_l.isra.0+0x4c>
 80112aa:	2f10      	cmp	r7, #16
 80112ac:	d114      	bne.n	80112d8 <_strtol_l.isra.0+0x60>
 80112ae:	2c30      	cmp	r4, #48	; 0x30
 80112b0:	d00a      	beq.n	80112c8 <_strtol_l.isra.0+0x50>
 80112b2:	e011      	b.n	80112d8 <_strtol_l.isra.0+0x60>
 80112b4:	46ab      	mov	fp, r5
 80112b6:	e7e6      	b.n	8011286 <_strtol_l.isra.0+0xe>
 80112b8:	2c2b      	cmp	r4, #43	; 0x2b
 80112ba:	bf04      	itt	eq
 80112bc:	782c      	ldrbeq	r4, [r5, #0]
 80112be:	f10b 0502 	addeq.w	r5, fp, #2
 80112c2:	e7f1      	b.n	80112a8 <_strtol_l.isra.0+0x30>
 80112c4:	2c30      	cmp	r4, #48	; 0x30
 80112c6:	d127      	bne.n	8011318 <_strtol_l.isra.0+0xa0>
 80112c8:	782b      	ldrb	r3, [r5, #0]
 80112ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80112ce:	2b58      	cmp	r3, #88	; 0x58
 80112d0:	d14b      	bne.n	801136a <_strtol_l.isra.0+0xf2>
 80112d2:	786c      	ldrb	r4, [r5, #1]
 80112d4:	2710      	movs	r7, #16
 80112d6:	3502      	adds	r5, #2
 80112d8:	2e00      	cmp	r6, #0
 80112da:	bf0c      	ite	eq
 80112dc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80112e0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80112e4:	2200      	movs	r2, #0
 80112e6:	fbb1 fef7 	udiv	lr, r1, r7
 80112ea:	4610      	mov	r0, r2
 80112ec:	fb07 1c1e 	mls	ip, r7, lr, r1
 80112f0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80112f4:	2b09      	cmp	r3, #9
 80112f6:	d811      	bhi.n	801131c <_strtol_l.isra.0+0xa4>
 80112f8:	461c      	mov	r4, r3
 80112fa:	42a7      	cmp	r7, r4
 80112fc:	dd1d      	ble.n	801133a <_strtol_l.isra.0+0xc2>
 80112fe:	1c53      	adds	r3, r2, #1
 8011300:	d007      	beq.n	8011312 <_strtol_l.isra.0+0x9a>
 8011302:	4586      	cmp	lr, r0
 8011304:	d316      	bcc.n	8011334 <_strtol_l.isra.0+0xbc>
 8011306:	d101      	bne.n	801130c <_strtol_l.isra.0+0x94>
 8011308:	45a4      	cmp	ip, r4
 801130a:	db13      	blt.n	8011334 <_strtol_l.isra.0+0xbc>
 801130c:	fb00 4007 	mla	r0, r0, r7, r4
 8011310:	2201      	movs	r2, #1
 8011312:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011316:	e7eb      	b.n	80112f0 <_strtol_l.isra.0+0x78>
 8011318:	270a      	movs	r7, #10
 801131a:	e7dd      	b.n	80112d8 <_strtol_l.isra.0+0x60>
 801131c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011320:	2b19      	cmp	r3, #25
 8011322:	d801      	bhi.n	8011328 <_strtol_l.isra.0+0xb0>
 8011324:	3c37      	subs	r4, #55	; 0x37
 8011326:	e7e8      	b.n	80112fa <_strtol_l.isra.0+0x82>
 8011328:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801132c:	2b19      	cmp	r3, #25
 801132e:	d804      	bhi.n	801133a <_strtol_l.isra.0+0xc2>
 8011330:	3c57      	subs	r4, #87	; 0x57
 8011332:	e7e2      	b.n	80112fa <_strtol_l.isra.0+0x82>
 8011334:	f04f 32ff 	mov.w	r2, #4294967295
 8011338:	e7eb      	b.n	8011312 <_strtol_l.isra.0+0x9a>
 801133a:	1c53      	adds	r3, r2, #1
 801133c:	d108      	bne.n	8011350 <_strtol_l.isra.0+0xd8>
 801133e:	2322      	movs	r3, #34	; 0x22
 8011340:	f8c8 3000 	str.w	r3, [r8]
 8011344:	4608      	mov	r0, r1
 8011346:	f1ba 0f00 	cmp.w	sl, #0
 801134a:	d107      	bne.n	801135c <_strtol_l.isra.0+0xe4>
 801134c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011350:	b106      	cbz	r6, 8011354 <_strtol_l.isra.0+0xdc>
 8011352:	4240      	negs	r0, r0
 8011354:	f1ba 0f00 	cmp.w	sl, #0
 8011358:	d00c      	beq.n	8011374 <_strtol_l.isra.0+0xfc>
 801135a:	b122      	cbz	r2, 8011366 <_strtol_l.isra.0+0xee>
 801135c:	3d01      	subs	r5, #1
 801135e:	f8ca 5000 	str.w	r5, [sl]
 8011362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011366:	464d      	mov	r5, r9
 8011368:	e7f9      	b.n	801135e <_strtol_l.isra.0+0xe6>
 801136a:	2430      	movs	r4, #48	; 0x30
 801136c:	2f00      	cmp	r7, #0
 801136e:	d1b3      	bne.n	80112d8 <_strtol_l.isra.0+0x60>
 8011370:	2708      	movs	r7, #8
 8011372:	e7b1      	b.n	80112d8 <_strtol_l.isra.0+0x60>
 8011374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011378 <strtol>:
 8011378:	4b08      	ldr	r3, [pc, #32]	; (801139c <strtol+0x24>)
 801137a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801137c:	681c      	ldr	r4, [r3, #0]
 801137e:	4d08      	ldr	r5, [pc, #32]	; (80113a0 <strtol+0x28>)
 8011380:	6a23      	ldr	r3, [r4, #32]
 8011382:	2b00      	cmp	r3, #0
 8011384:	bf08      	it	eq
 8011386:	462b      	moveq	r3, r5
 8011388:	9300      	str	r3, [sp, #0]
 801138a:	4613      	mov	r3, r2
 801138c:	460a      	mov	r2, r1
 801138e:	4601      	mov	r1, r0
 8011390:	4620      	mov	r0, r4
 8011392:	f7ff ff71 	bl	8011278 <_strtol_l.isra.0>
 8011396:	b003      	add	sp, #12
 8011398:	bd30      	pop	{r4, r5, pc}
 801139a:	bf00      	nop
 801139c:	2000017c 	.word	0x2000017c
 80113a0:	200001e0 	.word	0x200001e0

080113a4 <__swbuf_r>:
 80113a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113a6:	460e      	mov	r6, r1
 80113a8:	4614      	mov	r4, r2
 80113aa:	4605      	mov	r5, r0
 80113ac:	b118      	cbz	r0, 80113b6 <__swbuf_r+0x12>
 80113ae:	6983      	ldr	r3, [r0, #24]
 80113b0:	b90b      	cbnz	r3, 80113b6 <__swbuf_r+0x12>
 80113b2:	f7fe ff57 	bl	8010264 <__sinit>
 80113b6:	4b21      	ldr	r3, [pc, #132]	; (801143c <__swbuf_r+0x98>)
 80113b8:	429c      	cmp	r4, r3
 80113ba:	d12a      	bne.n	8011412 <__swbuf_r+0x6e>
 80113bc:	686c      	ldr	r4, [r5, #4]
 80113be:	69a3      	ldr	r3, [r4, #24]
 80113c0:	60a3      	str	r3, [r4, #8]
 80113c2:	89a3      	ldrh	r3, [r4, #12]
 80113c4:	071a      	lsls	r2, r3, #28
 80113c6:	d52e      	bpl.n	8011426 <__swbuf_r+0x82>
 80113c8:	6923      	ldr	r3, [r4, #16]
 80113ca:	b363      	cbz	r3, 8011426 <__swbuf_r+0x82>
 80113cc:	6923      	ldr	r3, [r4, #16]
 80113ce:	6820      	ldr	r0, [r4, #0]
 80113d0:	1ac0      	subs	r0, r0, r3
 80113d2:	6963      	ldr	r3, [r4, #20]
 80113d4:	b2f6      	uxtb	r6, r6
 80113d6:	4298      	cmp	r0, r3
 80113d8:	4637      	mov	r7, r6
 80113da:	db04      	blt.n	80113e6 <__swbuf_r+0x42>
 80113dc:	4621      	mov	r1, r4
 80113de:	4628      	mov	r0, r5
 80113e0:	f7fe fe58 	bl	8010094 <_fflush_r>
 80113e4:	bb28      	cbnz	r0, 8011432 <__swbuf_r+0x8e>
 80113e6:	68a3      	ldr	r3, [r4, #8]
 80113e8:	3b01      	subs	r3, #1
 80113ea:	60a3      	str	r3, [r4, #8]
 80113ec:	6823      	ldr	r3, [r4, #0]
 80113ee:	1c5a      	adds	r2, r3, #1
 80113f0:	6022      	str	r2, [r4, #0]
 80113f2:	701e      	strb	r6, [r3, #0]
 80113f4:	6963      	ldr	r3, [r4, #20]
 80113f6:	3001      	adds	r0, #1
 80113f8:	4298      	cmp	r0, r3
 80113fa:	d004      	beq.n	8011406 <__swbuf_r+0x62>
 80113fc:	89a3      	ldrh	r3, [r4, #12]
 80113fe:	07db      	lsls	r3, r3, #31
 8011400:	d519      	bpl.n	8011436 <__swbuf_r+0x92>
 8011402:	2e0a      	cmp	r6, #10
 8011404:	d117      	bne.n	8011436 <__swbuf_r+0x92>
 8011406:	4621      	mov	r1, r4
 8011408:	4628      	mov	r0, r5
 801140a:	f7fe fe43 	bl	8010094 <_fflush_r>
 801140e:	b190      	cbz	r0, 8011436 <__swbuf_r+0x92>
 8011410:	e00f      	b.n	8011432 <__swbuf_r+0x8e>
 8011412:	4b0b      	ldr	r3, [pc, #44]	; (8011440 <__swbuf_r+0x9c>)
 8011414:	429c      	cmp	r4, r3
 8011416:	d101      	bne.n	801141c <__swbuf_r+0x78>
 8011418:	68ac      	ldr	r4, [r5, #8]
 801141a:	e7d0      	b.n	80113be <__swbuf_r+0x1a>
 801141c:	4b09      	ldr	r3, [pc, #36]	; (8011444 <__swbuf_r+0xa0>)
 801141e:	429c      	cmp	r4, r3
 8011420:	bf08      	it	eq
 8011422:	68ec      	ldreq	r4, [r5, #12]
 8011424:	e7cb      	b.n	80113be <__swbuf_r+0x1a>
 8011426:	4621      	mov	r1, r4
 8011428:	4628      	mov	r0, r5
 801142a:	f000 f82d 	bl	8011488 <__swsetup_r>
 801142e:	2800      	cmp	r0, #0
 8011430:	d0cc      	beq.n	80113cc <__swbuf_r+0x28>
 8011432:	f04f 37ff 	mov.w	r7, #4294967295
 8011436:	4638      	mov	r0, r7
 8011438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801143a:	bf00      	nop
 801143c:	08015f94 	.word	0x08015f94
 8011440:	08015fb4 	.word	0x08015fb4
 8011444:	08015f74 	.word	0x08015f74

08011448 <__ascii_wctomb>:
 8011448:	b149      	cbz	r1, 801145e <__ascii_wctomb+0x16>
 801144a:	2aff      	cmp	r2, #255	; 0xff
 801144c:	bf85      	ittet	hi
 801144e:	238a      	movhi	r3, #138	; 0x8a
 8011450:	6003      	strhi	r3, [r0, #0]
 8011452:	700a      	strbls	r2, [r1, #0]
 8011454:	f04f 30ff 	movhi.w	r0, #4294967295
 8011458:	bf98      	it	ls
 801145a:	2001      	movls	r0, #1
 801145c:	4770      	bx	lr
 801145e:	4608      	mov	r0, r1
 8011460:	4770      	bx	lr
	...

08011464 <_write_r>:
 8011464:	b538      	push	{r3, r4, r5, lr}
 8011466:	4c07      	ldr	r4, [pc, #28]	; (8011484 <_write_r+0x20>)
 8011468:	4605      	mov	r5, r0
 801146a:	4608      	mov	r0, r1
 801146c:	4611      	mov	r1, r2
 801146e:	2200      	movs	r2, #0
 8011470:	6022      	str	r2, [r4, #0]
 8011472:	461a      	mov	r2, r3
 8011474:	f7fd fb4a 	bl	800eb0c <_write>
 8011478:	1c43      	adds	r3, r0, #1
 801147a:	d102      	bne.n	8011482 <_write_r+0x1e>
 801147c:	6823      	ldr	r3, [r4, #0]
 801147e:	b103      	cbz	r3, 8011482 <_write_r+0x1e>
 8011480:	602b      	str	r3, [r5, #0]
 8011482:	bd38      	pop	{r3, r4, r5, pc}
 8011484:	20002e14 	.word	0x20002e14

08011488 <__swsetup_r>:
 8011488:	4b32      	ldr	r3, [pc, #200]	; (8011554 <__swsetup_r+0xcc>)
 801148a:	b570      	push	{r4, r5, r6, lr}
 801148c:	681d      	ldr	r5, [r3, #0]
 801148e:	4606      	mov	r6, r0
 8011490:	460c      	mov	r4, r1
 8011492:	b125      	cbz	r5, 801149e <__swsetup_r+0x16>
 8011494:	69ab      	ldr	r3, [r5, #24]
 8011496:	b913      	cbnz	r3, 801149e <__swsetup_r+0x16>
 8011498:	4628      	mov	r0, r5
 801149a:	f7fe fee3 	bl	8010264 <__sinit>
 801149e:	4b2e      	ldr	r3, [pc, #184]	; (8011558 <__swsetup_r+0xd0>)
 80114a0:	429c      	cmp	r4, r3
 80114a2:	d10f      	bne.n	80114c4 <__swsetup_r+0x3c>
 80114a4:	686c      	ldr	r4, [r5, #4]
 80114a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	0715      	lsls	r5, r2, #28
 80114ae:	d42c      	bmi.n	801150a <__swsetup_r+0x82>
 80114b0:	06d0      	lsls	r0, r2, #27
 80114b2:	d411      	bmi.n	80114d8 <__swsetup_r+0x50>
 80114b4:	2209      	movs	r2, #9
 80114b6:	6032      	str	r2, [r6, #0]
 80114b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114bc:	81a3      	strh	r3, [r4, #12]
 80114be:	f04f 30ff 	mov.w	r0, #4294967295
 80114c2:	bd70      	pop	{r4, r5, r6, pc}
 80114c4:	4b25      	ldr	r3, [pc, #148]	; (801155c <__swsetup_r+0xd4>)
 80114c6:	429c      	cmp	r4, r3
 80114c8:	d101      	bne.n	80114ce <__swsetup_r+0x46>
 80114ca:	68ac      	ldr	r4, [r5, #8]
 80114cc:	e7eb      	b.n	80114a6 <__swsetup_r+0x1e>
 80114ce:	4b24      	ldr	r3, [pc, #144]	; (8011560 <__swsetup_r+0xd8>)
 80114d0:	429c      	cmp	r4, r3
 80114d2:	bf08      	it	eq
 80114d4:	68ec      	ldreq	r4, [r5, #12]
 80114d6:	e7e6      	b.n	80114a6 <__swsetup_r+0x1e>
 80114d8:	0751      	lsls	r1, r2, #29
 80114da:	d512      	bpl.n	8011502 <__swsetup_r+0x7a>
 80114dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114de:	b141      	cbz	r1, 80114f2 <__swsetup_r+0x6a>
 80114e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114e4:	4299      	cmp	r1, r3
 80114e6:	d002      	beq.n	80114ee <__swsetup_r+0x66>
 80114e8:	4630      	mov	r0, r6
 80114ea:	f7fe ffcd 	bl	8010488 <_free_r>
 80114ee:	2300      	movs	r3, #0
 80114f0:	6363      	str	r3, [r4, #52]	; 0x34
 80114f2:	89a3      	ldrh	r3, [r4, #12]
 80114f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80114f8:	81a3      	strh	r3, [r4, #12]
 80114fa:	2300      	movs	r3, #0
 80114fc:	6063      	str	r3, [r4, #4]
 80114fe:	6923      	ldr	r3, [r4, #16]
 8011500:	6023      	str	r3, [r4, #0]
 8011502:	89a3      	ldrh	r3, [r4, #12]
 8011504:	f043 0308 	orr.w	r3, r3, #8
 8011508:	81a3      	strh	r3, [r4, #12]
 801150a:	6923      	ldr	r3, [r4, #16]
 801150c:	b94b      	cbnz	r3, 8011522 <__swsetup_r+0x9a>
 801150e:	89a3      	ldrh	r3, [r4, #12]
 8011510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011518:	d003      	beq.n	8011522 <__swsetup_r+0x9a>
 801151a:	4621      	mov	r1, r4
 801151c:	4630      	mov	r0, r6
 801151e:	f000 fed1 	bl	80122c4 <__smakebuf_r>
 8011522:	89a2      	ldrh	r2, [r4, #12]
 8011524:	f012 0301 	ands.w	r3, r2, #1
 8011528:	d00c      	beq.n	8011544 <__swsetup_r+0xbc>
 801152a:	2300      	movs	r3, #0
 801152c:	60a3      	str	r3, [r4, #8]
 801152e:	6963      	ldr	r3, [r4, #20]
 8011530:	425b      	negs	r3, r3
 8011532:	61a3      	str	r3, [r4, #24]
 8011534:	6923      	ldr	r3, [r4, #16]
 8011536:	b953      	cbnz	r3, 801154e <__swsetup_r+0xc6>
 8011538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801153c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011540:	d1ba      	bne.n	80114b8 <__swsetup_r+0x30>
 8011542:	bd70      	pop	{r4, r5, r6, pc}
 8011544:	0792      	lsls	r2, r2, #30
 8011546:	bf58      	it	pl
 8011548:	6963      	ldrpl	r3, [r4, #20]
 801154a:	60a3      	str	r3, [r4, #8]
 801154c:	e7f2      	b.n	8011534 <__swsetup_r+0xac>
 801154e:	2000      	movs	r0, #0
 8011550:	e7f7      	b.n	8011542 <__swsetup_r+0xba>
 8011552:	bf00      	nop
 8011554:	2000017c 	.word	0x2000017c
 8011558:	08015f94 	.word	0x08015f94
 801155c:	08015fb4 	.word	0x08015fb4
 8011560:	08015f74 	.word	0x08015f74

08011564 <_close_r>:
 8011564:	b538      	push	{r3, r4, r5, lr}
 8011566:	4c06      	ldr	r4, [pc, #24]	; (8011580 <_close_r+0x1c>)
 8011568:	2300      	movs	r3, #0
 801156a:	4605      	mov	r5, r0
 801156c:	4608      	mov	r0, r1
 801156e:	6023      	str	r3, [r4, #0]
 8011570:	f001 fcd6 	bl	8012f20 <_close>
 8011574:	1c43      	adds	r3, r0, #1
 8011576:	d102      	bne.n	801157e <_close_r+0x1a>
 8011578:	6823      	ldr	r3, [r4, #0]
 801157a:	b103      	cbz	r3, 801157e <_close_r+0x1a>
 801157c:	602b      	str	r3, [r5, #0]
 801157e:	bd38      	pop	{r3, r4, r5, pc}
 8011580:	20002e14 	.word	0x20002e14

08011584 <quorem>:
 8011584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011588:	6903      	ldr	r3, [r0, #16]
 801158a:	690c      	ldr	r4, [r1, #16]
 801158c:	429c      	cmp	r4, r3
 801158e:	4680      	mov	r8, r0
 8011590:	f300 8082 	bgt.w	8011698 <quorem+0x114>
 8011594:	3c01      	subs	r4, #1
 8011596:	f101 0714 	add.w	r7, r1, #20
 801159a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801159e:	f100 0614 	add.w	r6, r0, #20
 80115a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80115a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80115aa:	eb06 030e 	add.w	r3, r6, lr
 80115ae:	3501      	adds	r5, #1
 80115b0:	eb07 090e 	add.w	r9, r7, lr
 80115b4:	9301      	str	r3, [sp, #4]
 80115b6:	fbb0 f5f5 	udiv	r5, r0, r5
 80115ba:	b395      	cbz	r5, 8011622 <quorem+0x9e>
 80115bc:	f04f 0a00 	mov.w	sl, #0
 80115c0:	4638      	mov	r0, r7
 80115c2:	46b4      	mov	ip, r6
 80115c4:	46d3      	mov	fp, sl
 80115c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80115ca:	b293      	uxth	r3, r2
 80115cc:	fb05 a303 	mla	r3, r5, r3, sl
 80115d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	ebab 0303 	sub.w	r3, fp, r3
 80115da:	0c12      	lsrs	r2, r2, #16
 80115dc:	f8bc b000 	ldrh.w	fp, [ip]
 80115e0:	fb05 a202 	mla	r2, r5, r2, sl
 80115e4:	fa13 f38b 	uxtah	r3, r3, fp
 80115e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80115ec:	fa1f fb82 	uxth.w	fp, r2
 80115f0:	f8dc 2000 	ldr.w	r2, [ip]
 80115f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80115f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011602:	4581      	cmp	r9, r0
 8011604:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011608:	f84c 3b04 	str.w	r3, [ip], #4
 801160c:	d2db      	bcs.n	80115c6 <quorem+0x42>
 801160e:	f856 300e 	ldr.w	r3, [r6, lr]
 8011612:	b933      	cbnz	r3, 8011622 <quorem+0x9e>
 8011614:	9b01      	ldr	r3, [sp, #4]
 8011616:	3b04      	subs	r3, #4
 8011618:	429e      	cmp	r6, r3
 801161a:	461a      	mov	r2, r3
 801161c:	d330      	bcc.n	8011680 <quorem+0xfc>
 801161e:	f8c8 4010 	str.w	r4, [r8, #16]
 8011622:	4640      	mov	r0, r8
 8011624:	f001 f899 	bl	801275a <__mcmp>
 8011628:	2800      	cmp	r0, #0
 801162a:	db25      	blt.n	8011678 <quorem+0xf4>
 801162c:	3501      	adds	r5, #1
 801162e:	4630      	mov	r0, r6
 8011630:	f04f 0e00 	mov.w	lr, #0
 8011634:	f857 2b04 	ldr.w	r2, [r7], #4
 8011638:	f8d0 c000 	ldr.w	ip, [r0]
 801163c:	b293      	uxth	r3, r2
 801163e:	ebae 0303 	sub.w	r3, lr, r3
 8011642:	0c12      	lsrs	r2, r2, #16
 8011644:	fa13 f38c 	uxtah	r3, r3, ip
 8011648:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801164c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011650:	b29b      	uxth	r3, r3
 8011652:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011656:	45b9      	cmp	r9, r7
 8011658:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801165c:	f840 3b04 	str.w	r3, [r0], #4
 8011660:	d2e8      	bcs.n	8011634 <quorem+0xb0>
 8011662:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8011666:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801166a:	b92a      	cbnz	r2, 8011678 <quorem+0xf4>
 801166c:	3b04      	subs	r3, #4
 801166e:	429e      	cmp	r6, r3
 8011670:	461a      	mov	r2, r3
 8011672:	d30b      	bcc.n	801168c <quorem+0x108>
 8011674:	f8c8 4010 	str.w	r4, [r8, #16]
 8011678:	4628      	mov	r0, r5
 801167a:	b003      	add	sp, #12
 801167c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011680:	6812      	ldr	r2, [r2, #0]
 8011682:	3b04      	subs	r3, #4
 8011684:	2a00      	cmp	r2, #0
 8011686:	d1ca      	bne.n	801161e <quorem+0x9a>
 8011688:	3c01      	subs	r4, #1
 801168a:	e7c5      	b.n	8011618 <quorem+0x94>
 801168c:	6812      	ldr	r2, [r2, #0]
 801168e:	3b04      	subs	r3, #4
 8011690:	2a00      	cmp	r2, #0
 8011692:	d1ef      	bne.n	8011674 <quorem+0xf0>
 8011694:	3c01      	subs	r4, #1
 8011696:	e7ea      	b.n	801166e <quorem+0xea>
 8011698:	2000      	movs	r0, #0
 801169a:	e7ee      	b.n	801167a <quorem+0xf6>
 801169c:	0000      	movs	r0, r0
	...

080116a0 <_dtoa_r>:
 80116a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a4:	ec57 6b10 	vmov	r6, r7, d0
 80116a8:	b097      	sub	sp, #92	; 0x5c
 80116aa:	e9cd 6700 	strd	r6, r7, [sp]
 80116ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80116b0:	9107      	str	r1, [sp, #28]
 80116b2:	4604      	mov	r4, r0
 80116b4:	920a      	str	r2, [sp, #40]	; 0x28
 80116b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80116b8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80116ba:	b93e      	cbnz	r6, 80116cc <_dtoa_r+0x2c>
 80116bc:	2010      	movs	r0, #16
 80116be:	f7fe fead 	bl	801041c <malloc>
 80116c2:	6260      	str	r0, [r4, #36]	; 0x24
 80116c4:	6046      	str	r6, [r0, #4]
 80116c6:	6086      	str	r6, [r0, #8]
 80116c8:	6006      	str	r6, [r0, #0]
 80116ca:	60c6      	str	r6, [r0, #12]
 80116cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116ce:	6819      	ldr	r1, [r3, #0]
 80116d0:	b151      	cbz	r1, 80116e8 <_dtoa_r+0x48>
 80116d2:	685a      	ldr	r2, [r3, #4]
 80116d4:	604a      	str	r2, [r1, #4]
 80116d6:	2301      	movs	r3, #1
 80116d8:	4093      	lsls	r3, r2
 80116da:	608b      	str	r3, [r1, #8]
 80116dc:	4620      	mov	r0, r4
 80116de:	f000 fe67 	bl	80123b0 <_Bfree>
 80116e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116e4:	2200      	movs	r2, #0
 80116e6:	601a      	str	r2, [r3, #0]
 80116e8:	9b01      	ldr	r3, [sp, #4]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	bfbf      	itttt	lt
 80116ee:	2301      	movlt	r3, #1
 80116f0:	602b      	strlt	r3, [r5, #0]
 80116f2:	9b01      	ldrlt	r3, [sp, #4]
 80116f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80116f8:	bfb2      	itee	lt
 80116fa:	9301      	strlt	r3, [sp, #4]
 80116fc:	2300      	movge	r3, #0
 80116fe:	602b      	strge	r3, [r5, #0]
 8011700:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011704:	4ba8      	ldr	r3, [pc, #672]	; (80119a8 <_dtoa_r+0x308>)
 8011706:	ea33 0308 	bics.w	r3, r3, r8
 801170a:	d11b      	bne.n	8011744 <_dtoa_r+0xa4>
 801170c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801170e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011712:	6013      	str	r3, [r2, #0]
 8011714:	9b00      	ldr	r3, [sp, #0]
 8011716:	b923      	cbnz	r3, 8011722 <_dtoa_r+0x82>
 8011718:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801171c:	2800      	cmp	r0, #0
 801171e:	f000 8578 	beq.w	8012212 <_dtoa_r+0xb72>
 8011722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011724:	b953      	cbnz	r3, 801173c <_dtoa_r+0x9c>
 8011726:	4ba1      	ldr	r3, [pc, #644]	; (80119ac <_dtoa_r+0x30c>)
 8011728:	e021      	b.n	801176e <_dtoa_r+0xce>
 801172a:	4ba1      	ldr	r3, [pc, #644]	; (80119b0 <_dtoa_r+0x310>)
 801172c:	9302      	str	r3, [sp, #8]
 801172e:	3308      	adds	r3, #8
 8011730:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011732:	6013      	str	r3, [r2, #0]
 8011734:	9802      	ldr	r0, [sp, #8]
 8011736:	b017      	add	sp, #92	; 0x5c
 8011738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801173c:	4b9b      	ldr	r3, [pc, #620]	; (80119ac <_dtoa_r+0x30c>)
 801173e:	9302      	str	r3, [sp, #8]
 8011740:	3303      	adds	r3, #3
 8011742:	e7f5      	b.n	8011730 <_dtoa_r+0x90>
 8011744:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011748:	2200      	movs	r2, #0
 801174a:	2300      	movs	r3, #0
 801174c:	4630      	mov	r0, r6
 801174e:	4639      	mov	r1, r7
 8011750:	f7ef f9e0 	bl	8000b14 <__aeabi_dcmpeq>
 8011754:	4681      	mov	r9, r0
 8011756:	b160      	cbz	r0, 8011772 <_dtoa_r+0xd2>
 8011758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801175a:	2301      	movs	r3, #1
 801175c:	6013      	str	r3, [r2, #0]
 801175e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011760:	2b00      	cmp	r3, #0
 8011762:	f000 8553 	beq.w	801220c <_dtoa_r+0xb6c>
 8011766:	4b93      	ldr	r3, [pc, #588]	; (80119b4 <_dtoa_r+0x314>)
 8011768:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801176a:	6013      	str	r3, [r2, #0]
 801176c:	3b01      	subs	r3, #1
 801176e:	9302      	str	r3, [sp, #8]
 8011770:	e7e0      	b.n	8011734 <_dtoa_r+0x94>
 8011772:	aa14      	add	r2, sp, #80	; 0x50
 8011774:	a915      	add	r1, sp, #84	; 0x54
 8011776:	ec47 6b10 	vmov	d0, r6, r7
 801177a:	4620      	mov	r0, r4
 801177c:	f001 f865 	bl	801284a <__d2b>
 8011780:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011784:	4682      	mov	sl, r0
 8011786:	2d00      	cmp	r5, #0
 8011788:	d07e      	beq.n	8011888 <_dtoa_r+0x1e8>
 801178a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801178e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8011792:	4630      	mov	r0, r6
 8011794:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011798:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801179c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80117a0:	2200      	movs	r2, #0
 80117a2:	4b85      	ldr	r3, [pc, #532]	; (80119b8 <_dtoa_r+0x318>)
 80117a4:	f7ee fd9a 	bl	80002dc <__aeabi_dsub>
 80117a8:	a379      	add	r3, pc, #484	; (adr r3, 8011990 <_dtoa_r+0x2f0>)
 80117aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ae:	f7ee ff49 	bl	8000644 <__aeabi_dmul>
 80117b2:	a379      	add	r3, pc, #484	; (adr r3, 8011998 <_dtoa_r+0x2f8>)
 80117b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b8:	f7ee fd92 	bl	80002e0 <__adddf3>
 80117bc:	4606      	mov	r6, r0
 80117be:	4628      	mov	r0, r5
 80117c0:	460f      	mov	r7, r1
 80117c2:	f7ee fed9 	bl	8000578 <__aeabi_i2d>
 80117c6:	a376      	add	r3, pc, #472	; (adr r3, 80119a0 <_dtoa_r+0x300>)
 80117c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117cc:	f7ee ff3a 	bl	8000644 <__aeabi_dmul>
 80117d0:	4602      	mov	r2, r0
 80117d2:	460b      	mov	r3, r1
 80117d4:	4630      	mov	r0, r6
 80117d6:	4639      	mov	r1, r7
 80117d8:	f7ee fd82 	bl	80002e0 <__adddf3>
 80117dc:	4606      	mov	r6, r0
 80117de:	460f      	mov	r7, r1
 80117e0:	f7ef f9e0 	bl	8000ba4 <__aeabi_d2iz>
 80117e4:	2200      	movs	r2, #0
 80117e6:	4683      	mov	fp, r0
 80117e8:	2300      	movs	r3, #0
 80117ea:	4630      	mov	r0, r6
 80117ec:	4639      	mov	r1, r7
 80117ee:	f7ef f99b 	bl	8000b28 <__aeabi_dcmplt>
 80117f2:	b158      	cbz	r0, 801180c <_dtoa_r+0x16c>
 80117f4:	4658      	mov	r0, fp
 80117f6:	f7ee febf 	bl	8000578 <__aeabi_i2d>
 80117fa:	4602      	mov	r2, r0
 80117fc:	460b      	mov	r3, r1
 80117fe:	4630      	mov	r0, r6
 8011800:	4639      	mov	r1, r7
 8011802:	f7ef f987 	bl	8000b14 <__aeabi_dcmpeq>
 8011806:	b908      	cbnz	r0, 801180c <_dtoa_r+0x16c>
 8011808:	f10b 3bff 	add.w	fp, fp, #4294967295
 801180c:	f1bb 0f16 	cmp.w	fp, #22
 8011810:	d859      	bhi.n	80118c6 <_dtoa_r+0x226>
 8011812:	496a      	ldr	r1, [pc, #424]	; (80119bc <_dtoa_r+0x31c>)
 8011814:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8011818:	e9dd 2300 	ldrd	r2, r3, [sp]
 801181c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011820:	f7ef f9a0 	bl	8000b64 <__aeabi_dcmpgt>
 8011824:	2800      	cmp	r0, #0
 8011826:	d050      	beq.n	80118ca <_dtoa_r+0x22a>
 8011828:	f10b 3bff 	add.w	fp, fp, #4294967295
 801182c:	2300      	movs	r3, #0
 801182e:	930e      	str	r3, [sp, #56]	; 0x38
 8011830:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011832:	1b5d      	subs	r5, r3, r5
 8011834:	1e6b      	subs	r3, r5, #1
 8011836:	9306      	str	r3, [sp, #24]
 8011838:	bf45      	ittet	mi
 801183a:	f1c5 0301 	rsbmi	r3, r5, #1
 801183e:	9305      	strmi	r3, [sp, #20]
 8011840:	2300      	movpl	r3, #0
 8011842:	2300      	movmi	r3, #0
 8011844:	bf4c      	ite	mi
 8011846:	9306      	strmi	r3, [sp, #24]
 8011848:	9305      	strpl	r3, [sp, #20]
 801184a:	f1bb 0f00 	cmp.w	fp, #0
 801184e:	db3e      	blt.n	80118ce <_dtoa_r+0x22e>
 8011850:	9b06      	ldr	r3, [sp, #24]
 8011852:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011856:	445b      	add	r3, fp
 8011858:	9306      	str	r3, [sp, #24]
 801185a:	2300      	movs	r3, #0
 801185c:	9308      	str	r3, [sp, #32]
 801185e:	9b07      	ldr	r3, [sp, #28]
 8011860:	2b09      	cmp	r3, #9
 8011862:	f200 80af 	bhi.w	80119c4 <_dtoa_r+0x324>
 8011866:	2b05      	cmp	r3, #5
 8011868:	bfc4      	itt	gt
 801186a:	3b04      	subgt	r3, #4
 801186c:	9307      	strgt	r3, [sp, #28]
 801186e:	9b07      	ldr	r3, [sp, #28]
 8011870:	f1a3 0302 	sub.w	r3, r3, #2
 8011874:	bfcc      	ite	gt
 8011876:	2600      	movgt	r6, #0
 8011878:	2601      	movle	r6, #1
 801187a:	2b03      	cmp	r3, #3
 801187c:	f200 80ae 	bhi.w	80119dc <_dtoa_r+0x33c>
 8011880:	e8df f003 	tbb	[pc, r3]
 8011884:	772f8482 	.word	0x772f8482
 8011888:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801188a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801188c:	441d      	add	r5, r3
 801188e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011892:	2b20      	cmp	r3, #32
 8011894:	dd11      	ble.n	80118ba <_dtoa_r+0x21a>
 8011896:	9a00      	ldr	r2, [sp, #0]
 8011898:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801189c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80118a0:	fa22 f000 	lsr.w	r0, r2, r0
 80118a4:	fa08 f303 	lsl.w	r3, r8, r3
 80118a8:	4318      	orrs	r0, r3
 80118aa:	f7ee fe55 	bl	8000558 <__aeabi_ui2d>
 80118ae:	2301      	movs	r3, #1
 80118b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80118b4:	3d01      	subs	r5, #1
 80118b6:	9312      	str	r3, [sp, #72]	; 0x48
 80118b8:	e772      	b.n	80117a0 <_dtoa_r+0x100>
 80118ba:	f1c3 0020 	rsb	r0, r3, #32
 80118be:	9b00      	ldr	r3, [sp, #0]
 80118c0:	fa03 f000 	lsl.w	r0, r3, r0
 80118c4:	e7f1      	b.n	80118aa <_dtoa_r+0x20a>
 80118c6:	2301      	movs	r3, #1
 80118c8:	e7b1      	b.n	801182e <_dtoa_r+0x18e>
 80118ca:	900e      	str	r0, [sp, #56]	; 0x38
 80118cc:	e7b0      	b.n	8011830 <_dtoa_r+0x190>
 80118ce:	9b05      	ldr	r3, [sp, #20]
 80118d0:	eba3 030b 	sub.w	r3, r3, fp
 80118d4:	9305      	str	r3, [sp, #20]
 80118d6:	f1cb 0300 	rsb	r3, fp, #0
 80118da:	9308      	str	r3, [sp, #32]
 80118dc:	2300      	movs	r3, #0
 80118de:	930b      	str	r3, [sp, #44]	; 0x2c
 80118e0:	e7bd      	b.n	801185e <_dtoa_r+0x1be>
 80118e2:	2301      	movs	r3, #1
 80118e4:	9309      	str	r3, [sp, #36]	; 0x24
 80118e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	dd7a      	ble.n	80119e2 <_dtoa_r+0x342>
 80118ec:	9304      	str	r3, [sp, #16]
 80118ee:	9303      	str	r3, [sp, #12]
 80118f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80118f2:	2200      	movs	r2, #0
 80118f4:	606a      	str	r2, [r5, #4]
 80118f6:	2104      	movs	r1, #4
 80118f8:	f101 0214 	add.w	r2, r1, #20
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d975      	bls.n	80119ec <_dtoa_r+0x34c>
 8011900:	6869      	ldr	r1, [r5, #4]
 8011902:	4620      	mov	r0, r4
 8011904:	f000 fd20 	bl	8012348 <_Balloc>
 8011908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801190a:	6028      	str	r0, [r5, #0]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	9302      	str	r3, [sp, #8]
 8011910:	9b03      	ldr	r3, [sp, #12]
 8011912:	2b0e      	cmp	r3, #14
 8011914:	f200 80e5 	bhi.w	8011ae2 <_dtoa_r+0x442>
 8011918:	2e00      	cmp	r6, #0
 801191a:	f000 80e2 	beq.w	8011ae2 <_dtoa_r+0x442>
 801191e:	ed9d 7b00 	vldr	d7, [sp]
 8011922:	f1bb 0f00 	cmp.w	fp, #0
 8011926:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801192a:	dd74      	ble.n	8011a16 <_dtoa_r+0x376>
 801192c:	4a23      	ldr	r2, [pc, #140]	; (80119bc <_dtoa_r+0x31c>)
 801192e:	f00b 030f 	and.w	r3, fp, #15
 8011932:	ea4f 162b 	mov.w	r6, fp, asr #4
 8011936:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801193a:	06f0      	lsls	r0, r6, #27
 801193c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011940:	d559      	bpl.n	80119f6 <_dtoa_r+0x356>
 8011942:	4b1f      	ldr	r3, [pc, #124]	; (80119c0 <_dtoa_r+0x320>)
 8011944:	ec51 0b17 	vmov	r0, r1, d7
 8011948:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801194c:	f7ee ffa4 	bl	8000898 <__aeabi_ddiv>
 8011950:	e9cd 0100 	strd	r0, r1, [sp]
 8011954:	f006 060f 	and.w	r6, r6, #15
 8011958:	2503      	movs	r5, #3
 801195a:	4f19      	ldr	r7, [pc, #100]	; (80119c0 <_dtoa_r+0x320>)
 801195c:	2e00      	cmp	r6, #0
 801195e:	d14c      	bne.n	80119fa <_dtoa_r+0x35a>
 8011960:	4642      	mov	r2, r8
 8011962:	464b      	mov	r3, r9
 8011964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011968:	f7ee ff96 	bl	8000898 <__aeabi_ddiv>
 801196c:	e9cd 0100 	strd	r0, r1, [sp]
 8011970:	e06a      	b.n	8011a48 <_dtoa_r+0x3a8>
 8011972:	2301      	movs	r3, #1
 8011974:	9309      	str	r3, [sp, #36]	; 0x24
 8011976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011978:	445b      	add	r3, fp
 801197a:	9304      	str	r3, [sp, #16]
 801197c:	3301      	adds	r3, #1
 801197e:	2b01      	cmp	r3, #1
 8011980:	9303      	str	r3, [sp, #12]
 8011982:	bfb8      	it	lt
 8011984:	2301      	movlt	r3, #1
 8011986:	e7b3      	b.n	80118f0 <_dtoa_r+0x250>
 8011988:	2300      	movs	r3, #0
 801198a:	e7ab      	b.n	80118e4 <_dtoa_r+0x244>
 801198c:	2300      	movs	r3, #0
 801198e:	e7f1      	b.n	8011974 <_dtoa_r+0x2d4>
 8011990:	636f4361 	.word	0x636f4361
 8011994:	3fd287a7 	.word	0x3fd287a7
 8011998:	8b60c8b3 	.word	0x8b60c8b3
 801199c:	3fc68a28 	.word	0x3fc68a28
 80119a0:	509f79fb 	.word	0x509f79fb
 80119a4:	3fd34413 	.word	0x3fd34413
 80119a8:	7ff00000 	.word	0x7ff00000
 80119ac:	08016120 	.word	0x08016120
 80119b0:	08016117 	.word	0x08016117
 80119b4:	08015ff3 	.word	0x08015ff3
 80119b8:	3ff80000 	.word	0x3ff80000
 80119bc:	08016150 	.word	0x08016150
 80119c0:	08016128 	.word	0x08016128
 80119c4:	2601      	movs	r6, #1
 80119c6:	2300      	movs	r3, #0
 80119c8:	9307      	str	r3, [sp, #28]
 80119ca:	9609      	str	r6, [sp, #36]	; 0x24
 80119cc:	f04f 33ff 	mov.w	r3, #4294967295
 80119d0:	9304      	str	r3, [sp, #16]
 80119d2:	9303      	str	r3, [sp, #12]
 80119d4:	2200      	movs	r2, #0
 80119d6:	2312      	movs	r3, #18
 80119d8:	920a      	str	r2, [sp, #40]	; 0x28
 80119da:	e789      	b.n	80118f0 <_dtoa_r+0x250>
 80119dc:	2301      	movs	r3, #1
 80119de:	9309      	str	r3, [sp, #36]	; 0x24
 80119e0:	e7f4      	b.n	80119cc <_dtoa_r+0x32c>
 80119e2:	2301      	movs	r3, #1
 80119e4:	9304      	str	r3, [sp, #16]
 80119e6:	9303      	str	r3, [sp, #12]
 80119e8:	461a      	mov	r2, r3
 80119ea:	e7f5      	b.n	80119d8 <_dtoa_r+0x338>
 80119ec:	686a      	ldr	r2, [r5, #4]
 80119ee:	3201      	adds	r2, #1
 80119f0:	606a      	str	r2, [r5, #4]
 80119f2:	0049      	lsls	r1, r1, #1
 80119f4:	e780      	b.n	80118f8 <_dtoa_r+0x258>
 80119f6:	2502      	movs	r5, #2
 80119f8:	e7af      	b.n	801195a <_dtoa_r+0x2ba>
 80119fa:	07f1      	lsls	r1, r6, #31
 80119fc:	d508      	bpl.n	8011a10 <_dtoa_r+0x370>
 80119fe:	4640      	mov	r0, r8
 8011a00:	4649      	mov	r1, r9
 8011a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a06:	f7ee fe1d 	bl	8000644 <__aeabi_dmul>
 8011a0a:	3501      	adds	r5, #1
 8011a0c:	4680      	mov	r8, r0
 8011a0e:	4689      	mov	r9, r1
 8011a10:	1076      	asrs	r6, r6, #1
 8011a12:	3708      	adds	r7, #8
 8011a14:	e7a2      	b.n	801195c <_dtoa_r+0x2bc>
 8011a16:	f000 809d 	beq.w	8011b54 <_dtoa_r+0x4b4>
 8011a1a:	f1cb 0600 	rsb	r6, fp, #0
 8011a1e:	4b9f      	ldr	r3, [pc, #636]	; (8011c9c <_dtoa_r+0x5fc>)
 8011a20:	4f9f      	ldr	r7, [pc, #636]	; (8011ca0 <_dtoa_r+0x600>)
 8011a22:	f006 020f 	and.w	r2, r6, #15
 8011a26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011a32:	f7ee fe07 	bl	8000644 <__aeabi_dmul>
 8011a36:	e9cd 0100 	strd	r0, r1, [sp]
 8011a3a:	1136      	asrs	r6, r6, #4
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	2502      	movs	r5, #2
 8011a40:	2e00      	cmp	r6, #0
 8011a42:	d17c      	bne.n	8011b3e <_dtoa_r+0x49e>
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d191      	bne.n	801196c <_dtoa_r+0x2cc>
 8011a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	f000 8084 	beq.w	8011b58 <_dtoa_r+0x4b8>
 8011a50:	e9dd 8900 	ldrd	r8, r9, [sp]
 8011a54:	2200      	movs	r2, #0
 8011a56:	4b93      	ldr	r3, [pc, #588]	; (8011ca4 <_dtoa_r+0x604>)
 8011a58:	4640      	mov	r0, r8
 8011a5a:	4649      	mov	r1, r9
 8011a5c:	f7ef f864 	bl	8000b28 <__aeabi_dcmplt>
 8011a60:	2800      	cmp	r0, #0
 8011a62:	d079      	beq.n	8011b58 <_dtoa_r+0x4b8>
 8011a64:	9b03      	ldr	r3, [sp, #12]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d076      	beq.n	8011b58 <_dtoa_r+0x4b8>
 8011a6a:	9b04      	ldr	r3, [sp, #16]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	dd34      	ble.n	8011ada <_dtoa_r+0x43a>
 8011a70:	2200      	movs	r2, #0
 8011a72:	4b8d      	ldr	r3, [pc, #564]	; (8011ca8 <_dtoa_r+0x608>)
 8011a74:	4640      	mov	r0, r8
 8011a76:	4649      	mov	r1, r9
 8011a78:	f7ee fde4 	bl	8000644 <__aeabi_dmul>
 8011a7c:	e9cd 0100 	strd	r0, r1, [sp]
 8011a80:	9e04      	ldr	r6, [sp, #16]
 8011a82:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011a86:	3501      	adds	r5, #1
 8011a88:	4628      	mov	r0, r5
 8011a8a:	f7ee fd75 	bl	8000578 <__aeabi_i2d>
 8011a8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a92:	f7ee fdd7 	bl	8000644 <__aeabi_dmul>
 8011a96:	2200      	movs	r2, #0
 8011a98:	4b84      	ldr	r3, [pc, #528]	; (8011cac <_dtoa_r+0x60c>)
 8011a9a:	f7ee fc21 	bl	80002e0 <__adddf3>
 8011a9e:	4680      	mov	r8, r0
 8011aa0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8011aa4:	2e00      	cmp	r6, #0
 8011aa6:	d15a      	bne.n	8011b5e <_dtoa_r+0x4be>
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	4b81      	ldr	r3, [pc, #516]	; (8011cb0 <_dtoa_r+0x610>)
 8011aac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ab0:	f7ee fc14 	bl	80002dc <__aeabi_dsub>
 8011ab4:	4642      	mov	r2, r8
 8011ab6:	464b      	mov	r3, r9
 8011ab8:	e9cd 0100 	strd	r0, r1, [sp]
 8011abc:	f7ef f852 	bl	8000b64 <__aeabi_dcmpgt>
 8011ac0:	2800      	cmp	r0, #0
 8011ac2:	f040 829b 	bne.w	8011ffc <_dtoa_r+0x95c>
 8011ac6:	4642      	mov	r2, r8
 8011ac8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011acc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ad0:	f7ef f82a 	bl	8000b28 <__aeabi_dcmplt>
 8011ad4:	2800      	cmp	r0, #0
 8011ad6:	f040 828f 	bne.w	8011ff8 <_dtoa_r+0x958>
 8011ada:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011ade:	e9cd 2300 	strd	r2, r3, [sp]
 8011ae2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	f2c0 8150 	blt.w	8011d8a <_dtoa_r+0x6ea>
 8011aea:	f1bb 0f0e 	cmp.w	fp, #14
 8011aee:	f300 814c 	bgt.w	8011d8a <_dtoa_r+0x6ea>
 8011af2:	4b6a      	ldr	r3, [pc, #424]	; (8011c9c <_dtoa_r+0x5fc>)
 8011af4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011af8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	f280 80da 	bge.w	8011cb8 <_dtoa_r+0x618>
 8011b04:	9b03      	ldr	r3, [sp, #12]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	f300 80d6 	bgt.w	8011cb8 <_dtoa_r+0x618>
 8011b0c:	f040 8273 	bne.w	8011ff6 <_dtoa_r+0x956>
 8011b10:	2200      	movs	r2, #0
 8011b12:	4b67      	ldr	r3, [pc, #412]	; (8011cb0 <_dtoa_r+0x610>)
 8011b14:	4640      	mov	r0, r8
 8011b16:	4649      	mov	r1, r9
 8011b18:	f7ee fd94 	bl	8000644 <__aeabi_dmul>
 8011b1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b20:	f7ef f816 	bl	8000b50 <__aeabi_dcmpge>
 8011b24:	9e03      	ldr	r6, [sp, #12]
 8011b26:	4637      	mov	r7, r6
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	f040 824a 	bne.w	8011fc2 <_dtoa_r+0x922>
 8011b2e:	9b02      	ldr	r3, [sp, #8]
 8011b30:	9a02      	ldr	r2, [sp, #8]
 8011b32:	1c5d      	adds	r5, r3, #1
 8011b34:	2331      	movs	r3, #49	; 0x31
 8011b36:	7013      	strb	r3, [r2, #0]
 8011b38:	f10b 0b01 	add.w	fp, fp, #1
 8011b3c:	e245      	b.n	8011fca <_dtoa_r+0x92a>
 8011b3e:	07f2      	lsls	r2, r6, #31
 8011b40:	d505      	bpl.n	8011b4e <_dtoa_r+0x4ae>
 8011b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b46:	f7ee fd7d 	bl	8000644 <__aeabi_dmul>
 8011b4a:	3501      	adds	r5, #1
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	1076      	asrs	r6, r6, #1
 8011b50:	3708      	adds	r7, #8
 8011b52:	e775      	b.n	8011a40 <_dtoa_r+0x3a0>
 8011b54:	2502      	movs	r5, #2
 8011b56:	e777      	b.n	8011a48 <_dtoa_r+0x3a8>
 8011b58:	465f      	mov	r7, fp
 8011b5a:	9e03      	ldr	r6, [sp, #12]
 8011b5c:	e794      	b.n	8011a88 <_dtoa_r+0x3e8>
 8011b5e:	9a02      	ldr	r2, [sp, #8]
 8011b60:	4b4e      	ldr	r3, [pc, #312]	; (8011c9c <_dtoa_r+0x5fc>)
 8011b62:	4432      	add	r2, r6
 8011b64:	9213      	str	r2, [sp, #76]	; 0x4c
 8011b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b68:	1e71      	subs	r1, r6, #1
 8011b6a:	2a00      	cmp	r2, #0
 8011b6c:	d048      	beq.n	8011c00 <_dtoa_r+0x560>
 8011b6e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8011b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b76:	2000      	movs	r0, #0
 8011b78:	494e      	ldr	r1, [pc, #312]	; (8011cb4 <_dtoa_r+0x614>)
 8011b7a:	f7ee fe8d 	bl	8000898 <__aeabi_ddiv>
 8011b7e:	4642      	mov	r2, r8
 8011b80:	464b      	mov	r3, r9
 8011b82:	f7ee fbab 	bl	80002dc <__aeabi_dsub>
 8011b86:	9d02      	ldr	r5, [sp, #8]
 8011b88:	4680      	mov	r8, r0
 8011b8a:	4689      	mov	r9, r1
 8011b8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b90:	f7ef f808 	bl	8000ba4 <__aeabi_d2iz>
 8011b94:	4606      	mov	r6, r0
 8011b96:	f7ee fcef 	bl	8000578 <__aeabi_i2d>
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	460b      	mov	r3, r1
 8011b9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ba2:	f7ee fb9b 	bl	80002dc <__aeabi_dsub>
 8011ba6:	3630      	adds	r6, #48	; 0x30
 8011ba8:	f805 6b01 	strb.w	r6, [r5], #1
 8011bac:	4642      	mov	r2, r8
 8011bae:	464b      	mov	r3, r9
 8011bb0:	e9cd 0100 	strd	r0, r1, [sp]
 8011bb4:	f7ee ffb8 	bl	8000b28 <__aeabi_dcmplt>
 8011bb8:	2800      	cmp	r0, #0
 8011bba:	d165      	bne.n	8011c88 <_dtoa_r+0x5e8>
 8011bbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011bc0:	2000      	movs	r0, #0
 8011bc2:	4938      	ldr	r1, [pc, #224]	; (8011ca4 <_dtoa_r+0x604>)
 8011bc4:	f7ee fb8a 	bl	80002dc <__aeabi_dsub>
 8011bc8:	4642      	mov	r2, r8
 8011bca:	464b      	mov	r3, r9
 8011bcc:	f7ee ffac 	bl	8000b28 <__aeabi_dcmplt>
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	f040 80ba 	bne.w	8011d4a <_dtoa_r+0x6aa>
 8011bd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011bd8:	429d      	cmp	r5, r3
 8011bda:	f43f af7e 	beq.w	8011ada <_dtoa_r+0x43a>
 8011bde:	2200      	movs	r2, #0
 8011be0:	4b31      	ldr	r3, [pc, #196]	; (8011ca8 <_dtoa_r+0x608>)
 8011be2:	4640      	mov	r0, r8
 8011be4:	4649      	mov	r1, r9
 8011be6:	f7ee fd2d 	bl	8000644 <__aeabi_dmul>
 8011bea:	2200      	movs	r2, #0
 8011bec:	4680      	mov	r8, r0
 8011bee:	4689      	mov	r9, r1
 8011bf0:	4b2d      	ldr	r3, [pc, #180]	; (8011ca8 <_dtoa_r+0x608>)
 8011bf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bf6:	f7ee fd25 	bl	8000644 <__aeabi_dmul>
 8011bfa:	e9cd 0100 	strd	r0, r1, [sp]
 8011bfe:	e7c5      	b.n	8011b8c <_dtoa_r+0x4ec>
 8011c00:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8011c04:	4642      	mov	r2, r8
 8011c06:	464b      	mov	r3, r9
 8011c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c0c:	f7ee fd1a 	bl	8000644 <__aeabi_dmul>
 8011c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011c14:	9d02      	ldr	r5, [sp, #8]
 8011c16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c1a:	f7ee ffc3 	bl	8000ba4 <__aeabi_d2iz>
 8011c1e:	4606      	mov	r6, r0
 8011c20:	f7ee fcaa 	bl	8000578 <__aeabi_i2d>
 8011c24:	3630      	adds	r6, #48	; 0x30
 8011c26:	4602      	mov	r2, r0
 8011c28:	460b      	mov	r3, r1
 8011c2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c2e:	f7ee fb55 	bl	80002dc <__aeabi_dsub>
 8011c32:	f805 6b01 	strb.w	r6, [r5], #1
 8011c36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011c38:	42ab      	cmp	r3, r5
 8011c3a:	4680      	mov	r8, r0
 8011c3c:	4689      	mov	r9, r1
 8011c3e:	f04f 0200 	mov.w	r2, #0
 8011c42:	d125      	bne.n	8011c90 <_dtoa_r+0x5f0>
 8011c44:	4b1b      	ldr	r3, [pc, #108]	; (8011cb4 <_dtoa_r+0x614>)
 8011c46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011c4a:	f7ee fb49 	bl	80002e0 <__adddf3>
 8011c4e:	4602      	mov	r2, r0
 8011c50:	460b      	mov	r3, r1
 8011c52:	4640      	mov	r0, r8
 8011c54:	4649      	mov	r1, r9
 8011c56:	f7ee ff85 	bl	8000b64 <__aeabi_dcmpgt>
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	d175      	bne.n	8011d4a <_dtoa_r+0x6aa>
 8011c5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011c62:	2000      	movs	r0, #0
 8011c64:	4913      	ldr	r1, [pc, #76]	; (8011cb4 <_dtoa_r+0x614>)
 8011c66:	f7ee fb39 	bl	80002dc <__aeabi_dsub>
 8011c6a:	4602      	mov	r2, r0
 8011c6c:	460b      	mov	r3, r1
 8011c6e:	4640      	mov	r0, r8
 8011c70:	4649      	mov	r1, r9
 8011c72:	f7ee ff59 	bl	8000b28 <__aeabi_dcmplt>
 8011c76:	2800      	cmp	r0, #0
 8011c78:	f43f af2f 	beq.w	8011ada <_dtoa_r+0x43a>
 8011c7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011c80:	2b30      	cmp	r3, #48	; 0x30
 8011c82:	f105 32ff 	add.w	r2, r5, #4294967295
 8011c86:	d001      	beq.n	8011c8c <_dtoa_r+0x5ec>
 8011c88:	46bb      	mov	fp, r7
 8011c8a:	e04d      	b.n	8011d28 <_dtoa_r+0x688>
 8011c8c:	4615      	mov	r5, r2
 8011c8e:	e7f5      	b.n	8011c7c <_dtoa_r+0x5dc>
 8011c90:	4b05      	ldr	r3, [pc, #20]	; (8011ca8 <_dtoa_r+0x608>)
 8011c92:	f7ee fcd7 	bl	8000644 <__aeabi_dmul>
 8011c96:	e9cd 0100 	strd	r0, r1, [sp]
 8011c9a:	e7bc      	b.n	8011c16 <_dtoa_r+0x576>
 8011c9c:	08016150 	.word	0x08016150
 8011ca0:	08016128 	.word	0x08016128
 8011ca4:	3ff00000 	.word	0x3ff00000
 8011ca8:	40240000 	.word	0x40240000
 8011cac:	401c0000 	.word	0x401c0000
 8011cb0:	40140000 	.word	0x40140000
 8011cb4:	3fe00000 	.word	0x3fe00000
 8011cb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011cbc:	9d02      	ldr	r5, [sp, #8]
 8011cbe:	4642      	mov	r2, r8
 8011cc0:	464b      	mov	r3, r9
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	4639      	mov	r1, r7
 8011cc6:	f7ee fde7 	bl	8000898 <__aeabi_ddiv>
 8011cca:	f7ee ff6b 	bl	8000ba4 <__aeabi_d2iz>
 8011cce:	9000      	str	r0, [sp, #0]
 8011cd0:	f7ee fc52 	bl	8000578 <__aeabi_i2d>
 8011cd4:	4642      	mov	r2, r8
 8011cd6:	464b      	mov	r3, r9
 8011cd8:	f7ee fcb4 	bl	8000644 <__aeabi_dmul>
 8011cdc:	4602      	mov	r2, r0
 8011cde:	460b      	mov	r3, r1
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	4639      	mov	r1, r7
 8011ce4:	f7ee fafa 	bl	80002dc <__aeabi_dsub>
 8011ce8:	9e00      	ldr	r6, [sp, #0]
 8011cea:	9f03      	ldr	r7, [sp, #12]
 8011cec:	3630      	adds	r6, #48	; 0x30
 8011cee:	f805 6b01 	strb.w	r6, [r5], #1
 8011cf2:	9e02      	ldr	r6, [sp, #8]
 8011cf4:	1bae      	subs	r6, r5, r6
 8011cf6:	42b7      	cmp	r7, r6
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	460b      	mov	r3, r1
 8011cfc:	d138      	bne.n	8011d70 <_dtoa_r+0x6d0>
 8011cfe:	f7ee faef 	bl	80002e0 <__adddf3>
 8011d02:	4606      	mov	r6, r0
 8011d04:	460f      	mov	r7, r1
 8011d06:	4602      	mov	r2, r0
 8011d08:	460b      	mov	r3, r1
 8011d0a:	4640      	mov	r0, r8
 8011d0c:	4649      	mov	r1, r9
 8011d0e:	f7ee ff0b 	bl	8000b28 <__aeabi_dcmplt>
 8011d12:	b9c8      	cbnz	r0, 8011d48 <_dtoa_r+0x6a8>
 8011d14:	4632      	mov	r2, r6
 8011d16:	463b      	mov	r3, r7
 8011d18:	4640      	mov	r0, r8
 8011d1a:	4649      	mov	r1, r9
 8011d1c:	f7ee fefa 	bl	8000b14 <__aeabi_dcmpeq>
 8011d20:	b110      	cbz	r0, 8011d28 <_dtoa_r+0x688>
 8011d22:	9b00      	ldr	r3, [sp, #0]
 8011d24:	07db      	lsls	r3, r3, #31
 8011d26:	d40f      	bmi.n	8011d48 <_dtoa_r+0x6a8>
 8011d28:	4651      	mov	r1, sl
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	f000 fb40 	bl	80123b0 <_Bfree>
 8011d30:	2300      	movs	r3, #0
 8011d32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d34:	702b      	strb	r3, [r5, #0]
 8011d36:	f10b 0301 	add.w	r3, fp, #1
 8011d3a:	6013      	str	r3, [r2, #0]
 8011d3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	f43f acf8 	beq.w	8011734 <_dtoa_r+0x94>
 8011d44:	601d      	str	r5, [r3, #0]
 8011d46:	e4f5      	b.n	8011734 <_dtoa_r+0x94>
 8011d48:	465f      	mov	r7, fp
 8011d4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011d4e:	2a39      	cmp	r2, #57	; 0x39
 8011d50:	f105 33ff 	add.w	r3, r5, #4294967295
 8011d54:	d106      	bne.n	8011d64 <_dtoa_r+0x6c4>
 8011d56:	9a02      	ldr	r2, [sp, #8]
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	d107      	bne.n	8011d6c <_dtoa_r+0x6cc>
 8011d5c:	2330      	movs	r3, #48	; 0x30
 8011d5e:	7013      	strb	r3, [r2, #0]
 8011d60:	3701      	adds	r7, #1
 8011d62:	4613      	mov	r3, r2
 8011d64:	781a      	ldrb	r2, [r3, #0]
 8011d66:	3201      	adds	r2, #1
 8011d68:	701a      	strb	r2, [r3, #0]
 8011d6a:	e78d      	b.n	8011c88 <_dtoa_r+0x5e8>
 8011d6c:	461d      	mov	r5, r3
 8011d6e:	e7ec      	b.n	8011d4a <_dtoa_r+0x6aa>
 8011d70:	2200      	movs	r2, #0
 8011d72:	4ba4      	ldr	r3, [pc, #656]	; (8012004 <_dtoa_r+0x964>)
 8011d74:	f7ee fc66 	bl	8000644 <__aeabi_dmul>
 8011d78:	2200      	movs	r2, #0
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	4606      	mov	r6, r0
 8011d7e:	460f      	mov	r7, r1
 8011d80:	f7ee fec8 	bl	8000b14 <__aeabi_dcmpeq>
 8011d84:	2800      	cmp	r0, #0
 8011d86:	d09a      	beq.n	8011cbe <_dtoa_r+0x61e>
 8011d88:	e7ce      	b.n	8011d28 <_dtoa_r+0x688>
 8011d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d8c:	2a00      	cmp	r2, #0
 8011d8e:	f000 80cd 	beq.w	8011f2c <_dtoa_r+0x88c>
 8011d92:	9a07      	ldr	r2, [sp, #28]
 8011d94:	2a01      	cmp	r2, #1
 8011d96:	f300 80af 	bgt.w	8011ef8 <_dtoa_r+0x858>
 8011d9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011d9c:	2a00      	cmp	r2, #0
 8011d9e:	f000 80a7 	beq.w	8011ef0 <_dtoa_r+0x850>
 8011da2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011da6:	9e08      	ldr	r6, [sp, #32]
 8011da8:	9d05      	ldr	r5, [sp, #20]
 8011daa:	9a05      	ldr	r2, [sp, #20]
 8011dac:	441a      	add	r2, r3
 8011dae:	9205      	str	r2, [sp, #20]
 8011db0:	9a06      	ldr	r2, [sp, #24]
 8011db2:	2101      	movs	r1, #1
 8011db4:	441a      	add	r2, r3
 8011db6:	4620      	mov	r0, r4
 8011db8:	9206      	str	r2, [sp, #24]
 8011dba:	f000 fb99 	bl	80124f0 <__i2b>
 8011dbe:	4607      	mov	r7, r0
 8011dc0:	2d00      	cmp	r5, #0
 8011dc2:	dd0c      	ble.n	8011dde <_dtoa_r+0x73e>
 8011dc4:	9b06      	ldr	r3, [sp, #24]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	dd09      	ble.n	8011dde <_dtoa_r+0x73e>
 8011dca:	42ab      	cmp	r3, r5
 8011dcc:	9a05      	ldr	r2, [sp, #20]
 8011dce:	bfa8      	it	ge
 8011dd0:	462b      	movge	r3, r5
 8011dd2:	1ad2      	subs	r2, r2, r3
 8011dd4:	9205      	str	r2, [sp, #20]
 8011dd6:	9a06      	ldr	r2, [sp, #24]
 8011dd8:	1aed      	subs	r5, r5, r3
 8011dda:	1ad3      	subs	r3, r2, r3
 8011ddc:	9306      	str	r3, [sp, #24]
 8011dde:	9b08      	ldr	r3, [sp, #32]
 8011de0:	b1f3      	cbz	r3, 8011e20 <_dtoa_r+0x780>
 8011de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	f000 80a5 	beq.w	8011f34 <_dtoa_r+0x894>
 8011dea:	2e00      	cmp	r6, #0
 8011dec:	dd10      	ble.n	8011e10 <_dtoa_r+0x770>
 8011dee:	4639      	mov	r1, r7
 8011df0:	4632      	mov	r2, r6
 8011df2:	4620      	mov	r0, r4
 8011df4:	f000 fc12 	bl	801261c <__pow5mult>
 8011df8:	4652      	mov	r2, sl
 8011dfa:	4601      	mov	r1, r0
 8011dfc:	4607      	mov	r7, r0
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f000 fb7f 	bl	8012502 <__multiply>
 8011e04:	4651      	mov	r1, sl
 8011e06:	4680      	mov	r8, r0
 8011e08:	4620      	mov	r0, r4
 8011e0a:	f000 fad1 	bl	80123b0 <_Bfree>
 8011e0e:	46c2      	mov	sl, r8
 8011e10:	9b08      	ldr	r3, [sp, #32]
 8011e12:	1b9a      	subs	r2, r3, r6
 8011e14:	d004      	beq.n	8011e20 <_dtoa_r+0x780>
 8011e16:	4651      	mov	r1, sl
 8011e18:	4620      	mov	r0, r4
 8011e1a:	f000 fbff 	bl	801261c <__pow5mult>
 8011e1e:	4682      	mov	sl, r0
 8011e20:	2101      	movs	r1, #1
 8011e22:	4620      	mov	r0, r4
 8011e24:	f000 fb64 	bl	80124f0 <__i2b>
 8011e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	4606      	mov	r6, r0
 8011e2e:	f340 8083 	ble.w	8011f38 <_dtoa_r+0x898>
 8011e32:	461a      	mov	r2, r3
 8011e34:	4601      	mov	r1, r0
 8011e36:	4620      	mov	r0, r4
 8011e38:	f000 fbf0 	bl	801261c <__pow5mult>
 8011e3c:	9b07      	ldr	r3, [sp, #28]
 8011e3e:	2b01      	cmp	r3, #1
 8011e40:	4606      	mov	r6, r0
 8011e42:	dd7c      	ble.n	8011f3e <_dtoa_r+0x89e>
 8011e44:	f04f 0800 	mov.w	r8, #0
 8011e48:	6933      	ldr	r3, [r6, #16]
 8011e4a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011e4e:	6918      	ldr	r0, [r3, #16]
 8011e50:	f000 fb00 	bl	8012454 <__hi0bits>
 8011e54:	f1c0 0020 	rsb	r0, r0, #32
 8011e58:	9b06      	ldr	r3, [sp, #24]
 8011e5a:	4418      	add	r0, r3
 8011e5c:	f010 001f 	ands.w	r0, r0, #31
 8011e60:	f000 8096 	beq.w	8011f90 <_dtoa_r+0x8f0>
 8011e64:	f1c0 0320 	rsb	r3, r0, #32
 8011e68:	2b04      	cmp	r3, #4
 8011e6a:	f340 8087 	ble.w	8011f7c <_dtoa_r+0x8dc>
 8011e6e:	9b05      	ldr	r3, [sp, #20]
 8011e70:	f1c0 001c 	rsb	r0, r0, #28
 8011e74:	4403      	add	r3, r0
 8011e76:	9305      	str	r3, [sp, #20]
 8011e78:	9b06      	ldr	r3, [sp, #24]
 8011e7a:	4405      	add	r5, r0
 8011e7c:	4403      	add	r3, r0
 8011e7e:	9306      	str	r3, [sp, #24]
 8011e80:	9b05      	ldr	r3, [sp, #20]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	dd05      	ble.n	8011e92 <_dtoa_r+0x7f2>
 8011e86:	4651      	mov	r1, sl
 8011e88:	461a      	mov	r2, r3
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	f000 fc14 	bl	80126b8 <__lshift>
 8011e90:	4682      	mov	sl, r0
 8011e92:	9b06      	ldr	r3, [sp, #24]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	dd05      	ble.n	8011ea4 <_dtoa_r+0x804>
 8011e98:	4631      	mov	r1, r6
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	f000 fc0b 	bl	80126b8 <__lshift>
 8011ea2:	4606      	mov	r6, r0
 8011ea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d074      	beq.n	8011f94 <_dtoa_r+0x8f4>
 8011eaa:	4631      	mov	r1, r6
 8011eac:	4650      	mov	r0, sl
 8011eae:	f000 fc54 	bl	801275a <__mcmp>
 8011eb2:	2800      	cmp	r0, #0
 8011eb4:	da6e      	bge.n	8011f94 <_dtoa_r+0x8f4>
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	4651      	mov	r1, sl
 8011eba:	220a      	movs	r2, #10
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	f000 fa8e 	bl	80123de <__multadd>
 8011ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ec4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011ec8:	4682      	mov	sl, r0
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	f000 81a8 	beq.w	8012220 <_dtoa_r+0xb80>
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	4639      	mov	r1, r7
 8011ed4:	220a      	movs	r2, #10
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	f000 fa81 	bl	80123de <__multadd>
 8011edc:	9b04      	ldr	r3, [sp, #16]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	4607      	mov	r7, r0
 8011ee2:	f300 80c8 	bgt.w	8012076 <_dtoa_r+0x9d6>
 8011ee6:	9b07      	ldr	r3, [sp, #28]
 8011ee8:	2b02      	cmp	r3, #2
 8011eea:	f340 80c4 	ble.w	8012076 <_dtoa_r+0x9d6>
 8011eee:	e059      	b.n	8011fa4 <_dtoa_r+0x904>
 8011ef0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011ef2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011ef6:	e756      	b.n	8011da6 <_dtoa_r+0x706>
 8011ef8:	9b03      	ldr	r3, [sp, #12]
 8011efa:	1e5e      	subs	r6, r3, #1
 8011efc:	9b08      	ldr	r3, [sp, #32]
 8011efe:	42b3      	cmp	r3, r6
 8011f00:	bfbf      	itttt	lt
 8011f02:	9b08      	ldrlt	r3, [sp, #32]
 8011f04:	9608      	strlt	r6, [sp, #32]
 8011f06:	1af2      	sublt	r2, r6, r3
 8011f08:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8011f0a:	bfb6      	itet	lt
 8011f0c:	189b      	addlt	r3, r3, r2
 8011f0e:	1b9e      	subge	r6, r3, r6
 8011f10:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8011f12:	9b03      	ldr	r3, [sp, #12]
 8011f14:	bfb8      	it	lt
 8011f16:	2600      	movlt	r6, #0
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	bfb9      	ittee	lt
 8011f1c:	9b05      	ldrlt	r3, [sp, #20]
 8011f1e:	9a03      	ldrlt	r2, [sp, #12]
 8011f20:	9d05      	ldrge	r5, [sp, #20]
 8011f22:	9b03      	ldrge	r3, [sp, #12]
 8011f24:	bfbc      	itt	lt
 8011f26:	1a9d      	sublt	r5, r3, r2
 8011f28:	2300      	movlt	r3, #0
 8011f2a:	e73e      	b.n	8011daa <_dtoa_r+0x70a>
 8011f2c:	9e08      	ldr	r6, [sp, #32]
 8011f2e:	9d05      	ldr	r5, [sp, #20]
 8011f30:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011f32:	e745      	b.n	8011dc0 <_dtoa_r+0x720>
 8011f34:	9a08      	ldr	r2, [sp, #32]
 8011f36:	e76e      	b.n	8011e16 <_dtoa_r+0x776>
 8011f38:	9b07      	ldr	r3, [sp, #28]
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	dc19      	bgt.n	8011f72 <_dtoa_r+0x8d2>
 8011f3e:	9b00      	ldr	r3, [sp, #0]
 8011f40:	b9bb      	cbnz	r3, 8011f72 <_dtoa_r+0x8d2>
 8011f42:	9b01      	ldr	r3, [sp, #4]
 8011f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011f48:	b99b      	cbnz	r3, 8011f72 <_dtoa_r+0x8d2>
 8011f4a:	9b01      	ldr	r3, [sp, #4]
 8011f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f50:	0d1b      	lsrs	r3, r3, #20
 8011f52:	051b      	lsls	r3, r3, #20
 8011f54:	b183      	cbz	r3, 8011f78 <_dtoa_r+0x8d8>
 8011f56:	9b05      	ldr	r3, [sp, #20]
 8011f58:	3301      	adds	r3, #1
 8011f5a:	9305      	str	r3, [sp, #20]
 8011f5c:	9b06      	ldr	r3, [sp, #24]
 8011f5e:	3301      	adds	r3, #1
 8011f60:	9306      	str	r3, [sp, #24]
 8011f62:	f04f 0801 	mov.w	r8, #1
 8011f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	f47f af6d 	bne.w	8011e48 <_dtoa_r+0x7a8>
 8011f6e:	2001      	movs	r0, #1
 8011f70:	e772      	b.n	8011e58 <_dtoa_r+0x7b8>
 8011f72:	f04f 0800 	mov.w	r8, #0
 8011f76:	e7f6      	b.n	8011f66 <_dtoa_r+0x8c6>
 8011f78:	4698      	mov	r8, r3
 8011f7a:	e7f4      	b.n	8011f66 <_dtoa_r+0x8c6>
 8011f7c:	d080      	beq.n	8011e80 <_dtoa_r+0x7e0>
 8011f7e:	9a05      	ldr	r2, [sp, #20]
 8011f80:	331c      	adds	r3, #28
 8011f82:	441a      	add	r2, r3
 8011f84:	9205      	str	r2, [sp, #20]
 8011f86:	9a06      	ldr	r2, [sp, #24]
 8011f88:	441a      	add	r2, r3
 8011f8a:	441d      	add	r5, r3
 8011f8c:	4613      	mov	r3, r2
 8011f8e:	e776      	b.n	8011e7e <_dtoa_r+0x7de>
 8011f90:	4603      	mov	r3, r0
 8011f92:	e7f4      	b.n	8011f7e <_dtoa_r+0x8de>
 8011f94:	9b03      	ldr	r3, [sp, #12]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	dc36      	bgt.n	8012008 <_dtoa_r+0x968>
 8011f9a:	9b07      	ldr	r3, [sp, #28]
 8011f9c:	2b02      	cmp	r3, #2
 8011f9e:	dd33      	ble.n	8012008 <_dtoa_r+0x968>
 8011fa0:	9b03      	ldr	r3, [sp, #12]
 8011fa2:	9304      	str	r3, [sp, #16]
 8011fa4:	9b04      	ldr	r3, [sp, #16]
 8011fa6:	b963      	cbnz	r3, 8011fc2 <_dtoa_r+0x922>
 8011fa8:	4631      	mov	r1, r6
 8011faa:	2205      	movs	r2, #5
 8011fac:	4620      	mov	r0, r4
 8011fae:	f000 fa16 	bl	80123de <__multadd>
 8011fb2:	4601      	mov	r1, r0
 8011fb4:	4606      	mov	r6, r0
 8011fb6:	4650      	mov	r0, sl
 8011fb8:	f000 fbcf 	bl	801275a <__mcmp>
 8011fbc:	2800      	cmp	r0, #0
 8011fbe:	f73f adb6 	bgt.w	8011b2e <_dtoa_r+0x48e>
 8011fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fc4:	9d02      	ldr	r5, [sp, #8]
 8011fc6:	ea6f 0b03 	mvn.w	fp, r3
 8011fca:	2300      	movs	r3, #0
 8011fcc:	9303      	str	r3, [sp, #12]
 8011fce:	4631      	mov	r1, r6
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	f000 f9ed 	bl	80123b0 <_Bfree>
 8011fd6:	2f00      	cmp	r7, #0
 8011fd8:	f43f aea6 	beq.w	8011d28 <_dtoa_r+0x688>
 8011fdc:	9b03      	ldr	r3, [sp, #12]
 8011fde:	b12b      	cbz	r3, 8011fec <_dtoa_r+0x94c>
 8011fe0:	42bb      	cmp	r3, r7
 8011fe2:	d003      	beq.n	8011fec <_dtoa_r+0x94c>
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	f000 f9e2 	bl	80123b0 <_Bfree>
 8011fec:	4639      	mov	r1, r7
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f000 f9de 	bl	80123b0 <_Bfree>
 8011ff4:	e698      	b.n	8011d28 <_dtoa_r+0x688>
 8011ff6:	2600      	movs	r6, #0
 8011ff8:	4637      	mov	r7, r6
 8011ffa:	e7e2      	b.n	8011fc2 <_dtoa_r+0x922>
 8011ffc:	46bb      	mov	fp, r7
 8011ffe:	4637      	mov	r7, r6
 8012000:	e595      	b.n	8011b2e <_dtoa_r+0x48e>
 8012002:	bf00      	nop
 8012004:	40240000 	.word	0x40240000
 8012008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801200a:	bb93      	cbnz	r3, 8012072 <_dtoa_r+0x9d2>
 801200c:	9b03      	ldr	r3, [sp, #12]
 801200e:	9304      	str	r3, [sp, #16]
 8012010:	9d02      	ldr	r5, [sp, #8]
 8012012:	4631      	mov	r1, r6
 8012014:	4650      	mov	r0, sl
 8012016:	f7ff fab5 	bl	8011584 <quorem>
 801201a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801201e:	f805 9b01 	strb.w	r9, [r5], #1
 8012022:	9b02      	ldr	r3, [sp, #8]
 8012024:	9a04      	ldr	r2, [sp, #16]
 8012026:	1aeb      	subs	r3, r5, r3
 8012028:	429a      	cmp	r2, r3
 801202a:	f300 80dc 	bgt.w	80121e6 <_dtoa_r+0xb46>
 801202e:	9b02      	ldr	r3, [sp, #8]
 8012030:	2a01      	cmp	r2, #1
 8012032:	bfac      	ite	ge
 8012034:	189b      	addge	r3, r3, r2
 8012036:	3301      	addlt	r3, #1
 8012038:	4698      	mov	r8, r3
 801203a:	2300      	movs	r3, #0
 801203c:	9303      	str	r3, [sp, #12]
 801203e:	4651      	mov	r1, sl
 8012040:	2201      	movs	r2, #1
 8012042:	4620      	mov	r0, r4
 8012044:	f000 fb38 	bl	80126b8 <__lshift>
 8012048:	4631      	mov	r1, r6
 801204a:	4682      	mov	sl, r0
 801204c:	f000 fb85 	bl	801275a <__mcmp>
 8012050:	2800      	cmp	r0, #0
 8012052:	f300 808d 	bgt.w	8012170 <_dtoa_r+0xad0>
 8012056:	d103      	bne.n	8012060 <_dtoa_r+0x9c0>
 8012058:	f019 0f01 	tst.w	r9, #1
 801205c:	f040 8088 	bne.w	8012170 <_dtoa_r+0xad0>
 8012060:	4645      	mov	r5, r8
 8012062:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012066:	2b30      	cmp	r3, #48	; 0x30
 8012068:	f105 32ff 	add.w	r2, r5, #4294967295
 801206c:	d1af      	bne.n	8011fce <_dtoa_r+0x92e>
 801206e:	4615      	mov	r5, r2
 8012070:	e7f7      	b.n	8012062 <_dtoa_r+0x9c2>
 8012072:	9b03      	ldr	r3, [sp, #12]
 8012074:	9304      	str	r3, [sp, #16]
 8012076:	2d00      	cmp	r5, #0
 8012078:	dd05      	ble.n	8012086 <_dtoa_r+0x9e6>
 801207a:	4639      	mov	r1, r7
 801207c:	462a      	mov	r2, r5
 801207e:	4620      	mov	r0, r4
 8012080:	f000 fb1a 	bl	80126b8 <__lshift>
 8012084:	4607      	mov	r7, r0
 8012086:	f1b8 0f00 	cmp.w	r8, #0
 801208a:	d04c      	beq.n	8012126 <_dtoa_r+0xa86>
 801208c:	6879      	ldr	r1, [r7, #4]
 801208e:	4620      	mov	r0, r4
 8012090:	f000 f95a 	bl	8012348 <_Balloc>
 8012094:	693a      	ldr	r2, [r7, #16]
 8012096:	3202      	adds	r2, #2
 8012098:	4605      	mov	r5, r0
 801209a:	0092      	lsls	r2, r2, #2
 801209c:	f107 010c 	add.w	r1, r7, #12
 80120a0:	300c      	adds	r0, #12
 80120a2:	f7fe f9dd 	bl	8010460 <memcpy>
 80120a6:	2201      	movs	r2, #1
 80120a8:	4629      	mov	r1, r5
 80120aa:	4620      	mov	r0, r4
 80120ac:	f000 fb04 	bl	80126b8 <__lshift>
 80120b0:	9b00      	ldr	r3, [sp, #0]
 80120b2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80120b6:	9703      	str	r7, [sp, #12]
 80120b8:	f003 0301 	and.w	r3, r3, #1
 80120bc:	4607      	mov	r7, r0
 80120be:	9305      	str	r3, [sp, #20]
 80120c0:	4631      	mov	r1, r6
 80120c2:	4650      	mov	r0, sl
 80120c4:	f7ff fa5e 	bl	8011584 <quorem>
 80120c8:	9903      	ldr	r1, [sp, #12]
 80120ca:	4605      	mov	r5, r0
 80120cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80120d0:	4650      	mov	r0, sl
 80120d2:	f000 fb42 	bl	801275a <__mcmp>
 80120d6:	463a      	mov	r2, r7
 80120d8:	9000      	str	r0, [sp, #0]
 80120da:	4631      	mov	r1, r6
 80120dc:	4620      	mov	r0, r4
 80120de:	f000 fb56 	bl	801278e <__mdiff>
 80120e2:	68c3      	ldr	r3, [r0, #12]
 80120e4:	4602      	mov	r2, r0
 80120e6:	bb03      	cbnz	r3, 801212a <_dtoa_r+0xa8a>
 80120e8:	4601      	mov	r1, r0
 80120ea:	9006      	str	r0, [sp, #24]
 80120ec:	4650      	mov	r0, sl
 80120ee:	f000 fb34 	bl	801275a <__mcmp>
 80120f2:	9a06      	ldr	r2, [sp, #24]
 80120f4:	4603      	mov	r3, r0
 80120f6:	4611      	mov	r1, r2
 80120f8:	4620      	mov	r0, r4
 80120fa:	9306      	str	r3, [sp, #24]
 80120fc:	f000 f958 	bl	80123b0 <_Bfree>
 8012100:	9b06      	ldr	r3, [sp, #24]
 8012102:	b9a3      	cbnz	r3, 801212e <_dtoa_r+0xa8e>
 8012104:	9a07      	ldr	r2, [sp, #28]
 8012106:	b992      	cbnz	r2, 801212e <_dtoa_r+0xa8e>
 8012108:	9a05      	ldr	r2, [sp, #20]
 801210a:	b982      	cbnz	r2, 801212e <_dtoa_r+0xa8e>
 801210c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012110:	d029      	beq.n	8012166 <_dtoa_r+0xac6>
 8012112:	9b00      	ldr	r3, [sp, #0]
 8012114:	2b00      	cmp	r3, #0
 8012116:	dd01      	ble.n	801211c <_dtoa_r+0xa7c>
 8012118:	f105 0931 	add.w	r9, r5, #49	; 0x31
 801211c:	f108 0501 	add.w	r5, r8, #1
 8012120:	f888 9000 	strb.w	r9, [r8]
 8012124:	e753      	b.n	8011fce <_dtoa_r+0x92e>
 8012126:	4638      	mov	r0, r7
 8012128:	e7c2      	b.n	80120b0 <_dtoa_r+0xa10>
 801212a:	2301      	movs	r3, #1
 801212c:	e7e3      	b.n	80120f6 <_dtoa_r+0xa56>
 801212e:	9a00      	ldr	r2, [sp, #0]
 8012130:	2a00      	cmp	r2, #0
 8012132:	db04      	blt.n	801213e <_dtoa_r+0xa9e>
 8012134:	d125      	bne.n	8012182 <_dtoa_r+0xae2>
 8012136:	9a07      	ldr	r2, [sp, #28]
 8012138:	bb1a      	cbnz	r2, 8012182 <_dtoa_r+0xae2>
 801213a:	9a05      	ldr	r2, [sp, #20]
 801213c:	bb0a      	cbnz	r2, 8012182 <_dtoa_r+0xae2>
 801213e:	2b00      	cmp	r3, #0
 8012140:	ddec      	ble.n	801211c <_dtoa_r+0xa7c>
 8012142:	4651      	mov	r1, sl
 8012144:	2201      	movs	r2, #1
 8012146:	4620      	mov	r0, r4
 8012148:	f000 fab6 	bl	80126b8 <__lshift>
 801214c:	4631      	mov	r1, r6
 801214e:	4682      	mov	sl, r0
 8012150:	f000 fb03 	bl	801275a <__mcmp>
 8012154:	2800      	cmp	r0, #0
 8012156:	dc03      	bgt.n	8012160 <_dtoa_r+0xac0>
 8012158:	d1e0      	bne.n	801211c <_dtoa_r+0xa7c>
 801215a:	f019 0f01 	tst.w	r9, #1
 801215e:	d0dd      	beq.n	801211c <_dtoa_r+0xa7c>
 8012160:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012164:	d1d8      	bne.n	8012118 <_dtoa_r+0xa78>
 8012166:	2339      	movs	r3, #57	; 0x39
 8012168:	f888 3000 	strb.w	r3, [r8]
 801216c:	f108 0801 	add.w	r8, r8, #1
 8012170:	4645      	mov	r5, r8
 8012172:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012176:	2b39      	cmp	r3, #57	; 0x39
 8012178:	f105 32ff 	add.w	r2, r5, #4294967295
 801217c:	d03b      	beq.n	80121f6 <_dtoa_r+0xb56>
 801217e:	3301      	adds	r3, #1
 8012180:	e040      	b.n	8012204 <_dtoa_r+0xb64>
 8012182:	2b00      	cmp	r3, #0
 8012184:	f108 0501 	add.w	r5, r8, #1
 8012188:	dd05      	ble.n	8012196 <_dtoa_r+0xaf6>
 801218a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801218e:	d0ea      	beq.n	8012166 <_dtoa_r+0xac6>
 8012190:	f109 0901 	add.w	r9, r9, #1
 8012194:	e7c4      	b.n	8012120 <_dtoa_r+0xa80>
 8012196:	9b02      	ldr	r3, [sp, #8]
 8012198:	9a04      	ldr	r2, [sp, #16]
 801219a:	f805 9c01 	strb.w	r9, [r5, #-1]
 801219e:	1aeb      	subs	r3, r5, r3
 80121a0:	4293      	cmp	r3, r2
 80121a2:	46a8      	mov	r8, r5
 80121a4:	f43f af4b 	beq.w	801203e <_dtoa_r+0x99e>
 80121a8:	4651      	mov	r1, sl
 80121aa:	2300      	movs	r3, #0
 80121ac:	220a      	movs	r2, #10
 80121ae:	4620      	mov	r0, r4
 80121b0:	f000 f915 	bl	80123de <__multadd>
 80121b4:	9b03      	ldr	r3, [sp, #12]
 80121b6:	9903      	ldr	r1, [sp, #12]
 80121b8:	42bb      	cmp	r3, r7
 80121ba:	4682      	mov	sl, r0
 80121bc:	f04f 0300 	mov.w	r3, #0
 80121c0:	f04f 020a 	mov.w	r2, #10
 80121c4:	4620      	mov	r0, r4
 80121c6:	d104      	bne.n	80121d2 <_dtoa_r+0xb32>
 80121c8:	f000 f909 	bl	80123de <__multadd>
 80121cc:	9003      	str	r0, [sp, #12]
 80121ce:	4607      	mov	r7, r0
 80121d0:	e776      	b.n	80120c0 <_dtoa_r+0xa20>
 80121d2:	f000 f904 	bl	80123de <__multadd>
 80121d6:	2300      	movs	r3, #0
 80121d8:	9003      	str	r0, [sp, #12]
 80121da:	220a      	movs	r2, #10
 80121dc:	4639      	mov	r1, r7
 80121de:	4620      	mov	r0, r4
 80121e0:	f000 f8fd 	bl	80123de <__multadd>
 80121e4:	e7f3      	b.n	80121ce <_dtoa_r+0xb2e>
 80121e6:	4651      	mov	r1, sl
 80121e8:	2300      	movs	r3, #0
 80121ea:	220a      	movs	r2, #10
 80121ec:	4620      	mov	r0, r4
 80121ee:	f000 f8f6 	bl	80123de <__multadd>
 80121f2:	4682      	mov	sl, r0
 80121f4:	e70d      	b.n	8012012 <_dtoa_r+0x972>
 80121f6:	9b02      	ldr	r3, [sp, #8]
 80121f8:	4293      	cmp	r3, r2
 80121fa:	d105      	bne.n	8012208 <_dtoa_r+0xb68>
 80121fc:	9a02      	ldr	r2, [sp, #8]
 80121fe:	f10b 0b01 	add.w	fp, fp, #1
 8012202:	2331      	movs	r3, #49	; 0x31
 8012204:	7013      	strb	r3, [r2, #0]
 8012206:	e6e2      	b.n	8011fce <_dtoa_r+0x92e>
 8012208:	4615      	mov	r5, r2
 801220a:	e7b2      	b.n	8012172 <_dtoa_r+0xad2>
 801220c:	4b09      	ldr	r3, [pc, #36]	; (8012234 <_dtoa_r+0xb94>)
 801220e:	f7ff baae 	b.w	801176e <_dtoa_r+0xce>
 8012212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012214:	2b00      	cmp	r3, #0
 8012216:	f47f aa88 	bne.w	801172a <_dtoa_r+0x8a>
 801221a:	4b07      	ldr	r3, [pc, #28]	; (8012238 <_dtoa_r+0xb98>)
 801221c:	f7ff baa7 	b.w	801176e <_dtoa_r+0xce>
 8012220:	9b04      	ldr	r3, [sp, #16]
 8012222:	2b00      	cmp	r3, #0
 8012224:	f73f aef4 	bgt.w	8012010 <_dtoa_r+0x970>
 8012228:	9b07      	ldr	r3, [sp, #28]
 801222a:	2b02      	cmp	r3, #2
 801222c:	f77f aef0 	ble.w	8012010 <_dtoa_r+0x970>
 8012230:	e6b8      	b.n	8011fa4 <_dtoa_r+0x904>
 8012232:	bf00      	nop
 8012234:	08015ff2 	.word	0x08015ff2
 8012238:	08016117 	.word	0x08016117

0801223c <_localeconv_r>:
 801223c:	4b04      	ldr	r3, [pc, #16]	; (8012250 <_localeconv_r+0x14>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	6a18      	ldr	r0, [r3, #32]
 8012242:	4b04      	ldr	r3, [pc, #16]	; (8012254 <_localeconv_r+0x18>)
 8012244:	2800      	cmp	r0, #0
 8012246:	bf08      	it	eq
 8012248:	4618      	moveq	r0, r3
 801224a:	30f0      	adds	r0, #240	; 0xf0
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop
 8012250:	2000017c 	.word	0x2000017c
 8012254:	200001e0 	.word	0x200001e0

08012258 <_lseek_r>:
 8012258:	b538      	push	{r3, r4, r5, lr}
 801225a:	4c07      	ldr	r4, [pc, #28]	; (8012278 <_lseek_r+0x20>)
 801225c:	4605      	mov	r5, r0
 801225e:	4608      	mov	r0, r1
 8012260:	4611      	mov	r1, r2
 8012262:	2200      	movs	r2, #0
 8012264:	6022      	str	r2, [r4, #0]
 8012266:	461a      	mov	r2, r3
 8012268:	f000 fe72 	bl	8012f50 <_lseek>
 801226c:	1c43      	adds	r3, r0, #1
 801226e:	d102      	bne.n	8012276 <_lseek_r+0x1e>
 8012270:	6823      	ldr	r3, [r4, #0]
 8012272:	b103      	cbz	r3, 8012276 <_lseek_r+0x1e>
 8012274:	602b      	str	r3, [r5, #0]
 8012276:	bd38      	pop	{r3, r4, r5, pc}
 8012278:	20002e14 	.word	0x20002e14

0801227c <__swhatbuf_r>:
 801227c:	b570      	push	{r4, r5, r6, lr}
 801227e:	460e      	mov	r6, r1
 8012280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012284:	2900      	cmp	r1, #0
 8012286:	b090      	sub	sp, #64	; 0x40
 8012288:	4614      	mov	r4, r2
 801228a:	461d      	mov	r5, r3
 801228c:	da07      	bge.n	801229e <__swhatbuf_r+0x22>
 801228e:	2300      	movs	r3, #0
 8012290:	602b      	str	r3, [r5, #0]
 8012292:	89b3      	ldrh	r3, [r6, #12]
 8012294:	061a      	lsls	r2, r3, #24
 8012296:	d410      	bmi.n	80122ba <__swhatbuf_r+0x3e>
 8012298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801229c:	e00e      	b.n	80122bc <__swhatbuf_r+0x40>
 801229e:	aa01      	add	r2, sp, #4
 80122a0:	f000 fdf8 	bl	8012e94 <_fstat_r>
 80122a4:	2800      	cmp	r0, #0
 80122a6:	dbf2      	blt.n	801228e <__swhatbuf_r+0x12>
 80122a8:	9a02      	ldr	r2, [sp, #8]
 80122aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80122ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80122b2:	425a      	negs	r2, r3
 80122b4:	415a      	adcs	r2, r3
 80122b6:	602a      	str	r2, [r5, #0]
 80122b8:	e7ee      	b.n	8012298 <__swhatbuf_r+0x1c>
 80122ba:	2340      	movs	r3, #64	; 0x40
 80122bc:	2000      	movs	r0, #0
 80122be:	6023      	str	r3, [r4, #0]
 80122c0:	b010      	add	sp, #64	; 0x40
 80122c2:	bd70      	pop	{r4, r5, r6, pc}

080122c4 <__smakebuf_r>:
 80122c4:	898b      	ldrh	r3, [r1, #12]
 80122c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80122c8:	079d      	lsls	r5, r3, #30
 80122ca:	4606      	mov	r6, r0
 80122cc:	460c      	mov	r4, r1
 80122ce:	d507      	bpl.n	80122e0 <__smakebuf_r+0x1c>
 80122d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80122d4:	6023      	str	r3, [r4, #0]
 80122d6:	6123      	str	r3, [r4, #16]
 80122d8:	2301      	movs	r3, #1
 80122da:	6163      	str	r3, [r4, #20]
 80122dc:	b002      	add	sp, #8
 80122de:	bd70      	pop	{r4, r5, r6, pc}
 80122e0:	ab01      	add	r3, sp, #4
 80122e2:	466a      	mov	r2, sp
 80122e4:	f7ff ffca 	bl	801227c <__swhatbuf_r>
 80122e8:	9900      	ldr	r1, [sp, #0]
 80122ea:	4605      	mov	r5, r0
 80122ec:	4630      	mov	r0, r6
 80122ee:	f7fe f919 	bl	8010524 <_malloc_r>
 80122f2:	b948      	cbnz	r0, 8012308 <__smakebuf_r+0x44>
 80122f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122f8:	059a      	lsls	r2, r3, #22
 80122fa:	d4ef      	bmi.n	80122dc <__smakebuf_r+0x18>
 80122fc:	f023 0303 	bic.w	r3, r3, #3
 8012300:	f043 0302 	orr.w	r3, r3, #2
 8012304:	81a3      	strh	r3, [r4, #12]
 8012306:	e7e3      	b.n	80122d0 <__smakebuf_r+0xc>
 8012308:	4b0d      	ldr	r3, [pc, #52]	; (8012340 <__smakebuf_r+0x7c>)
 801230a:	62b3      	str	r3, [r6, #40]	; 0x28
 801230c:	89a3      	ldrh	r3, [r4, #12]
 801230e:	6020      	str	r0, [r4, #0]
 8012310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012314:	81a3      	strh	r3, [r4, #12]
 8012316:	9b00      	ldr	r3, [sp, #0]
 8012318:	6163      	str	r3, [r4, #20]
 801231a:	9b01      	ldr	r3, [sp, #4]
 801231c:	6120      	str	r0, [r4, #16]
 801231e:	b15b      	cbz	r3, 8012338 <__smakebuf_r+0x74>
 8012320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012324:	4630      	mov	r0, r6
 8012326:	f000 fdc7 	bl	8012eb8 <_isatty_r>
 801232a:	b128      	cbz	r0, 8012338 <__smakebuf_r+0x74>
 801232c:	89a3      	ldrh	r3, [r4, #12]
 801232e:	f023 0303 	bic.w	r3, r3, #3
 8012332:	f043 0301 	orr.w	r3, r3, #1
 8012336:	81a3      	strh	r3, [r4, #12]
 8012338:	89a3      	ldrh	r3, [r4, #12]
 801233a:	431d      	orrs	r5, r3
 801233c:	81a5      	strh	r5, [r4, #12]
 801233e:	e7cd      	b.n	80122dc <__smakebuf_r+0x18>
 8012340:	080101e5 	.word	0x080101e5

08012344 <__malloc_lock>:
 8012344:	4770      	bx	lr

08012346 <__malloc_unlock>:
 8012346:	4770      	bx	lr

08012348 <_Balloc>:
 8012348:	b570      	push	{r4, r5, r6, lr}
 801234a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801234c:	4604      	mov	r4, r0
 801234e:	460e      	mov	r6, r1
 8012350:	b93d      	cbnz	r5, 8012362 <_Balloc+0x1a>
 8012352:	2010      	movs	r0, #16
 8012354:	f7fe f862 	bl	801041c <malloc>
 8012358:	6260      	str	r0, [r4, #36]	; 0x24
 801235a:	6045      	str	r5, [r0, #4]
 801235c:	6085      	str	r5, [r0, #8]
 801235e:	6005      	str	r5, [r0, #0]
 8012360:	60c5      	str	r5, [r0, #12]
 8012362:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012364:	68eb      	ldr	r3, [r5, #12]
 8012366:	b183      	cbz	r3, 801238a <_Balloc+0x42>
 8012368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801236a:	68db      	ldr	r3, [r3, #12]
 801236c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012370:	b9b8      	cbnz	r0, 80123a2 <_Balloc+0x5a>
 8012372:	2101      	movs	r1, #1
 8012374:	fa01 f506 	lsl.w	r5, r1, r6
 8012378:	1d6a      	adds	r2, r5, #5
 801237a:	0092      	lsls	r2, r2, #2
 801237c:	4620      	mov	r0, r4
 801237e:	f000 fab3 	bl	80128e8 <_calloc_r>
 8012382:	b160      	cbz	r0, 801239e <_Balloc+0x56>
 8012384:	6046      	str	r6, [r0, #4]
 8012386:	6085      	str	r5, [r0, #8]
 8012388:	e00e      	b.n	80123a8 <_Balloc+0x60>
 801238a:	2221      	movs	r2, #33	; 0x21
 801238c:	2104      	movs	r1, #4
 801238e:	4620      	mov	r0, r4
 8012390:	f000 faaa 	bl	80128e8 <_calloc_r>
 8012394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012396:	60e8      	str	r0, [r5, #12]
 8012398:	68db      	ldr	r3, [r3, #12]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d1e4      	bne.n	8012368 <_Balloc+0x20>
 801239e:	2000      	movs	r0, #0
 80123a0:	bd70      	pop	{r4, r5, r6, pc}
 80123a2:	6802      	ldr	r2, [r0, #0]
 80123a4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80123a8:	2300      	movs	r3, #0
 80123aa:	6103      	str	r3, [r0, #16]
 80123ac:	60c3      	str	r3, [r0, #12]
 80123ae:	bd70      	pop	{r4, r5, r6, pc}

080123b0 <_Bfree>:
 80123b0:	b570      	push	{r4, r5, r6, lr}
 80123b2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80123b4:	4606      	mov	r6, r0
 80123b6:	460d      	mov	r5, r1
 80123b8:	b93c      	cbnz	r4, 80123ca <_Bfree+0x1a>
 80123ba:	2010      	movs	r0, #16
 80123bc:	f7fe f82e 	bl	801041c <malloc>
 80123c0:	6270      	str	r0, [r6, #36]	; 0x24
 80123c2:	6044      	str	r4, [r0, #4]
 80123c4:	6084      	str	r4, [r0, #8]
 80123c6:	6004      	str	r4, [r0, #0]
 80123c8:	60c4      	str	r4, [r0, #12]
 80123ca:	b13d      	cbz	r5, 80123dc <_Bfree+0x2c>
 80123cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80123ce:	686a      	ldr	r2, [r5, #4]
 80123d0:	68db      	ldr	r3, [r3, #12]
 80123d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80123d6:	6029      	str	r1, [r5, #0]
 80123d8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80123dc:	bd70      	pop	{r4, r5, r6, pc}

080123de <__multadd>:
 80123de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123e2:	690d      	ldr	r5, [r1, #16]
 80123e4:	461f      	mov	r7, r3
 80123e6:	4606      	mov	r6, r0
 80123e8:	460c      	mov	r4, r1
 80123ea:	f101 0e14 	add.w	lr, r1, #20
 80123ee:	2300      	movs	r3, #0
 80123f0:	f8de 0000 	ldr.w	r0, [lr]
 80123f4:	b281      	uxth	r1, r0
 80123f6:	fb02 7101 	mla	r1, r2, r1, r7
 80123fa:	0c0f      	lsrs	r7, r1, #16
 80123fc:	0c00      	lsrs	r0, r0, #16
 80123fe:	fb02 7000 	mla	r0, r2, r0, r7
 8012402:	b289      	uxth	r1, r1
 8012404:	3301      	adds	r3, #1
 8012406:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801240a:	429d      	cmp	r5, r3
 801240c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012410:	f84e 1b04 	str.w	r1, [lr], #4
 8012414:	dcec      	bgt.n	80123f0 <__multadd+0x12>
 8012416:	b1d7      	cbz	r7, 801244e <__multadd+0x70>
 8012418:	68a3      	ldr	r3, [r4, #8]
 801241a:	429d      	cmp	r5, r3
 801241c:	db12      	blt.n	8012444 <__multadd+0x66>
 801241e:	6861      	ldr	r1, [r4, #4]
 8012420:	4630      	mov	r0, r6
 8012422:	3101      	adds	r1, #1
 8012424:	f7ff ff90 	bl	8012348 <_Balloc>
 8012428:	6922      	ldr	r2, [r4, #16]
 801242a:	3202      	adds	r2, #2
 801242c:	f104 010c 	add.w	r1, r4, #12
 8012430:	4680      	mov	r8, r0
 8012432:	0092      	lsls	r2, r2, #2
 8012434:	300c      	adds	r0, #12
 8012436:	f7fe f813 	bl	8010460 <memcpy>
 801243a:	4621      	mov	r1, r4
 801243c:	4630      	mov	r0, r6
 801243e:	f7ff ffb7 	bl	80123b0 <_Bfree>
 8012442:	4644      	mov	r4, r8
 8012444:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012448:	3501      	adds	r5, #1
 801244a:	615f      	str	r7, [r3, #20]
 801244c:	6125      	str	r5, [r4, #16]
 801244e:	4620      	mov	r0, r4
 8012450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012454 <__hi0bits>:
 8012454:	0c02      	lsrs	r2, r0, #16
 8012456:	0412      	lsls	r2, r2, #16
 8012458:	4603      	mov	r3, r0
 801245a:	b9b2      	cbnz	r2, 801248a <__hi0bits+0x36>
 801245c:	0403      	lsls	r3, r0, #16
 801245e:	2010      	movs	r0, #16
 8012460:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012464:	bf04      	itt	eq
 8012466:	021b      	lsleq	r3, r3, #8
 8012468:	3008      	addeq	r0, #8
 801246a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801246e:	bf04      	itt	eq
 8012470:	011b      	lsleq	r3, r3, #4
 8012472:	3004      	addeq	r0, #4
 8012474:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012478:	bf04      	itt	eq
 801247a:	009b      	lsleq	r3, r3, #2
 801247c:	3002      	addeq	r0, #2
 801247e:	2b00      	cmp	r3, #0
 8012480:	db06      	blt.n	8012490 <__hi0bits+0x3c>
 8012482:	005b      	lsls	r3, r3, #1
 8012484:	d503      	bpl.n	801248e <__hi0bits+0x3a>
 8012486:	3001      	adds	r0, #1
 8012488:	4770      	bx	lr
 801248a:	2000      	movs	r0, #0
 801248c:	e7e8      	b.n	8012460 <__hi0bits+0xc>
 801248e:	2020      	movs	r0, #32
 8012490:	4770      	bx	lr

08012492 <__lo0bits>:
 8012492:	6803      	ldr	r3, [r0, #0]
 8012494:	f013 0207 	ands.w	r2, r3, #7
 8012498:	4601      	mov	r1, r0
 801249a:	d00b      	beq.n	80124b4 <__lo0bits+0x22>
 801249c:	07da      	lsls	r2, r3, #31
 801249e:	d423      	bmi.n	80124e8 <__lo0bits+0x56>
 80124a0:	0798      	lsls	r0, r3, #30
 80124a2:	bf49      	itett	mi
 80124a4:	085b      	lsrmi	r3, r3, #1
 80124a6:	089b      	lsrpl	r3, r3, #2
 80124a8:	2001      	movmi	r0, #1
 80124aa:	600b      	strmi	r3, [r1, #0]
 80124ac:	bf5c      	itt	pl
 80124ae:	600b      	strpl	r3, [r1, #0]
 80124b0:	2002      	movpl	r0, #2
 80124b2:	4770      	bx	lr
 80124b4:	b298      	uxth	r0, r3
 80124b6:	b9a8      	cbnz	r0, 80124e4 <__lo0bits+0x52>
 80124b8:	0c1b      	lsrs	r3, r3, #16
 80124ba:	2010      	movs	r0, #16
 80124bc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80124c0:	bf04      	itt	eq
 80124c2:	0a1b      	lsreq	r3, r3, #8
 80124c4:	3008      	addeq	r0, #8
 80124c6:	071a      	lsls	r2, r3, #28
 80124c8:	bf04      	itt	eq
 80124ca:	091b      	lsreq	r3, r3, #4
 80124cc:	3004      	addeq	r0, #4
 80124ce:	079a      	lsls	r2, r3, #30
 80124d0:	bf04      	itt	eq
 80124d2:	089b      	lsreq	r3, r3, #2
 80124d4:	3002      	addeq	r0, #2
 80124d6:	07da      	lsls	r2, r3, #31
 80124d8:	d402      	bmi.n	80124e0 <__lo0bits+0x4e>
 80124da:	085b      	lsrs	r3, r3, #1
 80124dc:	d006      	beq.n	80124ec <__lo0bits+0x5a>
 80124de:	3001      	adds	r0, #1
 80124e0:	600b      	str	r3, [r1, #0]
 80124e2:	4770      	bx	lr
 80124e4:	4610      	mov	r0, r2
 80124e6:	e7e9      	b.n	80124bc <__lo0bits+0x2a>
 80124e8:	2000      	movs	r0, #0
 80124ea:	4770      	bx	lr
 80124ec:	2020      	movs	r0, #32
 80124ee:	4770      	bx	lr

080124f0 <__i2b>:
 80124f0:	b510      	push	{r4, lr}
 80124f2:	460c      	mov	r4, r1
 80124f4:	2101      	movs	r1, #1
 80124f6:	f7ff ff27 	bl	8012348 <_Balloc>
 80124fa:	2201      	movs	r2, #1
 80124fc:	6144      	str	r4, [r0, #20]
 80124fe:	6102      	str	r2, [r0, #16]
 8012500:	bd10      	pop	{r4, pc}

08012502 <__multiply>:
 8012502:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012506:	4614      	mov	r4, r2
 8012508:	690a      	ldr	r2, [r1, #16]
 801250a:	6923      	ldr	r3, [r4, #16]
 801250c:	429a      	cmp	r2, r3
 801250e:	bfb8      	it	lt
 8012510:	460b      	movlt	r3, r1
 8012512:	4689      	mov	r9, r1
 8012514:	bfbc      	itt	lt
 8012516:	46a1      	movlt	r9, r4
 8012518:	461c      	movlt	r4, r3
 801251a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801251e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012522:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012526:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801252a:	eb07 060a 	add.w	r6, r7, sl
 801252e:	429e      	cmp	r6, r3
 8012530:	bfc8      	it	gt
 8012532:	3101      	addgt	r1, #1
 8012534:	f7ff ff08 	bl	8012348 <_Balloc>
 8012538:	f100 0514 	add.w	r5, r0, #20
 801253c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012540:	462b      	mov	r3, r5
 8012542:	2200      	movs	r2, #0
 8012544:	4543      	cmp	r3, r8
 8012546:	d316      	bcc.n	8012576 <__multiply+0x74>
 8012548:	f104 0214 	add.w	r2, r4, #20
 801254c:	f109 0114 	add.w	r1, r9, #20
 8012550:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8012554:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012558:	9301      	str	r3, [sp, #4]
 801255a:	9c01      	ldr	r4, [sp, #4]
 801255c:	4294      	cmp	r4, r2
 801255e:	4613      	mov	r3, r2
 8012560:	d80c      	bhi.n	801257c <__multiply+0x7a>
 8012562:	2e00      	cmp	r6, #0
 8012564:	dd03      	ble.n	801256e <__multiply+0x6c>
 8012566:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801256a:	2b00      	cmp	r3, #0
 801256c:	d054      	beq.n	8012618 <__multiply+0x116>
 801256e:	6106      	str	r6, [r0, #16]
 8012570:	b003      	add	sp, #12
 8012572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012576:	f843 2b04 	str.w	r2, [r3], #4
 801257a:	e7e3      	b.n	8012544 <__multiply+0x42>
 801257c:	f8b3 a000 	ldrh.w	sl, [r3]
 8012580:	3204      	adds	r2, #4
 8012582:	f1ba 0f00 	cmp.w	sl, #0
 8012586:	d020      	beq.n	80125ca <__multiply+0xc8>
 8012588:	46ae      	mov	lr, r5
 801258a:	4689      	mov	r9, r1
 801258c:	f04f 0c00 	mov.w	ip, #0
 8012590:	f859 4b04 	ldr.w	r4, [r9], #4
 8012594:	f8be b000 	ldrh.w	fp, [lr]
 8012598:	b2a3      	uxth	r3, r4
 801259a:	fb0a b303 	mla	r3, sl, r3, fp
 801259e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80125a2:	f8de 4000 	ldr.w	r4, [lr]
 80125a6:	4463      	add	r3, ip
 80125a8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80125ac:	fb0a c40b 	mla	r4, sl, fp, ip
 80125b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80125ba:	454f      	cmp	r7, r9
 80125bc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80125c0:	f84e 3b04 	str.w	r3, [lr], #4
 80125c4:	d8e4      	bhi.n	8012590 <__multiply+0x8e>
 80125c6:	f8ce c000 	str.w	ip, [lr]
 80125ca:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80125ce:	f1b9 0f00 	cmp.w	r9, #0
 80125d2:	d01f      	beq.n	8012614 <__multiply+0x112>
 80125d4:	682b      	ldr	r3, [r5, #0]
 80125d6:	46ae      	mov	lr, r5
 80125d8:	468c      	mov	ip, r1
 80125da:	f04f 0a00 	mov.w	sl, #0
 80125de:	f8bc 4000 	ldrh.w	r4, [ip]
 80125e2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80125e6:	fb09 b404 	mla	r4, r9, r4, fp
 80125ea:	44a2      	add	sl, r4
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80125f2:	f84e 3b04 	str.w	r3, [lr], #4
 80125f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80125fa:	f8be 4000 	ldrh.w	r4, [lr]
 80125fe:	0c1b      	lsrs	r3, r3, #16
 8012600:	fb09 4303 	mla	r3, r9, r3, r4
 8012604:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8012608:	4567      	cmp	r7, ip
 801260a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801260e:	d8e6      	bhi.n	80125de <__multiply+0xdc>
 8012610:	f8ce 3000 	str.w	r3, [lr]
 8012614:	3504      	adds	r5, #4
 8012616:	e7a0      	b.n	801255a <__multiply+0x58>
 8012618:	3e01      	subs	r6, #1
 801261a:	e7a2      	b.n	8012562 <__multiply+0x60>

0801261c <__pow5mult>:
 801261c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012620:	4615      	mov	r5, r2
 8012622:	f012 0203 	ands.w	r2, r2, #3
 8012626:	4606      	mov	r6, r0
 8012628:	460f      	mov	r7, r1
 801262a:	d007      	beq.n	801263c <__pow5mult+0x20>
 801262c:	3a01      	subs	r2, #1
 801262e:	4c21      	ldr	r4, [pc, #132]	; (80126b4 <__pow5mult+0x98>)
 8012630:	2300      	movs	r3, #0
 8012632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012636:	f7ff fed2 	bl	80123de <__multadd>
 801263a:	4607      	mov	r7, r0
 801263c:	10ad      	asrs	r5, r5, #2
 801263e:	d035      	beq.n	80126ac <__pow5mult+0x90>
 8012640:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012642:	b93c      	cbnz	r4, 8012654 <__pow5mult+0x38>
 8012644:	2010      	movs	r0, #16
 8012646:	f7fd fee9 	bl	801041c <malloc>
 801264a:	6270      	str	r0, [r6, #36]	; 0x24
 801264c:	6044      	str	r4, [r0, #4]
 801264e:	6084      	str	r4, [r0, #8]
 8012650:	6004      	str	r4, [r0, #0]
 8012652:	60c4      	str	r4, [r0, #12]
 8012654:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012658:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801265c:	b94c      	cbnz	r4, 8012672 <__pow5mult+0x56>
 801265e:	f240 2171 	movw	r1, #625	; 0x271
 8012662:	4630      	mov	r0, r6
 8012664:	f7ff ff44 	bl	80124f0 <__i2b>
 8012668:	2300      	movs	r3, #0
 801266a:	f8c8 0008 	str.w	r0, [r8, #8]
 801266e:	4604      	mov	r4, r0
 8012670:	6003      	str	r3, [r0, #0]
 8012672:	f04f 0800 	mov.w	r8, #0
 8012676:	07eb      	lsls	r3, r5, #31
 8012678:	d50a      	bpl.n	8012690 <__pow5mult+0x74>
 801267a:	4639      	mov	r1, r7
 801267c:	4622      	mov	r2, r4
 801267e:	4630      	mov	r0, r6
 8012680:	f7ff ff3f 	bl	8012502 <__multiply>
 8012684:	4639      	mov	r1, r7
 8012686:	4681      	mov	r9, r0
 8012688:	4630      	mov	r0, r6
 801268a:	f7ff fe91 	bl	80123b0 <_Bfree>
 801268e:	464f      	mov	r7, r9
 8012690:	106d      	asrs	r5, r5, #1
 8012692:	d00b      	beq.n	80126ac <__pow5mult+0x90>
 8012694:	6820      	ldr	r0, [r4, #0]
 8012696:	b938      	cbnz	r0, 80126a8 <__pow5mult+0x8c>
 8012698:	4622      	mov	r2, r4
 801269a:	4621      	mov	r1, r4
 801269c:	4630      	mov	r0, r6
 801269e:	f7ff ff30 	bl	8012502 <__multiply>
 80126a2:	6020      	str	r0, [r4, #0]
 80126a4:	f8c0 8000 	str.w	r8, [r0]
 80126a8:	4604      	mov	r4, r0
 80126aa:	e7e4      	b.n	8012676 <__pow5mult+0x5a>
 80126ac:	4638      	mov	r0, r7
 80126ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126b2:	bf00      	nop
 80126b4:	08016218 	.word	0x08016218

080126b8 <__lshift>:
 80126b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126bc:	460c      	mov	r4, r1
 80126be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126c2:	6923      	ldr	r3, [r4, #16]
 80126c4:	6849      	ldr	r1, [r1, #4]
 80126c6:	eb0a 0903 	add.w	r9, sl, r3
 80126ca:	68a3      	ldr	r3, [r4, #8]
 80126cc:	4607      	mov	r7, r0
 80126ce:	4616      	mov	r6, r2
 80126d0:	f109 0501 	add.w	r5, r9, #1
 80126d4:	42ab      	cmp	r3, r5
 80126d6:	db31      	blt.n	801273c <__lshift+0x84>
 80126d8:	4638      	mov	r0, r7
 80126da:	f7ff fe35 	bl	8012348 <_Balloc>
 80126de:	2200      	movs	r2, #0
 80126e0:	4680      	mov	r8, r0
 80126e2:	f100 0314 	add.w	r3, r0, #20
 80126e6:	4611      	mov	r1, r2
 80126e8:	4552      	cmp	r2, sl
 80126ea:	db2a      	blt.n	8012742 <__lshift+0x8a>
 80126ec:	6920      	ldr	r0, [r4, #16]
 80126ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80126f2:	f104 0114 	add.w	r1, r4, #20
 80126f6:	f016 021f 	ands.w	r2, r6, #31
 80126fa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80126fe:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8012702:	d022      	beq.n	801274a <__lshift+0x92>
 8012704:	f1c2 0c20 	rsb	ip, r2, #32
 8012708:	2000      	movs	r0, #0
 801270a:	680e      	ldr	r6, [r1, #0]
 801270c:	4096      	lsls	r6, r2
 801270e:	4330      	orrs	r0, r6
 8012710:	f843 0b04 	str.w	r0, [r3], #4
 8012714:	f851 0b04 	ldr.w	r0, [r1], #4
 8012718:	458e      	cmp	lr, r1
 801271a:	fa20 f00c 	lsr.w	r0, r0, ip
 801271e:	d8f4      	bhi.n	801270a <__lshift+0x52>
 8012720:	6018      	str	r0, [r3, #0]
 8012722:	b108      	cbz	r0, 8012728 <__lshift+0x70>
 8012724:	f109 0502 	add.w	r5, r9, #2
 8012728:	3d01      	subs	r5, #1
 801272a:	4638      	mov	r0, r7
 801272c:	f8c8 5010 	str.w	r5, [r8, #16]
 8012730:	4621      	mov	r1, r4
 8012732:	f7ff fe3d 	bl	80123b0 <_Bfree>
 8012736:	4640      	mov	r0, r8
 8012738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801273c:	3101      	adds	r1, #1
 801273e:	005b      	lsls	r3, r3, #1
 8012740:	e7c8      	b.n	80126d4 <__lshift+0x1c>
 8012742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012746:	3201      	adds	r2, #1
 8012748:	e7ce      	b.n	80126e8 <__lshift+0x30>
 801274a:	3b04      	subs	r3, #4
 801274c:	f851 2b04 	ldr.w	r2, [r1], #4
 8012750:	f843 2f04 	str.w	r2, [r3, #4]!
 8012754:	458e      	cmp	lr, r1
 8012756:	d8f9      	bhi.n	801274c <__lshift+0x94>
 8012758:	e7e6      	b.n	8012728 <__lshift+0x70>

0801275a <__mcmp>:
 801275a:	6903      	ldr	r3, [r0, #16]
 801275c:	690a      	ldr	r2, [r1, #16]
 801275e:	1a9b      	subs	r3, r3, r2
 8012760:	b530      	push	{r4, r5, lr}
 8012762:	d10c      	bne.n	801277e <__mcmp+0x24>
 8012764:	0092      	lsls	r2, r2, #2
 8012766:	3014      	adds	r0, #20
 8012768:	3114      	adds	r1, #20
 801276a:	1884      	adds	r4, r0, r2
 801276c:	4411      	add	r1, r2
 801276e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012772:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012776:	4295      	cmp	r5, r2
 8012778:	d003      	beq.n	8012782 <__mcmp+0x28>
 801277a:	d305      	bcc.n	8012788 <__mcmp+0x2e>
 801277c:	2301      	movs	r3, #1
 801277e:	4618      	mov	r0, r3
 8012780:	bd30      	pop	{r4, r5, pc}
 8012782:	42a0      	cmp	r0, r4
 8012784:	d3f3      	bcc.n	801276e <__mcmp+0x14>
 8012786:	e7fa      	b.n	801277e <__mcmp+0x24>
 8012788:	f04f 33ff 	mov.w	r3, #4294967295
 801278c:	e7f7      	b.n	801277e <__mcmp+0x24>

0801278e <__mdiff>:
 801278e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012792:	460d      	mov	r5, r1
 8012794:	4607      	mov	r7, r0
 8012796:	4611      	mov	r1, r2
 8012798:	4628      	mov	r0, r5
 801279a:	4614      	mov	r4, r2
 801279c:	f7ff ffdd 	bl	801275a <__mcmp>
 80127a0:	1e06      	subs	r6, r0, #0
 80127a2:	d108      	bne.n	80127b6 <__mdiff+0x28>
 80127a4:	4631      	mov	r1, r6
 80127a6:	4638      	mov	r0, r7
 80127a8:	f7ff fdce 	bl	8012348 <_Balloc>
 80127ac:	2301      	movs	r3, #1
 80127ae:	6103      	str	r3, [r0, #16]
 80127b0:	6146      	str	r6, [r0, #20]
 80127b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127b6:	bfa4      	itt	ge
 80127b8:	4623      	movge	r3, r4
 80127ba:	462c      	movge	r4, r5
 80127bc:	4638      	mov	r0, r7
 80127be:	6861      	ldr	r1, [r4, #4]
 80127c0:	bfa6      	itte	ge
 80127c2:	461d      	movge	r5, r3
 80127c4:	2600      	movge	r6, #0
 80127c6:	2601      	movlt	r6, #1
 80127c8:	f7ff fdbe 	bl	8012348 <_Balloc>
 80127cc:	692b      	ldr	r3, [r5, #16]
 80127ce:	60c6      	str	r6, [r0, #12]
 80127d0:	6926      	ldr	r6, [r4, #16]
 80127d2:	f105 0914 	add.w	r9, r5, #20
 80127d6:	f104 0214 	add.w	r2, r4, #20
 80127da:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80127de:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80127e2:	f100 0514 	add.w	r5, r0, #20
 80127e6:	f04f 0c00 	mov.w	ip, #0
 80127ea:	f852 ab04 	ldr.w	sl, [r2], #4
 80127ee:	f859 4b04 	ldr.w	r4, [r9], #4
 80127f2:	fa1c f18a 	uxtah	r1, ip, sl
 80127f6:	b2a3      	uxth	r3, r4
 80127f8:	1ac9      	subs	r1, r1, r3
 80127fa:	0c23      	lsrs	r3, r4, #16
 80127fc:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8012800:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012804:	b289      	uxth	r1, r1
 8012806:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801280a:	45c8      	cmp	r8, r9
 801280c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012810:	4696      	mov	lr, r2
 8012812:	f845 3b04 	str.w	r3, [r5], #4
 8012816:	d8e8      	bhi.n	80127ea <__mdiff+0x5c>
 8012818:	45be      	cmp	lr, r7
 801281a:	d305      	bcc.n	8012828 <__mdiff+0x9a>
 801281c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8012820:	b18b      	cbz	r3, 8012846 <__mdiff+0xb8>
 8012822:	6106      	str	r6, [r0, #16]
 8012824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012828:	f85e 1b04 	ldr.w	r1, [lr], #4
 801282c:	fa1c f381 	uxtah	r3, ip, r1
 8012830:	141a      	asrs	r2, r3, #16
 8012832:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012836:	b29b      	uxth	r3, r3
 8012838:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801283c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012840:	f845 3b04 	str.w	r3, [r5], #4
 8012844:	e7e8      	b.n	8012818 <__mdiff+0x8a>
 8012846:	3e01      	subs	r6, #1
 8012848:	e7e8      	b.n	801281c <__mdiff+0x8e>

0801284a <__d2b>:
 801284a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801284e:	460e      	mov	r6, r1
 8012850:	2101      	movs	r1, #1
 8012852:	ec59 8b10 	vmov	r8, r9, d0
 8012856:	4615      	mov	r5, r2
 8012858:	f7ff fd76 	bl	8012348 <_Balloc>
 801285c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012860:	4607      	mov	r7, r0
 8012862:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012866:	bb34      	cbnz	r4, 80128b6 <__d2b+0x6c>
 8012868:	9301      	str	r3, [sp, #4]
 801286a:	f1b8 0f00 	cmp.w	r8, #0
 801286e:	d027      	beq.n	80128c0 <__d2b+0x76>
 8012870:	a802      	add	r0, sp, #8
 8012872:	f840 8d08 	str.w	r8, [r0, #-8]!
 8012876:	f7ff fe0c 	bl	8012492 <__lo0bits>
 801287a:	9900      	ldr	r1, [sp, #0]
 801287c:	b1f0      	cbz	r0, 80128bc <__d2b+0x72>
 801287e:	9a01      	ldr	r2, [sp, #4]
 8012880:	f1c0 0320 	rsb	r3, r0, #32
 8012884:	fa02 f303 	lsl.w	r3, r2, r3
 8012888:	430b      	orrs	r3, r1
 801288a:	40c2      	lsrs	r2, r0
 801288c:	617b      	str	r3, [r7, #20]
 801288e:	9201      	str	r2, [sp, #4]
 8012890:	9b01      	ldr	r3, [sp, #4]
 8012892:	61bb      	str	r3, [r7, #24]
 8012894:	2b00      	cmp	r3, #0
 8012896:	bf14      	ite	ne
 8012898:	2102      	movne	r1, #2
 801289a:	2101      	moveq	r1, #1
 801289c:	6139      	str	r1, [r7, #16]
 801289e:	b1c4      	cbz	r4, 80128d2 <__d2b+0x88>
 80128a0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80128a4:	4404      	add	r4, r0
 80128a6:	6034      	str	r4, [r6, #0]
 80128a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80128ac:	6028      	str	r0, [r5, #0]
 80128ae:	4638      	mov	r0, r7
 80128b0:	b003      	add	sp, #12
 80128b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80128ba:	e7d5      	b.n	8012868 <__d2b+0x1e>
 80128bc:	6179      	str	r1, [r7, #20]
 80128be:	e7e7      	b.n	8012890 <__d2b+0x46>
 80128c0:	a801      	add	r0, sp, #4
 80128c2:	f7ff fde6 	bl	8012492 <__lo0bits>
 80128c6:	9b01      	ldr	r3, [sp, #4]
 80128c8:	617b      	str	r3, [r7, #20]
 80128ca:	2101      	movs	r1, #1
 80128cc:	6139      	str	r1, [r7, #16]
 80128ce:	3020      	adds	r0, #32
 80128d0:	e7e5      	b.n	801289e <__d2b+0x54>
 80128d2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80128d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80128da:	6030      	str	r0, [r6, #0]
 80128dc:	6918      	ldr	r0, [r3, #16]
 80128de:	f7ff fdb9 	bl	8012454 <__hi0bits>
 80128e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80128e6:	e7e1      	b.n	80128ac <__d2b+0x62>

080128e8 <_calloc_r>:
 80128e8:	b538      	push	{r3, r4, r5, lr}
 80128ea:	fb02 f401 	mul.w	r4, r2, r1
 80128ee:	4621      	mov	r1, r4
 80128f0:	f7fd fe18 	bl	8010524 <_malloc_r>
 80128f4:	4605      	mov	r5, r0
 80128f6:	b118      	cbz	r0, 8012900 <_calloc_r+0x18>
 80128f8:	4622      	mov	r2, r4
 80128fa:	2100      	movs	r1, #0
 80128fc:	f7fd fdbb 	bl	8010476 <memset>
 8012900:	4628      	mov	r0, r5
 8012902:	bd38      	pop	{r3, r4, r5, pc}

08012904 <_realloc_r>:
 8012904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012906:	4607      	mov	r7, r0
 8012908:	4614      	mov	r4, r2
 801290a:	460e      	mov	r6, r1
 801290c:	b921      	cbnz	r1, 8012918 <_realloc_r+0x14>
 801290e:	4611      	mov	r1, r2
 8012910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012914:	f7fd be06 	b.w	8010524 <_malloc_r>
 8012918:	b922      	cbnz	r2, 8012924 <_realloc_r+0x20>
 801291a:	f7fd fdb5 	bl	8010488 <_free_r>
 801291e:	4625      	mov	r5, r4
 8012920:	4628      	mov	r0, r5
 8012922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012924:	f000 faf2 	bl	8012f0c <_malloc_usable_size_r>
 8012928:	4284      	cmp	r4, r0
 801292a:	d90f      	bls.n	801294c <_realloc_r+0x48>
 801292c:	4621      	mov	r1, r4
 801292e:	4638      	mov	r0, r7
 8012930:	f7fd fdf8 	bl	8010524 <_malloc_r>
 8012934:	4605      	mov	r5, r0
 8012936:	2800      	cmp	r0, #0
 8012938:	d0f2      	beq.n	8012920 <_realloc_r+0x1c>
 801293a:	4631      	mov	r1, r6
 801293c:	4622      	mov	r2, r4
 801293e:	f7fd fd8f 	bl	8010460 <memcpy>
 8012942:	4631      	mov	r1, r6
 8012944:	4638      	mov	r0, r7
 8012946:	f7fd fd9f 	bl	8010488 <_free_r>
 801294a:	e7e9      	b.n	8012920 <_realloc_r+0x1c>
 801294c:	4635      	mov	r5, r6
 801294e:	e7e7      	b.n	8012920 <_realloc_r+0x1c>

08012950 <__ssputs_r>:
 8012950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012954:	688e      	ldr	r6, [r1, #8]
 8012956:	429e      	cmp	r6, r3
 8012958:	4682      	mov	sl, r0
 801295a:	460c      	mov	r4, r1
 801295c:	4691      	mov	r9, r2
 801295e:	4698      	mov	r8, r3
 8012960:	d835      	bhi.n	80129ce <__ssputs_r+0x7e>
 8012962:	898a      	ldrh	r2, [r1, #12]
 8012964:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012968:	d031      	beq.n	80129ce <__ssputs_r+0x7e>
 801296a:	6825      	ldr	r5, [r4, #0]
 801296c:	6909      	ldr	r1, [r1, #16]
 801296e:	1a6f      	subs	r7, r5, r1
 8012970:	6965      	ldr	r5, [r4, #20]
 8012972:	2302      	movs	r3, #2
 8012974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012978:	fb95 f5f3 	sdiv	r5, r5, r3
 801297c:	f108 0301 	add.w	r3, r8, #1
 8012980:	443b      	add	r3, r7
 8012982:	429d      	cmp	r5, r3
 8012984:	bf38      	it	cc
 8012986:	461d      	movcc	r5, r3
 8012988:	0553      	lsls	r3, r2, #21
 801298a:	d531      	bpl.n	80129f0 <__ssputs_r+0xa0>
 801298c:	4629      	mov	r1, r5
 801298e:	f7fd fdc9 	bl	8010524 <_malloc_r>
 8012992:	4606      	mov	r6, r0
 8012994:	b950      	cbnz	r0, 80129ac <__ssputs_r+0x5c>
 8012996:	230c      	movs	r3, #12
 8012998:	f8ca 3000 	str.w	r3, [sl]
 801299c:	89a3      	ldrh	r3, [r4, #12]
 801299e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129a2:	81a3      	strh	r3, [r4, #12]
 80129a4:	f04f 30ff 	mov.w	r0, #4294967295
 80129a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129ac:	463a      	mov	r2, r7
 80129ae:	6921      	ldr	r1, [r4, #16]
 80129b0:	f7fd fd56 	bl	8010460 <memcpy>
 80129b4:	89a3      	ldrh	r3, [r4, #12]
 80129b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80129ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129be:	81a3      	strh	r3, [r4, #12]
 80129c0:	6126      	str	r6, [r4, #16]
 80129c2:	6165      	str	r5, [r4, #20]
 80129c4:	443e      	add	r6, r7
 80129c6:	1bed      	subs	r5, r5, r7
 80129c8:	6026      	str	r6, [r4, #0]
 80129ca:	60a5      	str	r5, [r4, #8]
 80129cc:	4646      	mov	r6, r8
 80129ce:	4546      	cmp	r6, r8
 80129d0:	bf28      	it	cs
 80129d2:	4646      	movcs	r6, r8
 80129d4:	4632      	mov	r2, r6
 80129d6:	4649      	mov	r1, r9
 80129d8:	6820      	ldr	r0, [r4, #0]
 80129da:	f000 fa7d 	bl	8012ed8 <memmove>
 80129de:	68a3      	ldr	r3, [r4, #8]
 80129e0:	1b9b      	subs	r3, r3, r6
 80129e2:	60a3      	str	r3, [r4, #8]
 80129e4:	6823      	ldr	r3, [r4, #0]
 80129e6:	441e      	add	r6, r3
 80129e8:	6026      	str	r6, [r4, #0]
 80129ea:	2000      	movs	r0, #0
 80129ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129f0:	462a      	mov	r2, r5
 80129f2:	f7ff ff87 	bl	8012904 <_realloc_r>
 80129f6:	4606      	mov	r6, r0
 80129f8:	2800      	cmp	r0, #0
 80129fa:	d1e1      	bne.n	80129c0 <__ssputs_r+0x70>
 80129fc:	6921      	ldr	r1, [r4, #16]
 80129fe:	4650      	mov	r0, sl
 8012a00:	f7fd fd42 	bl	8010488 <_free_r>
 8012a04:	e7c7      	b.n	8012996 <__ssputs_r+0x46>
	...

08012a08 <_svfiprintf_r>:
 8012a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a0c:	b09d      	sub	sp, #116	; 0x74
 8012a0e:	4680      	mov	r8, r0
 8012a10:	9303      	str	r3, [sp, #12]
 8012a12:	898b      	ldrh	r3, [r1, #12]
 8012a14:	061c      	lsls	r4, r3, #24
 8012a16:	460d      	mov	r5, r1
 8012a18:	4616      	mov	r6, r2
 8012a1a:	d50f      	bpl.n	8012a3c <_svfiprintf_r+0x34>
 8012a1c:	690b      	ldr	r3, [r1, #16]
 8012a1e:	b96b      	cbnz	r3, 8012a3c <_svfiprintf_r+0x34>
 8012a20:	2140      	movs	r1, #64	; 0x40
 8012a22:	f7fd fd7f 	bl	8010524 <_malloc_r>
 8012a26:	6028      	str	r0, [r5, #0]
 8012a28:	6128      	str	r0, [r5, #16]
 8012a2a:	b928      	cbnz	r0, 8012a38 <_svfiprintf_r+0x30>
 8012a2c:	230c      	movs	r3, #12
 8012a2e:	f8c8 3000 	str.w	r3, [r8]
 8012a32:	f04f 30ff 	mov.w	r0, #4294967295
 8012a36:	e0c5      	b.n	8012bc4 <_svfiprintf_r+0x1bc>
 8012a38:	2340      	movs	r3, #64	; 0x40
 8012a3a:	616b      	str	r3, [r5, #20]
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8012a40:	2320      	movs	r3, #32
 8012a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a46:	2330      	movs	r3, #48	; 0x30
 8012a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a4c:	f04f 0b01 	mov.w	fp, #1
 8012a50:	4637      	mov	r7, r6
 8012a52:	463c      	mov	r4, r7
 8012a54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d13c      	bne.n	8012ad6 <_svfiprintf_r+0xce>
 8012a5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8012a60:	d00b      	beq.n	8012a7a <_svfiprintf_r+0x72>
 8012a62:	4653      	mov	r3, sl
 8012a64:	4632      	mov	r2, r6
 8012a66:	4629      	mov	r1, r5
 8012a68:	4640      	mov	r0, r8
 8012a6a:	f7ff ff71 	bl	8012950 <__ssputs_r>
 8012a6e:	3001      	adds	r0, #1
 8012a70:	f000 80a3 	beq.w	8012bba <_svfiprintf_r+0x1b2>
 8012a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a76:	4453      	add	r3, sl
 8012a78:	9309      	str	r3, [sp, #36]	; 0x24
 8012a7a:	783b      	ldrb	r3, [r7, #0]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	f000 809c 	beq.w	8012bba <_svfiprintf_r+0x1b2>
 8012a82:	2300      	movs	r3, #0
 8012a84:	f04f 32ff 	mov.w	r2, #4294967295
 8012a88:	9304      	str	r3, [sp, #16]
 8012a8a:	9307      	str	r3, [sp, #28]
 8012a8c:	9205      	str	r2, [sp, #20]
 8012a8e:	9306      	str	r3, [sp, #24]
 8012a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a94:	931a      	str	r3, [sp, #104]	; 0x68
 8012a96:	2205      	movs	r2, #5
 8012a98:	7821      	ldrb	r1, [r4, #0]
 8012a9a:	4850      	ldr	r0, [pc, #320]	; (8012bdc <_svfiprintf_r+0x1d4>)
 8012a9c:	f7ed fbb8 	bl	8000210 <memchr>
 8012aa0:	1c67      	adds	r7, r4, #1
 8012aa2:	9b04      	ldr	r3, [sp, #16]
 8012aa4:	b9d8      	cbnz	r0, 8012ade <_svfiprintf_r+0xd6>
 8012aa6:	06d9      	lsls	r1, r3, #27
 8012aa8:	bf44      	itt	mi
 8012aaa:	2220      	movmi	r2, #32
 8012aac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012ab0:	071a      	lsls	r2, r3, #28
 8012ab2:	bf44      	itt	mi
 8012ab4:	222b      	movmi	r2, #43	; 0x2b
 8012ab6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012aba:	7822      	ldrb	r2, [r4, #0]
 8012abc:	2a2a      	cmp	r2, #42	; 0x2a
 8012abe:	d016      	beq.n	8012aee <_svfiprintf_r+0xe6>
 8012ac0:	9a07      	ldr	r2, [sp, #28]
 8012ac2:	2100      	movs	r1, #0
 8012ac4:	200a      	movs	r0, #10
 8012ac6:	4627      	mov	r7, r4
 8012ac8:	3401      	adds	r4, #1
 8012aca:	783b      	ldrb	r3, [r7, #0]
 8012acc:	3b30      	subs	r3, #48	; 0x30
 8012ace:	2b09      	cmp	r3, #9
 8012ad0:	d951      	bls.n	8012b76 <_svfiprintf_r+0x16e>
 8012ad2:	b1c9      	cbz	r1, 8012b08 <_svfiprintf_r+0x100>
 8012ad4:	e011      	b.n	8012afa <_svfiprintf_r+0xf2>
 8012ad6:	2b25      	cmp	r3, #37	; 0x25
 8012ad8:	d0c0      	beq.n	8012a5c <_svfiprintf_r+0x54>
 8012ada:	4627      	mov	r7, r4
 8012adc:	e7b9      	b.n	8012a52 <_svfiprintf_r+0x4a>
 8012ade:	4a3f      	ldr	r2, [pc, #252]	; (8012bdc <_svfiprintf_r+0x1d4>)
 8012ae0:	1a80      	subs	r0, r0, r2
 8012ae2:	fa0b f000 	lsl.w	r0, fp, r0
 8012ae6:	4318      	orrs	r0, r3
 8012ae8:	9004      	str	r0, [sp, #16]
 8012aea:	463c      	mov	r4, r7
 8012aec:	e7d3      	b.n	8012a96 <_svfiprintf_r+0x8e>
 8012aee:	9a03      	ldr	r2, [sp, #12]
 8012af0:	1d11      	adds	r1, r2, #4
 8012af2:	6812      	ldr	r2, [r2, #0]
 8012af4:	9103      	str	r1, [sp, #12]
 8012af6:	2a00      	cmp	r2, #0
 8012af8:	db01      	blt.n	8012afe <_svfiprintf_r+0xf6>
 8012afa:	9207      	str	r2, [sp, #28]
 8012afc:	e004      	b.n	8012b08 <_svfiprintf_r+0x100>
 8012afe:	4252      	negs	r2, r2
 8012b00:	f043 0302 	orr.w	r3, r3, #2
 8012b04:	9207      	str	r2, [sp, #28]
 8012b06:	9304      	str	r3, [sp, #16]
 8012b08:	783b      	ldrb	r3, [r7, #0]
 8012b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8012b0c:	d10e      	bne.n	8012b2c <_svfiprintf_r+0x124>
 8012b0e:	787b      	ldrb	r3, [r7, #1]
 8012b10:	2b2a      	cmp	r3, #42	; 0x2a
 8012b12:	f107 0101 	add.w	r1, r7, #1
 8012b16:	d132      	bne.n	8012b7e <_svfiprintf_r+0x176>
 8012b18:	9b03      	ldr	r3, [sp, #12]
 8012b1a:	1d1a      	adds	r2, r3, #4
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	9203      	str	r2, [sp, #12]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	bfb8      	it	lt
 8012b24:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b28:	3702      	adds	r7, #2
 8012b2a:	9305      	str	r3, [sp, #20]
 8012b2c:	4c2c      	ldr	r4, [pc, #176]	; (8012be0 <_svfiprintf_r+0x1d8>)
 8012b2e:	7839      	ldrb	r1, [r7, #0]
 8012b30:	2203      	movs	r2, #3
 8012b32:	4620      	mov	r0, r4
 8012b34:	f7ed fb6c 	bl	8000210 <memchr>
 8012b38:	b138      	cbz	r0, 8012b4a <_svfiprintf_r+0x142>
 8012b3a:	2340      	movs	r3, #64	; 0x40
 8012b3c:	1b00      	subs	r0, r0, r4
 8012b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8012b42:	9b04      	ldr	r3, [sp, #16]
 8012b44:	4303      	orrs	r3, r0
 8012b46:	9304      	str	r3, [sp, #16]
 8012b48:	3701      	adds	r7, #1
 8012b4a:	7839      	ldrb	r1, [r7, #0]
 8012b4c:	4825      	ldr	r0, [pc, #148]	; (8012be4 <_svfiprintf_r+0x1dc>)
 8012b4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b52:	2206      	movs	r2, #6
 8012b54:	1c7e      	adds	r6, r7, #1
 8012b56:	f7ed fb5b 	bl	8000210 <memchr>
 8012b5a:	2800      	cmp	r0, #0
 8012b5c:	d035      	beq.n	8012bca <_svfiprintf_r+0x1c2>
 8012b5e:	4b22      	ldr	r3, [pc, #136]	; (8012be8 <_svfiprintf_r+0x1e0>)
 8012b60:	b9fb      	cbnz	r3, 8012ba2 <_svfiprintf_r+0x19a>
 8012b62:	9b03      	ldr	r3, [sp, #12]
 8012b64:	3307      	adds	r3, #7
 8012b66:	f023 0307 	bic.w	r3, r3, #7
 8012b6a:	3308      	adds	r3, #8
 8012b6c:	9303      	str	r3, [sp, #12]
 8012b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b70:	444b      	add	r3, r9
 8012b72:	9309      	str	r3, [sp, #36]	; 0x24
 8012b74:	e76c      	b.n	8012a50 <_svfiprintf_r+0x48>
 8012b76:	fb00 3202 	mla	r2, r0, r2, r3
 8012b7a:	2101      	movs	r1, #1
 8012b7c:	e7a3      	b.n	8012ac6 <_svfiprintf_r+0xbe>
 8012b7e:	2300      	movs	r3, #0
 8012b80:	9305      	str	r3, [sp, #20]
 8012b82:	4618      	mov	r0, r3
 8012b84:	240a      	movs	r4, #10
 8012b86:	460f      	mov	r7, r1
 8012b88:	3101      	adds	r1, #1
 8012b8a:	783a      	ldrb	r2, [r7, #0]
 8012b8c:	3a30      	subs	r2, #48	; 0x30
 8012b8e:	2a09      	cmp	r2, #9
 8012b90:	d903      	bls.n	8012b9a <_svfiprintf_r+0x192>
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d0ca      	beq.n	8012b2c <_svfiprintf_r+0x124>
 8012b96:	9005      	str	r0, [sp, #20]
 8012b98:	e7c8      	b.n	8012b2c <_svfiprintf_r+0x124>
 8012b9a:	fb04 2000 	mla	r0, r4, r0, r2
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	e7f1      	b.n	8012b86 <_svfiprintf_r+0x17e>
 8012ba2:	ab03      	add	r3, sp, #12
 8012ba4:	9300      	str	r3, [sp, #0]
 8012ba6:	462a      	mov	r2, r5
 8012ba8:	4b10      	ldr	r3, [pc, #64]	; (8012bec <_svfiprintf_r+0x1e4>)
 8012baa:	a904      	add	r1, sp, #16
 8012bac:	4640      	mov	r0, r8
 8012bae:	f7fd fdad 	bl	801070c <_printf_float>
 8012bb2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012bb6:	4681      	mov	r9, r0
 8012bb8:	d1d9      	bne.n	8012b6e <_svfiprintf_r+0x166>
 8012bba:	89ab      	ldrh	r3, [r5, #12]
 8012bbc:	065b      	lsls	r3, r3, #25
 8012bbe:	f53f af38 	bmi.w	8012a32 <_svfiprintf_r+0x2a>
 8012bc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012bc4:	b01d      	add	sp, #116	; 0x74
 8012bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bca:	ab03      	add	r3, sp, #12
 8012bcc:	9300      	str	r3, [sp, #0]
 8012bce:	462a      	mov	r2, r5
 8012bd0:	4b06      	ldr	r3, [pc, #24]	; (8012bec <_svfiprintf_r+0x1e4>)
 8012bd2:	a904      	add	r1, sp, #16
 8012bd4:	4640      	mov	r0, r8
 8012bd6:	f7fe f84f 	bl	8010c78 <_printf_i>
 8012bda:	e7ea      	b.n	8012bb2 <_svfiprintf_r+0x1aa>
 8012bdc:	08016224 	.word	0x08016224
 8012be0:	0801622a 	.word	0x0801622a
 8012be4:	0801622e 	.word	0x0801622e
 8012be8:	0801070d 	.word	0x0801070d
 8012bec:	08012951 	.word	0x08012951

08012bf0 <__sfputc_r>:
 8012bf0:	6893      	ldr	r3, [r2, #8]
 8012bf2:	3b01      	subs	r3, #1
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	b410      	push	{r4}
 8012bf8:	6093      	str	r3, [r2, #8]
 8012bfa:	da09      	bge.n	8012c10 <__sfputc_r+0x20>
 8012bfc:	6994      	ldr	r4, [r2, #24]
 8012bfe:	42a3      	cmp	r3, r4
 8012c00:	db02      	blt.n	8012c08 <__sfputc_r+0x18>
 8012c02:	b2cb      	uxtb	r3, r1
 8012c04:	2b0a      	cmp	r3, #10
 8012c06:	d103      	bne.n	8012c10 <__sfputc_r+0x20>
 8012c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c0c:	f7fe bbca 	b.w	80113a4 <__swbuf_r>
 8012c10:	6813      	ldr	r3, [r2, #0]
 8012c12:	1c58      	adds	r0, r3, #1
 8012c14:	6010      	str	r0, [r2, #0]
 8012c16:	7019      	strb	r1, [r3, #0]
 8012c18:	b2c8      	uxtb	r0, r1
 8012c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c1e:	4770      	bx	lr

08012c20 <__sfputs_r>:
 8012c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c22:	4606      	mov	r6, r0
 8012c24:	460f      	mov	r7, r1
 8012c26:	4614      	mov	r4, r2
 8012c28:	18d5      	adds	r5, r2, r3
 8012c2a:	42ac      	cmp	r4, r5
 8012c2c:	d101      	bne.n	8012c32 <__sfputs_r+0x12>
 8012c2e:	2000      	movs	r0, #0
 8012c30:	e007      	b.n	8012c42 <__sfputs_r+0x22>
 8012c32:	463a      	mov	r2, r7
 8012c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c38:	4630      	mov	r0, r6
 8012c3a:	f7ff ffd9 	bl	8012bf0 <__sfputc_r>
 8012c3e:	1c43      	adds	r3, r0, #1
 8012c40:	d1f3      	bne.n	8012c2a <__sfputs_r+0xa>
 8012c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c44 <_vfiprintf_r>:
 8012c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c48:	b09d      	sub	sp, #116	; 0x74
 8012c4a:	460c      	mov	r4, r1
 8012c4c:	4617      	mov	r7, r2
 8012c4e:	9303      	str	r3, [sp, #12]
 8012c50:	4606      	mov	r6, r0
 8012c52:	b118      	cbz	r0, 8012c5c <_vfiprintf_r+0x18>
 8012c54:	6983      	ldr	r3, [r0, #24]
 8012c56:	b90b      	cbnz	r3, 8012c5c <_vfiprintf_r+0x18>
 8012c58:	f7fd fb04 	bl	8010264 <__sinit>
 8012c5c:	4b7c      	ldr	r3, [pc, #496]	; (8012e50 <_vfiprintf_r+0x20c>)
 8012c5e:	429c      	cmp	r4, r3
 8012c60:	d157      	bne.n	8012d12 <_vfiprintf_r+0xce>
 8012c62:	6874      	ldr	r4, [r6, #4]
 8012c64:	89a3      	ldrh	r3, [r4, #12]
 8012c66:	0718      	lsls	r0, r3, #28
 8012c68:	d55d      	bpl.n	8012d26 <_vfiprintf_r+0xe2>
 8012c6a:	6923      	ldr	r3, [r4, #16]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d05a      	beq.n	8012d26 <_vfiprintf_r+0xe2>
 8012c70:	2300      	movs	r3, #0
 8012c72:	9309      	str	r3, [sp, #36]	; 0x24
 8012c74:	2320      	movs	r3, #32
 8012c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c7a:	2330      	movs	r3, #48	; 0x30
 8012c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c80:	f04f 0b01 	mov.w	fp, #1
 8012c84:	46b8      	mov	r8, r7
 8012c86:	4645      	mov	r5, r8
 8012c88:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d155      	bne.n	8012d3c <_vfiprintf_r+0xf8>
 8012c90:	ebb8 0a07 	subs.w	sl, r8, r7
 8012c94:	d00b      	beq.n	8012cae <_vfiprintf_r+0x6a>
 8012c96:	4653      	mov	r3, sl
 8012c98:	463a      	mov	r2, r7
 8012c9a:	4621      	mov	r1, r4
 8012c9c:	4630      	mov	r0, r6
 8012c9e:	f7ff ffbf 	bl	8012c20 <__sfputs_r>
 8012ca2:	3001      	adds	r0, #1
 8012ca4:	f000 80c4 	beq.w	8012e30 <_vfiprintf_r+0x1ec>
 8012ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012caa:	4453      	add	r3, sl
 8012cac:	9309      	str	r3, [sp, #36]	; 0x24
 8012cae:	f898 3000 	ldrb.w	r3, [r8]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	f000 80bc 	beq.w	8012e30 <_vfiprintf_r+0x1ec>
 8012cb8:	2300      	movs	r3, #0
 8012cba:	f04f 32ff 	mov.w	r2, #4294967295
 8012cbe:	9304      	str	r3, [sp, #16]
 8012cc0:	9307      	str	r3, [sp, #28]
 8012cc2:	9205      	str	r2, [sp, #20]
 8012cc4:	9306      	str	r3, [sp, #24]
 8012cc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cca:	931a      	str	r3, [sp, #104]	; 0x68
 8012ccc:	2205      	movs	r2, #5
 8012cce:	7829      	ldrb	r1, [r5, #0]
 8012cd0:	4860      	ldr	r0, [pc, #384]	; (8012e54 <_vfiprintf_r+0x210>)
 8012cd2:	f7ed fa9d 	bl	8000210 <memchr>
 8012cd6:	f105 0801 	add.w	r8, r5, #1
 8012cda:	9b04      	ldr	r3, [sp, #16]
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d131      	bne.n	8012d44 <_vfiprintf_r+0x100>
 8012ce0:	06d9      	lsls	r1, r3, #27
 8012ce2:	bf44      	itt	mi
 8012ce4:	2220      	movmi	r2, #32
 8012ce6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012cea:	071a      	lsls	r2, r3, #28
 8012cec:	bf44      	itt	mi
 8012cee:	222b      	movmi	r2, #43	; 0x2b
 8012cf0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012cf4:	782a      	ldrb	r2, [r5, #0]
 8012cf6:	2a2a      	cmp	r2, #42	; 0x2a
 8012cf8:	d02c      	beq.n	8012d54 <_vfiprintf_r+0x110>
 8012cfa:	9a07      	ldr	r2, [sp, #28]
 8012cfc:	2100      	movs	r1, #0
 8012cfe:	200a      	movs	r0, #10
 8012d00:	46a8      	mov	r8, r5
 8012d02:	3501      	adds	r5, #1
 8012d04:	f898 3000 	ldrb.w	r3, [r8]
 8012d08:	3b30      	subs	r3, #48	; 0x30
 8012d0a:	2b09      	cmp	r3, #9
 8012d0c:	d96d      	bls.n	8012dea <_vfiprintf_r+0x1a6>
 8012d0e:	b371      	cbz	r1, 8012d6e <_vfiprintf_r+0x12a>
 8012d10:	e026      	b.n	8012d60 <_vfiprintf_r+0x11c>
 8012d12:	4b51      	ldr	r3, [pc, #324]	; (8012e58 <_vfiprintf_r+0x214>)
 8012d14:	429c      	cmp	r4, r3
 8012d16:	d101      	bne.n	8012d1c <_vfiprintf_r+0xd8>
 8012d18:	68b4      	ldr	r4, [r6, #8]
 8012d1a:	e7a3      	b.n	8012c64 <_vfiprintf_r+0x20>
 8012d1c:	4b4f      	ldr	r3, [pc, #316]	; (8012e5c <_vfiprintf_r+0x218>)
 8012d1e:	429c      	cmp	r4, r3
 8012d20:	bf08      	it	eq
 8012d22:	68f4      	ldreq	r4, [r6, #12]
 8012d24:	e79e      	b.n	8012c64 <_vfiprintf_r+0x20>
 8012d26:	4621      	mov	r1, r4
 8012d28:	4630      	mov	r0, r6
 8012d2a:	f7fe fbad 	bl	8011488 <__swsetup_r>
 8012d2e:	2800      	cmp	r0, #0
 8012d30:	d09e      	beq.n	8012c70 <_vfiprintf_r+0x2c>
 8012d32:	f04f 30ff 	mov.w	r0, #4294967295
 8012d36:	b01d      	add	sp, #116	; 0x74
 8012d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d3c:	2b25      	cmp	r3, #37	; 0x25
 8012d3e:	d0a7      	beq.n	8012c90 <_vfiprintf_r+0x4c>
 8012d40:	46a8      	mov	r8, r5
 8012d42:	e7a0      	b.n	8012c86 <_vfiprintf_r+0x42>
 8012d44:	4a43      	ldr	r2, [pc, #268]	; (8012e54 <_vfiprintf_r+0x210>)
 8012d46:	1a80      	subs	r0, r0, r2
 8012d48:	fa0b f000 	lsl.w	r0, fp, r0
 8012d4c:	4318      	orrs	r0, r3
 8012d4e:	9004      	str	r0, [sp, #16]
 8012d50:	4645      	mov	r5, r8
 8012d52:	e7bb      	b.n	8012ccc <_vfiprintf_r+0x88>
 8012d54:	9a03      	ldr	r2, [sp, #12]
 8012d56:	1d11      	adds	r1, r2, #4
 8012d58:	6812      	ldr	r2, [r2, #0]
 8012d5a:	9103      	str	r1, [sp, #12]
 8012d5c:	2a00      	cmp	r2, #0
 8012d5e:	db01      	blt.n	8012d64 <_vfiprintf_r+0x120>
 8012d60:	9207      	str	r2, [sp, #28]
 8012d62:	e004      	b.n	8012d6e <_vfiprintf_r+0x12a>
 8012d64:	4252      	negs	r2, r2
 8012d66:	f043 0302 	orr.w	r3, r3, #2
 8012d6a:	9207      	str	r2, [sp, #28]
 8012d6c:	9304      	str	r3, [sp, #16]
 8012d6e:	f898 3000 	ldrb.w	r3, [r8]
 8012d72:	2b2e      	cmp	r3, #46	; 0x2e
 8012d74:	d110      	bne.n	8012d98 <_vfiprintf_r+0x154>
 8012d76:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d7c:	f108 0101 	add.w	r1, r8, #1
 8012d80:	d137      	bne.n	8012df2 <_vfiprintf_r+0x1ae>
 8012d82:	9b03      	ldr	r3, [sp, #12]
 8012d84:	1d1a      	adds	r2, r3, #4
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	9203      	str	r2, [sp, #12]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	bfb8      	it	lt
 8012d8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d92:	f108 0802 	add.w	r8, r8, #2
 8012d96:	9305      	str	r3, [sp, #20]
 8012d98:	4d31      	ldr	r5, [pc, #196]	; (8012e60 <_vfiprintf_r+0x21c>)
 8012d9a:	f898 1000 	ldrb.w	r1, [r8]
 8012d9e:	2203      	movs	r2, #3
 8012da0:	4628      	mov	r0, r5
 8012da2:	f7ed fa35 	bl	8000210 <memchr>
 8012da6:	b140      	cbz	r0, 8012dba <_vfiprintf_r+0x176>
 8012da8:	2340      	movs	r3, #64	; 0x40
 8012daa:	1b40      	subs	r0, r0, r5
 8012dac:	fa03 f000 	lsl.w	r0, r3, r0
 8012db0:	9b04      	ldr	r3, [sp, #16]
 8012db2:	4303      	orrs	r3, r0
 8012db4:	9304      	str	r3, [sp, #16]
 8012db6:	f108 0801 	add.w	r8, r8, #1
 8012dba:	f898 1000 	ldrb.w	r1, [r8]
 8012dbe:	4829      	ldr	r0, [pc, #164]	; (8012e64 <_vfiprintf_r+0x220>)
 8012dc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012dc4:	2206      	movs	r2, #6
 8012dc6:	f108 0701 	add.w	r7, r8, #1
 8012dca:	f7ed fa21 	bl	8000210 <memchr>
 8012dce:	2800      	cmp	r0, #0
 8012dd0:	d034      	beq.n	8012e3c <_vfiprintf_r+0x1f8>
 8012dd2:	4b25      	ldr	r3, [pc, #148]	; (8012e68 <_vfiprintf_r+0x224>)
 8012dd4:	bb03      	cbnz	r3, 8012e18 <_vfiprintf_r+0x1d4>
 8012dd6:	9b03      	ldr	r3, [sp, #12]
 8012dd8:	3307      	adds	r3, #7
 8012dda:	f023 0307 	bic.w	r3, r3, #7
 8012dde:	3308      	adds	r3, #8
 8012de0:	9303      	str	r3, [sp, #12]
 8012de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012de4:	444b      	add	r3, r9
 8012de6:	9309      	str	r3, [sp, #36]	; 0x24
 8012de8:	e74c      	b.n	8012c84 <_vfiprintf_r+0x40>
 8012dea:	fb00 3202 	mla	r2, r0, r2, r3
 8012dee:	2101      	movs	r1, #1
 8012df0:	e786      	b.n	8012d00 <_vfiprintf_r+0xbc>
 8012df2:	2300      	movs	r3, #0
 8012df4:	9305      	str	r3, [sp, #20]
 8012df6:	4618      	mov	r0, r3
 8012df8:	250a      	movs	r5, #10
 8012dfa:	4688      	mov	r8, r1
 8012dfc:	3101      	adds	r1, #1
 8012dfe:	f898 2000 	ldrb.w	r2, [r8]
 8012e02:	3a30      	subs	r2, #48	; 0x30
 8012e04:	2a09      	cmp	r2, #9
 8012e06:	d903      	bls.n	8012e10 <_vfiprintf_r+0x1cc>
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d0c5      	beq.n	8012d98 <_vfiprintf_r+0x154>
 8012e0c:	9005      	str	r0, [sp, #20]
 8012e0e:	e7c3      	b.n	8012d98 <_vfiprintf_r+0x154>
 8012e10:	fb05 2000 	mla	r0, r5, r0, r2
 8012e14:	2301      	movs	r3, #1
 8012e16:	e7f0      	b.n	8012dfa <_vfiprintf_r+0x1b6>
 8012e18:	ab03      	add	r3, sp, #12
 8012e1a:	9300      	str	r3, [sp, #0]
 8012e1c:	4622      	mov	r2, r4
 8012e1e:	4b13      	ldr	r3, [pc, #76]	; (8012e6c <_vfiprintf_r+0x228>)
 8012e20:	a904      	add	r1, sp, #16
 8012e22:	4630      	mov	r0, r6
 8012e24:	f7fd fc72 	bl	801070c <_printf_float>
 8012e28:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012e2c:	4681      	mov	r9, r0
 8012e2e:	d1d8      	bne.n	8012de2 <_vfiprintf_r+0x19e>
 8012e30:	89a3      	ldrh	r3, [r4, #12]
 8012e32:	065b      	lsls	r3, r3, #25
 8012e34:	f53f af7d 	bmi.w	8012d32 <_vfiprintf_r+0xee>
 8012e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e3a:	e77c      	b.n	8012d36 <_vfiprintf_r+0xf2>
 8012e3c:	ab03      	add	r3, sp, #12
 8012e3e:	9300      	str	r3, [sp, #0]
 8012e40:	4622      	mov	r2, r4
 8012e42:	4b0a      	ldr	r3, [pc, #40]	; (8012e6c <_vfiprintf_r+0x228>)
 8012e44:	a904      	add	r1, sp, #16
 8012e46:	4630      	mov	r0, r6
 8012e48:	f7fd ff16 	bl	8010c78 <_printf_i>
 8012e4c:	e7ec      	b.n	8012e28 <_vfiprintf_r+0x1e4>
 8012e4e:	bf00      	nop
 8012e50:	08015f94 	.word	0x08015f94
 8012e54:	08016224 	.word	0x08016224
 8012e58:	08015fb4 	.word	0x08015fb4
 8012e5c:	08015f74 	.word	0x08015f74
 8012e60:	0801622a 	.word	0x0801622a
 8012e64:	0801622e 	.word	0x0801622e
 8012e68:	0801070d 	.word	0x0801070d
 8012e6c:	08012c21 	.word	0x08012c21

08012e70 <_read_r>:
 8012e70:	b538      	push	{r3, r4, r5, lr}
 8012e72:	4c07      	ldr	r4, [pc, #28]	; (8012e90 <_read_r+0x20>)
 8012e74:	4605      	mov	r5, r0
 8012e76:	4608      	mov	r0, r1
 8012e78:	4611      	mov	r1, r2
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	6022      	str	r2, [r4, #0]
 8012e7e:	461a      	mov	r2, r3
 8012e80:	f7fb fe76 	bl	800eb70 <_read>
 8012e84:	1c43      	adds	r3, r0, #1
 8012e86:	d102      	bne.n	8012e8e <_read_r+0x1e>
 8012e88:	6823      	ldr	r3, [r4, #0]
 8012e8a:	b103      	cbz	r3, 8012e8e <_read_r+0x1e>
 8012e8c:	602b      	str	r3, [r5, #0]
 8012e8e:	bd38      	pop	{r3, r4, r5, pc}
 8012e90:	20002e14 	.word	0x20002e14

08012e94 <_fstat_r>:
 8012e94:	b538      	push	{r3, r4, r5, lr}
 8012e96:	4c07      	ldr	r4, [pc, #28]	; (8012eb4 <_fstat_r+0x20>)
 8012e98:	2300      	movs	r3, #0
 8012e9a:	4605      	mov	r5, r0
 8012e9c:	4608      	mov	r0, r1
 8012e9e:	4611      	mov	r1, r2
 8012ea0:	6023      	str	r3, [r4, #0]
 8012ea2:	f000 f845 	bl	8012f30 <_fstat>
 8012ea6:	1c43      	adds	r3, r0, #1
 8012ea8:	d102      	bne.n	8012eb0 <_fstat_r+0x1c>
 8012eaa:	6823      	ldr	r3, [r4, #0]
 8012eac:	b103      	cbz	r3, 8012eb0 <_fstat_r+0x1c>
 8012eae:	602b      	str	r3, [r5, #0]
 8012eb0:	bd38      	pop	{r3, r4, r5, pc}
 8012eb2:	bf00      	nop
 8012eb4:	20002e14 	.word	0x20002e14

08012eb8 <_isatty_r>:
 8012eb8:	b538      	push	{r3, r4, r5, lr}
 8012eba:	4c06      	ldr	r4, [pc, #24]	; (8012ed4 <_isatty_r+0x1c>)
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	4605      	mov	r5, r0
 8012ec0:	4608      	mov	r0, r1
 8012ec2:	6023      	str	r3, [r4, #0]
 8012ec4:	f000 f83c 	bl	8012f40 <_isatty>
 8012ec8:	1c43      	adds	r3, r0, #1
 8012eca:	d102      	bne.n	8012ed2 <_isatty_r+0x1a>
 8012ecc:	6823      	ldr	r3, [r4, #0]
 8012ece:	b103      	cbz	r3, 8012ed2 <_isatty_r+0x1a>
 8012ed0:	602b      	str	r3, [r5, #0]
 8012ed2:	bd38      	pop	{r3, r4, r5, pc}
 8012ed4:	20002e14 	.word	0x20002e14

08012ed8 <memmove>:
 8012ed8:	4288      	cmp	r0, r1
 8012eda:	b510      	push	{r4, lr}
 8012edc:	eb01 0302 	add.w	r3, r1, r2
 8012ee0:	d803      	bhi.n	8012eea <memmove+0x12>
 8012ee2:	1e42      	subs	r2, r0, #1
 8012ee4:	4299      	cmp	r1, r3
 8012ee6:	d10c      	bne.n	8012f02 <memmove+0x2a>
 8012ee8:	bd10      	pop	{r4, pc}
 8012eea:	4298      	cmp	r0, r3
 8012eec:	d2f9      	bcs.n	8012ee2 <memmove+0xa>
 8012eee:	1881      	adds	r1, r0, r2
 8012ef0:	1ad2      	subs	r2, r2, r3
 8012ef2:	42d3      	cmn	r3, r2
 8012ef4:	d100      	bne.n	8012ef8 <memmove+0x20>
 8012ef6:	bd10      	pop	{r4, pc}
 8012ef8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012efc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012f00:	e7f7      	b.n	8012ef2 <memmove+0x1a>
 8012f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f06:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012f0a:	e7eb      	b.n	8012ee4 <memmove+0xc>

08012f0c <_malloc_usable_size_r>:
 8012f0c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8012f10:	2800      	cmp	r0, #0
 8012f12:	f1a0 0004 	sub.w	r0, r0, #4
 8012f16:	bfbc      	itt	lt
 8012f18:	580b      	ldrlt	r3, [r1, r0]
 8012f1a:	18c0      	addlt	r0, r0, r3
 8012f1c:	4770      	bx	lr
	...

08012f20 <_close>:
 8012f20:	4b02      	ldr	r3, [pc, #8]	; (8012f2c <_close+0xc>)
 8012f22:	2258      	movs	r2, #88	; 0x58
 8012f24:	601a      	str	r2, [r3, #0]
 8012f26:	f04f 30ff 	mov.w	r0, #4294967295
 8012f2a:	4770      	bx	lr
 8012f2c:	20002e14 	.word	0x20002e14

08012f30 <_fstat>:
 8012f30:	4b02      	ldr	r3, [pc, #8]	; (8012f3c <_fstat+0xc>)
 8012f32:	2258      	movs	r2, #88	; 0x58
 8012f34:	601a      	str	r2, [r3, #0]
 8012f36:	f04f 30ff 	mov.w	r0, #4294967295
 8012f3a:	4770      	bx	lr
 8012f3c:	20002e14 	.word	0x20002e14

08012f40 <_isatty>:
 8012f40:	4b02      	ldr	r3, [pc, #8]	; (8012f4c <_isatty+0xc>)
 8012f42:	2258      	movs	r2, #88	; 0x58
 8012f44:	601a      	str	r2, [r3, #0]
 8012f46:	2000      	movs	r0, #0
 8012f48:	4770      	bx	lr
 8012f4a:	bf00      	nop
 8012f4c:	20002e14 	.word	0x20002e14

08012f50 <_lseek>:
 8012f50:	4b02      	ldr	r3, [pc, #8]	; (8012f5c <_lseek+0xc>)
 8012f52:	2258      	movs	r2, #88	; 0x58
 8012f54:	601a      	str	r2, [r3, #0]
 8012f56:	f04f 30ff 	mov.w	r0, #4294967295
 8012f5a:	4770      	bx	lr
 8012f5c:	20002e14 	.word	0x20002e14

08012f60 <_sbrk>:
 8012f60:	4b04      	ldr	r3, [pc, #16]	; (8012f74 <_sbrk+0x14>)
 8012f62:	6819      	ldr	r1, [r3, #0]
 8012f64:	4602      	mov	r2, r0
 8012f66:	b909      	cbnz	r1, 8012f6c <_sbrk+0xc>
 8012f68:	4903      	ldr	r1, [pc, #12]	; (8012f78 <_sbrk+0x18>)
 8012f6a:	6019      	str	r1, [r3, #0]
 8012f6c:	6818      	ldr	r0, [r3, #0]
 8012f6e:	4402      	add	r2, r0
 8012f70:	601a      	str	r2, [r3, #0]
 8012f72:	4770      	bx	lr
 8012f74:	200004ac 	.word	0x200004ac
 8012f78:	20002e18 	.word	0x20002e18

08012f7c <_init>:
 8012f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f7e:	bf00      	nop
 8012f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f82:	bc08      	pop	{r3}
 8012f84:	469e      	mov	lr, r3
 8012f86:	4770      	bx	lr

08012f88 <_fini>:
 8012f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f8a:	bf00      	nop
 8012f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f8e:	bc08      	pop	{r3}
 8012f90:	469e      	mov	lr, r3
 8012f92:	4770      	bx	lr
