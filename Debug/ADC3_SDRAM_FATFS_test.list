
ADC3_SDRAM_FATFS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f28  0800f680  0800f680  0001f680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080125a8  080125a8  000225a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080125b0  080125b0  000225b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080125b4  080125b4  000225b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000034c  20000000  080125b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002420  2000034c  08012904  0003034c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000276c  08012904  0003276c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003ac3a  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006313  00000000  00000000  0006afb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001ed8  00000000  00000000  000712d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001c30  00000000  00000000  000731a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012983  00000000  00000000  00074dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00009ac7  00000000  00000000  0008775b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00091222  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009378  00000000  00000000  000912a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  0009a618  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  0009a6b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000034c 	.word	0x2000034c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f664 	.word	0x0800f664

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000350 	.word	0x20000350
 800020c:	0800f664 	.word	0x0800f664

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f092 0f00 	teq	r2, #0
 80005ca:	bf14      	ite	ne
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e720      	b.n	8000424 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aedc 	beq.w	80003d2 <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6c1      	b.n	80003d2 <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__gedf2>:
 8000a74:	f04f 3cff 	mov.w	ip, #4294967295
 8000a78:	e006      	b.n	8000a88 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__ledf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	e002      	b.n	8000a88 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__cmpdf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9e:	d01b      	beq.n	8000ad8 <__cmpdf2+0x54>
 8000aa0:	b001      	add	sp, #4
 8000aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa6:	bf0c      	ite	eq
 8000aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aac:	ea91 0f03 	teqne	r1, r3
 8000ab0:	bf02      	ittt	eq
 8000ab2:	ea90 0f02 	teqeq	r0, r2
 8000ab6:	2000      	moveq	r0, #0
 8000ab8:	4770      	bxeq	lr
 8000aba:	f110 0f00 	cmn.w	r0, #0
 8000abe:	ea91 0f03 	teq	r1, r3
 8000ac2:	bf58      	it	pl
 8000ac4:	4299      	cmppl	r1, r3
 8000ac6:	bf08      	it	eq
 8000ac8:	4290      	cmpeq	r0, r2
 8000aca:	bf2c      	ite	cs
 8000acc:	17d8      	asrcs	r0, r3, #31
 8000ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad2:	f040 0001 	orr.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d102      	bne.n	8000ae8 <__cmpdf2+0x64>
 8000ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae6:	d107      	bne.n	8000af8 <__cmpdf2+0x74>
 8000ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af0:	d1d6      	bne.n	8000aa0 <__cmpdf2+0x1c>
 8000af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af6:	d0d3      	beq.n	8000aa0 <__cmpdf2+0x1c>
 8000af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdrcmple>:
 8000b00:	4684      	mov	ip, r0
 8000b02:	4610      	mov	r0, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	468c      	mov	ip, r1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	e000      	b.n	8000b10 <__aeabi_cdcmpeq>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_cdcmpeq>:
 8000b10:	b501      	push	{r0, lr}
 8000b12:	f7ff ffb7 	bl	8000a84 <__cmpdf2>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	bf48      	it	mi
 8000b1a:	f110 0f00 	cmnmi.w	r0, #0
 8000b1e:	bd01      	pop	{r0, pc}

08000b20 <__aeabi_dcmpeq>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff fff4 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b28:	bf0c      	ite	eq
 8000b2a:	2001      	moveq	r0, #1
 8000b2c:	2000      	movne	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmplt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffea 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmple>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffe0 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpge>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffce 	bl	8000b00 <__aeabi_cdrcmple>
 8000b64:	bf94      	ite	ls
 8000b66:	2001      	movls	r0, #1
 8000b68:	2000      	movhi	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmpgt>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffc4 	bl	8000b00 <__aeabi_cdrcmple>
 8000b78:	bf34      	ite	cc
 8000b7a:	2001      	movcc	r0, #1
 8000b7c:	2000      	movcs	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpun>:
 8000b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x10>
 8000b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b92:	d10a      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b9c:	d102      	bne.n	8000ba4 <__aeabi_dcmpun+0x20>
 8000b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0001 	mov.w	r0, #1
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2iz>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d215      	bcs.n	8000be6 <__aeabi_d2iz+0x36>
 8000bba:	d511      	bpl.n	8000be0 <__aeabi_d2iz+0x30>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d912      	bls.n	8000bec <__aeabi_d2iz+0x3c>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d105      	bne.n	8000bf8 <__aeabi_d2iz+0x48>
 8000bec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_d2uiz>:
 8000c00:	004a      	lsls	r2, r1, #1
 8000c02:	d211      	bcs.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c08:	d211      	bcs.n	8000c2e <__aeabi_d2uiz+0x2e>
 8000c0a:	d50d      	bpl.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c14:	d40e      	bmi.n	8000c34 <__aeabi_d2uiz+0x34>
 8000c16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c22:	fa23 f002 	lsr.w	r0, r3, r2
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d102      	bne.n	8000c3a <__aeabi_d2uiz+0x3a>
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	4770      	bx	lr
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	4770      	bx	lr

08000c40 <__aeabi_d2f>:
 8000c40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c48:	bf24      	itt	cs
 8000c4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c52:	d90d      	bls.n	8000c70 <__aeabi_d2f+0x30>
 8000c54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c68:	bf08      	it	eq
 8000c6a:	f020 0001 	biceq.w	r0, r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c74:	d121      	bne.n	8000cba <__aeabi_d2f+0x7a>
 8000c76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c7a:	bfbc      	itt	lt
 8000c7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	4770      	bxlt	lr
 8000c82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c8a:	f1c2 0218 	rsb	r2, r2, #24
 8000c8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c96:	fa20 f002 	lsr.w	r0, r0, r2
 8000c9a:	bf18      	it	ne
 8000c9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ca0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cac:	ea40 000c 	orr.w	r0, r0, ip
 8000cb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb8:	e7cc      	b.n	8000c54 <__aeabi_d2f+0x14>
 8000cba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cbe:	d107      	bne.n	8000cd0 <__aeabi_d2f+0x90>
 8000cc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bxne	lr
 8000cd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <__aeabi_uldivmod>:
 8000ce0:	b953      	cbnz	r3, 8000cf8 <__aeabi_uldivmod+0x18>
 8000ce2:	b94a      	cbnz	r2, 8000cf8 <__aeabi_uldivmod+0x18>
 8000ce4:	2900      	cmp	r1, #0
 8000ce6:	bf08      	it	eq
 8000ce8:	2800      	cmpeq	r0, #0
 8000cea:	bf1c      	itt	ne
 8000cec:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cf4:	f000 b97a 	b.w	8000fec <__aeabi_idiv0>
 8000cf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d00:	f000 f806 	bl	8000d10 <__udivmoddi4>
 8000d04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d0c:	b004      	add	sp, #16
 8000d0e:	4770      	bx	lr

08000d10 <__udivmoddi4>:
 8000d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d14:	468c      	mov	ip, r1
 8000d16:	460d      	mov	r5, r1
 8000d18:	4604      	mov	r4, r0
 8000d1a:	9e08      	ldr	r6, [sp, #32]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d151      	bne.n	8000dc4 <__udivmoddi4+0xb4>
 8000d20:	428a      	cmp	r2, r1
 8000d22:	4617      	mov	r7, r2
 8000d24:	d96d      	bls.n	8000e02 <__udivmoddi4+0xf2>
 8000d26:	fab2 fe82 	clz	lr, r2
 8000d2a:	f1be 0f00 	cmp.w	lr, #0
 8000d2e:	d00b      	beq.n	8000d48 <__udivmoddi4+0x38>
 8000d30:	f1ce 0c20 	rsb	ip, lr, #32
 8000d34:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d3c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d40:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d48:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d4c:	0c25      	lsrs	r5, r4, #16
 8000d4e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d52:	fa1f f987 	uxth.w	r9, r7
 8000d56:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d5a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d5e:	fb08 f309 	mul.w	r3, r8, r9
 8000d62:	42ab      	cmp	r3, r5
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x6c>
 8000d66:	19ed      	adds	r5, r5, r7
 8000d68:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d6c:	f080 8123 	bcs.w	8000fb6 <__udivmoddi4+0x2a6>
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	f240 8120 	bls.w	8000fb6 <__udivmoddi4+0x2a6>
 8000d76:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7a:	443d      	add	r5, r7
 8000d7c:	1aed      	subs	r5, r5, r3
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d84:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d8c:	fb00 f909 	mul.w	r9, r0, r9
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x98>
 8000d94:	19e4      	adds	r4, r4, r7
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	f080 810a 	bcs.w	8000fb2 <__udivmoddi4+0x2a2>
 8000d9e:	45a1      	cmp	r9, r4
 8000da0:	f240 8107 	bls.w	8000fb2 <__udivmoddi4+0x2a2>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 0409 	sub.w	r4, r4, r9
 8000dac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db0:	2100      	movs	r1, #0
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d061      	beq.n	8000e7a <__udivmoddi4+0x16a>
 8000db6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000dba:	2300      	movs	r3, #0
 8000dbc:	6034      	str	r4, [r6, #0]
 8000dbe:	6073      	str	r3, [r6, #4]
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0xc8>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d054      	beq.n	8000e76 <__udivmoddi4+0x166>
 8000dcc:	2100      	movs	r1, #0
 8000dce:	e886 0021 	stmia.w	r6, {r0, r5}
 8000dd2:	4608      	mov	r0, r1
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	fab3 f183 	clz	r1, r3
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	f040 808e 	bne.w	8000efe <__udivmoddi4+0x1ee>
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xdc>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 80fa 	bhi.w	8000fe0 <__udivmoddi4+0x2d0>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb65 0503 	sbc.w	r5, r5, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	46ac      	mov	ip, r5
 8000df6:	2e00      	cmp	r6, #0
 8000df8:	d03f      	beq.n	8000e7a <__udivmoddi4+0x16a>
 8000dfa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	b912      	cbnz	r2, 8000e0a <__udivmoddi4+0xfa>
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb7 f7f2 	udiv	r7, r7, r2
 8000e0a:	fab7 fe87 	clz	lr, r7
 8000e0e:	f1be 0f00 	cmp.w	lr, #0
 8000e12:	d134      	bne.n	8000e7e <__udivmoddi4+0x16e>
 8000e14:	1beb      	subs	r3, r5, r7
 8000e16:	0c3a      	lsrs	r2, r7, #16
 8000e18:	fa1f fc87 	uxth.w	ip, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000e22:	0c25      	lsrs	r5, r4, #16
 8000e24:	fb02 3318 	mls	r3, r2, r8, r3
 8000e28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e2c:	fb0c f308 	mul.w	r3, ip, r8
 8000e30:	42ab      	cmp	r3, r5
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x134>
 8000e34:	19ed      	adds	r5, r5, r7
 8000e36:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x132>
 8000e3c:	42ab      	cmp	r3, r5
 8000e3e:	f200 80d1 	bhi.w	8000fe4 <__udivmoddi4+0x2d4>
 8000e42:	4680      	mov	r8, r0
 8000e44:	1aed      	subs	r5, r5, r3
 8000e46:	b2a3      	uxth	r3, r4
 8000e48:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e4c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e54:	fb0c fc00 	mul.w	ip, ip, r0
 8000e58:	45a4      	cmp	ip, r4
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x15c>
 8000e5c:	19e4      	adds	r4, r4, r7
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x15a>
 8000e64:	45a4      	cmp	ip, r4
 8000e66:	f200 80b8 	bhi.w	8000fda <__udivmoddi4+0x2ca>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	eba4 040c 	sub.w	r4, r4, ip
 8000e70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e74:	e79d      	b.n	8000db2 <__udivmoddi4+0xa2>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	f1ce 0420 	rsb	r4, lr, #32
 8000e82:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e8a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e8e:	0c3a      	lsrs	r2, r7, #16
 8000e90:	fa25 f404 	lsr.w	r4, r5, r4
 8000e94:	ea48 0803 	orr.w	r8, r8, r3
 8000e98:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ea0:	fb02 4411 	mls	r4, r2, r1, r4
 8000ea4:	fa1f fc87 	uxth.w	ip, r7
 8000ea8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000eac:	fb01 f30c 	mul.w	r3, r1, ip
 8000eb0:	42ab      	cmp	r3, r5
 8000eb2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000eb6:	d909      	bls.n	8000ecc <__udivmoddi4+0x1bc>
 8000eb8:	19ed      	adds	r5, r5, r7
 8000eba:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ebe:	f080 808a 	bcs.w	8000fd6 <__udivmoddi4+0x2c6>
 8000ec2:	42ab      	cmp	r3, r5
 8000ec4:	f240 8087 	bls.w	8000fd6 <__udivmoddi4+0x2c6>
 8000ec8:	3902      	subs	r1, #2
 8000eca:	443d      	add	r5, r7
 8000ecc:	1aeb      	subs	r3, r5, r3
 8000ece:	fa1f f588 	uxth.w	r5, r8
 8000ed2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ed6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eda:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ede:	fb00 f30c 	mul.w	r3, r0, ip
 8000ee2:	42ab      	cmp	r3, r5
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1e6>
 8000ee6:	19ed      	adds	r5, r5, r7
 8000ee8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eec:	d26f      	bcs.n	8000fce <__udivmoddi4+0x2be>
 8000eee:	42ab      	cmp	r3, r5
 8000ef0:	d96d      	bls.n	8000fce <__udivmoddi4+0x2be>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	443d      	add	r5, r7
 8000ef6:	1aeb      	subs	r3, r5, r3
 8000ef8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efc:	e78f      	b.n	8000e1e <__udivmoddi4+0x10e>
 8000efe:	f1c1 0720 	rsb	r7, r1, #32
 8000f02:	fa22 f807 	lsr.w	r8, r2, r7
 8000f06:	408b      	lsls	r3, r1
 8000f08:	fa05 f401 	lsl.w	r4, r5, r1
 8000f0c:	ea48 0303 	orr.w	r3, r8, r3
 8000f10:	fa20 fe07 	lsr.w	lr, r0, r7
 8000f14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000f18:	40fd      	lsrs	r5, r7
 8000f1a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000f1e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000f22:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000f26:	fb0c 5519 	mls	r5, ip, r9, r5
 8000f2a:	fa1f f883 	uxth.w	r8, r3
 8000f2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f32:	fb09 f408 	mul.w	r4, r9, r8
 8000f36:	42ac      	cmp	r4, r5
 8000f38:	fa02 f201 	lsl.w	r2, r2, r1
 8000f3c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x244>
 8000f42:	18ed      	adds	r5, r5, r3
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d243      	bcs.n	8000fd2 <__udivmoddi4+0x2c2>
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	d941      	bls.n	8000fd2 <__udivmoddi4+0x2c2>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	441d      	add	r5, r3
 8000f54:	1b2d      	subs	r5, r5, r4
 8000f56:	fa1f fe8e 	uxth.w	lr, lr
 8000f5a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f5e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45a0      	cmp	r8, r4
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x26e>
 8000f6e:	18e4      	adds	r4, r4, r3
 8000f70:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f74:	d229      	bcs.n	8000fca <__udivmoddi4+0x2ba>
 8000f76:	45a0      	cmp	r8, r4
 8000f78:	d927      	bls.n	8000fca <__udivmoddi4+0x2ba>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	441c      	add	r4, r3
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba4 0408 	sub.w	r4, r4, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454c      	cmp	r4, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	464d      	mov	r5, r9
 8000f90:	d315      	bcc.n	8000fbe <__udivmoddi4+0x2ae>
 8000f92:	d012      	beq.n	8000fba <__udivmoddi4+0x2aa>
 8000f94:	b156      	cbz	r6, 8000fac <__udivmoddi4+0x29c>
 8000f96:	ebba 030e 	subs.w	r3, sl, lr
 8000f9a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000fa2:	40cb      	lsrs	r3, r1
 8000fa4:	431f      	orrs	r7, r3
 8000fa6:	40cc      	lsrs	r4, r1
 8000fa8:	6037      	str	r7, [r6, #0]
 8000faa:	6074      	str	r4, [r6, #4]
 8000fac:	2100      	movs	r1, #0
 8000fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e6f8      	b.n	8000da8 <__udivmoddi4+0x98>
 8000fb6:	4690      	mov	r8, r2
 8000fb8:	e6e0      	b.n	8000d7c <__udivmoddi4+0x6c>
 8000fba:	45c2      	cmp	sl, r8
 8000fbc:	d2ea      	bcs.n	8000f94 <__udivmoddi4+0x284>
 8000fbe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc2:	eb69 0503 	sbc.w	r5, r9, r3
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7e4      	b.n	8000f94 <__udivmoddi4+0x284>
 8000fca:	4628      	mov	r0, r5
 8000fcc:	e7d7      	b.n	8000f7e <__udivmoddi4+0x26e>
 8000fce:	4640      	mov	r0, r8
 8000fd0:	e791      	b.n	8000ef6 <__udivmoddi4+0x1e6>
 8000fd2:	4681      	mov	r9, r0
 8000fd4:	e7be      	b.n	8000f54 <__udivmoddi4+0x244>
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	e778      	b.n	8000ecc <__udivmoddi4+0x1bc>
 8000fda:	3802      	subs	r0, #2
 8000fdc:	443c      	add	r4, r7
 8000fde:	e745      	b.n	8000e6c <__udivmoddi4+0x15c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xe6>
 8000fe4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fe8:	443d      	add	r5, r7
 8000fea:	e72b      	b.n	8000e44 <__udivmoddi4+0x134>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <BSP_LCD_Init+0xcc>)
 8000ff6:	2228      	movs	r2, #40	; 0x28
 8000ff8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8000ffa:	4b30      	ldr	r3, [pc, #192]	; (80010bc <BSP_LCD_Init+0xcc>)
 8000ffc:	2209      	movs	r2, #9
 8000ffe:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001002:	2235      	movs	r2, #53	; 0x35
 8001004:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001008:	220b      	movs	r2, #11
 800100a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <BSP_LCD_Init+0xcc>)
 800100e:	f240 121b 	movw	r2, #283	; 0x11b
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001016:	f240 2215 	movw	r2, #533	; 0x215
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <BSP_LCD_Init+0xcc>)
 800101e:	f240 121d 	movw	r2, #285	; 0x11d
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001026:	f240 2235 	movw	r2, #565	; 0x235
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800102c:	2100      	movs	r1, #0
 800102e:	4823      	ldr	r0, [pc, #140]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001030:	f000 fcae 	bl	8001990 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001036:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800103a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <BSP_LCD_Init+0xcc>)
 800103e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001042:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <BSP_LCD_Init+0xcc>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <BSP_LCD_Init+0xcc>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <BSP_LCD_Init+0xcc>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <BSP_LCD_Init+0xd0>)
 8001078:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800107a:	4810      	ldr	r0, [pc, #64]	; (80010bc <BSP_LCD_Init+0xcc>)
 800107c:	f002 fcc4 	bl	8003a08 <HAL_LTDC_GetState>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d103      	bne.n	800108e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001086:	2100      	movs	r1, #0
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <BSP_LCD_Init+0xcc>)
 800108a:	f000 fba7 	bl	80017dc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <BSP_LCD_Init+0xcc>)
 8001090:	f002 fba0 	bl	80037d4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109a:	480a      	ldr	r0, [pc, #40]	; (80010c4 <BSP_LCD_Init+0xd4>)
 800109c:	f002 fa58 	bl	8003550 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2108      	movs	r1, #8
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <BSP_LCD_Init+0xd8>)
 80010a6:	f002 fa53 	bl	8003550 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80010aa:	f008 fcad 	bl	8009a08 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <BSP_LCD_Init+0xdc>)
 80010b0:	f000 f8d8 	bl	8001264 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000468 	.word	0x20000468
 80010c0:	40016800 	.word	0x40016800
 80010c4:	40022000 	.word	0x40022000
 80010c8:	40022800 	.word	0x40022800
 80010cc:	20000000 	.word	0x20000000

080010d0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <BSP_LCD_GetXSize+0x20>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <BSP_LCD_GetXSize+0x24>)
 80010da:	2134      	movs	r1, #52	; 0x34
 80010dc:	fb01 f303 	mul.w	r3, r1, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	3360      	adds	r3, #96	; 0x60
 80010e4:	681b      	ldr	r3, [r3, #0]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	200003a8 	.word	0x200003a8
 80010f4:	20000468 	.word	0x20000468

080010f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <BSP_LCD_GetYSize+0x20>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <BSP_LCD_GetYSize+0x24>)
 8001102:	2134      	movs	r1, #52	; 0x34
 8001104:	fb01 f303 	mul.w	r3, r1, r3
 8001108:	4413      	add	r3, r2
 800110a:	3364      	adds	r3, #100	; 0x64
 800110c:	681b      	ldr	r3, [r3, #0]
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	200003a8 	.word	0x200003a8
 800111c:	20000468 	.word	0x20000468

08001120 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001120:	b580      	push	{r7, lr}
 8001122:	b090      	sub	sp, #64	; 0x40
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001130:	f7ff ffce 	bl	80010d0 <BSP_LCD_GetXSize>
 8001134:	4603      	mov	r3, r0
 8001136:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800113c:	f7ff ffdc 	bl	80010f8 <BSP_LCD_GetYSize>
 8001140:	4603      	mov	r3, r0
 8001142:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001166:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800116c:	2307      	movs	r3, #7
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001170:	f7ff ffae 	bl	80010d0 <BSP_LCD_GetXSize>
 8001174:	4603      	mov	r3, r0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001178:	f7ff ffbe 	bl	80010f8 <BSP_LCD_GetYSize>
 800117c:	4603      	mov	r3, r0
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001180:	88fa      	ldrh	r2, [r7, #6]
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800118a:	f002 fbff 	bl	800398c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800118e:	88fa      	ldrh	r2, [r7, #6]
 8001190:	4911      	ldr	r1, [pc, #68]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	3304      	adds	r3, #4
 800119e:	f04f 32ff 	mov.w	r2, #4294967295
 80011a2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80011a4:	88fa      	ldrh	r2, [r7, #6]
 80011a6:	490c      	ldr	r1, [pc, #48]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	3308      	adds	r3, #8
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <BSP_LCD_LayerDefaultInit+0xbc>)
 80011b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80011b8:	88fa      	ldrh	r2, [r7, #6]
 80011ba:	4907      	ldr	r1, [pc, #28]	; (80011d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	3740      	adds	r7, #64	; 0x40
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000468 	.word	0x20000468
 80011d8:	200003ac 	.word	0x200003ac
 80011dc:	20000000 	.word	0x20000000

080011e0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <BSP_LCD_SelectLayer+0x1c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
} 
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	200003a8 	.word	0x200003a8

08001200 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <BSP_LCD_SetTextColor+0x28>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <BSP_LCD_SetTextColor+0x2c>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	200003a8 	.word	0x200003a8
 800122c:	200003ac 	.word	0x200003ac

08001230 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <BSP_LCD_SetBackColor+0x2c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4908      	ldr	r1, [pc, #32]	; (8001260 <BSP_LCD_SetBackColor+0x30>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3304      	adds	r3, #4
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200003a8 	.word	0x200003a8
 8001260:	200003ac 	.word	0x200003ac

08001264 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <BSP_LCD_SetFont+0x2c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4908      	ldr	r1, [pc, #32]	; (8001294 <BSP_LCD_SetFont+0x30>)
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	3308      	adds	r3, #8
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200003a8 	.word	0x200003a8
 8001294:	200003ac 	.word	0x200003ac

08001298 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <BSP_LCD_GetFont+0x24>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <BSP_LCD_GetFont+0x28>)
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	3308      	adds	r3, #8
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200003a8 	.word	0x200003a8
 80012c0:	200003ac 	.word	0x200003ac

080012c4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <BSP_LCD_Clear+0x48>)
 80012ce:	681c      	ldr	r4, [r3, #0]
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <BSP_LCD_Clear+0x48>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <BSP_LCD_Clear+0x4c>)
 80012d6:	2134      	movs	r1, #52	; 0x34
 80012d8:	fb01 f303 	mul.w	r3, r1, r3
 80012dc:	4413      	add	r3, r2
 80012de:	335c      	adds	r3, #92	; 0x5c
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	461d      	mov	r5, r3
 80012e4:	f7ff fef4 	bl	80010d0 <BSP_LCD_GetXSize>
 80012e8:	4606      	mov	r6, r0
 80012ea:	f7ff ff05 	bl	80010f8 <BSP_LCD_GetYSize>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	4632      	mov	r2, r6
 80012fc:	4629      	mov	r1, r5
 80012fe:	4620      	mov	r0, r4
 8001300:	f000 fc1a 	bl	8001b38 <LL_FillBuffer>
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130c:	200003a8 	.word	0x200003a8
 8001310:	20000468 	.word	0x20000468

08001314 <BSP_LCD_ClearStringLine>:
  * @brief  Clears the selected line.
  * @param  Line: Line to be cleared
  * @retval None
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	492d      	ldr	r1, [pc, #180]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	4827      	ldr	r0, [pc, #156]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800133a:	460b      	mov	r3, r1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	440b      	add	r3, r1
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4403      	add	r3, r0
 8001344:	3304      	adds	r3, #4
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	4823      	ldr	r0, [pc, #140]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4403      	add	r3, r0
 8001354:	6019      	str	r1, [r3, #0]
  
  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	491f      	ldr	r1, [pc, #124]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	3308      	adds	r3, #8
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	88da      	ldrh	r2, [r3, #6]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	b29b      	uxth	r3, r3
 8001370:	fb12 f303 	smulbb	r3, r2, r3
 8001374:	b29c      	uxth	r4, r3
 8001376:	f7ff feab 	bl	80010d0 <BSP_LCD_GetXSize>
 800137a:	4603      	mov	r3, r0
 800137c:	b298      	uxth	r0, r3
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4915      	ldr	r1, [pc, #84]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	3308      	adds	r3, #8
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	88db      	ldrh	r3, [r3, #6]
 8001394:	4602      	mov	r2, r0
 8001396:	4621      	mov	r1, r4
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f987 	bl	80016ac <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = color_backup;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <BSP_LCD_ClearStringLine+0xc0>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <BSP_LCD_ClearStringLine+0xc4>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff1b 	bl	8001200 <BSP_LCD_SetTextColor>
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200003a8 	.word	0x200003a8
 80013d8:	200003ac 	.word	0x200003ac

080013dc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	460b      	mov	r3, r1
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	491b      	ldr	r1, [pc, #108]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	3308      	adds	r3, #8
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4c14      	ldr	r4, [pc, #80]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4423      	add	r3, r4
 800141a:	3308      	adds	r3, #8
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001420:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <BSP_LCD_DisplayChar+0x80>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4c0d      	ldr	r4, [pc, #52]	; (8001460 <BSP_LCD_DisplayChar+0x84>)
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4423      	add	r3, r4
 8001434:	3308      	adds	r3, #8
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	889b      	ldrh	r3, [r3, #4]
 800143a:	3307      	adds	r3, #7
 800143c:	2b00      	cmp	r3, #0
 800143e:	da00      	bge.n	8001442 <BSP_LCD_DisplayChar+0x66>
 8001440:	3307      	adds	r3, #7
 8001442:	10db      	asrs	r3, r3, #3
 8001444:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001448:	18ca      	adds	r2, r1, r3
 800144a:	88b9      	ldrh	r1, [r7, #4]
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 faba 	bl	80019c8 <DrawChar>
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	200003a8 	.word	0x200003a8
 8001460:	200003ac 	.word	0x200003ac

08001464 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001464:	b5b0      	push	{r4, r5, r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	60ba      	str	r2, [r7, #8]
 800146c:	461a      	mov	r2, r3
 800146e:	4603      	mov	r3, r0
 8001470:	81fb      	strh	r3, [r7, #14]
 8001472:	460b      	mov	r3, r1
 8001474:	81bb      	strh	r3, [r7, #12]
 8001476:	4613      	mov	r3, r2
 8001478:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800147a:	2301      	movs	r3, #1
 800147c:	83fb      	strh	r3, [r7, #30]
 800147e:	2300      	movs	r3, #0
 8001480:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800148e:	e002      	b.n	8001496 <BSP_LCD_DisplayStringAt+0x32>
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	3301      	adds	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	617a      	str	r2, [r7, #20]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f6      	bne.n	8001490 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80014a2:	f7ff fe15 	bl	80010d0 <BSP_LCD_GetXSize>
 80014a6:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	494f      	ldr	r1, [pc, #316]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	3308      	adds	r3, #8
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	889b      	ldrh	r3, [r3, #4]
 80014bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c0:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d01c      	beq.n	8001502 <BSP_LCD_DisplayStringAt+0x9e>
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d017      	beq.n	80014fc <BSP_LCD_DisplayStringAt+0x98>
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d12e      	bne.n	800152e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	1ad1      	subs	r1, r2, r3
 80014d6:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4843      	ldr	r0, [pc, #268]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4403      	add	r3, r0
 80014e6:	3308      	adds	r3, #8
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	889b      	ldrh	r3, [r3, #4]
 80014ec:	fb03 f301 	mul.w	r3, r3, r1
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	4413      	add	r3, r2
 80014f8:	83fb      	strh	r3, [r7, #30]
      break;
 80014fa:	e01b      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	83fb      	strh	r3, [r7, #30]
      break;
 8001500:	e018      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	b299      	uxth	r1, r3
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4836      	ldr	r0, [pc, #216]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4403      	add	r3, r0
 800151a:	3308      	adds	r3, #8
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	fb11 f303 	smulbb	r3, r1, r3
 8001524:	b29a      	uxth	r2, r3
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	83fb      	strh	r3, [r7, #30]
      break;
 800152c:	e002      	b.n	8001534 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	83fb      	strh	r3, [r7, #30]
      break;
 8001532:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001534:	8bfb      	ldrh	r3, [r7, #30]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <BSP_LCD_DisplayStringAt+0xde>
 800153a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da1d      	bge.n	800157e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001546:	e01a      	b.n	800157e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	89b9      	ldrh	r1, [r7, #12]
 800154e:	8bfb      	ldrh	r3, [r7, #30]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff43 	bl	80013dc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4923      	ldr	r1, [pc, #140]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3308      	adds	r3, #8
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	889a      	ldrh	r2, [r3, #4]
 800156c:	8bfb      	ldrh	r3, [r7, #30]
 800156e:	4413      	add	r3, r2
 8001570:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3301      	adds	r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
    i++;
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	3301      	adds	r3, #1
 800157c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	bf14      	ite	ne
 8001586:	2301      	movne	r3, #1
 8001588:	2300      	moveq	r3, #0
 800158a:	b2dc      	uxtb	r4, r3
 800158c:	f7ff fda0 	bl	80010d0 <BSP_LCD_GetXSize>
 8001590:	4605      	mov	r5, r0
 8001592:	8bb9      	ldrh	r1, [r7, #28]
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4813      	ldr	r0, [pc, #76]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4403      	add	r3, r0
 80015a4:	3308      	adds	r3, #8
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	fb03 f301 	mul.w	r3, r3, r1
 80015ae:	1aeb      	subs	r3, r5, r3
 80015b0:	b299      	uxth	r1, r3
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <BSP_LCD_DisplayStringAt+0x180>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	480c      	ldr	r0, [pc, #48]	; (80015e8 <BSP_LCD_DisplayStringAt+0x184>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4403      	add	r3, r0
 80015c2:	3308      	adds	r3, #8
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	889b      	ldrh	r3, [r3, #4]
 80015c8:	4299      	cmp	r1, r3
 80015ca:	bf2c      	ite	cs
 80015cc:	2301      	movcs	r3, #1
 80015ce:	2300      	movcc	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4023      	ands	r3, r4
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1b6      	bne.n	8001548 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80015da:	bf00      	nop
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bdb0      	pop	{r4, r5, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200003a8 	.word	0x200003a8
 80015e8:	200003ac 	.word	0x200003ac

080015ec <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80015f8:	f7ff fe4e 	bl	8001298 <BSP_LCD_GetFont>
 80015fc:	4603      	mov	r3, r0
 80015fe:	88db      	ldrh	r3, [r3, #6]
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	fb12 f303 	smulbb	r3, r2, r3
 8001606:	b299      	uxth	r1, r3
 8001608:	2303      	movs	r3, #3
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ff29 	bl	8001464 <BSP_LCD_DisplayStringAt>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	603a      	str	r2, [r7, #0]
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	460b      	mov	r3, r1
 800162a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001632:	2134      	movs	r1, #52	; 0x34
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	3348      	adds	r3, #72	; 0x48
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d116      	bne.n	8001670 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001648:	2134      	movs	r1, #52	; 0x34
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	335c      	adds	r3, #92	; 0x5c
 8001652:	681c      	ldr	r4, [r3, #0]
 8001654:	88bd      	ldrh	r5, [r7, #4]
 8001656:	f7ff fd3b 	bl	80010d0 <BSP_LCD_GetXSize>
 800165a:	4603      	mov	r3, r0
 800165c:	fb03 f205 	mul.w	r2, r3, r5
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4423      	add	r3, r4
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b292      	uxth	r2, r2
 800166c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800166e:	e015      	b.n	800169c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <BSP_LCD_DrawPixel+0x88>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <BSP_LCD_DrawPixel+0x8c>)
 8001676:	2134      	movs	r1, #52	; 0x34
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	335c      	adds	r3, #92	; 0x5c
 8001680:	681c      	ldr	r4, [r3, #0]
 8001682:	88bd      	ldrh	r5, [r7, #4]
 8001684:	f7ff fd24 	bl	80010d0 <BSP_LCD_GetXSize>
 8001688:	4603      	mov	r3, r0
 800168a:	fb03 f205 	mul.w	r2, r3, r5
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4423      	add	r3, r4
 8001696:	461a      	mov	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bdb0      	pop	{r4, r5, r7, pc}
 80016a4:	200003a8 	.word	0x200003a8
 80016a8:	20000468 	.word	0x20000468

080016ac <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80016ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af02      	add	r7, sp, #8
 80016b4:	4604      	mov	r4, r0
 80016b6:	4608      	mov	r0, r1
 80016b8:	4611      	mov	r1, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4623      	mov	r3, r4
 80016be:	80fb      	strh	r3, [r7, #6]
 80016c0:	4603      	mov	r3, r0
 80016c2:	80bb      	strh	r3, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4930      	ldr	r1, [pc, #192]	; (8001798 <BSP_LCD_FillRect+0xec>)
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fd8c 	bl	8001200 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a2b      	ldr	r2, [pc, #172]	; (800179c <BSP_LCD_FillRect+0xf0>)
 80016ee:	2134      	movs	r1, #52	; 0x34
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	3348      	adds	r3, #72	; 0x48
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d114      	bne.n	8001728 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a26      	ldr	r2, [pc, #152]	; (800179c <BSP_LCD_FillRect+0xf0>)
 8001704:	2134      	movs	r1, #52	; 0x34
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	335c      	adds	r3, #92	; 0x5c
 800170e:	681c      	ldr	r4, [r3, #0]
 8001710:	f7ff fcde 	bl	80010d0 <BSP_LCD_GetXSize>
 8001714:	4602      	mov	r2, r0
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	fb03 f202 	mul.w	r2, r3, r2
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4413      	add	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4423      	add	r3, r4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e013      	b.n	8001750 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <BSP_LCD_FillRect+0xf0>)
 800172e:	2134      	movs	r1, #52	; 0x34
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	335c      	adds	r3, #92	; 0x5c
 8001738:	681c      	ldr	r4, [r3, #0]
 800173a:	f7ff fcc9 	bl	80010d0 <BSP_LCD_GetXSize>
 800173e:	4602      	mov	r2, r0
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	fb03 f202 	mul.w	r2, r3, r2
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4423      	add	r3, r4
 800174e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001752:	681c      	ldr	r4, [r3, #0]
 8001754:	68fd      	ldr	r5, [r7, #12]
 8001756:	887e      	ldrh	r6, [r7, #2]
 8001758:	f8b7 8000 	ldrh.w	r8, [r7]
 800175c:	f7ff fcb8 	bl	80010d0 <BSP_LCD_GetXSize>
 8001760:	4602      	mov	r2, r0
 8001762:	887b      	ldrh	r3, [r7, #2]
 8001764:	1ad1      	subs	r1, r2, r3
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <BSP_LCD_FillRect+0xe8>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <BSP_LCD_FillRect+0xec>)
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4403      	add	r3, r0
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	9100      	str	r1, [sp, #0]
 800177c:	4643      	mov	r3, r8
 800177e:	4632      	mov	r2, r6
 8001780:	4629      	mov	r1, r5
 8001782:	4620      	mov	r0, r4
 8001784:	f000 f9d8 	bl	8001b38 <LL_FillBuffer>
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001792:	bf00      	nop
 8001794:	200003a8 	.word	0x200003a8
 8001798:	200003ac 	.word	0x200003ac
 800179c:	20000468 	.word	0x20000468

080017a0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <BSP_LCD_DisplayOn+0x30>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <BSP_LCD_DisplayOn+0x30>)
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	6992      	ldr	r2, [r2, #24]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <BSP_LCD_DisplayOn+0x34>)
 80017bc:	f001 fec8 	bl	8003550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80017c0:	2201      	movs	r2, #1
 80017c2:	2108      	movs	r1, #8
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <BSP_LCD_DisplayOn+0x38>)
 80017c6:	f001 fec3 	bl	8003550 <HAL_GPIO_WritePin>
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000468 	.word	0x20000468
 80017d4:	40022000 	.word	0x40022000
 80017d8:	40022800 	.word	0x40022800

080017dc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80017e6:	4a64      	ldr	r2, [pc, #400]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017e8:	4b63      	ldr	r3, [pc, #396]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b61      	ldr	r3, [pc, #388]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80017fe:	4a5e      	ldr	r2, [pc, #376]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001800:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	4a58      	ldr	r2, [pc, #352]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001818:	4b57      	ldr	r3, [pc, #348]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b55      	ldr	r3, [pc, #340]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800182e:	4a52      	ldr	r2, [pc, #328]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b4f      	ldr	r3, [pc, #316]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001846:	4a4c      	ldr	r2, [pc, #304]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800185e:	4a46      	ldr	r2, [pc, #280]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001860:	4b45      	ldr	r3, [pc, #276]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001876:	4a40      	ldr	r2, [pc, #256]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001878:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800188e:	4a3a      	ldr	r2, [pc, #232]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001890:	4b39      	ldr	r3, [pc, #228]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80018a6:	4a34      	ldr	r2, [pc, #208]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b31      	ldr	r3, [pc, #196]	; (8001978 <BSP_LCD_MspInit+0x19c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80018be:	2310      	movs	r3, #16
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80018ca:	2302      	movs	r3, #2
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80018ce:	230e      	movs	r3, #14
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80018d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d6:	4619      	mov	r1, r3
 80018d8:	4828      	ldr	r0, [pc, #160]	; (800197c <BSP_LCD_MspInit+0x1a0>)
 80018da:	f001 fc8f 	bl	80031fc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80018de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80018e8:	2309      	movs	r3, #9
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80018ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f0:	4619      	mov	r1, r3
 80018f2:	4823      	ldr	r0, [pc, #140]	; (8001980 <BSP_LCD_MspInit+0x1a4>)
 80018f4:	f001 fc82 	bl	80031fc <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80018f8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001902:	230e      	movs	r3, #14
 8001904:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190a:	4619      	mov	r1, r3
 800190c:	481d      	ldr	r0, [pc, #116]	; (8001984 <BSP_LCD_MspInit+0x1a8>)
 800190e:	f001 fc75 	bl	80031fc <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001912:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800191c:	230e      	movs	r3, #14
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	4818      	ldr	r0, [pc, #96]	; (8001988 <BSP_LCD_MspInit+0x1ac>)
 8001928:	f001 fc68 	bl	80031fc <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800192c:	23f7      	movs	r3, #247	; 0xf7
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001934:	230e      	movs	r3, #14
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193c:	4619      	mov	r1, r3
 800193e:	4813      	ldr	r0, [pc, #76]	; (800198c <BSP_LCD_MspInit+0x1b0>)
 8001940:	f001 fc5c 	bl	80031fc <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <BSP_LCD_MspInit+0x1a8>)
 8001956:	f001 fc51 	bl	80031fc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800195a:	2308      	movs	r3, #8
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001966:	4619      	mov	r1, r3
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <BSP_LCD_MspInit+0x1b0>)
 800196a:	f001 fc47 	bl	80031fc <HAL_GPIO_Init>
}
 800196e:	bf00      	nop
 8001970:	3740      	adds	r7, #64	; 0x40
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40021000 	.word	0x40021000
 8001980:	40021800 	.word	0x40021800
 8001984:	40022000 	.word	0x40022000
 8001988:	40022400 	.word	0x40022400
 800198c:	40022800 	.word	0x40022800

08001990 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 800199c:	2208      	movs	r2, #8
 800199e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019a2:	22c0      	movs	r2, #192	; 0xc0
 80019a4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019a8:	2205      	movs	r2, #5
 80019aa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <BSP_LCD_ClockConfig+0x34>)
 80019b6:	f004 f815 	bl	80059e4 <HAL_RCCEx_PeriphCLKConfig>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200003c4 	.word	0x200003c4

080019c8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	603a      	str	r2, [r7, #0]
 80019d2:	80fb      	strh	r3, [r7, #6]
 80019d4:	460b      	mov	r3, r1
 80019d6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <DrawChar+0x168>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4953      	ldr	r1, [pc, #332]	; (8001b34 <DrawChar+0x16c>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3308      	adds	r3, #8
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	88db      	ldrh	r3, [r3, #6]
 80019f6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80019f8:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <DrawChar+0x168>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	494d      	ldr	r1, [pc, #308]	; (8001b34 <DrawChar+0x16c>)
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3308      	adds	r3, #8
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	889b      	ldrh	r3, [r3, #4]
 8001a0e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8001a10:	8a3b      	ldrh	r3, [r7, #16]
 8001a12:	3307      	adds	r3, #7
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	da00      	bge.n	8001a1a <DrawChar+0x52>
 8001a18:	3307      	adds	r3, #7
 8001a1a:	10db      	asrs	r3, r3, #3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	8a3b      	ldrh	r3, [r7, #16]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e076      	b.n	8001b1e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001a30:	8a3b      	ldrh	r3, [r7, #16]
 8001a32:	3307      	adds	r3, #7
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da00      	bge.n	8001a3a <DrawChar+0x72>
 8001a38:	3307      	adds	r3, #7
 8001a3a:	10db      	asrs	r3, r3, #3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fb03 f302 	mul.w	r3, r3, r2
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8001a4a:	8a3b      	ldrh	r3, [r7, #16]
 8001a4c:	3307      	adds	r3, #7
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da00      	bge.n	8001a54 <DrawChar+0x8c>
 8001a52:	3307      	adds	r3, #7
 8001a54:	10db      	asrs	r3, r3, #3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d002      	beq.n	8001a60 <DrawChar+0x98>
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d004      	beq.n	8001a68 <DrawChar+0xa0>
 8001a5e:	e00c      	b.n	8001a7a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	617b      	str	r3, [r7, #20]
      break;
 8001a66:	e016      	b.n	8001a96 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	3201      	adds	r2, #1
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
      break;
 8001a78:	e00d      	b.n	8001a96 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	041a      	lsls	r2, r3, #16
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	3301      	adds	r3, #1
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	3202      	adds	r2, #2
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
      break;
 8001a94:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	e036      	b.n	8001b0a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001a9c:	8a3a      	ldrh	r2, [r7, #16]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad2      	subs	r2, r2, r3
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d012      	beq.n	8001ade <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	4413      	add	r3, r2
 8001ac0:	b298      	uxth	r0, r3
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <DrawChar+0x168>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	491b      	ldr	r1, [pc, #108]	; (8001b34 <DrawChar+0x16c>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff fda0 	bl	800161c <BSP_LCD_DrawPixel>
 8001adc:	e012      	b.n	8001b04 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b298      	uxth	r0, r3
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <DrawChar+0x168>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4911      	ldr	r1, [pc, #68]	; (8001b34 <DrawChar+0x16c>)
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	3304      	adds	r3, #4
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	88bb      	ldrh	r3, [r7, #4]
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff fd8c 	bl	800161c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	3301      	adds	r3, #1
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	8a3a      	ldrh	r2, [r7, #16]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d8c4      	bhi.n	8001a9c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8001b12:	88bb      	ldrh	r3, [r7, #4]
 8001b14:	3301      	adds	r3, #1
 8001b16:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	8a7a      	ldrh	r2, [r7, #18]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d884      	bhi.n	8001a30 <DrawChar+0x68>
  }
}
 8001b26:	bf00      	nop
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200003a8 	.word	0x200003a8
 8001b34:	200003ac 	.word	0x200003ac

08001b38 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b4c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <LL_FillBuffer+0x8c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <LL_FillBuffer+0x90>)
 8001b54:	2134      	movs	r1, #52	; 0x34
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3348      	adds	r3, #72	; 0x48
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d103      	bne.n	8001b6c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b66:	2202      	movs	r2, #2
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	e002      	b.n	8001b72 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001b72:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <LL_FillBuffer+0x94>)
 8001b7c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001b7e:	4810      	ldr	r0, [pc, #64]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b80:	f001 f8a4 	bl	8002ccc <HAL_DMA2D_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d115      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001b8e:	f001 f9fb 	bl	8002f88 <HAL_DMA2D_ConfigLayer>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10e      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69f9      	ldr	r1, [r7, #28]
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001ba4:	f001 f8dc 	bl	8002d60 <HAL_DMA2D_Start>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001bae:	210a      	movs	r1, #10
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <LL_FillBuffer+0x88>)
 8001bb2:	f001 f900 	bl	8002db6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000368 	.word	0x20000368
 8001bc4:	200003a8 	.word	0x200003a8
 8001bc8:	20000468 	.word	0x20000468
 8001bcc:	4002b000 	.word	0x4002b000

08001bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <HAL_Init+0x34>)
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_Init+0x34>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_Init+0x34>)
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_Init+0x34>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 fc3b 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f009 feac 	bl	800b950 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001bf8:	f009 fc12 	bl	800b420 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023c00 	.word	0x40023c00

08001c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x20>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x24>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_IncTick+0x24>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000010 	.word	0x20000010
 8001c2c:	20000510 	.word	0x20000510

08001c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_GetTick+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000510 	.word	0x20000510

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff ffee 	bl	8001c30 <HAL_GetTick>
 8001c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d005      	beq.n	8001c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_Delay+0x40>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6e:	bf00      	nop
 8001c70:	f7ff ffde 	bl	8001c30 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad2      	subs	r2, r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3f7      	bcc.n	8001c70 <HAL_Delay+0x28>
  {
  }
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000010 	.word	0x20000010

08001c8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e031      	b.n	8001d06 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f009 fbe3 	bl	800b484 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_ADC_Init+0x84>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	f043 0202 	orr.w	r2, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fa02 	bl	80020e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf6:	e001      	b.n	8001cfc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	ffffeefd 	.word	0xffffeefd

08001d14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Start+0x1a>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e085      	b.n	8001e3a <HAL_ADC_Start+0x126>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d018      	beq.n	8001d76 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	6892      	ldr	r2, [r2, #8]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d54:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <HAL_ADC_Start+0x134>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a3c      	ldr	r2, [pc, #240]	; (8001e4c <HAL_ADC_Start+0x138>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0c9a      	lsrs	r2, r3, #18
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d059      	beq.n	8001e38 <HAL_ADC_Start+0x124>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_ADC_Start+0x13c>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001daa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_ADC_Start+0xb8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f023 0206 	bic.w	r2, r3, #6
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
 8001dca:	e002      	b.n	8001dd2 <HAL_ADC_Start+0xbe>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001de2:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_ADC_Start+0x140>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10f      	bne.n	8001e10 <HAL_ADC_Start+0xfc>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d11c      	bne.n	8001e38 <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	6892      	ldr	r2, [r2, #8]
 8001e08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	e013      	b.n	8001e38 <HAL_ADC_Start+0x124>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_ADC_Start+0x144>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10e      	bne.n	8001e38 <HAL_ADC_Start+0x124>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	6892      	ldr	r2, [r2, #8]
 8001e32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e36:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000124 	.word	0x20000124
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	fffff8fe 	.word	0xfffff8fe
 8001e54:	40012300 	.word	0x40012300
 8001e58:	40012000 	.word	0x40012000

08001e5c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e78:	b490      	push	{r4, r7}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1c>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e117      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x24c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	d936      	bls.n	8001f12 <HAL_ADC_ConfigChannel+0x9a>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4403      	add	r3, r0
 8001ebc:	3b1e      	subs	r3, #30
 8001ebe:	2007      	movs	r0, #7
 8001ec0:	fa00 f303 	lsl.w	r3, r0, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	60d3      	str	r3, [r2, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a80      	ldr	r2, [pc, #512]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d10a      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	68d1      	ldr	r1, [r2, #12]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	6892      	ldr	r2, [r2, #8]
 8001ee2:	0612      	lsls	r2, r2, #24
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	e037      	b.n	8001f5a <HAL_ADC_ConfigChannel+0xe2>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68d9      	ldr	r1, [r3, #12]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6898      	ldr	r0, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	461c      	mov	r4, r3
 8001f00:	4623      	mov	r3, r4
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4423      	add	r3, r4
 8001f06:	3b1e      	subs	r3, #30
 8001f08:	fa00 f303 	lsl.w	r3, r0, r3
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	60d3      	str	r3, [r2, #12]
 8001f10:	e023      	b.n	8001f5a <HAL_ADC_ConfigChannel+0xe2>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6919      	ldr	r1, [r3, #16]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4403      	add	r3, r0
 8001f2a:	2007      	movs	r0, #7
 8001f2c:	fa00 f303 	lsl.w	r3, r0, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	400b      	ands	r3, r1
 8001f34:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6919      	ldr	r1, [r3, #16]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6898      	ldr	r0, [r3, #8]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	461c      	mov	r4, r3
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4423      	add	r3, r4
 8001f52:	fa00 f303 	lsl.w	r3, r0, r3
 8001f56:	430b      	orrs	r3, r1
 8001f58:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d824      	bhi.n	8001fac <HAL_ADC_ConfigChannel+0x134>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6819      	ldr	r1, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	3b05      	subs	r3, #5
 8001f78:	221f      	movs	r2, #31
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4003      	ands	r3, r0
 8001f82:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461c      	mov	r4, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b05      	subs	r3, #5
 8001fa2:	fa04 f303 	lsl.w	r3, r4, r3
 8001fa6:	4303      	orrs	r3, r0
 8001fa8:	634b      	str	r3, [r1, #52]	; 0x34
 8001faa:	e04c      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d824      	bhi.n	8001ffe <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6819      	ldr	r1, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b23      	subs	r3, #35	; 0x23
 8001fca:	221f      	movs	r2, #31
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4003      	ands	r3, r0
 8001fd4:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461c      	mov	r4, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3b23      	subs	r3, #35	; 0x23
 8001ff4:	fa04 f303 	lsl.w	r3, r4, r3
 8001ff8:	4303      	orrs	r3, r0
 8001ffa:	630b      	str	r3, [r1, #48]	; 0x30
 8001ffc:	e023      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6819      	ldr	r1, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b41      	subs	r3, #65	; 0x41
 8002014:	221f      	movs	r2, #31
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	4003      	ands	r3, r0
 800201e:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	461c      	mov	r4, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	3b41      	subs	r3, #65	; 0x41
 800203e:	fa04 f303 	lsl.w	r3, r4, r3
 8002042:	4303      	orrs	r3, r0
 8002044:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <HAL_ADC_ConfigChannel+0x25c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d109      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1ec>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b12      	cmp	r3, #18
 8002056:	d105      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002058:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002062:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1a      	ldr	r2, [pc, #104]	; (80020d4 <HAL_ADC_ConfigChannel+0x25c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d125      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <HAL_ADC_ConfigChannel+0x208>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b11      	cmp	r3, #17
 800207e:	d11c      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002080:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_ADC_ConfigChannel+0x260>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800208a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <HAL_ADC_ConfigChannel+0x258>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d111      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x242>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_ADC_ConfigChannel+0x264>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_ADC_ConfigChannel+0x268>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	0c9a      	lsrs	r2, r3, #18
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020ac:	e002      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x23c>
      {
        counter--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f9      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x236>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc90      	pop	{r4, r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	10000012 	.word	0x10000012
 80020d4:	40012000 	.word	0x40012000
 80020d8:	40012300 	.word	0x40012300
 80020dc:	20000124 	.word	0x20000124
 80020e0:	431bde83 	.word	0x431bde83

080020e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020ec:	4a77      	ldr	r2, [pc, #476]	; (80022cc <ADC_Init+0x1e8>)
 80020ee:	4b77      	ldr	r3, [pc, #476]	; (80022cc <ADC_Init+0x1e8>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020f8:	4974      	ldr	r1, [pc, #464]	; (80022cc <ADC_Init+0x1e8>)
 80020fa:	4b74      	ldr	r3, [pc, #464]	; (80022cc <ADC_Init+0x1e8>)
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	6852      	ldr	r2, [r2, #4]
 8002110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	6851      	ldr	r1, [r2, #4]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6912      	ldr	r2, [r2, #16]
 8002124:	0212      	lsls	r2, r2, #8
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	6852      	ldr	r2, [r2, #4]
 8002134:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	6851      	ldr	r1, [r2, #4]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6892      	ldr	r2, [r2, #8]
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	6892      	ldr	r2, [r2, #8]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	6891      	ldr	r1, [r2, #8]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68d2      	ldr	r2, [r2, #12]
 800216a:	430a      	orrs	r2, r1
 800216c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	4a57      	ldr	r2, [pc, #348]	; (80022d0 <ADC_Init+0x1ec>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d022      	beq.n	80021be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	6892      	ldr	r2, [r2, #8]
 8002182:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	6891      	ldr	r1, [r2, #8]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	6892      	ldr	r2, [r2, #8]
 80021a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	6891      	ldr	r1, [r2, #8]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e00f      	b.n	80021de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	6892      	ldr	r2, [r2, #8]
 80021c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	6892      	ldr	r2, [r2, #8]
 80021d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	6892      	ldr	r2, [r2, #8]
 80021e8:	f022 0202 	bic.w	r2, r2, #2
 80021ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	6891      	ldr	r1, [r2, #8]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6992      	ldr	r2, [r2, #24]
 80021fc:	0052      	lsls	r2, r2, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d01b      	beq.n	8002242 <ADC_Init+0x15e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	6852      	ldr	r2, [r2, #4]
 8002214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002218:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	6852      	ldr	r2, [r2, #4]
 8002224:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002228:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	6851      	ldr	r1, [r2, #4]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002238:	3a01      	subs	r2, #1
 800223a:	0352      	lsls	r2, r2, #13
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	e007      	b.n	8002252 <ADC_Init+0x16e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	6852      	ldr	r2, [r2, #4]
 800224c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002250:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800225c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	69d2      	ldr	r2, [r2, #28]
 8002270:	3a01      	subs	r2, #1
 8002272:	0512      	lsls	r2, r2, #20
 8002274:	430a      	orrs	r2, r1
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	6892      	ldr	r2, [r2, #8]
 8002282:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	6891      	ldr	r1, [r2, #8]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002296:	0252      	lsls	r2, r2, #9
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	6891      	ldr	r1, [r2, #8]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6952      	ldr	r2, [r2, #20]
 80022ba:	0292      	lsls	r2, r2, #10
 80022bc:	430a      	orrs	r2, r1
 80022be:	609a      	str	r2, [r3, #8]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40012300 	.word	0x40012300
 80022d0:	0f000001 	.word	0x0f000001

080022d4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <NVIC_SetPriorityGrouping+0x40>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <NVIC_SetPriorityGrouping+0x44>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <NVIC_SetPriorityGrouping+0x40>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00
 8002318:	05fa0000 	.word	0x05fa0000

0800231c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002342:	4909      	ldr	r1, [pc, #36]	; (8002368 <NVIC_EnableIRQ+0x30>)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	79fa      	ldrb	r2, [r7, #7]
 800234c:	f002 021f 	and.w	r2, r2, #31
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	da0b      	bge.n	8002398 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	490d      	ldr	r1, [pc, #52]	; (80023b8 <NVIC_SetPriority+0x4c>)
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	3b04      	subs	r3, #4
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002396:	e009      	b.n	80023ac <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	4908      	ldr	r1, [pc, #32]	; (80023bc <NVIC_SetPriority+0x50>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	2201      	movs	r2, #1
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	401a      	ands	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002406:	2101      	movs	r1, #1
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	1e59      	subs	r1, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
         );
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002434:	d301      	bcc.n	800243a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002436:	2301      	movs	r3, #1
 8002438:	e00f      	b.n	800245a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <SysTick_Config+0x40>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002442:	210f      	movs	r1, #15
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f7ff ff90 	bl	800236c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <SysTick_Config+0x40>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SysTick_Config+0x40>)
 8002454:	2207      	movs	r2, #7
 8002456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff2f 	bl	80022d4 <NVIC_SetPriorityGrouping>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002490:	f7ff ff44 	bl	800231c <NVIC_GetPriorityGrouping>
 8002494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ff90 	bl	80023c0 <NVIC_EncodePriority>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff5f 	bl	800236c <NVIC_SetPriority>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff37 	bl	8002338 <NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffa2 	bl	8002424 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d106      	bne.n	8002508 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002506:	e005      	b.n	8002514 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002508:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002528:	f000 f802 	bl	8002530 <HAL_SYSTICK_Callback>
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e054      	b.n	80025fc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7f5b      	ldrb	r3, [r3, #29]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f008 ffc8 	bl	800b4f8 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	791b      	ldrb	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a22      	ldr	r2, [pc, #136]	; (8002604 <HAL_CRC_Init+0xc4>)
 800257c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	6892      	ldr	r2, [r2, #8]
 8002588:	f022 0218 	bic.w	r2, r2, #24
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	e00c      	b.n	80025aa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	461a      	mov	r2, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f834 	bl	8002608 <HAL_CRCEx_Polynomial_Set>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e028      	b.n	80025fc <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	795b      	ldrb	r3, [r3, #5]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ba:	611a      	str	r2, [r3, #16]
 80025bc:	e004      	b.n	80025c8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6912      	ldr	r2, [r2, #16]
 80025c6:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	6892      	ldr	r2, [r2, #8]
 80025d2:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6952      	ldr	r2, [r2, #20]
 80025da:	430a      	orrs	r2, r1
 80025dc:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	6892      	ldr	r2, [r2, #8]
 80025e8:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6992      	ldr	r2, [r2, #24]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	04c11db7 	.word	0x04c11db7

08002608 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002614:	231f      	movs	r3, #31
 8002616:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8002618:	bf00      	nop
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d104      	bne.n	8002634 <HAL_CRCEx_Polynomial_Set+0x2c>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	1e5a      	subs	r2, r3, #1
 800262e:	617a      	str	r2, [r7, #20]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f2      	bne.n	800261a <HAL_CRCEx_Polynomial_Set+0x12>
  {
  }

  switch (PolyLength)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b18      	cmp	r3, #24
 8002638:	d843      	bhi.n	80026c2 <HAL_CRCEx_Polynomial_Set+0xba>
 800263a:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <HAL_CRCEx_Polynomial_Set+0x38>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	080026c3 	.word	0x080026c3
 8002644:	080026c3 	.word	0x080026c3
 8002648:	080026c3 	.word	0x080026c3
 800264c:	080026c3 	.word	0x080026c3
 8002650:	080026c3 	.word	0x080026c3
 8002654:	080026c3 	.word	0x080026c3
 8002658:	080026c3 	.word	0x080026c3
 800265c:	080026c3 	.word	0x080026c3
 8002660:	080026b9 	.word	0x080026b9
 8002664:	080026c3 	.word	0x080026c3
 8002668:	080026c3 	.word	0x080026c3
 800266c:	080026c3 	.word	0x080026c3
 8002670:	080026c3 	.word	0x080026c3
 8002674:	080026c3 	.word	0x080026c3
 8002678:	080026c3 	.word	0x080026c3
 800267c:	080026c3 	.word	0x080026c3
 8002680:	080026af 	.word	0x080026af
 8002684:	080026c3 	.word	0x080026c3
 8002688:	080026c3 	.word	0x080026c3
 800268c:	080026c3 	.word	0x080026c3
 8002690:	080026c3 	.word	0x080026c3
 8002694:	080026c3 	.word	0x080026c3
 8002698:	080026c3 	.word	0x080026c3
 800269c:	080026c3 	.word	0x080026c3
 80026a0:	080026a5 	.word	0x080026a5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d90d      	bls.n	80026c6 <HAL_CRCEx_Polynomial_Set+0xbe>
      { 
        return  HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e01f      	b.n	80026ee <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b07      	cmp	r3, #7
 80026b2:	d90a      	bls.n	80026ca <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e01a      	b.n	80026ee <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	d907      	bls.n	80026ce <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e015      	b.n	80026ee <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
  default:
      break;
 80026c2:	bf00      	nop
 80026c4:	e004      	b.n	80026d0 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026c6:	bf00      	nop
 80026c8:	e002      	b.n	80026d0 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026ca:	bf00      	nop
 80026cc:	e000      	b.n	80026d0 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 80026ce:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	6892      	ldr	r2, [r2, #8]
 80026e2:	f022 0118 	bic.w	r1, r2, #24
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop

080026fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff fa92 	bl	8001c30 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e099      	b.n	800284c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002738:	e00f      	b.n	800275a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800273a:	f7ff fa79 	bl	8001c30 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b05      	cmp	r3, #5
 8002746:	d908      	bls.n	800275a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2203      	movs	r2, #3
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e078      	b.n	800284c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e8      	bne.n	800273a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4b38      	ldr	r3, [pc, #224]	; (8002854 <HAL_DMA_Init+0x158>)
 8002774:	4013      	ands	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d107      	bne.n	80027c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	4313      	orrs	r3, r2
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f023 0307 	bic.w	r3, r3, #7
 80027da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d117      	bne.n	800281e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00e      	beq.n	800281e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f9e9 	bl	8002bd8 <DMA_CheckFifoParam>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800281a:	2301      	movs	r3, #1
 800281c:	e016      	b.n	800284c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f9a0 	bl	8002b6c <DMA_CalcBaseAndBitshift>
 800282c:	4603      	mov	r3, r0
 800282e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	223f      	movs	r2, #63	; 0x3f
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	f010803f 	.word	0xf010803f

08002858 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002864:	4b92      	ldr	r3, [pc, #584]	; (8002ab0 <HAL_DMA_IRQHandler+0x258>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a92      	ldr	r2, [pc, #584]	; (8002ab4 <HAL_DMA_IRQHandler+0x25c>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0a9b      	lsrs	r3, r3, #10
 8002870:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	2208      	movs	r2, #8
 8002884:	409a      	lsls	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d01a      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	f022 0204 	bic.w	r2, r2, #4
 80028aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	2208      	movs	r2, #8
 80028b2:	409a      	lsls	r2, r3
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	2201      	movs	r2, #1
 80028ca:	409a      	lsls	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d012      	beq.n	80028fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	2201      	movs	r2, #1
 80028e8:	409a      	lsls	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	f043 0202 	orr.w	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	2204      	movs	r2, #4
 8002900:	409a      	lsls	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d012      	beq.n	8002930 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	2204      	movs	r2, #4
 800291e:	409a      	lsls	r2, r3
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	2210      	movs	r2, #16
 8002936:	409a      	lsls	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d043      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d03c      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	2210      	movs	r2, #16
 8002954:	409a      	lsls	r2, r3
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d018      	beq.n	800299a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d108      	bne.n	8002988 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d024      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
 8002986:	e01f      	b.n	80029c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01b      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
 8002998:	e016      	b.n	80029c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d107      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	f022 0208 	bic.w	r2, r2, #8
 80029b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	2220      	movs	r2, #32
 80029ce:	409a      	lsls	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 808e 	beq.w	8002af6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8086 	beq.w	8002af6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	2220      	movs	r2, #32
 80029f0:	409a      	lsls	r2, r3
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d136      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	f022 0216 	bic.w	r2, r2, #22
 8002a10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	6952      	ldr	r2, [r2, #20]
 8002a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_DMA_IRQHandler+0x1da>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	f022 0208 	bic.w	r2, r2, #8
 8002a40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	223f      	movs	r2, #63	; 0x3f
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d07d      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
        }
        return;
 8002a6e:	e078      	b.n	8002b62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d01c      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d108      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d030      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
 8002a9c:	e02b      	b.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d027      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
 8002aae:	e022      	b.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
 8002ab0:	20000124 	.word	0x20000124
 8002ab4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10f      	bne.n	8002ae6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	f022 0210 	bic.w	r2, r2, #16
 8002ad4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d032      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d022      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2205      	movs	r2, #5
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	f022 0201 	bic.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3301      	adds	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d807      	bhi.n	8002b3e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f2      	bne.n	8002b22 <HAL_DMA_IRQHandler+0x2ca>
 8002b3c:	e000      	b.n	8002b40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b3e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
 8002b60:	e000      	b.n	8002b64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b62:	bf00      	nop
    }
  }
}
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop

08002b6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	3b10      	subs	r3, #16
 8002b7c:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <DMA_CalcBaseAndBitshift+0x60>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <DMA_CalcBaseAndBitshift+0x64>)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d908      	bls.n	8002bac <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	1d1a      	adds	r2, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	659a      	str	r2, [r3, #88]	; 0x58
 8002baa:	e006      	b.n	8002bba <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	aaaaaaab 	.word	0xaaaaaaab
 8002bd0:	080122b0 	.word	0x080122b0
 8002bd4:	fffffc00 	.word	0xfffffc00

08002bd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11f      	bne.n	8002c32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d855      	bhi.n	8002ca4 <DMA_CheckFifoParam+0xcc>
 8002bf8:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <DMA_CheckFifoParam+0x28>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002c11 	.word	0x08002c11
 8002c04:	08002c23 	.word	0x08002c23
 8002c08:	08002c11 	.word	0x08002c11
 8002c0c:	08002ca5 	.word	0x08002ca5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d045      	beq.n	8002ca8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c20:	e042      	b.n	8002ca8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c2a:	d13f      	bne.n	8002cac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c30:	e03c      	b.n	8002cac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3a:	d121      	bne.n	8002c80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d836      	bhi.n	8002cb0 <DMA_CheckFifoParam+0xd8>
 8002c42:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <DMA_CheckFifoParam+0x70>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002c59 	.word	0x08002c59
 8002c4c:	08002c5f 	.word	0x08002c5f
 8002c50:	08002c59 	.word	0x08002c59
 8002c54:	08002c71 	.word	0x08002c71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5c:	e02f      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d024      	beq.n	8002cb4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6e:	e021      	b.n	8002cb4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c78:	d11e      	bne.n	8002cb8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c7e:	e01b      	b.n	8002cb8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d902      	bls.n	8002c8c <DMA_CheckFifoParam+0xb4>
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d003      	beq.n	8002c92 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c8a:	e018      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c90:	e015      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00e      	beq.n	8002cbc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca2:	e00b      	b.n	8002cbc <DMA_CheckFifoParam+0xe4>
      break;
 8002ca4:	bf00      	nop
 8002ca6:	e00a      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002ca8:	bf00      	nop
 8002caa:	e008      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002cac:	bf00      	nop
 8002cae:	e006      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002cb0:	bf00      	nop
 8002cb2:	e004      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002cb4:	bf00      	nop
 8002cb6:	e002      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;   
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <DMA_CheckFifoParam+0xe6>
      break;
 8002cbc:	bf00      	nop
    }
  } 
  
  return status; 
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e039      	b.n	8002d52 <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f008 fc20 	bl	800b538 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6852      	ldr	r2, [r2, #4]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d20:	f022 0107 	bic.w	r1, r2, #7
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6892      	ldr	r2, [r2, #8]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_DMA2D_Init+0x90>)
 8002d38:	400b      	ands	r3, r1
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	68c9      	ldr	r1, [r1, #12]
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	ffffc000 	.word	0xffffc000

08002d60 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_DMA2D_Start+0x1c>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e018      	b.n	8002dae <HAL_DMA2D_Start+0x4e>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f98a 	bl	80030b0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d056      	beq.n	8002e84 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002dd6:	f7fe ff2b 	bl	8001c30 <HAL_GetTick>
 8002dda:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002ddc:	e04b      	b.n	8002e76 <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d023      	beq.n	8002e38 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	f043 0202 	orr.w	r2, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2221      	movs	r2, #33	; 0x21
 8002e22:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2204      	movs	r2, #4
 8002e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0a2      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3e:	d01a      	beq.n	8002e76 <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_DMA2D_PollForTransfer+0xa0>
 8002e46:	f7fe fef3 	bl	8001c30 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad2      	subs	r2, r2, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d90f      	bls.n	8002e76 <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	f043 0220 	orr.w	r2, r3, #32
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2203      	movs	r2, #3
 8002e66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e083      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ac      	beq.n	8002dde <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d061      	beq.n	8002f64 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ea0:	f7fe fec6 	bl	8001c30 <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002ea6:	e056      	b.n	8002f56 <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d02e      	beq.n	8002f18 <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	f043 0202 	orr.w	r2, r3, #2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2229      	movs	r2, #41	; 0x29
 8002f02:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2204      	movs	r2, #4
 8002f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d01a      	beq.n	8002f56 <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_DMA2D_PollForTransfer+0x180>
 8002f26:	f7fe fe83 	bl	8001c30 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad2      	subs	r2, r2, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d90f      	bls.n	8002f56 <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2203      	movs	r2, #3
 8002f46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e013      	b.n	8002f7e <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0a1      	beq.n	8002ea8 <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2212      	movs	r2, #18
 8002f6a:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	3318      	adds	r3, #24
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_DMA2D_ConfigLayer+0x34>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e071      	b.n	80030a0 <HAL_DMA2D_ConfigLayer+0x118>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	041b      	lsls	r3, r3, #16
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002fda:	4b34      	ldr	r3, [pc, #208]	; (80030ac <HAL_DMA2D_ConfigLayer+0x124>)
 8002fdc:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b0a      	cmp	r3, #10
 8002fe4:	d003      	beq.n	8002fee <HAL_DMA2D_ConfigLayer+0x66>
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b09      	cmp	r3, #9
 8002fec:	d107      	bne.n	8002ffe <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	e005      	b.n	800300a <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d11f      	bne.n	8003050 <HAL_DMA2D_ConfigLayer+0xc8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	43d2      	mvns	r2, r2
 800301e:	4011      	ands	r1, r2
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	430a      	orrs	r2, r1
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b0a      	cmp	r3, #10
 8003036:	d003      	beq.n	8003040 <HAL_DMA2D_ConfigLayer+0xb8>
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b09      	cmp	r3, #9
 800303e:	d126      	bne.n	800308e <HAL_DMA2D_ConfigLayer+0x106>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	68d2      	ldr	r2, [r2, #12]
 8003048:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
 800304e:	e01e      	b.n	800308e <HAL_DMA2D_ConfigLayer+0x106>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	69d1      	ldr	r1, [r2, #28]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	43d2      	mvns	r2, r2
 800305e:	4011      	ands	r1, r2
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	430a      	orrs	r2, r1
 8003064:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b0a      	cmp	r3, #10
 8003076:	d003      	beq.n	8003080 <HAL_DMA2D_ConfigLayer+0xf8>
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b09      	cmp	r3, #9
 800307e:	d106      	bne.n	800308e <HAL_DMA2D_ConfigLayer+0x106>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	68d2      	ldr	r2, [r2, #12]
 8003088:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800308c:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	ff03000f 	.word	0xff03000f

080030b0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 80030b0:	b480      	push	{r7}
 80030b2:	b08b      	sub	sp, #44	; 0x2c
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030dc:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	0410      	lsls	r0, r2, #16
 80030e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e6:	4302      	orrs	r2, r0
 80030e8:	430a      	orrs	r2, r1
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030fc:	d174      	bne.n	80031e8 <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003104:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800310c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003114:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d108      	bne.n	8003136 <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	431a      	orrs	r2, r3
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	431a      	orrs	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
 8003134:	e053      	b.n	80031de <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d106      	bne.n	800314c <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	431a      	orrs	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
 800314a:	e048      	b.n	80031de <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d111      	bne.n	8003178 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	0cdb      	lsrs	r3, r3, #19
 8003158:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	0a9b      	lsrs	r3, r3, #10
 800315e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	08db      	lsrs	r3, r3, #3
 8003164:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	02db      	lsls	r3, r3, #11
 800316e:	431a      	orrs	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
 8003176:	e032      	b.n	80031de <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b03      	cmp	r3, #3
 800317e:	d117      	bne.n	80031b0 <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	0fdb      	lsrs	r3, r3, #31
 8003184:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	0cdb      	lsrs	r3, r3, #19
 800318a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	0adb      	lsrs	r3, r3, #11
 8003190:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	08db      	lsrs	r3, r3, #3
 8003196:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	029b      	lsls	r3, r3, #10
 80031a0:	431a      	orrs	r2, r3
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	03db      	lsls	r3, r3, #15
 80031a6:	431a      	orrs	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
 80031ae:	e016      	b.n	80031de <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	0f1b      	lsrs	r3, r3, #28
 80031b4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	0d1b      	lsrs	r3, r3, #20
 80031ba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	0b1b      	lsrs	r3, r3, #12
 80031c0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	011a      	lsls	r2, r3, #4
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	431a      	orrs	r2, r3
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	031b      	lsls	r3, r3, #12
 80031d6:	431a      	orrs	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80031e6:	e003      	b.n	80031f0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	60da      	str	r2, [r3, #12]
}
 80031f0:	bf00      	nop
 80031f2:	372c      	adds	r7, #44	; 0x2c
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e175      	b.n	8003508 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800321c:	2201      	movs	r2, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	429a      	cmp	r2, r3
 8003236:	f040 8164 	bne.w	8003502 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x4e>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b12      	cmp	r3, #18
 8003248:	d123      	bne.n	8003292 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	08da      	lsrs	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3208      	adds	r2, #8
 8003252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	220f      	movs	r2, #15
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	08da      	lsrs	r2, r3, #3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3208      	adds	r2, #8
 800328c:	69b9      	ldr	r1, [r7, #24]
 800328e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0203 	and.w	r2, r3, #3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00b      	beq.n	80032e6 <HAL_GPIO_Init+0xea>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d007      	beq.n	80032e6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032da:	2b11      	cmp	r3, #17
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b12      	cmp	r3, #18
 80032e4:	d130      	bne.n	8003348 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	2203      	movs	r2, #3
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800331c:	2201      	movs	r2, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 0201 	and.w	r2, r3, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	2203      	movs	r2, #3
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80be 	beq.w	8003502 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	4a65      	ldr	r2, [pc, #404]	; (800351c <HAL_GPIO_Init+0x320>)
 8003388:	4b64      	ldr	r3, [pc, #400]	; (800351c <HAL_GPIO_Init+0x320>)
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003390:	6453      	str	r3, [r2, #68]	; 0x44
 8003392:	4b62      	ldr	r3, [pc, #392]	; (800351c <HAL_GPIO_Init+0x320>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800339e:	4a60      	ldr	r2, [pc, #384]	; (8003520 <HAL_GPIO_Init+0x324>)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a57      	ldr	r2, [pc, #348]	; (8003524 <HAL_GPIO_Init+0x328>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d037      	beq.n	800343a <HAL_GPIO_Init+0x23e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a56      	ldr	r2, [pc, #344]	; (8003528 <HAL_GPIO_Init+0x32c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d031      	beq.n	8003436 <HAL_GPIO_Init+0x23a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a55      	ldr	r2, [pc, #340]	; (800352c <HAL_GPIO_Init+0x330>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d02b      	beq.n	8003432 <HAL_GPIO_Init+0x236>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a54      	ldr	r2, [pc, #336]	; (8003530 <HAL_GPIO_Init+0x334>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d025      	beq.n	800342e <HAL_GPIO_Init+0x232>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a53      	ldr	r2, [pc, #332]	; (8003534 <HAL_GPIO_Init+0x338>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01f      	beq.n	800342a <HAL_GPIO_Init+0x22e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_GPIO_Init+0x33c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d019      	beq.n	8003426 <HAL_GPIO_Init+0x22a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a51      	ldr	r2, [pc, #324]	; (800353c <HAL_GPIO_Init+0x340>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_GPIO_Init+0x226>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a50      	ldr	r2, [pc, #320]	; (8003540 <HAL_GPIO_Init+0x344>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00d      	beq.n	800341e <HAL_GPIO_Init+0x222>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a4f      	ldr	r2, [pc, #316]	; (8003544 <HAL_GPIO_Init+0x348>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <HAL_GPIO_Init+0x21e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a4e      	ldr	r2, [pc, #312]	; (8003548 <HAL_GPIO_Init+0x34c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_GPIO_Init+0x21a>
 8003412:	2309      	movs	r3, #9
 8003414:	e012      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003416:	230a      	movs	r3, #10
 8003418:	e010      	b.n	800343c <HAL_GPIO_Init+0x240>
 800341a:	2308      	movs	r3, #8
 800341c:	e00e      	b.n	800343c <HAL_GPIO_Init+0x240>
 800341e:	2307      	movs	r3, #7
 8003420:	e00c      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003422:	2306      	movs	r3, #6
 8003424:	e00a      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003426:	2305      	movs	r3, #5
 8003428:	e008      	b.n	800343c <HAL_GPIO_Init+0x240>
 800342a:	2304      	movs	r3, #4
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x240>
 800342e:	2303      	movs	r3, #3
 8003430:	e004      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003432:	2302      	movs	r3, #2
 8003434:	e002      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_GPIO_Init+0x240>
 800343a:	2300      	movs	r3, #0
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	f002 0203 	and.w	r2, r2, #3
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	4093      	lsls	r3, r2
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800344c:	4934      	ldr	r1, [pc, #208]	; (8003520 <HAL_GPIO_Init+0x324>)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	089b      	lsrs	r3, r3, #2
 8003452:	3302      	adds	r3, #2
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800345a:	4b3c      	ldr	r3, [pc, #240]	; (800354c <HAL_GPIO_Init+0x350>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800347e:	4a33      	ldr	r2, [pc, #204]	; (800354c <HAL_GPIO_Init+0x350>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003484:	4b31      	ldr	r3, [pc, #196]	; (800354c <HAL_GPIO_Init+0x350>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034a8:	4a28      	ldr	r2, [pc, #160]	; (800354c <HAL_GPIO_Init+0x350>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ae:	4b27      	ldr	r3, [pc, #156]	; (800354c <HAL_GPIO_Init+0x350>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034d2:	4a1e      	ldr	r2, [pc, #120]	; (800354c <HAL_GPIO_Init+0x350>)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034d8:	4b1c      	ldr	r3, [pc, #112]	; (800354c <HAL_GPIO_Init+0x350>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034fc:	4a13      	ldr	r2, [pc, #76]	; (800354c <HAL_GPIO_Init+0x350>)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3301      	adds	r3, #1
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2b0f      	cmp	r3, #15
 800350c:	f67f ae86 	bls.w	800321c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003510:	bf00      	nop
 8003512:	3724      	adds	r7, #36	; 0x24
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	40023800 	.word	0x40023800
 8003520:	40013800 	.word	0x40013800
 8003524:	40020000 	.word	0x40020000
 8003528:	40020400 	.word	0x40020400
 800352c:	40020800 	.word	0x40020800
 8003530:	40020c00 	.word	0x40020c00
 8003534:	40021000 	.word	0x40021000
 8003538:	40021400 	.word	0x40021400
 800353c:	40021800 	.word	0x40021800
 8003540:	40021c00 	.word	0x40021c00
 8003544:	40022000 	.word	0x40022000
 8003548:	40022400 	.word	0x40022400
 800354c:	40013c00 	.word	0x40013c00

08003550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
 800355c:	4613      	mov	r3, r2
 800355e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003560:	787b      	ldrb	r3, [r7, #1]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800356c:	e003      	b.n	8003576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	619a      	str	r2, [r3, #24]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e07e      	b.n	8003694 <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f007 ffe4 	bl	800b578 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2224      	movs	r2, #36	; 0x24
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6852      	ldr	r2, [r2, #4]
 80035d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	6892      	ldr	r2, [r2, #8]
 80035e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6892      	ldr	r2, [r2, #8]
 80035f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	e006      	b.n	800360c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6892      	ldr	r2, [r2, #8]
 8003606:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800360a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d104      	bne.n	800361e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800361c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <HAL_I2C_Init+0x118>)
 800362a:	430b      	orrs	r3, r1
 800362c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	68d2      	ldr	r2, [r2, #12]
 8003638:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800363c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6911      	ldr	r1, [r2, #16]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6952      	ldr	r2, [r2, #20]
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6992      	ldr	r2, [r2, #24]
 8003650:	0212      	lsls	r2, r2, #8
 8003652:	430a      	orrs	r2, r1
 8003654:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	69d1      	ldr	r1, [r2, #28]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6a12      	ldr	r2, [r2, #32]
 8003662:	430a      	orrs	r2, r1
 8003664:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	02008000 	.word	0x02008000

080036a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d138      	bne.n	8003728 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e032      	b.n	800372a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	; 0x24
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	6811      	ldr	r1, [r2, #0]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	e000      	b.n	800372a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003728:	2302      	movs	r3, #2
  }
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b20      	cmp	r3, #32
 800374e:	d139      	bne.n	80037c4 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_I2CEx_ConfigDigitalFilter+0x28>
 800375a:	2302      	movs	r3, #2
 800375c:	e033      	b.n	80037c6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2224      	movs	r2, #36	; 0x24
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800378c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e000      	b.n	80037c6 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	2300      	movs	r3, #0
 80037e2:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0c7      	b.n	800397e <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f007 ff54 	bl	800b6b0 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	6992      	ldr	r2, [r2, #24]
 800381a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800381e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	6991      	ldr	r1, [r2, #24]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6850      	ldr	r0, [r2, #4]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6892      	ldr	r2, [r2, #8]
 8003832:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003838:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6912      	ldr	r2, [r2, #16]
 800383e:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003840:	430a      	orrs	r2, r1
 8003842:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6899      	ldr	r1, [r3, #8]
 800384e:	4b4e      	ldr	r3, [pc, #312]	; (8003988 <HAL_LTDC_Init+0x1b4>)
 8003850:	400b      	ands	r3, r1
 8003852:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	041b      	lsls	r3, r3, #16
 800385a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	6891      	ldr	r1, [r2, #8]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6990      	ldr	r0, [r2, #24]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4302      	orrs	r2, r0
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68d9      	ldr	r1, [r3, #12]
 800387c:	4b42      	ldr	r3, [pc, #264]	; (8003988 <HAL_LTDC_Init+0x1b4>)
 800387e:	400b      	ands	r3, r1
 8003880:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	68d1      	ldr	r1, [r2, #12]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6a10      	ldr	r0, [r2, #32]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4302      	orrs	r2, r0
 800389c:	430a      	orrs	r2, r1
 800389e:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6919      	ldr	r1, [r3, #16]
 80038aa:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_LTDC_Init+0x1b4>)
 80038ac:	400b      	ands	r3, r1
 80038ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	041b      	lsls	r3, r3, #16
 80038b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	6911      	ldr	r1, [r2, #16]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4302      	orrs	r2, r0
 80038ca:	430a      	orrs	r2, r1
 80038cc:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6959      	ldr	r1, [r3, #20]
 80038d8:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <HAL_LTDC_Init+0x1b4>)
 80038da:	400b      	ands	r3, r1
 80038dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	041b      	lsls	r3, r3, #16
 80038e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	6951      	ldr	r1, [r2, #20]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4302      	orrs	r2, r0
 80038f8:	430a      	orrs	r2, r1
 80038fa:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800391a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800392a:	68b8      	ldr	r0, [r7, #8]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4302      	orrs	r2, r0
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8003936:	4302      	orrs	r2, r0
 8003938:	430a      	orrs	r2, r1
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003946:	f042 0204 	orr.w	r2, r2, #4
 800394a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003956:	f042 0202 	orr.w	r2, r2, #2
 800395a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	6992      	ldr	r2, [r2, #24]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	f000f800 	.word	0xf000f800

0800398c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 800398c:	b5b0      	push	{r4, r5, r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_LTDC_ConfigLayer+0x1a>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e02c      	b.n	8003a00 <HAL_LTDC_ConfigLayer+0x74>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2134      	movs	r1, #52	; 0x34
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4614      	mov	r4, r2
 80039ca:	461d      	mov	r5, r3
 80039cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f81f 	bl	8003a24 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2201      	movs	r2, #1
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bdb0      	pop	{r4, r5, r7, pc}

08003a08 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003a16:	b2db      	uxtb	r3, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b089      	sub	sp, #36	; 0x24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	0c1b      	lsrs	r3, r3, #16
 8003a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4c:	4413      	add	r3, r2
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	01db      	lsls	r3, r3, #7
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3384      	adds	r3, #132	; 0x84
 8003a60:	461a      	mov	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4619      	mov	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	01db      	lsls	r3, r3, #7
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3384      	adds	r3, #132	; 0x84
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003a76:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	01db      	lsls	r3, r3, #7
 8003a82:	4413      	add	r3, r2
 8003a84:	3384      	adds	r3, #132	; 0x84
 8003a86:	4619      	mov	r1, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	0c1b      	lsrs	r3, r3, #16
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	4413      	add	r3, r2
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab0:	4413      	add	r3, r2
 8003ab2:	041b      	lsls	r3, r3, #16
 8003ab4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	01db      	lsls	r3, r3, #7
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3384      	adds	r3, #132	; 0x84
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4619      	mov	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	01db      	lsls	r3, r3, #7
 8003ad0:	440b      	add	r3, r1
 8003ad2:	3384      	adds	r3, #132	; 0x84
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ada:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	01db      	lsls	r3, r3, #7
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3384      	adds	r3, #132	; 0x84
 8003aea:	4619      	mov	r1, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003afa:	4413      	add	r3, r2
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	01db      	lsls	r3, r3, #7
 8003b0e:	4413      	add	r3, r2
 8003b10:	3384      	adds	r3, #132	; 0x84
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	01db      	lsls	r3, r3, #7
 8003b1e:	440b      	add	r3, r1
 8003b20:	3384      	adds	r3, #132	; 0x84
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f023 0307 	bic.w	r3, r3, #7
 8003b28:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	01db      	lsls	r3, r3, #7
 8003b34:	4413      	add	r3, r2
 8003b36:	3384      	adds	r3, #132	; 0x84
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b50:	041b      	lsls	r3, r3, #16
 8003b52:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	01db      	lsls	r3, r3, #7
 8003b66:	4413      	add	r3, r2
 8003b68:	3384      	adds	r3, #132	; 0x84
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	01db      	lsls	r3, r3, #7
 8003b76:	4413      	add	r3, r2
 8003b78:	3384      	adds	r3, #132	; 0x84
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	01db      	lsls	r3, r3, #7
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3384      	adds	r3, #132	; 0x84
 8003b8e:	4619      	mov	r1, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b96:	461a      	mov	r2, r3
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	01db      	lsls	r3, r3, #7
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3384      	adds	r3, #132	; 0x84
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	01db      	lsls	r3, r3, #7
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3384      	adds	r3, #132	; 0x84
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	01db      	lsls	r3, r3, #7
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3384      	adds	r3, #132	; 0x84
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	01db      	lsls	r3, r3, #7
 8003bec:	4413      	add	r3, r2
 8003bee:	3384      	adds	r3, #132	; 0x84
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	01db      	lsls	r3, r3, #7
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3384      	adds	r3, #132	; 0x84
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	4b5a      	ldr	r3, [pc, #360]	; (8003d6c <LTDC_SetConfig+0x348>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	01db      	lsls	r3, r3, #7
 8003c12:	4413      	add	r3, r2
 8003c14:	3384      	adds	r3, #132	; 0x84
 8003c16:	4619      	mov	r1, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	01db      	lsls	r3, r3, #7
 8003c2e:	4413      	add	r3, r2
 8003c30:	3384      	adds	r3, #132	; 0x84
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	01db      	lsls	r3, r3, #7
 8003c3e:	4413      	add	r3, r2
 8003c40:	3384      	adds	r3, #132	; 0x84
 8003c42:	461a      	mov	r2, r3
 8003c44:	2300      	movs	r3, #0
 8003c46:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	01db      	lsls	r3, r3, #7
 8003c52:	4413      	add	r3, r2
 8003c54:	3384      	adds	r3, #132	; 0x84
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <LTDC_SetConfig+0x248>
  {
    tmp = 4;
 8003c66:	2304      	movs	r3, #4
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	e01b      	b.n	8003ca4 <LTDC_SetConfig+0x280>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d102      	bne.n	8003c7a <LTDC_SetConfig+0x256>
  {
    tmp = 3;
 8003c74:	2303      	movs	r3, #3
 8003c76:	61fb      	str	r3, [r7, #28]
 8003c78:	e014      	b.n	8003ca4 <LTDC_SetConfig+0x280>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d00b      	beq.n	8003c9a <LTDC_SetConfig+0x276>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d007      	beq.n	8003c9a <LTDC_SetConfig+0x276>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d003      	beq.n	8003c9a <LTDC_SetConfig+0x276>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c96:	2b07      	cmp	r3, #7
 8003c98:	d102      	bne.n	8003ca0 <LTDC_SetConfig+0x27c>
  {
    tmp = 2;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	e001      	b.n	8003ca4 <LTDC_SetConfig+0x280>
  }
  else
  {
    tmp = 1;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	01db      	lsls	r3, r3, #7
 8003cae:	4413      	add	r3, r2
 8003cb0:	3384      	adds	r3, #132	; 0x84
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	01db      	lsls	r3, r3, #7
 8003cbe:	440b      	add	r3, r1
 8003cc0:	3384      	adds	r3, #132	; 0x84
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003cc8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	01db      	lsls	r3, r3, #7
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3384      	adds	r3, #132	; 0x84
 8003cd8:	4618      	mov	r0, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	041a      	lsls	r2, r3, #16
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6859      	ldr	r1, [r3, #4]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	1acb      	subs	r3, r1, r3
 8003cf0:	69f9      	ldr	r1, [r7, #28]
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	3303      	adds	r3, #3
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	01db      	lsls	r3, r3, #7
 8003d06:	4413      	add	r3, r2
 8003d08:	3384      	adds	r3, #132	; 0x84
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	01db      	lsls	r3, r3, #7
 8003d16:	4413      	add	r3, r2
 8003d18:	3384      	adds	r3, #132	; 0x84
 8003d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1c:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <LTDC_SetConfig+0x34c>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	01db      	lsls	r3, r3, #7
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3384      	adds	r3, #132	; 0x84
 8003d30:	461a      	mov	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	01db      	lsls	r3, r3, #7
 8003d42:	4413      	add	r3, r2
 8003d44:	3384      	adds	r3, #132	; 0x84
 8003d46:	461a      	mov	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	01db      	lsls	r3, r3, #7
 8003d52:	440b      	add	r3, r1
 8003d54:	3384      	adds	r3, #132	; 0x84
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6013      	str	r3, [r2, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	3724      	adds	r7, #36	; 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	fffff8f8 	.word	0xfffff8f8
 8003d70:	fffff800 	.word	0xfffff800

08003d74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	b08f      	sub	sp, #60	; 0x3c
 8003d78:	af0a      	add	r7, sp, #40	; 0x28
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0fe      	b.n	8003f88 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f007 ff50 	bl	800bc38 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f003 faaa 	bl	80072f6 <USB_DisableGlobalInt>

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	687e      	ldr	r6, [r7, #4]
 8003daa:	466d      	mov	r5, sp
 8003dac:	f106 0410 	add.w	r4, r6, #16
 8003db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dc0:	1d33      	adds	r3, r6, #4
 8003dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dc4:	6838      	ldr	r0, [r7, #0]
 8003dc6:	f003 fa33 	bl	8007230 <USB_CoreInit>

 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f003 faa1 	bl	8007318 <USB_SetCurrentMode>

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	e04c      	b.n	8003e76 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	3339      	adds	r3, #57	; 0x39
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	b2d8      	uxtb	r0, r3
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	3338      	adds	r3, #56	; 0x38
 8003e04:	4602      	mov	r2, r0
 8003e06:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	b298      	uxth	r0, r3
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	333e      	adds	r3, #62	; 0x3e
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	333b      	adds	r3, #59	; 0x3b
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	3340      	adds	r3, #64	; 0x40
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0;
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	3344      	adds	r3, #68	; 0x44
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0;
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	334c      	adds	r3, #76	; 0x4c
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 for (i = 0; i < 15 ; i++)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3301      	adds	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b0e      	cmp	r3, #14
 8003e7a:	d9af      	bls.n	8003ddc <HAL_PCD_Init+0x68>
 }

 for (i = 0; i < 15 ; i++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e05a      	b.n	8003f38 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0;
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	b2d8      	uxtb	r0, r3
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003eae:	4602      	mov	r2, r0
 8003eb0:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	b298      	uxth	r0, r3
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	333e      	adds	r3, #62	; 0x3e
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0;
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0;
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]

   hpcd->Instance->DIEPTXF[i] = 0;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3340      	adds	r3, #64	; 0x40
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	2200      	movs	r2, #0
 8003f30:	605a      	str	r2, [r3, #4]
 for (i = 0; i < 15 ; i++)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3301      	adds	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b0e      	cmp	r3, #14
 8003f3c:	d9a1      	bls.n	8003e82 <HAL_PCD_Init+0x10e>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	687e      	ldr	r6, [r7, #4]
 8003f46:	466d      	mov	r5, sp
 8003f48:	f106 0410 	add.w	r4, r6, #16
 8003f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f58:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f5c:	1d33      	adds	r3, r6, #4
 8003f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f60:	6838      	ldr	r0, [r7, #0]
 8003f62:	f003 fa01 	bl	8007368 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d102      	bne.n	8003f7c <HAL_PCD_Init+0x208>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f001 f84c 	bl	8005014 <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f004 f9f6 	bl	8008372 <USB_DevDisconnect>
 return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f90 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_PCD_Start+0x16>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e012      	b.n	8003fcc <HAL_PCD_Start+0x3c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f004 f9c6 	bl	8008344 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f003 f989 	bl	80072d4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_PCD_IRQHandler>:
  * @brief  Handle PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08c      	sub	sp, #48	; 0x30
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	623b      	str	r3, [r7, #32]
  uint32_t i = 0, ep_intr = 0, epint = 0, epnum = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0, temp = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
  uint32_t hclk = 200000000;
 8003ffe:	4b98      	ldr	r3, [pc, #608]	; (8004260 <HAL_PCD_IRQHandler+0x28c>)
 8004000:	60fb      	str	r3, [r7, #12]

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f004 fa55 	bl	80084b6 <USB_GetMode>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	f040 84e1 	bne.w	80049d6 <HAL_PCD_IRQHandler+0xa02>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f004 f9c1 	bl	80083a0 <USB_ReadInterrupts>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 84d7 	beq.w	80049d4 <HAL_PCD_IRQHandler+0xa00>
    {
      return;
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f004 f9b8 	bl	80083a0 <USB_ReadInterrupts>
 8004030:	4603      	mov	r3, r0
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d103      	bne.n	8004042 <HAL_PCD_IRQHandler+0x6e>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2202      	movs	r2, #2
 8004040:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f004 f9aa 	bl	80083a0 <USB_ReadInterrupts>
 800404c:	4603      	mov	r3, r0
 800404e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004052:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004056:	f040 80ed 	bne.w	8004234 <HAL_PCD_IRQHandler+0x260>
    {
      epnum = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f004 f9b1 	bl	80083ca <USB_ReadDevAllOutEpInterrupt>
 8004068:	62b8      	str	r0, [r7, #40]	; 0x28

      while ( ep_intr )
 800406a:	e0df      	b.n	800422c <HAL_PCD_IRQHandler+0x258>
      {
        if (ep_intr & 0x1)
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80d4 	beq.w	8004220 <HAL_PCD_IRQHandler+0x24c>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f004 f9d1 	bl	800842a <USB_ReadDevOutEPInterrupt>
 8004088:	61f8      	str	r0, [r7, #28]

          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8082 	beq.w	800419a <HAL_PCD_IRQHandler+0x1c6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a2:	461a      	mov	r2, r3
 80040a4:	2301      	movs	r3, #1
 80040a6:	6093      	str	r3, [r2, #8]

            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d111      	bne.n	80040d4 <HAL_PCD_IRQHandler+0x100>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d009      	beq.n	80040d4 <HAL_PCD_IRQHandler+0x100>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	461a      	mov	r2, r3
 80040ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d2:	6093      	str	r3, [r2, #8]
              }
            }

            if(hpcd->Init.dma_enable == 1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d13c      	bne.n	8004156 <HAL_PCD_IRQHandler+0x182>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	0159      	lsls	r1, r3, #5
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	440b      	add	r3, r1
 80040f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004102:	1ad1      	subs	r1, r2, r3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4403      	add	r3, r0
 8004112:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004116:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800412a:	6819      	ldr	r1, [r3, #0]
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4403      	add	r3, r0
 800413a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4419      	add	r1, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4403      	add	r3, r0
 8004150:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004154:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	b2db      	uxtb	r3, r3
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f007 fdf7 	bl	800bd50 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d117      	bne.n	800419a <HAL_PCD_IRQHandler+0x1c6>
            {
              if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	2b00      	cmp	r3, #0
 800416e:	d114      	bne.n	800419a <HAL_PCD_IRQHandler+0x1c6>
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d108      	bne.n	800419a <HAL_PCD_IRQHandler+0x1c6>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004192:	461a      	mov	r2, r3
 8004194:	2101      	movs	r1, #1
 8004196:	f004 f9d3 	bl	8008540 <USB_EP0_OutStart>
              }
            }
          }

          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d021      	beq.n	80041e8 <HAL_PCD_IRQHandler+0x214>
          {
            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d111      	bne.n	80041d0 <HAL_PCD_IRQHandler+0x1fc>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <HAL_PCD_IRQHandler+0x1fc>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c8:	461a      	mov	r2, r3
 80041ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ce:	6093      	str	r3, [r2, #8]
              }
            }

            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f007 fdab 	bl	800bd2c <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e2:	461a      	mov	r2, r3
 80041e4:	2308      	movs	r3, #8
 80041e6:	6093      	str	r3, [r2, #8]
          }

          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_PCD_IRQHandler+0x230>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fe:	461a      	mov	r2, r3
 8004200:	2310      	movs	r3, #16
 8004202:	6093      	str	r3, [r2, #8]
          }
          /* Clear Status Phase Received interrupt */
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_PCD_IRQHandler+0x24c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	2320      	movs	r3, #32
 800421e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	3301      	adds	r3, #1
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	2b00      	cmp	r3, #0
 8004230:	f47f af1c 	bne.w	800406c <HAL_PCD_IRQHandler+0x98>
      }
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f004 f8b1 	bl	80083a0 <USB_ReadInterrupts>
 800423e:	4603      	mov	r3, r0
 8004240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004244:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004248:	f040 80c6 	bne.w	80043d8 <HAL_PCD_IRQHandler+0x404>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f004 f8d2 	bl	80083fa <USB_ReadDevAllInEpInterrupt>
 8004256:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	627b      	str	r3, [r7, #36]	; 0x24

      while ( ep_intr )
 800425c:	e0b8      	b.n	80043d0 <HAL_PCD_IRQHandler+0x3fc>
 800425e:	bf00      	nop
 8004260:	0bebc200 	.word	0x0bebc200
      {
        if (ep_intr & 0x1) /* In ITR */
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80aa 	beq.w	80043c4 <HAL_PCD_IRQHandler+0x3f0>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f004 f8f1 	bl	8008462 <USB_ReadDevInEPInterrupt>
 8004280:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d05a      	beq.n	8004342 <HAL_PCD_IRQHandler+0x36e>
          {
            fifoemptymsk = 0x1 << epnum;
 800428c:	2201      	movs	r2, #1
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429c:	4619      	mov	r1, r3
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	43db      	mvns	r3, r3
 80042aa:	4013      	ands	r3, r2
 80042ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ba:	461a      	mov	r2, r3
 80042bc:	2301      	movs	r3, #1
 80042be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d11b      	bne.n	8004300 <HAL_PCD_IRQHandler+0x32c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3344      	adds	r3, #68	; 0x44
 80042d8:	6819      	ldr	r1, [r3, #0]
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4403      	add	r3, r0
 80042e8:	3340      	adds	r3, #64	; 0x40
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4419      	add	r1, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4403      	add	r3, r0
 80042fc:	3344      	adds	r3, #68	; 0x44
 80042fe:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	b2db      	uxtb	r3, r3
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f007 fd3d 	bl	800bd86 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d116      	bne.n	8004342 <HAL_PCD_IRQHandler+0x36e>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	2b00      	cmp	r3, #0
 8004318:	d113      	bne.n	8004342 <HAL_PCD_IRQHandler+0x36e>
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	334c      	adds	r3, #76	; 0x4c
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d108      	bne.n	8004342 <HAL_PCD_IRQHandler+0x36e>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800433a:	461a      	mov	r2, r3
 800433c:	2101      	movs	r1, #1
 800433e:	f004 f8ff 	bl	8008540 <USB_EP0_OutStart>
              }
            }
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_PCD_IRQHandler+0x38a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	461a      	mov	r2, r3
 800435a:	2308      	movs	r3, #8
 800435c:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_PCD_IRQHandler+0x3a6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	2310      	movs	r3, #16
 8004378:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_PCD_IRQHandler+0x3c2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004390:	461a      	mov	r2, r3
 8004392:	2340      	movs	r3, #64	; 0x40
 8004394:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_PCD_IRQHandler+0x3de>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	461a      	mov	r2, r3
 80043ae:	2302      	movs	r3, #2
 80043b0:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_PCD_IRQHandler+0x3f0>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 80043bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fd43 	bl	8004e4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	3301      	adds	r3, #1
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f47f af46 	bne.w	8004264 <HAL_PCD_IRQHandler+0x290>
      }
    }

    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f003 ffdf 	bl	80083a0 <USB_ReadInterrupts>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ec:	d120      	bne.n	8004430 <HAL_PCD_IRQHandler+0x45c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f4:	461a      	mov	r2, r3
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	6053      	str	r3, [r2, #4]

      if(hpcd->LPM_State == LPM_L1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 800440a:	2b01      	cmp	r3, #1
 800440c:	d108      	bne.n	8004420 <HAL_PCD_IRQHandler+0x44c>
      {
        hpcd->LPM_State = LPM_L0;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004416:	2100      	movs	r1, #0
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f007 ffcf 	bl	800c3bc <HAL_PCDEx_LPM_Callback>
 800441e:	e002      	b.n	8004426 <HAL_PCD_IRQHandler+0x452>
      }
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f007 fd29 	bl	800be78 <HAL_PCD_ResumeCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800442e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f003 ffb3 	bl	80083a0 <USB_ReadInterrupts>
 800443a:	4603      	mov	r3, r0
 800443c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004444:	d10f      	bne.n	8004466 <HAL_PCD_IRQHandler+0x492>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b01      	cmp	r3, #1
 8004454:	d102      	bne.n	800445c <HAL_PCD_IRQHandler+0x488>
      {

        HAL_PCD_SuspendCallback(hpcd);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f007 fce6 	bl	800be28 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004464:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f003 ff98 	bl	80083a0 <USB_ReadInterrupts>
 8004470:	4603      	mov	r3, r0
 8004472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800447a:	d11e      	bne.n	80044ba <HAL_PCD_IRQHandler+0x4e6>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004484:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 800448c:	2b00      	cmp	r3, #0
 800448e:	d111      	bne.n	80044b4 <HAL_PCD_IRQHandler+0x4e0>
      {
        hpcd->LPM_State = LPM_L1;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80044aa:	2101      	movs	r1, #1
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f007 ff85 	bl	800c3bc <HAL_PCDEx_LPM_Callback>
 80044b2:	e002      	b.n	80044ba <HAL_PCD_IRQHandler+0x4e6>
      }
      else
      {
        HAL_PCD_SuspendCallback(hpcd);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f007 fcb7 	bl	800be28 <HAL_PCD_SuspendCallback>
      }
    }

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f003 ff6e 	bl	80083a0 <USB_ReadInterrupts>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	f040 80b0 	bne.w	8004632 <HAL_PCD_IRQHandler+0x65e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d8:	461a      	mov	r2, r3
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2110      	movs	r1, #16
 80044ee:	4618      	mov	r0, r3
 80044f0:	f003 f888 	bl	8007604 <USB_FlushTxFifo>

      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80044f4:	2300      	movs	r3, #0
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f8:	e036      	b.n	8004568 <HAL_PCD_IRQHandler+0x594>
      {
        USBx_INEP(i)->DIEPINT = 0xFF;
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004506:	461a      	mov	r2, r3
 8004508:	23ff      	movs	r3, #255	; 0xff
 800450a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	4619      	mov	r1, r3
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800452c:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFF;
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453a:	461a      	mov	r2, r3
 800453c:	23ff      	movs	r3, #255	; 0xff
 800453e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454c:	4619      	mov	r1, r3
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004560:	600b      	str	r3, [r1, #0]
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	3301      	adds	r3, #1
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456e:	429a      	cmp	r2, r3
 8004570:	d8c3      	bhi.n	80044fa <HAL_PCD_IRQHandler+0x526>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004578:	461a      	mov	r2, r3
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	461a      	mov	r2, r3
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004594:	61d3      	str	r3, [r2, #28]

      if(hpcd->Init.use_dedicated_ep1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	2b00      	cmp	r3, #0
 800459c:	d018      	beq.n	80045d0 <HAL_PCD_IRQHandler+0x5fc>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a4:	461a      	mov	r2, r3
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b0:	f043 030b 	orr.w	r3, r3, #11
 80045b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045be:	461a      	mov	r2, r3
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c8:	f043 030b 	orr.w	r3, r3, #11
 80045cc:	6453      	str	r3, [r2, #68]	; 0x44
 80045ce:	e015      	b.n	80045fc <HAL_PCD_IRQHandler+0x628>
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d6:	461a      	mov	r2, r3
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80045e4:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ec:	461a      	mov	r2, r3
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f043 030b 	orr.w	r3, r3, #11
 80045fa:	6113      	str	r3, [r2, #16]
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004602:	461a      	mov	r2, r3
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004610:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	b2d9      	uxtb	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004622:	461a      	mov	r2, r3
 8004624:	f003 ff8c 	bl	8008540 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004630:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f003 feb2 	bl	80083a0 <USB_ReadInterrupts>
 800463c:	4603      	mov	r3, r0
 800463e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004646:	f040 80d7 	bne.w	80047f8 <HAL_PCD_IRQHandler+0x824>
    {
      USB_ActivateSetup(hpcd->Instance);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f003 ff40 	bl	80084d4 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	68d2      	ldr	r2, [r2, #12]
 800465e:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8004662:	60da      	str	r2, [r3, #12]

      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f003 f82b 	bl	80076c4 <USB_GetDevSpeed>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10f      	bne.n	8004694 <HAL_PCD_IRQHandler+0x6c0>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004680:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	68d2      	ldr	r2, [r2, #12]
 800468c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	e0a9      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2203      	movs	r2, #3
 8004698:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2240      	movs	r2, #64	; 0x40
 800469e:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 80046a0:	f001 f93a 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 80046a4:	60f8      	str	r0, [r7, #12]

		if((hclk >= 14200000)&&(hclk < 15000000))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4a79      	ldr	r2, [pc, #484]	; (8004890 <HAL_PCD_IRQHandler+0x8bc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d90c      	bls.n	80046c8 <HAL_PCD_IRQHandler+0x6f4>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a78      	ldr	r2, [pc, #480]	; (8004894 <HAL_PCD_IRQHandler+0x8c0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d808      	bhi.n	80046c8 <HAL_PCD_IRQHandler+0x6f4>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	68d2      	ldr	r2, [r2, #12]
 80046c0:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	e08f      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 15000000)&&(hclk < 16000000))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4a72      	ldr	r2, [pc, #456]	; (8004894 <HAL_PCD_IRQHandler+0x8c0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d90c      	bls.n	80046ea <HAL_PCD_IRQHandler+0x716>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a71      	ldr	r2, [pc, #452]	; (8004898 <HAL_PCD_IRQHandler+0x8c4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d808      	bhi.n	80046ea <HAL_PCD_IRQHandler+0x716>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	68d2      	ldr	r2, [r2, #12]
 80046e2:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80046e6:	60da      	str	r2, [r3, #12]
 80046e8:	e07e      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 16000000)&&(hclk < 17200000))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a6a      	ldr	r2, [pc, #424]	; (8004898 <HAL_PCD_IRQHandler+0x8c4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d90c      	bls.n	800470c <HAL_PCD_IRQHandler+0x738>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4a69      	ldr	r2, [pc, #420]	; (800489c <HAL_PCD_IRQHandler+0x8c8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d808      	bhi.n	800470c <HAL_PCD_IRQHandler+0x738>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	68d2      	ldr	r2, [r2, #12]
 8004704:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	e06d      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 17200000)&&(hclk < 18500000))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a63      	ldr	r2, [pc, #396]	; (800489c <HAL_PCD_IRQHandler+0x8c8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d90c      	bls.n	800472e <HAL_PCD_IRQHandler+0x75a>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a62      	ldr	r2, [pc, #392]	; (80048a0 <HAL_PCD_IRQHandler+0x8cc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d808      	bhi.n	800472e <HAL_PCD_IRQHandler+0x75a>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	68d2      	ldr	r2, [r2, #12]
 8004726:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800472a:	60da      	str	r2, [r3, #12]
 800472c:	e05c      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 18500000)&&(hclk < 20000000))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a5b      	ldr	r2, [pc, #364]	; (80048a0 <HAL_PCD_IRQHandler+0x8cc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d90c      	bls.n	8004750 <HAL_PCD_IRQHandler+0x77c>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a5a      	ldr	r2, [pc, #360]	; (80048a4 <HAL_PCD_IRQHandler+0x8d0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d808      	bhi.n	8004750 <HAL_PCD_IRQHandler+0x77c>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	68d2      	ldr	r2, [r2, #12]
 8004748:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 800474c:	60da      	str	r2, [r3, #12]
 800474e:	e04b      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 20000000)&&(hclk < 21800000))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a54      	ldr	r2, [pc, #336]	; (80048a4 <HAL_PCD_IRQHandler+0x8d0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d90c      	bls.n	8004772 <HAL_PCD_IRQHandler+0x79e>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a53      	ldr	r2, [pc, #332]	; (80048a8 <HAL_PCD_IRQHandler+0x8d4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d808      	bhi.n	8004772 <HAL_PCD_IRQHandler+0x79e>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	68d2      	ldr	r2, [r2, #12]
 800476a:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800476e:	60da      	str	r2, [r3, #12]
 8004770:	e03a      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 21800000)&&(hclk < 24000000))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a4c      	ldr	r2, [pc, #304]	; (80048a8 <HAL_PCD_IRQHandler+0x8d4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d90c      	bls.n	8004794 <HAL_PCD_IRQHandler+0x7c0>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a4b      	ldr	r2, [pc, #300]	; (80048ac <HAL_PCD_IRQHandler+0x8d8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d808      	bhi.n	8004794 <HAL_PCD_IRQHandler+0x7c0>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	68d2      	ldr	r2, [r2, #12]
 800478c:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	e029      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 24000000)&&(hclk < 27700000))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a45      	ldr	r2, [pc, #276]	; (80048ac <HAL_PCD_IRQHandler+0x8d8>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d90c      	bls.n	80047b6 <HAL_PCD_IRQHandler+0x7e2>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a44      	ldr	r2, [pc, #272]	; (80048b0 <HAL_PCD_IRQHandler+0x8dc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d808      	bhi.n	80047b6 <HAL_PCD_IRQHandler+0x7e2>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	68d2      	ldr	r2, [r2, #12]
 80047ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b2:	60da      	str	r2, [r3, #12]
 80047b4:	e018      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 27700000)&&(hclk < 32000000))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a3d      	ldr	r2, [pc, #244]	; (80048b0 <HAL_PCD_IRQHandler+0x8dc>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d90c      	bls.n	80047d8 <HAL_PCD_IRQHandler+0x804>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a3c      	ldr	r2, [pc, #240]	; (80048b4 <HAL_PCD_IRQHandler+0x8e0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d808      	bhi.n	80047d8 <HAL_PCD_IRQHandler+0x804>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	68d2      	ldr	r2, [r2, #12]
 80047d0:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	e007      	b.n	80047e8 <HAL_PCD_IRQHandler+0x814>
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	68d2      	ldr	r2, [r2, #12]
 80047e2:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80047e6:	60da      	str	r2, [r3, #12]
        }
      }

      HAL_PCD_ResetCallback(hpcd);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f007 faf4 	bl	800bdd6 <HAL_PCD_ResetCallback>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f003 fdcf 	bl	80083a0 <USB_ReadInterrupts>
 8004802:	4603      	mov	r3, r0
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b10      	cmp	r3, #16
 800480a:	d174      	bne.n	80048f6 <HAL_PCD_IRQHandler+0x922>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	6992      	ldr	r2, [r2, #24]
 8004816:	f022 0210 	bic.w	r2, r2, #16
 800481a:	619a      	str	r2, [r3, #24]
      temp = USBx->GRXSTSP;
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	617b      	str	r3, [r7, #20]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 020f 	and.w	r2, r3, #15
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	4413      	add	r3, r2
 8004838:	613b      	str	r3, [r7, #16]

      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	0c5b      	lsrs	r3, r3, #17
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	2b02      	cmp	r3, #2
 8004844:	d138      	bne.n	80048b8 <HAL_PCD_IRQHandler+0x8e4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d049      	beq.n	80048e6 <HAL_PCD_IRQHandler+0x912>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	68d9      	ldr	r1, [r3, #12]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	b29b      	uxth	r3, r3
 800485c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004860:	b29b      	uxth	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	6a38      	ldr	r0, [r7, #32]
 8004866:	f003 fc3f 	bl	80080e8 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004876:	441a      	add	r2, r3
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	091b      	lsrs	r3, r3, #4
 8004884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004888:	441a      	add	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	619a      	str	r2, [r3, #24]
 800488e:	e02a      	b.n	80048e6 <HAL_PCD_IRQHandler+0x912>
 8004890:	00d8acbf 	.word	0x00d8acbf
 8004894:	00e4e1bf 	.word	0x00e4e1bf
 8004898:	00f423ff 	.word	0x00f423ff
 800489c:	0106737f 	.word	0x0106737f
 80048a0:	011a499f 	.word	0x011a499f
 80048a4:	01312cff 	.word	0x01312cff
 80048a8:	014ca43f 	.word	0x014ca43f
 80048ac:	016e35ff 	.word	0x016e35ff
 80048b0:	01a6ab1f 	.word	0x01a6ab1f
 80048b4:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	0c5b      	lsrs	r3, r3, #17
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	2b06      	cmp	r3, #6
 80048c2:	d110      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x912>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80048ca:	2208      	movs	r2, #8
 80048cc:	4619      	mov	r1, r3
 80048ce:	6a38      	ldr	r0, [r7, #32]
 80048d0:	f003 fc0a 	bl	80080e8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	091b      	lsrs	r3, r3, #4
 80048dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048e0:	441a      	add	r2, r3
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	6992      	ldr	r2, [r2, #24]
 80048f0:	f042 0210 	orr.w	r2, r2, #16
 80048f4:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f003 fd50 	bl	80083a0 <USB_ReadInterrupts>
 8004900:	4603      	mov	r3, r0
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b08      	cmp	r3, #8
 8004908:	d106      	bne.n	8004918 <HAL_PCD_IRQHandler+0x944>
    {
      HAL_PCD_SOFCallback(hpcd);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f007 fa55 	bl	800bdba <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2208      	movs	r2, #8
 8004916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f003 fd3f 	bl	80083a0 <USB_ReadInterrupts>
 8004922:	4603      	mov	r3, r0
 8004924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492c:	d10a      	bne.n	8004944 <HAL_PCD_IRQHandler+0x970>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	b2db      	uxtb	r3, r3
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f007 fabf 	bl	800beb8 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f003 fd29 	bl	80083a0 <USB_ReadInterrupts>
 800494e:	4603      	mov	r3, r0
 8004950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004958:	d10a      	bne.n	8004970 <HAL_PCD_IRQHandler+0x99c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	b2db      	uxtb	r3, r3
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f007 fa97 	bl	800be94 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800496e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f003 fd13 	bl	80083a0 <USB_ReadInterrupts>
 800497a:	4603      	mov	r3, r0
 800497c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004984:	d107      	bne.n	8004996 <HAL_PCD_IRQHandler+0x9c2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f007 faa8 	bl	800bedc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f003 fd00 	bl	80083a0 <USB_ReadInterrupts>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d115      	bne.n	80049d6 <HAL_PCD_IRQHandler+0xa02>
    {
      temp = hpcd->Instance->GOTGINT;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	617b      	str	r3, [r7, #20]

      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_PCD_IRQHandler+0x9ee>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f007 fa9b 	bl	800bef8 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	6851      	ldr	r1, [r2, #4]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	e000      	b.n	80049d6 <HAL_PCD_IRQHandler+0xa02>
      return;
 80049d4:	bf00      	nop
    }
  }
}
 80049d6:	3730      	adds	r7, #48	; 0x30
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_PCD_SetAddress+0x1a>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e00f      	b.n	8004a16 <HAL_PCD_SetAddress+0x3a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	4611      	mov	r1, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f003 fc76 	bl	80082f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	4608      	mov	r0, r1
 8004a28:	4611      	mov	r1, r2
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	70fb      	strb	r3, [r7, #3]
 8004a30:	460b      	mov	r3, r1
 8004a32:	803b      	strh	r3, [r7, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8004a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	da0b      	bge.n	8004a5c <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	3338      	adds	r3, #56	; 0x38
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	4413      	add	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e00b      	b.n	8004a74 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a62:	4613      	mov	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8004a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	09db      	lsrs	r3, r3, #7
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8004a90:	883a      	ldrh	r2, [r7, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	78ba      	ldrb	r2, [r7, #2]
 8004a9a:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d004      	beq.n	8004aae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8004aae:	78bb      	ldrb	r3, [r7, #2]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d102      	bne.n	8004aba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_PCD_EP_Open+0xaa>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e00e      	b.n	8004ae6 <HAL_PCD_EP_Open+0xc8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68f9      	ldr	r1, [r7, #12]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f002 fe2a 	bl	8007730 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 8004ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	460b      	mov	r3, r1
 8004af8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8004afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da0b      	bge.n	8004b1a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b08:	4613      	mov	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	3338      	adds	r3, #56	; 0x38
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	4413      	add	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e00b      	b.n	8004b32 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4413      	add	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8004b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	09db      	lsrs	r3, r3, #7
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_PCD_EP_Close+0x6e>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e00e      	b.n	8004b7a <HAL_PCD_EP_Close+0x8c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f002 fe68 	bl	8007840 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b086      	sub	sp, #24
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004b92:	7afb      	ldrb	r3, [r7, #11]
 8004b94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b98:	4613      	mov	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8004bc2:	7afb      	ldrb	r3, [r7, #11]
 8004bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d102      	bne.n	8004bdc <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8004bdc:	7afb      	ldrb	r3, [r7, #11]
 8004bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6979      	ldr	r1, [r7, #20]
 8004bf4:	f003 f8e4 	bl	8007dc0 <USB_EP0StartXfer>
 8004bf8:	e008      	b.n	8004c0c <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	6979      	ldr	r1, [r7, #20]
 8004c08:	f002 fe96 	bl	8007938 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	460b      	mov	r3, r1
 8004c56:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004c58:	7afb      	ldrb	r3, [r7, #11]
 8004c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c5e:	4613      	mov	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	3338      	adds	r3, #56	; 0x38
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2201      	movs	r2, #1
 8004c84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8004c86:	7afb      	ldrb	r3, [r7, #11]
 8004c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d102      	bne.n	8004ca0 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8004ca0:	7afb      	ldrb	r3, [r7, #11]
 8004ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6979      	ldr	r1, [r7, #20]
 8004cb8:	f003 f882 	bl	8007dc0 <USB_EP0StartXfer>
 8004cbc:	e008      	b.n	8004cd0 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6979      	ldr	r1, [r7, #20]
 8004ccc:	f002 fe34 	bl	8007938 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	f003 020f 	and.w	r2, r3, #15
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d901      	bls.n	8004cf8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e050      	b.n	8004d9a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80 & ep_addr) == 0x80)
 8004cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	da0b      	bge.n	8004d18 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	3338      	adds	r3, #56	; 0x38
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4413      	add	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e009      	b.n	8004d2c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	09db      	lsrs	r3, r3, #7
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	705a      	strb	r2, [r3, #1]


  __HAL_LOCK(hpcd);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_PCD_EP_SetStall+0x82>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e01e      	b.n	8004d9a <HAL_PCD_EP_SetStall+0xc0>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68f9      	ldr	r1, [r7, #12]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f003 f9e6 	bl	800813c <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <HAL_PCD_EP_SetStall+0xb6>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	b2d9      	uxtb	r1, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f003 fbd8 	bl	8008540 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	460b      	mov	r3, r1
 8004dac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	f003 020f 	and.w	r2, r3, #15
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d901      	bls.n	8004dc0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e040      	b.n	8004e42 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80 & ep_addr) == 0x80)
 8004dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	da0b      	bge.n	8004de0 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	3338      	adds	r3, #56	; 0x38
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	4413      	add	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e009      	b.n	8004df4 <HAL_PCD_EP_ClrStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	4613      	mov	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	4413      	add	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 0;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	09db      	lsrs	r3, r3, #7
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_PCD_EP_ClrStall+0x82>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e00e      	b.n	8004e42 <HAL_PCD_EP_ClrStall+0xa0>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68f9      	ldr	r1, [r7, #12]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f003 f9f3 	bl	800821e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b08a      	sub	sp, #40	; 0x28
 8004e4e:	af02      	add	r7, sp, #8
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	3338      	adds	r3, #56	; 0x38
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4413      	add	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d202      	bcs.n	8004e90 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	61fb      	str	r3, [r7, #28]
  }


  len32b = (len + 3) / 4;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	3303      	adds	r3, #3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	da00      	bge.n	8004e9a <PCD_WriteEmptyTxFifo+0x50>
 8004e98:	3303      	adds	r3, #3
 8004e9a:	109b      	asrs	r3, r3, #2
 8004e9c:	61bb      	str	r3, [r7, #24]

  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004e9e:	e02e      	b.n	8004efe <PCD_WriteEmptyTxFifo+0xb4>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	695a      	ldr	r2, [r3, #20]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d202      	bcs.n	8004ebc <PCD_WriteEmptyTxFifo+0x72>
    {
      len = ep->maxpacket;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3) / 4;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	3303      	adds	r3, #3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	da00      	bge.n	8004ec6 <PCD_WriteEmptyTxFifo+0x7c>
 8004ec4:	3303      	adds	r3, #3
 8004ec6:	109b      	asrs	r3, r3, #2
 8004ec8:	61bb      	str	r3, [r7, #24]

    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	68d9      	ldr	r1, [r3, #12]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	b298      	uxth	r0, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	4603      	mov	r3, r0
 8004ee0:	6978      	ldr	r0, [r7, #20]
 8004ee2:	f003 f8c9 	bl	8008078 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	441a      	add	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	441a      	add	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	619a      	str	r2, [r3, #24]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d909      	bls.n	8004f28 <PCD_WriteEmptyTxFifo+0xde>
          ep->xfer_count < ep->xfer_len &&
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	695b      	ldr	r3, [r3, #20]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d203      	bcs.n	8004f28 <PCD_WriteEmptyTxFifo+0xde>
            ep->xfer_len != 0)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1bb      	bne.n	8004ea0 <PCD_WriteEmptyTxFifo+0x56>
  }

  if(len <= 0)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	dc10      	bgt.n	8004f50 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = 0x1 << epnum;
 8004f2e:	2201      	movs	r2, #1
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3e:	4619      	mov	r1, r3
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	634b      	str	r3, [r1, #52]	; 0x34

  }

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	460b      	mov	r3, r1
 8004f64:	70fb      	strb	r3, [r7, #3]
 8004f66:	4613      	mov	r3, r2
 8004f68:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d107      	bne.n	8004f90 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	883a      	ldrh	r2, [r7, #0]
 8004f86:	0411      	lsls	r1, r2, #16
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	629a      	str	r2, [r3, #40]	; 0x28
 8004f8e:	e028      	b.n	8004fe2 <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	0c1b      	lsrs	r3, r3, #16
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	73fb      	strb	r3, [r7, #15]
 8004fa2:	e00d      	b.n	8004fc0 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	3340      	adds	r3, #64	; 0x40
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	0c1b      	lsrs	r3, r3, #16
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
 8004fc0:	7bfa      	ldrb	r2, [r7, #15]
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	dbec      	blt.n	8004fa4 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6819      	ldr	r1, [r3, #0]
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	883a      	ldrh	r2, [r7, #0]
 8004fd4:	0410      	lsls	r0, r2, #16
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	4302      	orrs	r2, r0
 8004fda:	3340      	adds	r3, #64	; 0x40
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	887a      	ldrh	r2, [r7, #2]
 8005002:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM Feature
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60fb      	str	r3, [r7, #12]
  
  hpcd->lpm_active = ENABLE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005042:	4b05      	ldr	r3, [pc, #20]	; (8005058 <HAL_PCDEx_ActivateLPM+0x44>)
 8005044:	4313      	orrs	r3, r2
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	10000003 	.word	0x10000003

0800505c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005066:	4a23      	ldr	r2, [pc, #140]	; (80050f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005068:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005070:	6413      	str	r3, [r2, #64]	; 0x40
 8005072:	4b20      	ldr	r3, [pc, #128]	; (80050f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005080:	4b1d      	ldr	r3, [pc, #116]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005088:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800508a:	f7fc fdd1 	bl	8001c30 <HAL_GetTick>
 800508e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005090:	e009      	b.n	80050a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005092:	f7fc fdcd 	bl	8001c30 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050a0:	d901      	bls.n	80050a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e022      	b.n	80050ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b2:	d1ee      	bne.n	8005092 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80050b4:	4a10      	ldr	r2, [pc, #64]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050c0:	f7fc fdb6 	bl	8001c30 <HAL_GetTick>
 80050c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050c6:	e009      	b.n	80050dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050c8:	f7fc fdb2 	bl	8001c30 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050d6:	d901      	bls.n	80050dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e007      	b.n	80050ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050e8:	d1ee      	bne.n	80050c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40023800 	.word	0x40023800
 80050f8:	40007000 	.word	0x40007000

080050fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005104:	2300      	movs	r3, #0
 8005106:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e25c      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8087 	beq.w	800522e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005120:	4b96      	ldr	r3, [pc, #600]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b04      	cmp	r3, #4
 800512a:	d00c      	beq.n	8005146 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800512c:	4b93      	ldr	r3, [pc, #588]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 030c 	and.w	r3, r3, #12
 8005134:	2b08      	cmp	r3, #8
 8005136:	d112      	bne.n	800515e <HAL_RCC_OscConfig+0x62>
 8005138:	4b90      	ldr	r3, [pc, #576]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005144:	d10b      	bne.n	800515e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005146:	4b8d      	ldr	r3, [pc, #564]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d06c      	beq.n	800522c <HAL_RCC_OscConfig+0x130>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d168      	bne.n	800522c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e236      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x7a>
 8005168:	4a84      	ldr	r2, [pc, #528]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800516a:	4b84      	ldr	r3, [pc, #528]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e02e      	b.n	80051d4 <HAL_RCC_OscConfig+0xd8>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0x9c>
 800517e:	4a7f      	ldr	r2, [pc, #508]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005180:	4b7e      	ldr	r3, [pc, #504]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	4a7c      	ldr	r2, [pc, #496]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800518c:	4b7b      	ldr	r3, [pc, #492]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e01d      	b.n	80051d4 <HAL_RCC_OscConfig+0xd8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051a0:	d10c      	bne.n	80051bc <HAL_RCC_OscConfig+0xc0>
 80051a2:	4a76      	ldr	r2, [pc, #472]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051a4:	4b75      	ldr	r3, [pc, #468]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	4a73      	ldr	r2, [pc, #460]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051b0:	4b72      	ldr	r3, [pc, #456]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e00b      	b.n	80051d4 <HAL_RCC_OscConfig+0xd8>
 80051bc:	4a6f      	ldr	r2, [pc, #444]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051be:	4b6f      	ldr	r3, [pc, #444]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	4a6c      	ldr	r2, [pc, #432]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051ca:	4b6c      	ldr	r3, [pc, #432]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d013      	beq.n	8005204 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fc fd28 	bl	8001c30 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051e4:	f7fc fd24 	bl	8001c30 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e1ea      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f6:	4b61      	ldr	r3, [pc, #388]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0xe8>
 8005202:	e014      	b.n	800522e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fc fd14 	bl	8001c30 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800520c:	f7fc fd10 	bl	8001c30 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b64      	cmp	r3, #100	; 0x64
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e1d6      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800521e:	4b57      	ldr	r3, [pc, #348]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f0      	bne.n	800520c <HAL_RCC_OscConfig+0x110>
 800522a:	e000      	b.n	800522e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d069      	beq.n	800530e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800523a:	4b50      	ldr	r3, [pc, #320]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00b      	beq.n	800525e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005246:	4b4d      	ldr	r3, [pc, #308]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b08      	cmp	r3, #8
 8005250:	d11c      	bne.n	800528c <HAL_RCC_OscConfig+0x190>
 8005252:	4b4a      	ldr	r3, [pc, #296]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d116      	bne.n	800528c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525e:	4b47      	ldr	r3, [pc, #284]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <HAL_RCC_OscConfig+0x17a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d001      	beq.n	8005276 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e1aa      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005276:	4941      	ldr	r1, [pc, #260]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005278:	4b40      	ldr	r3, [pc, #256]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800528a:	e040      	b.n	800530e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d023      	beq.n	80052dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005294:	4a39      	ldr	r2, [pc, #228]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005296:	4b39      	ldr	r3, [pc, #228]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7fc fcc6 	bl	8001c30 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052a8:	f7fc fcc2 	bl	8001c30 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e188      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ba:	4b30      	ldr	r3, [pc, #192]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c6:	492d      	ldr	r1, [pc, #180]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052c8:	4b2c      	ldr	r3, [pc, #176]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4313      	orrs	r3, r2
 80052d8:	600b      	str	r3, [r1, #0]
 80052da:	e018      	b.n	800530e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052dc:	4a27      	ldr	r2, [pc, #156]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052de:	4b27      	ldr	r3, [pc, #156]	; (800537c <HAL_RCC_OscConfig+0x280>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 0301 	bic.w	r3, r3, #1
 80052e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fc fca2 	bl	8001c30 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052f0:	f7fc fc9e 	bl	8001c30 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e164      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d038      	beq.n	800538c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d019      	beq.n	8005356 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005322:	4a16      	ldr	r2, [pc, #88]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005324:	4b15      	ldr	r3, [pc, #84]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532e:	f7fc fc7f 	bl	8001c30 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005336:	f7fc fc7b 	bl	8001c30 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e141      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005348:	4b0c      	ldr	r3, [pc, #48]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800534a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f0      	beq.n	8005336 <HAL_RCC_OscConfig+0x23a>
 8005354:	e01a      	b.n	800538c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <HAL_RCC_OscConfig+0x280>)
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <HAL_RCC_OscConfig+0x280>)
 800535a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fc fc65 	bl	8001c30 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005368:	e00a      	b.n	8005380 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800536a:	f7fc fc61 	bl	8001c30 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d903      	bls.n	8005380 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e127      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
 800537c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005380:	4b94      	ldr	r3, [pc, #592]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1ee      	bne.n	800536a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80a4 	beq.w	80054e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800539a:	4b8e      	ldr	r3, [pc, #568]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10d      	bne.n	80053c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80053a6:	4a8b      	ldr	r2, [pc, #556]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80053a8:	4b8a      	ldr	r3, [pc, #552]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b0:	6413      	str	r3, [r2, #64]	; 0x40
 80053b2:	4b88      	ldr	r3, [pc, #544]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053c2:	4b85      	ldr	r3, [pc, #532]	; (80055d8 <HAL_RCC_OscConfig+0x4dc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d118      	bne.n	8005400 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80053ce:	4a82      	ldr	r2, [pc, #520]	; (80055d8 <HAL_RCC_OscConfig+0x4dc>)
 80053d0:	4b81      	ldr	r3, [pc, #516]	; (80055d8 <HAL_RCC_OscConfig+0x4dc>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053da:	f7fc fc29 	bl	8001c30 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053e2:	f7fc fc25 	bl	8001c30 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b64      	cmp	r3, #100	; 0x64
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e0eb      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053f4:	4b78      	ldr	r3, [pc, #480]	; (80055d8 <HAL_RCC_OscConfig+0x4dc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d106      	bne.n	8005416 <HAL_RCC_OscConfig+0x31a>
 8005408:	4a72      	ldr	r2, [pc, #456]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800540a:	4b72      	ldr	r3, [pc, #456]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	6713      	str	r3, [r2, #112]	; 0x70
 8005414:	e02d      	b.n	8005472 <HAL_RCC_OscConfig+0x376>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10c      	bne.n	8005438 <HAL_RCC_OscConfig+0x33c>
 800541e:	4a6d      	ldr	r2, [pc, #436]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005420:	4b6c      	ldr	r3, [pc, #432]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	6713      	str	r3, [r2, #112]	; 0x70
 800542a:	4a6a      	ldr	r2, [pc, #424]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800542c:	4b69      	ldr	r3, [pc, #420]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800542e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005430:	f023 0304 	bic.w	r3, r3, #4
 8005434:	6713      	str	r3, [r2, #112]	; 0x70
 8005436:	e01c      	b.n	8005472 <HAL_RCC_OscConfig+0x376>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b05      	cmp	r3, #5
 800543e:	d10c      	bne.n	800545a <HAL_RCC_OscConfig+0x35e>
 8005440:	4a64      	ldr	r2, [pc, #400]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005442:	4b64      	ldr	r3, [pc, #400]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	f043 0304 	orr.w	r3, r3, #4
 800544a:	6713      	str	r3, [r2, #112]	; 0x70
 800544c:	4a61      	ldr	r2, [pc, #388]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800544e:	4b61      	ldr	r3, [pc, #388]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	6713      	str	r3, [r2, #112]	; 0x70
 8005458:	e00b      	b.n	8005472 <HAL_RCC_OscConfig+0x376>
 800545a:	4a5e      	ldr	r2, [pc, #376]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800545c:	4b5d      	ldr	r3, [pc, #372]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	6713      	str	r3, [r2, #112]	; 0x70
 8005466:	4a5b      	ldr	r2, [pc, #364]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005468:	4b5a      	ldr	r3, [pc, #360]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800546a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546c:	f023 0304 	bic.w	r3, r3, #4
 8005470:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d015      	beq.n	80054a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547a:	f7fc fbd9 	bl	8001c30 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005480:	e00a      	b.n	8005498 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7fc fbd5 	bl	8001c30 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e099      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005498:	4b4e      	ldr	r3, [pc, #312]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0ee      	beq.n	8005482 <HAL_RCC_OscConfig+0x386>
 80054a4:	e014      	b.n	80054d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a6:	f7fc fbc3 	bl	8001c30 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ac:	e00a      	b.n	80054c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ae:	f7fc fbbf 	bl	8001c30 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e083      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054c4:	4b43      	ldr	r3, [pc, #268]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1ee      	bne.n	80054ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054d0:	7dfb      	ldrb	r3, [r7, #23]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d105      	bne.n	80054e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d6:	4a3f      	ldr	r2, [pc, #252]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80054d8:	4b3e      	ldr	r3, [pc, #248]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d06f      	beq.n	80055ca <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054ea:	4b3a      	ldr	r3, [pc, #232]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 030c 	and.w	r3, r3, #12
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d067      	beq.n	80055c6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d149      	bne.n	8005592 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fe:	4a35      	ldr	r2, [pc, #212]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005500:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550a:	f7fc fb91 	bl	8001c30 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005512:	f7fc fb8d 	bl	8001c30 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e053      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005524:	4b2b      	ldr	r3, [pc, #172]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f0      	bne.n	8005512 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005530:	4928      	ldr	r1, [pc, #160]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	3b01      	subs	r3, #1
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	4313      	orrs	r3, r2
 8005558:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800555c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800555e:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005560:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556a:	f7fc fb61 	bl	8001c30 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005572:	f7fc fb5d 	bl	8001c30 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e023      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005584:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x476>
 8005590:	e01b      	b.n	80055ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005592:	4a10      	ldr	r2, [pc, #64]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005594:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800559c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559e:	f7fc fb47 	bl	8001c30 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055a6:	f7fc fb43 	bl	8001c30 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e009      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b8:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <HAL_RCC_OscConfig+0x4d8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f0      	bne.n	80055a6 <HAL_RCC_OscConfig+0x4aa>
 80055c4:	e001      	b.n	80055ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40007000 	.word	0x40007000

080055dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0ce      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055f4:	4b69      	ldr	r3, [pc, #420]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 020f 	and.w	r2, r3, #15
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d210      	bcs.n	8005624 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	4966      	ldr	r1, [pc, #408]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	4b65      	ldr	r3, [pc, #404]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f023 020f 	bic.w	r2, r3, #15
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	4b62      	ldr	r3, [pc, #392]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 020f 	and.w	r2, r3, #15
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e0b6      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d020      	beq.n	8005672 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800563c:	4a58      	ldr	r2, [pc, #352]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800563e:	4b58      	ldr	r3, [pc, #352]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005646:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005654:	4a52      	ldr	r2, [pc, #328]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005656:	4b52      	ldr	r3, [pc, #328]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800565e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005660:	494f      	ldr	r1, [pc, #316]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005662:	4b4f      	ldr	r3, [pc, #316]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d040      	beq.n	8005700 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d107      	bne.n	8005696 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005686:	4b46      	ldr	r3, [pc, #280]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d115      	bne.n	80056be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e07d      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800569e:	4b40      	ldr	r3, [pc, #256]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e071      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ae:	4b3c      	ldr	r3, [pc, #240]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e069      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056be:	4938      	ldr	r1, [pc, #224]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056c0:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f023 0203 	bic.w	r2, r3, #3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d0:	f7fc faae 	bl	8001c30 <HAL_GetTick>
 80056d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d8:	f7fc faaa 	bl	8001c30 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e051      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ee:	4b2c      	ldr	r3, [pc, #176]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 020c 	and.w	r2, r3, #12
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d1eb      	bne.n	80056d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005700:	4b26      	ldr	r3, [pc, #152]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 020f 	and.w	r2, r3, #15
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d910      	bls.n	8005730 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570e:	4923      	ldr	r1, [pc, #140]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005710:	4b22      	ldr	r3, [pc, #136]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f023 020f 	bic.w	r2, r3, #15
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b1f      	ldr	r3, [pc, #124]	; (800579c <HAL_RCC_ClockConfig+0x1c0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 020f 	and.w	r2, r3, #15
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e030      	b.n	8005792 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800573c:	4918      	ldr	r1, [pc, #96]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800573e:	4b18      	ldr	r3, [pc, #96]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800575a:	4911      	ldr	r1, [pc, #68]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4313      	orrs	r3, r2
 800576c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800576e:	f000 f81d 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8005772:	4601      	mov	r1, r0
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	091b      	lsrs	r3, r3, #4
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	4a09      	ldr	r2, [pc, #36]	; (80057a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005780:	5cd3      	ldrb	r3, [r2, r3]
 8005782:	fa21 f303 	lsr.w	r3, r1, r3
 8005786:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <HAL_RCC_ClockConfig+0x1cc>)
 8005788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800578a:	2000      	movs	r0, #0
 800578c:	f006 f8e0 	bl	800b950 <HAL_InitTick>

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40023c00 	.word	0x40023c00
 80057a0:	40023800 	.word	0x40023800
 80057a4:	080122cc 	.word	0x080122cc
 80057a8:	20000124 	.word	0x20000124

080057ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b0:	b087      	sub	sp, #28
 80057b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80057b4:	2200      	movs	r2, #0
 80057b6:	60fa      	str	r2, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	617a      	str	r2, [r7, #20]
 80057bc:	2200      	movs	r2, #0
 80057be:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 80057c0:	2200      	movs	r2, #0
 80057c2:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057c4:	4a51      	ldr	r2, [pc, #324]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80057c6:	6892      	ldr	r2, [r2, #8]
 80057c8:	f002 020c 	and.w	r2, r2, #12
 80057cc:	2a04      	cmp	r2, #4
 80057ce:	d007      	beq.n	80057e0 <HAL_RCC_GetSysClockFreq+0x34>
 80057d0:	2a08      	cmp	r2, #8
 80057d2:	d008      	beq.n	80057e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80057d4:	2a00      	cmp	r2, #0
 80057d6:	f040 8090 	bne.w	80058fa <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057da:	4b4d      	ldr	r3, [pc, #308]	; (8005910 <HAL_RCC_GetSysClockFreq+0x164>)
 80057dc:	613b      	str	r3, [r7, #16]
       break;
 80057de:	e08f      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057e0:	4b4c      	ldr	r3, [pc, #304]	; (8005914 <HAL_RCC_GetSysClockFreq+0x168>)
 80057e2:	613b      	str	r3, [r7, #16]
      break;
 80057e4:	e08c      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057e6:	4a49      	ldr	r2, [pc, #292]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80057e8:	6852      	ldr	r2, [r2, #4]
 80057ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80057ee:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80057f0:	4a46      	ldr	r2, [pc, #280]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80057f2:	6852      	ldr	r2, [r2, #4]
 80057f4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80057f8:	2a00      	cmp	r2, #0
 80057fa:	d023      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057fc:	4b43      	ldr	r3, [pc, #268]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	099b      	lsrs	r3, r3, #6
 8005802:	f04f 0400 	mov.w	r4, #0
 8005806:	f240 11ff 	movw	r1, #511	; 0x1ff
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	ea03 0301 	and.w	r3, r3, r1
 8005812:	ea04 0402 	and.w	r4, r4, r2
 8005816:	4a3f      	ldr	r2, [pc, #252]	; (8005914 <HAL_RCC_GetSysClockFreq+0x168>)
 8005818:	fb02 f104 	mul.w	r1, r2, r4
 800581c:	2200      	movs	r2, #0
 800581e:	fb02 f203 	mul.w	r2, r2, r3
 8005822:	440a      	add	r2, r1
 8005824:	493b      	ldr	r1, [pc, #236]	; (8005914 <HAL_RCC_GetSysClockFreq+0x168>)
 8005826:	fba3 0101 	umull	r0, r1, r3, r1
 800582a:	1853      	adds	r3, r2, r1
 800582c:	4619      	mov	r1, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f04f 0400 	mov.w	r4, #0
 8005834:	461a      	mov	r2, r3
 8005836:	4623      	mov	r3, r4
 8005838:	f7fb fa52 	bl	8000ce0 <__aeabi_uldivmod>
 800583c:	4603      	mov	r3, r0
 800583e:	460c      	mov	r4, r1
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	e04c      	b.n	80058de <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005844:	4a31      	ldr	r2, [pc, #196]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 8005846:	6852      	ldr	r2, [r2, #4]
 8005848:	0992      	lsrs	r2, r2, #6
 800584a:	4611      	mov	r1, r2
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f240 15ff 	movw	r5, #511	; 0x1ff
 8005854:	f04f 0600 	mov.w	r6, #0
 8005858:	ea05 0501 	and.w	r5, r5, r1
 800585c:	ea06 0602 	and.w	r6, r6, r2
 8005860:	4629      	mov	r1, r5
 8005862:	4632      	mov	r2, r6
 8005864:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8005868:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 800586c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8005870:	4651      	mov	r1, sl
 8005872:	465a      	mov	r2, fp
 8005874:	46aa      	mov	sl, r5
 8005876:	46b3      	mov	fp, r6
 8005878:	4655      	mov	r5, sl
 800587a:	465e      	mov	r6, fp
 800587c:	1b4d      	subs	r5, r1, r5
 800587e:	eb62 0606 	sbc.w	r6, r2, r6
 8005882:	4629      	mov	r1, r5
 8005884:	4632      	mov	r2, r6
 8005886:	0194      	lsls	r4, r2, #6
 8005888:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800588c:	018b      	lsls	r3, r1, #6
 800588e:	1a5b      	subs	r3, r3, r1
 8005890:	eb64 0402 	sbc.w	r4, r4, r2
 8005894:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8005898:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800589c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80058a0:	4643      	mov	r3, r8
 80058a2:	464c      	mov	r4, r9
 80058a4:	4655      	mov	r5, sl
 80058a6:	465e      	mov	r6, fp
 80058a8:	18ed      	adds	r5, r5, r3
 80058aa:	eb46 0604 	adc.w	r6, r6, r4
 80058ae:	462b      	mov	r3, r5
 80058b0:	4634      	mov	r4, r6
 80058b2:	02a2      	lsls	r2, r4, #10
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	029b      	lsls	r3, r3, #10
 80058c0:	603b      	str	r3, [r7, #0]
 80058c2:	e897 0018 	ldmia.w	r7, {r3, r4}
 80058c6:	4618      	mov	r0, r3
 80058c8:	4621      	mov	r1, r4
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f04f 0400 	mov.w	r4, #0
 80058d0:	461a      	mov	r2, r3
 80058d2:	4623      	mov	r3, r4
 80058d4:	f7fb fa04 	bl	8000ce0 <__aeabi_uldivmod>
 80058d8:	4603      	mov	r3, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <HAL_RCC_GetSysClockFreq+0x160>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	0c1b      	lsrs	r3, r3, #16
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	3301      	adds	r3, #1
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f6:	613b      	str	r3, [r7, #16]
      break;
 80058f8:	e002      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <HAL_RCC_GetSysClockFreq+0x164>)
 80058fc:	613b      	str	r3, [r7, #16]
      break;
 80058fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005900:	693b      	ldr	r3, [r7, #16]
}
 8005902:	4618      	mov	r0, r3
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590c:	40023800 	.word	0x40023800
 8005910:	00f42400 	.word	0x00f42400
 8005914:	017d7840 	.word	0x017d7840

08005918 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800591c:	4b03      	ldr	r3, [pc, #12]	; (800592c <HAL_RCC_GetHCLKFreq+0x14>)
 800591e:	681b      	ldr	r3, [r3, #0]
}
 8005920:	4618      	mov	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000124 	.word	0x20000124

08005930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005934:	f7ff fff0 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005938:	4601      	mov	r1, r0
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	0a9b      	lsrs	r3, r3, #10
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4a03      	ldr	r2, [pc, #12]	; (8005954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005946:	5cd3      	ldrb	r3, [r2, r3]
 8005948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800594c:	4618      	mov	r0, r3
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40023800 	.word	0x40023800
 8005954:	080122dc 	.word	0x080122dc

08005958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800595c:	f7ff ffdc 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005960:	4601      	mov	r1, r0
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	0b5b      	lsrs	r3, r3, #13
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	4a03      	ldr	r2, [pc, #12]	; (800597c <HAL_RCC_GetPCLK2Freq+0x24>)
 800596e:	5cd3      	ldrb	r3, [r2, r3]
 8005970:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005974:	4618      	mov	r0, r3
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40023800 	.word	0x40023800
 800597c:	080122dc 	.word	0x080122dc

08005980 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	220f      	movs	r2, #15
 800598e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005990:	4b12      	ldr	r3, [pc, #72]	; (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0203 	and.w	r2, r3, #3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800599c:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80059a8:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80059b4:	4b09      	ldr	r3, [pc, #36]	; (80059dc <HAL_RCC_GetClockConfig+0x5c>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	08db      	lsrs	r3, r3, #3
 80059ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059c2:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <HAL_RCC_GetClockConfig+0x60>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 020f 	and.w	r2, r3, #15
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40023800 	.word	0x40023800
 80059e0:	40023c00 	.word	0x40023c00

080059e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d012      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a0c:	4a69      	ldr	r2, [pc, #420]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0e:	4b69      	ldr	r3, [pc, #420]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005a16:	6093      	str	r3, [r2, #8]
 8005a18:	4966      	ldr	r1, [pc, #408]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1a:	4b66      	ldr	r3, [pc, #408]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	4313      	orrs	r3, r2
 8005a24:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1; 
 8005a2e:	2301      	movs	r3, #1
 8005a30:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d017      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a3e:	495d      	ldr	r1, [pc, #372]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a40:	4b5c      	ldr	r3, [pc, #368]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a5c:	d101      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1; 
 8005a5e:	2301      	movs	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1; 
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d017      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a7a:	494e      	ldr	r1, [pc, #312]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7c:	4b4d      	ldr	r3, [pc, #308]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a98:	d101      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1; 
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1; 
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {    
      plli2sused = 1; 
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 808b 	beq.w	8005bde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ac8:	4a3a      	ldr	r2, [pc, #232]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aca:	4b3a      	ldr	r3, [pc, #232]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad4:	4b37      	ldr	r3, [pc, #220]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ae0:	4a35      	ldr	r2, [pc, #212]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ae2:	4b35      	ldr	r3, [pc, #212]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aea:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aec:	f7fc f8a0 	bl	8001c30 <HAL_GetTick>
 8005af0:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af4:	f7fc f89c 	bl	8001c30 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b64      	cmp	r3, #100	; 0x64
 8005b00:	d901      	bls.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e355      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b06:	4b2c      	ldr	r3, [pc, #176]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b12:	4b28      	ldr	r3, [pc, #160]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d035      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b26:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d02e      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b30:	4b20      	ldr	r3, [pc, #128]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b3a:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b46:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b52:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b58:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d014      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fc f864 	bl	8001c30 <HAL_GetTick>
 8005b68:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b6c:	f7fc f860 	bl	8001c30 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e317      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0ee      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b9a:	d111      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005b9c:	4805      	ldr	r0, [pc, #20]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005baa:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bac:	400b      	ands	r3, r1
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	6083      	str	r3, [r0, #8]
 8005bb2:	e00b      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	40007000 	.word	0x40007000
 8005bbc:	0ffffcff 	.word	0x0ffffcff
 8005bc0:	4ab0      	ldr	r2, [pc, #704]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bc2:	4bb0      	ldr	r3, [pc, #704]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bca:	6093      	str	r3, [r2, #8]
 8005bcc:	49ad      	ldr	r1, [pc, #692]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bce:	4bad      	ldr	r3, [pc, #692]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d010      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bea:	4aa6      	ldr	r2, [pc, #664]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bec:	4ba5      	ldr	r3, [pc, #660]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bf6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bfa:	49a2      	ldr	r1, [pc, #648]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bfc:	4ba1      	ldr	r3, [pc, #644]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bfe:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c18:	499a      	ldr	r1, [pc, #616]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c1a:	4b9a      	ldr	r3, [pc, #616]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c3a:	4992      	ldr	r1, [pc, #584]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c3c:	4b91      	ldr	r3, [pc, #580]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c42:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c5c:	4989      	ldr	r1, [pc, #548]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c5e:	4b89      	ldr	r3, [pc, #548]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c7e:	4981      	ldr	r1, [pc, #516]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c80:	4b80      	ldr	r3, [pc, #512]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ca0:	4978      	ldr	r1, [pc, #480]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ca2:	4b78      	ldr	r3, [pc, #480]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca8:	f023 0203 	bic.w	r2, r3, #3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cc2:	4970      	ldr	r1, [pc, #448]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cc4:	4b6f      	ldr	r3, [pc, #444]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	f023 020c 	bic.w	r2, r3, #12
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ce4:	4967      	ldr	r1, [pc, #412]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ce6:	4b67      	ldr	r3, [pc, #412]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d06:	495f      	ldr	r1, [pc, #380]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d08:	4b5e      	ldr	r3, [pc, #376]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d28:	4956      	ldr	r1, [pc, #344]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d2a:	4b56      	ldr	r3, [pc, #344]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d4a:	494e      	ldr	r1, [pc, #312]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d4c:	4b4d      	ldr	r3, [pc, #308]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d6c:	4945      	ldr	r1, [pc, #276]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d6e:	4b45      	ldr	r3, [pc, #276]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d8e:	493d      	ldr	r1, [pc, #244]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d90:	4b3c      	ldr	r3, [pc, #240]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005db0:	4934      	ldr	r1, [pc, #208]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005db2:	4b34      	ldr	r3, [pc, #208]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d011      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005dd2:	492c      	ldr	r1, [pc, #176]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dd4:	4b2b      	ldr	r3, [pc, #172]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df0:	d101      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1; 
 8005df2:	2301      	movs	r3, #1
 8005df4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1; 
 8005e02:	2301      	movs	r3, #1
 8005e04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e12:	491c      	ldr	r1, [pc, #112]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e14:	4b1b      	ldr	r3, [pc, #108]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e34:	4913      	ldr	r1, [pc, #76]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e36:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d005      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e5a:	f040 80d8 	bne.w	800600e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8005e5e:	4a09      	ldr	r2, [pc, #36]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e60:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e68:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e6a:	f7fb fee1 	bl	8001c30 <HAL_GetTick>
 8005e6e:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e70:	e00a      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e72:	f7fb fedd 	bl	8001c30 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b64      	cmp	r3, #100	; 0x64
 8005e7e:	d903      	bls.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e196      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005e84:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e88:	4b6c      	ldr	r3, [pc, #432]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1ee      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x48e>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d021      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d11d      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ea8:	4b64      	ldr	r3, [pc, #400]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eae:	0c1b      	lsrs	r3, r3, #16
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005eb6:	4b61      	ldr	r3, [pc, #388]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ebc:	0e1b      	lsrs	r3, r3, #24
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ec4:	495d      	ldr	r1, [pc, #372]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	019a      	lsls	r2, r3, #6
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	041b      	lsls	r3, r3, #16
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	061b      	lsls	r3, r3, #24
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	071b      	lsls	r3, r3, #28
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef8:	d00a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d02e      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f0e:	d129      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f10:	4b4a      	ldr	r3, [pc, #296]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f1e:	4b47      	ldr	r3, [pc, #284]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f24:	0f1b      	lsrs	r3, r3, #28
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f2c:	4943      	ldr	r1, [pc, #268]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	019a      	lsls	r2, r3, #6
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	061b      	lsls	r3, r3, #24
 8005f40:	431a      	orrs	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	071b      	lsls	r3, r3, #28
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8005f4c:	493b      	ldr	r1, [pc, #236]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f4e:	4b3b      	ldr	r3, [pc, #236]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f54:	f023 021f 	bic.w	r2, r3, #31
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01d      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f70:	4b32      	ldr	r3, [pc, #200]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f76:	0e1b      	lsrs	r3, r3, #24
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f7e:	4b2f      	ldr	r3, [pc, #188]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f84:	0f1b      	lsrs	r3, r3, #28
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005f8c:	492b      	ldr	r1, [pc, #172]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	019a      	lsls	r2, r3, #6
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	041b      	lsls	r3, r3, #16
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	061b      	lsls	r3, r3, #24
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	071b      	lsls	r3, r3, #28
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d011      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fb8:	4920      	ldr	r1, [pc, #128]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	019a      	lsls	r2, r3, #6
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	061b      	lsls	r3, r3, #24
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	071b      	lsls	r3, r3, #28
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fdc:	4a17      	ldr	r2, [pc, #92]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fde:	4b17      	ldr	r3, [pc, #92]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fe6:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fe8:	f7fb fe22 	bl	8001c30 <HAL_GetTick>
 8005fec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ff0:	f7fb fe1e 	bl	8001c30 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b64      	cmp	r3, #100	; 0x64
 8005ffc:	d901      	bls.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e0d7      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006002:	4b0e      	ldr	r3, [pc, #56]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b01      	cmp	r3, #1
 8006012:	f040 80cd 	bne.w	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8006016:	4a09      	ldr	r2, [pc, #36]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006018:	4b08      	ldr	r3, [pc, #32]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006020:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006022:	f7fb fe05 	bl	8001c30 <HAL_GetTick>
 8006026:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006028:	e00a      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800602a:	f7fb fe01 	bl	8001c30 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b64      	cmp	r3, #100	; 0x64
 8006036:	d903      	bls.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e0ba      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800603c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006040:	4b5e      	ldr	r3, [pc, #376]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800604c:	d0ed      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x646>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800606a:	2b00      	cmp	r3, #0
 800606c:	d02e      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d12a      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006076:	4b51      	ldr	r3, [pc, #324]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006084:	4b4d      	ldr	r3, [pc, #308]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	0f1b      	lsrs	r3, r3, #28
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006092:	494a      	ldr	r1, [pc, #296]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	019a      	lsls	r2, r3, #6
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	041b      	lsls	r3, r3, #16
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	061b      	lsls	r3, r3, #24
 80060a6:	431a      	orrs	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	071b      	lsls	r3, r3, #28
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060b2:	4942      	ldr	r1, [pc, #264]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060b4:	4b41      	ldr	r3, [pc, #260]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	3b01      	subs	r3, #1
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d022      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060e0:	d11d      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060e2:	4b36      	ldr	r3, [pc, #216]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	0e1b      	lsrs	r3, r3, #24
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060f0:	4b32      	ldr	r3, [pc, #200]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	0f1b      	lsrs	r3, r3, #28
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80060fe:	492f      	ldr	r1, [pc, #188]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	019a      	lsls	r2, r3, #6
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	431a      	orrs	r2, r3
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	061b      	lsls	r3, r3, #24
 8006112:	431a      	orrs	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	071b      	lsls	r3, r3, #28
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d028      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800612a:	4b24      	ldr	r3, [pc, #144]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800612c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006130:	0e1b      	lsrs	r3, r3, #24
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006138:	4b20      	ldr	r3, [pc, #128]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	0c1b      	lsrs	r3, r3, #16
 8006140:	f003 0303 	and.w	r3, r3, #3
 8006144:	60fb      	str	r3, [r7, #12]
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006146:	491d      	ldr	r1, [pc, #116]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	019a      	lsls	r2, r3, #6
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	431a      	orrs	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	061b      	lsls	r3, r3, #24
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	071b      	lsls	r3, r3, #28
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006166:	4915      	ldr	r1, [pc, #84]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006168:	4b14      	ldr	r3, [pc, #80]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800616a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800616e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800617c:	4a0f      	ldr	r2, [pc, #60]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800617e:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006186:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006188:	f7fb fd52 	bl	8001c30 <HAL_GetTick>
 800618c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006190:	f7fb fd4e 	bl	8001c30 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b64      	cmp	r3, #100	; 0x64
 800619c:	d901      	bls.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e007      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ae:	d1ef      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3720      	adds	r7, #32
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40023800 	.word	0x40023800

080061c0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e025      	b.n	8006220 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d106      	bne.n	80061ee <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f005 fba7 	bl	800b93c <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f000 ff01 	bl	8007008 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	461a      	mov	r2, r3
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	f000 ff6b 	bl	80070ec <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d101      	bne.n	8006244 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006240:	2302      	movs	r3, #2
 8006242:	e018      	b.n	8006276 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 ffc9 	bl	80071ec <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d104      	bne.n	800626c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2205      	movs	r2, #5
 8006266:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800626a:	e003      	b.n	8006274 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e01d      	b.n	80062cc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d106      	bne.n	80062aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f815 	bl	80062d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4619      	mov	r1, r3
 80062bc:	4610      	mov	r0, r2
 80062be:	f000 f975 	bl	80065ac <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	68d2      	ldr	r2, [r2, #12]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	6812      	ldr	r2, [r2, #0]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b02      	cmp	r3, #2
 8006332:	d122      	bne.n	800637a <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b02      	cmp	r3, #2
 8006340:	d11b      	bne.n	800637a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f06f 0202 	mvn.w	r2, #2
 800634a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f905 	bl	8006570 <HAL_TIM_IC_CaptureCallback>
 8006366:	e005      	b.n	8006374 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f8f7 	bl	800655c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f908 	bl	8006584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d122      	bne.n	80063ce <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b04      	cmp	r3, #4
 8006394:	d11b      	bne.n	80063ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f06f 0204 	mvn.w	r2, #4
 800639e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f8db 	bl	8006570 <HAL_TIM_IC_CaptureCallback>
 80063ba:	e005      	b.n	80063c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f8cd 	bl	800655c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f8de 	bl	8006584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d122      	bne.n	8006422 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d11b      	bne.n	8006422 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f06f 0208 	mvn.w	r2, #8
 80063f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2204      	movs	r2, #4
 80063f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f003 0303 	and.w	r3, r3, #3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <HAL_TIM_IRQHandler+0xf2>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f8b1 	bl	8006570 <HAL_TIM_IC_CaptureCallback>
 800640e:	e005      	b.n	800641c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f8a3 	bl	800655c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f8b4 	bl	8006584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	2b10      	cmp	r3, #16
 800642e:	d122      	bne.n	8006476 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b10      	cmp	r3, #16
 800643c:	d11b      	bne.n	8006476 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f06f 0210 	mvn.w	r2, #16
 8006446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2208      	movs	r2, #8
 800644c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <HAL_TIM_IRQHandler+0x146>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f887 	bl	8006570 <HAL_TIM_IC_CaptureCallback>
 8006462:	e005      	b.n	8006470 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f879 	bl	800655c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f88a 	bl	8006584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b01      	cmp	r3, #1
 8006482:	d10e      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b01      	cmp	r3, #1
 8006490:	d107      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f06f 0201 	mvn.w	r2, #1
 800649a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f004 fedb 	bl	800b258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ac:	2b80      	cmp	r3, #128	; 0x80
 80064ae:	d10e      	bne.n	80064ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ba:	2b80      	cmp	r3, #128	; 0x80
 80064bc:	d107      	bne.n	80064ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f929 	bl	8006720 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064dc:	d10e      	bne.n	80064fc <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	d107      	bne.n	80064fc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f912 	bl	8006720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006506:	2b40      	cmp	r3, #64	; 0x40
 8006508:	d10e      	bne.n	8006528 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d107      	bne.n	8006528 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f838 	bl	8006598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b20      	cmp	r3, #32
 8006534:	d10e      	bne.n	8006554 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b20      	cmp	r3, #32
 8006542:	d107      	bne.n	8006554 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0220 	mvn.w	r2, #32
 800654c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f8dc 	bl	800670c <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a47      	ldr	r2, [pc, #284]	; (80066e0 <TIM_Base_SetConfig+0x134>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <TIM_Base_SetConfig+0x44>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ce:	d00f      	beq.n	80065f0 <TIM_Base_SetConfig+0x44>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a44      	ldr	r2, [pc, #272]	; (80066e4 <TIM_Base_SetConfig+0x138>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00b      	beq.n	80065f0 <TIM_Base_SetConfig+0x44>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a43      	ldr	r2, [pc, #268]	; (80066e8 <TIM_Base_SetConfig+0x13c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d007      	beq.n	80065f0 <TIM_Base_SetConfig+0x44>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a42      	ldr	r2, [pc, #264]	; (80066ec <TIM_Base_SetConfig+0x140>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_Base_SetConfig+0x44>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a41      	ldr	r2, [pc, #260]	; (80066f0 <TIM_Base_SetConfig+0x144>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d101      	bne.n	80065f4 <TIM_Base_SetConfig+0x48>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <TIM_Base_SetConfig+0x4a>
 80065f4:	2300      	movs	r3, #0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d008      	beq.n	800660c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a34      	ldr	r2, [pc, #208]	; (80066e0 <TIM_Base_SetConfig+0x134>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d02b      	beq.n	800666c <TIM_Base_SetConfig+0xc0>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800661a:	d027      	beq.n	800666c <TIM_Base_SetConfig+0xc0>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a31      	ldr	r2, [pc, #196]	; (80066e4 <TIM_Base_SetConfig+0x138>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d023      	beq.n	800666c <TIM_Base_SetConfig+0xc0>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a30      	ldr	r2, [pc, #192]	; (80066e8 <TIM_Base_SetConfig+0x13c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d01f      	beq.n	800666c <TIM_Base_SetConfig+0xc0>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a2f      	ldr	r2, [pc, #188]	; (80066ec <TIM_Base_SetConfig+0x140>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d01b      	beq.n	800666c <TIM_Base_SetConfig+0xc0>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a2e      	ldr	r2, [pc, #184]	; (80066f0 <TIM_Base_SetConfig+0x144>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d017      	beq.n	800666c <TIM_Base_SetConfig+0xc0>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a2d      	ldr	r2, [pc, #180]	; (80066f4 <TIM_Base_SetConfig+0x148>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d013      	beq.n	800666c <TIM_Base_SetConfig+0xc0>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a2c      	ldr	r2, [pc, #176]	; (80066f8 <TIM_Base_SetConfig+0x14c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00f      	beq.n	800666c <TIM_Base_SetConfig+0xc0>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a2b      	ldr	r2, [pc, #172]	; (80066fc <TIM_Base_SetConfig+0x150>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00b      	beq.n	800666c <TIM_Base_SetConfig+0xc0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a2a      	ldr	r2, [pc, #168]	; (8006700 <TIM_Base_SetConfig+0x154>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d007      	beq.n	800666c <TIM_Base_SetConfig+0xc0>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a29      	ldr	r2, [pc, #164]	; (8006704 <TIM_Base_SetConfig+0x158>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_Base_SetConfig+0xc0>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a28      	ldr	r2, [pc, #160]	; (8006708 <TIM_Base_SetConfig+0x15c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d101      	bne.n	8006670 <TIM_Base_SetConfig+0xc4>
 800666c:	2301      	movs	r3, #1
 800666e:	e000      	b.n	8006672 <TIM_Base_SetConfig+0xc6>
 8006670:	2300      	movs	r3, #0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d008      	beq.n	8006688 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a0c      	ldr	r2, [pc, #48]	; (80066e0 <TIM_Base_SetConfig+0x134>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_Base_SetConfig+0x110>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a0e      	ldr	r2, [pc, #56]	; (80066f0 <TIM_Base_SetConfig+0x144>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d101      	bne.n	80066c0 <TIM_Base_SetConfig+0x114>
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <TIM_Base_SetConfig+0x116>
 80066c0:	2300      	movs	r3, #0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	691a      	ldr	r2, [r3, #16]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	615a      	str	r2, [r3, #20]
}
 80066d4:	bf00      	nop
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40000400 	.word	0x40000400
 80066e8:	40000800 	.word	0x40000800
 80066ec:	40000c00 	.word	0x40000c00
 80066f0:	40010400 	.word	0x40010400
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40014400 	.word	0x40014400
 80066fc:	40014800 	.word	0x40014800
 8006700:	40001800 	.word	0x40001800
 8006704:	40001c00 	.word	0x40001c00
 8006708:	40002000 	.word	0x40002000

0800670c <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e043      	b.n	80067ce <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f005 f822 	bl	800b7a4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2224      	movs	r2, #36	; 0x24
 8006764:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6812      	ldr	r2, [r2, #0]
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	f022 0201 	bic.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f901 	bl	8006980 <UART_SetConfig>
 800677e:	4603      	mov	r3, r0
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e022      	b.n	80067ce <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fb63 	bl	8006e5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6812      	ldr	r2, [r2, #0]
 800679e:	6852      	ldr	r2, [r2, #4]
 80067a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6812      	ldr	r2, [r2, #0]
 80067ae:	6892      	ldr	r2, [r2, #8]
 80067b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067b4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6812      	ldr	r2, [r2, #0]
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	f042 0201 	orr.w	r2, r2, #1
 80067c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fbea 	bl	8006fa0 <UART_CheckIdleState>
 80067cc:	4603      	mov	r3, r0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b088      	sub	sp, #32
 80067da:	af02      	add	r7, sp, #8
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	4613      	mov	r3, r2
 80067e4:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b20      	cmp	r3, #32
 80067f4:	d175      	bne.n	80068e2 <HAL_UART_Transmit+0x10c>
  {
    if((pData == NULL ) || (Size == 0U))
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_UART_Transmit+0x2c>
 80067fc:	88fb      	ldrh	r3, [r7, #6]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e06e      	b.n	80068e4 <HAL_UART_Transmit+0x10e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_UART_Transmit+0x3e>
 8006810:	2302      	movs	r3, #2
 8006812:	e067      	b.n	80068e4 <HAL_UART_Transmit+0x10e>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2221      	movs	r2, #33	; 0x21
 8006826:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800682a:	f7fb fa01 	bl	8001c30 <HAL_GetTick>
 800682e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	88fa      	ldrh	r2, [r7, #6]
 8006834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	88fa      	ldrh	r2, [r7, #6]
 800683c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8006840:	e032      	b.n	80068a8 <HAL_UART_Transmit+0xd2>
    {
      huart->TxXferCount--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2200      	movs	r2, #0
 800685c:	2180      	movs	r1, #128	; 0x80
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 f844 	bl	80068ec <UART_WaitOnFlagUntilTimeout>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e03a      	b.n	80068e4 <HAL_UART_Transmit+0x10e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006876:	d110      	bne.n	800689a <HAL_UART_Transmit+0xc4>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10c      	bne.n	800689a <HAL_UART_Transmit+0xc4>
      {
        tmp = (uint16_t*) pData;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	8812      	ldrh	r2, [r2, #0]
 800688c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006890:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	3302      	adds	r3, #2
 8006896:	60bb      	str	r3, [r7, #8]
 8006898:	e006      	b.n	80068a8 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	1c59      	adds	r1, r3, #1
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	6293      	str	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1c6      	bne.n	8006842 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2200      	movs	r2, #0
 80068bc:	2140      	movs	r1, #64	; 0x40
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 f814 	bl	80068ec <UART_WaitOnFlagUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <HAL_UART_Transmit+0xf8>
    {
      return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e00a      	b.n	80068e4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	e000      	b.n	80068e4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80068e2:	2302      	movs	r3, #2
  }
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	603b      	str	r3, [r7, #0]
 80068f8:	4613      	mov	r3, r2
 80068fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068fc:	e02c      	b.n	8006958 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006904:	d028      	beq.n	8006958 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <UART_WaitOnFlagUntilTimeout+0x30>
 800690c:	f7fb f990 	bl	8001c30 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	1ad2      	subs	r2, r2, r3
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	429a      	cmp	r2, r3
 800691a:	d31d      	bcc.n	8006958 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	6812      	ldr	r2, [r2, #0]
 8006926:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800692a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	6892      	ldr	r2, [r2, #8]
 8006936:	f022 0201 	bic.w	r2, r2, #1
 800693a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2220      	movs	r2, #32
 8006940:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2220      	movs	r2, #32
 8006948:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e00f      	b.n	8006978 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	401a      	ands	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	429a      	cmp	r2, r3
 8006966:	bf0c      	ite	eq
 8006968:	2301      	moveq	r3, #1
 800696a:	2300      	movne	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	461a      	mov	r2, r3
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	429a      	cmp	r2, r3
 8006974:	d0c3      	beq.n	80068fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006980:	b590      	push	{r4, r7, lr}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8006988:	2300      	movs	r3, #0
 800698a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800698c:	2310      	movs	r3, #16
 800698e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8006990:	2300      	movs	r3, #0
 8006992:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8006994:	2300      	movs	r3, #0
 8006996:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6819      	ldr	r1, [r3, #0]
 80069be:	4baa      	ldr	r3, [pc, #680]	; (8006c68 <UART_SetConfig+0x2e8>)
 80069c0:	400b      	ands	r3, r1
 80069c2:	68f9      	ldr	r1, [r7, #12]
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6812      	ldr	r2, [r2, #0]
 80069d0:	6852      	ldr	r2, [r2, #4]
 80069d2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	68d2      	ldr	r2, [r2, #12]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	6892      	ldr	r2, [r2, #8]
 80069f4:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a9a      	ldr	r2, [pc, #616]	; (8006c6c <UART_SetConfig+0x2ec>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d11f      	bne.n	8006a48 <UART_SetConfig+0xc8>
 8006a08:	4b99      	ldr	r3, [pc, #612]	; (8006c70 <UART_SetConfig+0x2f0>)
 8006a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	f200 813e 	bhi.w	8006c94 <UART_SetConfig+0x314>
 8006a18:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <UART_SetConfig+0xa0>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006a31 	.word	0x08006a31
 8006a24:	08006a3d 	.word	0x08006a3d
 8006a28:	08006a37 	.word	0x08006a37
 8006a2c:	08006a43 	.word	0x08006a43
 8006a30:	2301      	movs	r3, #1
 8006a32:	75fb      	strb	r3, [r7, #23]
 8006a34:	e12e      	b.n	8006c94 <UART_SetConfig+0x314>
 8006a36:	2302      	movs	r3, #2
 8006a38:	75fb      	strb	r3, [r7, #23]
 8006a3a:	e12b      	b.n	8006c94 <UART_SetConfig+0x314>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	75fb      	strb	r3, [r7, #23]
 8006a40:	e128      	b.n	8006c94 <UART_SetConfig+0x314>
 8006a42:	2308      	movs	r3, #8
 8006a44:	75fb      	strb	r3, [r7, #23]
 8006a46:	e125      	b.n	8006c94 <UART_SetConfig+0x314>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a89      	ldr	r2, [pc, #548]	; (8006c74 <UART_SetConfig+0x2f4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d130      	bne.n	8006ab4 <UART_SetConfig+0x134>
 8006a52:	4b87      	ldr	r3, [pc, #540]	; (8006c70 <UART_SetConfig+0x2f0>)
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a58:	f003 030c 	and.w	r3, r3, #12
 8006a5c:	2b0c      	cmp	r3, #12
 8006a5e:	f200 8119 	bhi.w	8006c94 <UART_SetConfig+0x314>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <UART_SetConfig+0xe8>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a9d 	.word	0x08006a9d
 8006a6c:	08006c95 	.word	0x08006c95
 8006a70:	08006c95 	.word	0x08006c95
 8006a74:	08006c95 	.word	0x08006c95
 8006a78:	08006aa9 	.word	0x08006aa9
 8006a7c:	08006c95 	.word	0x08006c95
 8006a80:	08006c95 	.word	0x08006c95
 8006a84:	08006c95 	.word	0x08006c95
 8006a88:	08006aa3 	.word	0x08006aa3
 8006a8c:	08006c95 	.word	0x08006c95
 8006a90:	08006c95 	.word	0x08006c95
 8006a94:	08006c95 	.word	0x08006c95
 8006a98:	08006aaf 	.word	0x08006aaf
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	75fb      	strb	r3, [r7, #23]
 8006aa0:	e0f8      	b.n	8006c94 <UART_SetConfig+0x314>
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	75fb      	strb	r3, [r7, #23]
 8006aa6:	e0f5      	b.n	8006c94 <UART_SetConfig+0x314>
 8006aa8:	2304      	movs	r3, #4
 8006aaa:	75fb      	strb	r3, [r7, #23]
 8006aac:	e0f2      	b.n	8006c94 <UART_SetConfig+0x314>
 8006aae:	2308      	movs	r3, #8
 8006ab0:	75fb      	strb	r3, [r7, #23]
 8006ab2:	e0ef      	b.n	8006c94 <UART_SetConfig+0x314>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a6f      	ldr	r2, [pc, #444]	; (8006c78 <UART_SetConfig+0x2f8>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d11c      	bne.n	8006af8 <UART_SetConfig+0x178>
 8006abe:	4b6c      	ldr	r3, [pc, #432]	; (8006c70 <UART_SetConfig+0x2f0>)
 8006ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ac8:	2b10      	cmp	r3, #16
 8006aca:	d00f      	beq.n	8006aec <UART_SetConfig+0x16c>
 8006acc:	2b10      	cmp	r3, #16
 8006ace:	d802      	bhi.n	8006ad6 <UART_SetConfig+0x156>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <UART_SetConfig+0x160>
 8006ad4:	e0de      	b.n	8006c94 <UART_SetConfig+0x314>
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d005      	beq.n	8006ae6 <UART_SetConfig+0x166>
 8006ada:	2b30      	cmp	r3, #48	; 0x30
 8006adc:	d009      	beq.n	8006af2 <UART_SetConfig+0x172>
 8006ade:	e0d9      	b.n	8006c94 <UART_SetConfig+0x314>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	75fb      	strb	r3, [r7, #23]
 8006ae4:	e0d6      	b.n	8006c94 <UART_SetConfig+0x314>
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	75fb      	strb	r3, [r7, #23]
 8006aea:	e0d3      	b.n	8006c94 <UART_SetConfig+0x314>
 8006aec:	2304      	movs	r3, #4
 8006aee:	75fb      	strb	r3, [r7, #23]
 8006af0:	e0d0      	b.n	8006c94 <UART_SetConfig+0x314>
 8006af2:	2308      	movs	r3, #8
 8006af4:	75fb      	strb	r3, [r7, #23]
 8006af6:	e0cd      	b.n	8006c94 <UART_SetConfig+0x314>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a5f      	ldr	r2, [pc, #380]	; (8006c7c <UART_SetConfig+0x2fc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d11c      	bne.n	8006b3c <UART_SetConfig+0x1bc>
 8006b02:	4b5b      	ldr	r3, [pc, #364]	; (8006c70 <UART_SetConfig+0x2f0>)
 8006b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d00f      	beq.n	8006b30 <UART_SetConfig+0x1b0>
 8006b10:	2b40      	cmp	r3, #64	; 0x40
 8006b12:	d802      	bhi.n	8006b1a <UART_SetConfig+0x19a>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d005      	beq.n	8006b24 <UART_SetConfig+0x1a4>
 8006b18:	e0bc      	b.n	8006c94 <UART_SetConfig+0x314>
 8006b1a:	2b80      	cmp	r3, #128	; 0x80
 8006b1c:	d005      	beq.n	8006b2a <UART_SetConfig+0x1aa>
 8006b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b20:	d009      	beq.n	8006b36 <UART_SetConfig+0x1b6>
 8006b22:	e0b7      	b.n	8006c94 <UART_SetConfig+0x314>
 8006b24:	2300      	movs	r3, #0
 8006b26:	75fb      	strb	r3, [r7, #23]
 8006b28:	e0b4      	b.n	8006c94 <UART_SetConfig+0x314>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	75fb      	strb	r3, [r7, #23]
 8006b2e:	e0b1      	b.n	8006c94 <UART_SetConfig+0x314>
 8006b30:	2304      	movs	r3, #4
 8006b32:	75fb      	strb	r3, [r7, #23]
 8006b34:	e0ae      	b.n	8006c94 <UART_SetConfig+0x314>
 8006b36:	2308      	movs	r3, #8
 8006b38:	75fb      	strb	r3, [r7, #23]
 8006b3a:	e0ab      	b.n	8006c94 <UART_SetConfig+0x314>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a4f      	ldr	r2, [pc, #316]	; (8006c80 <UART_SetConfig+0x300>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d120      	bne.n	8006b88 <UART_SetConfig+0x208>
 8006b46:	4b4a      	ldr	r3, [pc, #296]	; (8006c70 <UART_SetConfig+0x2f0>)
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b54:	d012      	beq.n	8006b7c <UART_SetConfig+0x1fc>
 8006b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b5a:	d802      	bhi.n	8006b62 <UART_SetConfig+0x1e2>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <UART_SetConfig+0x1f0>
 8006b60:	e098      	b.n	8006c94 <UART_SetConfig+0x314>
 8006b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b66:	d006      	beq.n	8006b76 <UART_SetConfig+0x1f6>
 8006b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b6c:	d009      	beq.n	8006b82 <UART_SetConfig+0x202>
 8006b6e:	e091      	b.n	8006c94 <UART_SetConfig+0x314>
 8006b70:	2300      	movs	r3, #0
 8006b72:	75fb      	strb	r3, [r7, #23]
 8006b74:	e08e      	b.n	8006c94 <UART_SetConfig+0x314>
 8006b76:	2302      	movs	r3, #2
 8006b78:	75fb      	strb	r3, [r7, #23]
 8006b7a:	e08b      	b.n	8006c94 <UART_SetConfig+0x314>
 8006b7c:	2304      	movs	r3, #4
 8006b7e:	75fb      	strb	r3, [r7, #23]
 8006b80:	e088      	b.n	8006c94 <UART_SetConfig+0x314>
 8006b82:	2308      	movs	r3, #8
 8006b84:	75fb      	strb	r3, [r7, #23]
 8006b86:	e085      	b.n	8006c94 <UART_SetConfig+0x314>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a3d      	ldr	r2, [pc, #244]	; (8006c84 <UART_SetConfig+0x304>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d120      	bne.n	8006bd4 <UART_SetConfig+0x254>
 8006b92:	4b37      	ldr	r3, [pc, #220]	; (8006c70 <UART_SetConfig+0x2f0>)
 8006b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba0:	d012      	beq.n	8006bc8 <UART_SetConfig+0x248>
 8006ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba6:	d802      	bhi.n	8006bae <UART_SetConfig+0x22e>
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d007      	beq.n	8006bbc <UART_SetConfig+0x23c>
 8006bac:	e072      	b.n	8006c94 <UART_SetConfig+0x314>
 8006bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb2:	d006      	beq.n	8006bc2 <UART_SetConfig+0x242>
 8006bb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bb8:	d009      	beq.n	8006bce <UART_SetConfig+0x24e>
 8006bba:	e06b      	b.n	8006c94 <UART_SetConfig+0x314>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	75fb      	strb	r3, [r7, #23]
 8006bc0:	e068      	b.n	8006c94 <UART_SetConfig+0x314>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	75fb      	strb	r3, [r7, #23]
 8006bc6:	e065      	b.n	8006c94 <UART_SetConfig+0x314>
 8006bc8:	2304      	movs	r3, #4
 8006bca:	75fb      	strb	r3, [r7, #23]
 8006bcc:	e062      	b.n	8006c94 <UART_SetConfig+0x314>
 8006bce:	2308      	movs	r3, #8
 8006bd0:	75fb      	strb	r3, [r7, #23]
 8006bd2:	e05f      	b.n	8006c94 <UART_SetConfig+0x314>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a2b      	ldr	r2, [pc, #172]	; (8006c88 <UART_SetConfig+0x308>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d120      	bne.n	8006c20 <UART_SetConfig+0x2a0>
 8006bde:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <UART_SetConfig+0x2f0>)
 8006be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bec:	d012      	beq.n	8006c14 <UART_SetConfig+0x294>
 8006bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf2:	d802      	bhi.n	8006bfa <UART_SetConfig+0x27a>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d007      	beq.n	8006c08 <UART_SetConfig+0x288>
 8006bf8:	e04c      	b.n	8006c94 <UART_SetConfig+0x314>
 8006bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bfe:	d006      	beq.n	8006c0e <UART_SetConfig+0x28e>
 8006c00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c04:	d009      	beq.n	8006c1a <UART_SetConfig+0x29a>
 8006c06:	e045      	b.n	8006c94 <UART_SetConfig+0x314>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	75fb      	strb	r3, [r7, #23]
 8006c0c:	e042      	b.n	8006c94 <UART_SetConfig+0x314>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	75fb      	strb	r3, [r7, #23]
 8006c12:	e03f      	b.n	8006c94 <UART_SetConfig+0x314>
 8006c14:	2304      	movs	r3, #4
 8006c16:	75fb      	strb	r3, [r7, #23]
 8006c18:	e03c      	b.n	8006c94 <UART_SetConfig+0x314>
 8006c1a:	2308      	movs	r3, #8
 8006c1c:	75fb      	strb	r3, [r7, #23]
 8006c1e:	e039      	b.n	8006c94 <UART_SetConfig+0x314>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a19      	ldr	r2, [pc, #100]	; (8006c8c <UART_SetConfig+0x30c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d135      	bne.n	8006c96 <UART_SetConfig+0x316>
 8006c2a:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <UART_SetConfig+0x2f0>)
 8006c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c38:	d012      	beq.n	8006c60 <UART_SetConfig+0x2e0>
 8006c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c3e:	d802      	bhi.n	8006c46 <UART_SetConfig+0x2c6>
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d007      	beq.n	8006c54 <UART_SetConfig+0x2d4>
 8006c44:	e026      	b.n	8006c94 <UART_SetConfig+0x314>
 8006c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c4a:	d006      	beq.n	8006c5a <UART_SetConfig+0x2da>
 8006c4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c50:	d01e      	beq.n	8006c90 <UART_SetConfig+0x310>
 8006c52:	e01f      	b.n	8006c94 <UART_SetConfig+0x314>
 8006c54:	2300      	movs	r3, #0
 8006c56:	75fb      	strb	r3, [r7, #23]
 8006c58:	e01c      	b.n	8006c94 <UART_SetConfig+0x314>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	75fb      	strb	r3, [r7, #23]
 8006c5e:	e019      	b.n	8006c94 <UART_SetConfig+0x314>
 8006c60:	2304      	movs	r3, #4
 8006c62:	75fb      	strb	r3, [r7, #23]
 8006c64:	e016      	b.n	8006c94 <UART_SetConfig+0x314>
 8006c66:	bf00      	nop
 8006c68:	efff69f3 	.word	0xefff69f3
 8006c6c:	40011000 	.word	0x40011000
 8006c70:	40023800 	.word	0x40023800
 8006c74:	40004400 	.word	0x40004400
 8006c78:	40004800 	.word	0x40004800
 8006c7c:	40004c00 	.word	0x40004c00
 8006c80:	40005000 	.word	0x40005000
 8006c84:	40011400 	.word	0x40011400
 8006c88:	40007800 	.word	0x40007800
 8006c8c:	40007c00 	.word	0x40007c00
 8006c90:	2308      	movs	r3, #8
 8006c92:	75fb      	strb	r3, [r7, #23]
 8006c94:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9e:	d16c      	bne.n	8006d7a <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
 8006ca2:	2b08      	cmp	r3, #8
 8006ca4:	d854      	bhi.n	8006d50 <UART_SetConfig+0x3d0>
 8006ca6:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0x32c>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006cd1 	.word	0x08006cd1
 8006cb0:	08006ced 	.word	0x08006ced
 8006cb4:	08006d09 	.word	0x08006d09
 8006cb8:	08006d51 	.word	0x08006d51
 8006cbc:	08006d1f 	.word	0x08006d1f
 8006cc0:	08006d51 	.word	0x08006d51
 8006cc4:	08006d51 	.word	0x08006d51
 8006cc8:	08006d51 	.word	0x08006d51
 8006ccc:	08006d3b 	.word	0x08006d3b
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006cd0:	f7fe fe2e 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	005a      	lsls	r2, r3, #1
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	085b      	lsrs	r3, r3, #1
 8006cde:	441a      	add	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce8:	82bb      	strh	r3, [r7, #20]
      break;
 8006cea:	e034      	b.n	8006d56 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006cec:	f7fe fe34 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	005a      	lsls	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	085b      	lsrs	r3, r3, #1
 8006cfa:	441a      	add	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d04:	82bb      	strh	r3, [r7, #20]
      break;
 8006d06:	e026      	b.n	8006d56 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	085a      	lsrs	r2, r3, #1
 8006d0e:	4b51      	ldr	r3, [pc, #324]	; (8006e54 <UART_SetConfig+0x4d4>)
 8006d10:	4413      	add	r3, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6852      	ldr	r2, [r2, #4]
 8006d16:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d1a:	82bb      	strh	r3, [r7, #20]
      break;
 8006d1c:	e01b      	b.n	8006d56 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006d1e:	f7fe fd45 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8006d22:	4603      	mov	r3, r0
 8006d24:	005a      	lsls	r2, r3, #1
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	085b      	lsrs	r3, r3, #1
 8006d2c:	441a      	add	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d36:	82bb      	strh	r3, [r7, #20]
      break;
 8006d38:	e00d      	b.n	8006d56 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	085b      	lsrs	r3, r3, #1
 8006d40:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4c:	82bb      	strh	r3, [r7, #20]
      break;
 8006d4e:	e002      	b.n	8006d56 <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	74fb      	strb	r3, [r7, #19]
      break;
 8006d54:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8006d56:	8abb      	ldrh	r3, [r7, #20]
 8006d58:	f023 030f 	bic.w	r3, r3, #15
 8006d5c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d5e:	8abb      	ldrh	r3, [r7, #20]
 8006d60:	105b      	asrs	r3, r3, #1
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f003 0307 	and.w	r3, r3, #7
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	897b      	ldrh	r3, [r7, #10]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	897a      	ldrh	r2, [r7, #10]
 8006d76:	60da      	str	r2, [r3, #12]
 8006d78:	e067      	b.n	8006e4a <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d861      	bhi.n	8006e44 <UART_SetConfig+0x4c4>
 8006d80:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <UART_SetConfig+0x408>)
 8006d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d86:	bf00      	nop
 8006d88:	08006dad 	.word	0x08006dad
 8006d8c:	08006dcd 	.word	0x08006dcd
 8006d90:	08006ded 	.word	0x08006ded
 8006d94:	08006e45 	.word	0x08006e45
 8006d98:	08006e09 	.word	0x08006e09
 8006d9c:	08006e45 	.word	0x08006e45
 8006da0:	08006e45 	.word	0x08006e45
 8006da4:	08006e45 	.word	0x08006e45
 8006da8:	08006e29 	.word	0x08006e29
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681c      	ldr	r4, [r3, #0]
 8006db0:	f7fe fdbe 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 8006db4:	4602      	mov	r2, r0
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	085b      	lsrs	r3, r3, #1
 8006dbc:	441a      	add	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	60e3      	str	r3, [r4, #12]
      break;
 8006dca:	e03e      	b.n	8006e4a <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681c      	ldr	r4, [r3, #0]
 8006dd0:	f7fe fdc2 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	441a      	add	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	60e3      	str	r3, [r4, #12]
      break;
 8006dea:	e02e      	b.n	8006e4a <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	0859      	lsrs	r1, r3, #1
 8006df6:	4b18      	ldr	r3, [pc, #96]	; (8006e58 <UART_SetConfig+0x4d8>)
 8006df8:	440b      	add	r3, r1
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	6849      	ldr	r1, [r1, #4]
 8006dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	60d3      	str	r3, [r2, #12]
      break;
 8006e06:	e020      	b.n	8006e4a <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681c      	ldr	r4, [r3, #0]
 8006e0c:	f7fe fcce 	bl	80057ac <HAL_RCC_GetSysClockFreq>
 8006e10:	4602      	mov	r2, r0
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	085b      	lsrs	r3, r3, #1
 8006e18:	441a      	add	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	60e3      	str	r3, [r4, #12]
      break;
 8006e26:	e010      	b.n	8006e4a <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6852      	ldr	r2, [r2, #4]
 8006e30:	0852      	lsrs	r2, r2, #1
 8006e32:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6852      	ldr	r2, [r2, #4]
 8006e3a:	fbb1 f2f2 	udiv	r2, r1, r2
 8006e3e:	b292      	uxth	r2, r2
 8006e40:	60da      	str	r2, [r3, #12]
      break;
 8006e42:	e002      	b.n	8006e4a <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	74fb      	strb	r3, [r7, #19]
      break;
 8006e48:	bf00      	nop
    }
  }

  return ret;
 8006e4a:	7cfb      	ldrb	r3, [r7, #19]

}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd90      	pop	{r4, r7, pc}
 8006e54:	01e84800 	.word	0x01e84800
 8006e58:	00f42400 	.word	0x00f42400

08006e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00a      	beq.n	8006e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	6852      	ldr	r2, [r2, #4]
 8006e7a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006e82:	430a      	orrs	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6812      	ldr	r2, [r2, #0]
 8006e9a:	6852      	ldr	r2, [r2, #4]
 8006e9c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	6852      	ldr	r2, [r2, #4]
 8006ebe:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	6852      	ldr	r2, [r2, #4]
 8006ee0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	6892      	ldr	r2, [r2, #8]
 8006f02:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6812      	ldr	r2, [r2, #0]
 8006f22:	6892      	ldr	r2, [r2, #8]
 8006f24:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d01a      	beq.n	8006f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6812      	ldr	r2, [r2, #0]
 8006f44:	6852      	ldr	r2, [r2, #4]
 8006f46:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f5a:	d10a      	bne.n	8006f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6812      	ldr	r2, [r2, #0]
 8006f64:	6852      	ldr	r2, [r2, #4]
 8006f66:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	6852      	ldr	r2, [r2, #4]
 8006f88:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f90:	430a      	orrs	r2, r1
 8006f92:	605a      	str	r2, [r3, #4]
  }
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006fb2:	f7fa fe3d 	bl	8001c30 <HAL_GetTick>
 8006fb6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0308 	and.w	r3, r3, #8
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d10e      	bne.n	8006fe4 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff fc89 	bl	80068ec <UART_WaitOnFlagUntilTimeout>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e00c      	b.n	8006ffe <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d027      	beq.n	8007072 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4b2f      	ldr	r3, [pc, #188]	; (80070e8 <FMC_SDRAM_Init+0xe0>)
 800702c:	4013      	ands	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007038:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800703e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007044:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800704a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007050:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007056:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800705c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007062:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	e032      	b.n	80070d8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800707e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007088:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800708e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	4b12      	ldr	r3, [pc, #72]	; (80070e8 <FMC_SDRAM_Init+0xe0>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80070ac:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80070b2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80070b8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80070be:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80070c4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	ffff8000 	.word	0xffff8000

080070ec <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d02e      	beq.n	8007164 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007112:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	3b01      	subs	r3, #1
 8007120:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007122:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	3b01      	subs	r3, #1
 800712a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800712c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	3b01      	subs	r3, #1
 8007134:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007136:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	3b01      	subs	r3, #1
 800713e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007140:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	3b01      	subs	r3, #1
 8007148:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800714a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	3b01      	subs	r3, #1
 8007152:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007154:	4313      	orrs	r3, r2
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4313      	orrs	r3, r2
 800715a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	609a      	str	r2, [r3, #8]
 8007162:	e039      	b.n	80071d8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4b1e      	ldr	r3, [pc, #120]	; (80071e8 <FMC_SDRAM_Timing_Init+0xfc>)
 800716e:	4013      	ands	r3, r2
 8007170:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	3b01      	subs	r3, #1
 8007178:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	3b01      	subs	r3, #1
 8007180:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007182:	4313      	orrs	r3, r2
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007196:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80071a6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80071b0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80071ba:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80071c4:	4313      	orrs	r3, r2
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	ff0f0fff 	.word	0xff0f0fff

080071ec <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007204:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	3b01      	subs	r3, #1
 800720c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800720e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	371c      	adds	r7, #28
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
	...

08007230 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007230:	b084      	sub	sp, #16
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	f107 0014 	add.w	r0, r7, #20
 800723e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007244:	2b01      	cmp	r3, #1
 8007246:	d11e      	bne.n	8007286 <USB_CoreInit+0x56>
  {

    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	4b1d      	ldr	r3, [pc, #116]	; (80072d0 <USB_CoreInit+0xa0>)
 800725a:	4013      	ands	r3, r2
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1)
 800726c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800726e:	2b01      	cmp	r3, #1
 8007270:	d105      	bne.n	800727e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 f9a4 	bl	80085cc <USB_CoreReset>
 8007284:	e00c      	b.n	80072a0 <USB_CoreInit+0x70>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 f99a 	bl	80085cc <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800729e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(cfg.dma_enable == ENABLE)
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d10b      	bne.n	80072be <USB_CoreInit+0x8e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f043 0206 	orr.w	r2, r3, #6
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f043 0220 	orr.w	r2, r3, #32
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072ca:	b004      	add	sp, #16
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	ffbdffbf 	.word	0xffbdffbf

080072d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f043 0201 	orr.w	r2, r3, #1
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f023 0201 	bic.w	r2, r3, #1
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	60da      	str	r2, [r3, #12]

  if ( mode == USB_OTG_HOST_MODE)
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d106      	bne.n	8007344 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	60da      	str	r2, [r3, #12]
 8007342:	e008      	b.n	8007356 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d105      	bne.n	8007356 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 8007356:	2032      	movs	r0, #50	; 0x32
 8007358:	f7fa fc76 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007368:	b084      	sub	sp, #16
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	f107 001c 	add.w	r0, r7, #28
 8007376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	639a      	str	r2, [r3, #56]	; 0x38

  if (cfg.vbus_sensing_enable == 0)
 800738a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800738c:	2b00      	cmp	r3, #0
 800738e:	d111      	bne.n	80073b4 <USB_DevInit+0x4c>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable*/
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	601a      	str	r2, [r3, #0]
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073ba:	461a      	mov	r2, r3
 80073bc:	2300      	movs	r3, #0
 80073be:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c6:	461a      	mov	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6013      	str	r3, [r2, #0]

  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d10c      	bne.n	80073f2 <USB_DevInit+0x8a>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d104      	bne.n	80073e8 <USB_DevInit+0x80>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 80073de:	2100      	movs	r1, #0
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f957 	bl	8007694 <USB_SetDevSpeed>
 80073e6:	e018      	b.n	800741a <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80073e8:	2101      	movs	r1, #1
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f952 	bl	8007694 <USB_SetDevSpeed>
 80073f0:	e013      	b.n	800741a <USB_DevInit+0xb2>
    }
  }

  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d10c      	bne.n	8007412 <USB_DevInit+0xaa>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d104      	bne.n	8007408 <USB_DevInit+0xa0>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 80073fe:	2100      	movs	r1, #0
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f947 	bl	8007694 <USB_SetDevSpeed>
 8007406:	e008      	b.n	800741a <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8007408:	2101      	movs	r1, #1
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f942 	bl	8007694 <USB_SetDevSpeed>
 8007410:	e003      	b.n	800741a <USB_DevInit+0xb2>
  }

  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8007412:	2103      	movs	r1, #3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f93d 	bl	8007694 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 800741a:	2110      	movs	r1, #16
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f8f1 	bl	8007604 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f914 	bl	8007650 <USB_FlushRxFifo>

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800742e:	461a      	mov	r2, r3
 8007430:	2300      	movs	r3, #0
 8007432:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800743a:	461a      	mov	r2, r3
 800743c:	2300      	movs	r3, #0
 800743e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007446:	461a      	mov	r2, r3
 8007448:	f04f 33ff 	mov.w	r3, #4294967295
 800744c:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007454:	461a      	mov	r2, r3
 8007456:	2300      	movs	r3, #0
 8007458:	61d3      	str	r3, [r2, #28]

  for (i = 0; i < cfg.dev_endpoints; i++)
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]
 800745e:	e034      	b.n	80074ca <USB_DevInit+0x162>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007476:	d10a      	bne.n	800748e <USB_DevInit+0x126>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007484:	461a      	mov	r2, r3
 8007486:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	e008      	b.n	80074a0 <USB_DevInit+0x138>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749a:	461a      	mov	r2, r3
 800749c:	2300      	movs	r3, #0
 800749e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ac:	461a      	mov	r2, r3
 80074ae:	2300      	movs	r3, #0
 80074b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074be:	461a      	mov	r2, r3
 80074c0:	23ff      	movs	r3, #255	; 0xff
 80074c2:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d8c6      	bhi.n	8007460 <USB_DevInit+0xf8>
  }

  for (i = 0; i < cfg.dev_endpoints; i++)
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	e034      	b.n	8007542 <USB_DevInit+0x1da>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074ee:	d10a      	bne.n	8007506 <USB_DevInit+0x19e>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fc:	461a      	mov	r2, r3
 80074fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	e008      	b.n	8007518 <USB_DevInit+0x1b0>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	461a      	mov	r2, r3
 8007514:	2300      	movs	r3, #0
 8007516:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007524:	461a      	mov	r2, r3
 8007526:	2300      	movs	r3, #0
 8007528:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007536:	461a      	mov	r2, r3
 8007538:	23ff      	movs	r3, #255	; 0xff
 800753a:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3301      	adds	r3, #1
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	429a      	cmp	r2, r3
 8007548:	d8c6      	bhi.n	80074d8 <USB_DevInit+0x170>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007550:	461a      	mov	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800755e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1)
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	2b01      	cmp	r3, #1
 8007564:	d115      	bne.n	8007592 <USB_DevInit+0x22a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756c:	461a      	mov	r2, r3
 800756e:	4b21      	ldr	r3, [pc, #132]	; (80075f4 <USB_DevInit+0x28c>)
 8007570:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007578:	4619      	mov	r1, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007582:	4b1d      	ldr	r3, [pc, #116]	; (80075f8 <USB_DevInit+0x290>)
 8007584:	4313      	orrs	r3, r2
 8007586:	630b      	str	r3, [r1, #48]	; 0x30

    i= USBx_DEVICE->DTHRCTL;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	60fb      	str	r3, [r7, #12]
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800759e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d105      	bne.n	80075b2 <USB_DevInit+0x24a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f043 0210 	orr.w	r2, r3, #16
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699a      	ldr	r2, [r3, #24]
 80075b6:	4b11      	ldr	r3, [pc, #68]	; (80075fc <USB_DevInit+0x294>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 80075be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <USB_DevInit+0x268>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	f043 0208 	orr.w	r2, r3, #8
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80075d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d105      	bne.n	80075e2 <USB_DevInit+0x27a>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <USB_DevInit+0x298>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	6193      	str	r3, [r2, #24]
  }

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075ee:	b004      	add	sp, #16
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	00800100 	.word	0x00800100
 80075f8:	00010003 	.word	0x00010003
 80075fc:	803c3800 	.word	0x803c3800
 8007600:	40000004 	.word	0x40000004

08007604 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	019b      	lsls	r3, r3, #6
 8007616:	f043 0220 	orr.w	r2, r3, #32
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4a09      	ldr	r2, [pc, #36]	; (800764c <USB_FlushTxFifo+0x48>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d901      	bls.n	8007630 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e006      	b.n	800763e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b20      	cmp	r3, #32
 800763a:	d0f0      	beq.n	800761e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	00030d40 	.word	0x00030d40

08007650 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2210      	movs	r2, #16
 8007660:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3301      	adds	r3, #1
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4a09      	ldr	r2, [pc, #36]	; (8007690 <USB_FlushRxFifo+0x40>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d901      	bls.n	8007674 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e006      	b.n	8007682 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f003 0310 	and.w	r3, r3, #16
 800767c:	2b10      	cmp	r3, #16
 800767e:	d0f0      	beq.n	8007662 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	00030d40 	.word	0x00030d40

08007694 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a6:	4619      	mov	r1, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	78fb      	ldrb	r3, [r7, #3]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0;
 80076cc:	2300      	movs	r3, #0
 80076ce:	73fb      	strb	r3, [r7, #15]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 0306 	and.w	r3, r3, #6
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d102      	bne.n	80076e6 <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 80076e0:	2300      	movs	r3, #0
 80076e2:	73fb      	strb	r3, [r7, #15]
 80076e4:	e01c      	b.n	8007720 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 0306 	and.w	r3, r3, #6
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d007      	beq.n	8007706 <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8007702:	2b06      	cmp	r3, #6
 8007704:	d102      	bne.n	800770c <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8007706:	2303      	movs	r3, #3
 8007708:	73fb      	strb	r3, [r7, #15]
 800770a:	e009      	b.n	8007720 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f003 0306 	and.w	r3, r3, #6
 8007718:	2b04      	cmp	r3, #4
 800771a:	d101      	bne.n	8007720 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 800771c:	2302      	movs	r3, #2
 800771e:	73fb      	strb	r3, [r7, #15]
  }

  return speed;
 8007720:	7bfb      	ldrb	r3, [r7, #15]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
	...

08007730 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	785b      	ldrb	r3, [r3, #1]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d13c      	bne.n	80077bc <USB_ActivateEndpoint+0x8c>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007748:	4619      	mov	r1, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007750:	69da      	ldr	r2, [r3, #28]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	4618      	mov	r0, r3
 8007758:	2301      	movs	r3, #1
 800775a:	4083      	lsls	r3, r0
 800775c:	b29b      	uxth	r3, r3
 800775e:	4313      	orrs	r3, r2
 8007760:	61cb      	str	r3, [r1, #28]

    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d158      	bne.n	800782c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007788:	4618      	mov	r0, r3
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	78c9      	ldrb	r1, [r1, #3]
 80077a6:	0489      	lsls	r1, r1, #18
 80077a8:	430b      	orrs	r3, r1
        ((ep->num) << 22 ) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP));
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	7809      	ldrb	r1, [r1, #0]
 80077ae:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80077b0:	430b      	orrs	r3, r1
 80077b2:	431a      	orrs	r2, r3
 80077b4:	4b21      	ldr	r3, [pc, #132]	; (800783c <USB_ActivateEndpoint+0x10c>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	6003      	str	r3, [r0, #0]
 80077ba:	e037      	b.n	800782c <USB_ActivateEndpoint+0xfc>
    }

  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c2:	4619      	mov	r1, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	7812      	ldrb	r2, [r2, #0]
 80077d0:	4610      	mov	r0, r2
 80077d2:	2201      	movs	r2, #1
 80077d4:	4082      	lsls	r2, r0
 80077d6:	0412      	lsls	r2, r2, #16
 80077d8:	4313      	orrs	r3, r2
 80077da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d11b      	bne.n	800782c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007802:	4618      	mov	r0, r3
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	78c9      	ldrb	r1, [r1, #3]
 8007820:	0489      	lsls	r1, r1, #18
 8007822:	430b      	orrs	r3, r1
 8007824:	431a      	orrs	r2, r3
 8007826:	4b05      	ldr	r3, [pc, #20]	; (800783c <USB_ActivateEndpoint+0x10c>)
 8007828:	4313      	orrs	r3, r2
 800782a:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    }
  }
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	10008000 	.word	0x10008000

08007840 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d135      	bne.n	80078be <USB_DeactivateEndpoint+0x7e>
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007858:	4619      	mov	r1, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	4618      	mov	r0, r3
 8007868:	2301      	movs	r3, #1
 800786a:	4083      	lsls	r3, r0
 800786c:	b29b      	uxth	r3, r3
 800786e:	43db      	mvns	r3, r3
 8007870:	4013      	ands	r3, r2
 8007872:	63cb      	str	r3, [r1, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787a:	4619      	mov	r1, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	4618      	mov	r0, r3
 800788a:	2301      	movs	r3, #1
 800788c:	4083      	lsls	r3, r0
 800788e:	b29b      	uxth	r3, r3
 8007890:	43db      	mvns	r3, r3
 8007892:	4013      	ands	r3, r2
 8007894:	61cb      	str	r3, [r1, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a4:	4619      	mov	r1, r3
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078ba:	600b      	str	r3, [r1, #0]
 80078bc:	e034      	b.n	8007928 <USB_DeactivateEndpoint+0xe8>
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c4:	4619      	mov	r1, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	2301      	movs	r3, #1
 80078d6:	4083      	lsls	r3, r0
 80078d8:	041b      	lsls	r3, r3, #16
 80078da:	43db      	mvns	r3, r3
 80078dc:	4013      	ands	r3, r2
 80078de:	63cb      	str	r3, [r1, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e6:	4619      	mov	r1, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ee:	69da      	ldr	r2, [r3, #28]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	2301      	movs	r3, #1
 80078f8:	4083      	lsls	r3, r0
 80078fa:	041b      	lsls	r3, r3, #16
 80078fc:	43db      	mvns	r3, r3
 80078fe:	4013      	ands	r3, r2
 8007900:	61cb      	str	r3, [r1, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007910:	4619      	mov	r1, r3
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007926:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
	...

08007938 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af02      	add	r7, sp, #8
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	4613      	mov	r3, r2
 8007944:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	82fb      	strh	r3, [r7, #22]

  /* IN endpoint */
  if (ep->is_in == 1)
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	785b      	ldrb	r3, [r3, #1]
 800794e:	2b01      	cmp	r3, #1
 8007950:	f040 8148 	bne.w	8007be4 <USB_EPStartXfer+0x2ac>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d139      	bne.n	80079d0 <USB_EPStartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4413      	add	r3, r2
 8007966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796a:	4619      	mov	r1, r3
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	4b96      	ldr	r3, [pc, #600]	; (8007bd8 <USB_EPStartXfer+0x2a0>)
 800797e:	4013      	ands	r3, r2
 8007980:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007990:	4619      	mov	r1, r3
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b6:	4619      	mov	r1, r3
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c6:	691a      	ldr	r2, [r3, #16]
 80079c8:	4b84      	ldr	r3, [pc, #528]	; (8007bdc <USB_EPStartXfer+0x2a4>)
 80079ca:	4013      	ands	r3, r2
 80079cc:	610b      	str	r3, [r1, #16]
 80079ce:	e084      	b.n	8007ada <USB_EPStartXfer+0x1a2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079de:	4619      	mov	r1, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ee:	691a      	ldr	r2, [r3, #16]
 80079f0:	4b7a      	ldr	r3, [pc, #488]	; (8007bdc <USB_EPStartXfer+0x2a4>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a04:	4619      	mov	r1, r3
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a14:	691a      	ldr	r2, [r3, #16]
 8007a16:	4b70      	ldr	r3, [pc, #448]	; (8007bd8 <USB_EPStartXfer+0x2a0>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3a:	691a      	ldr	r2, [r3, #16]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	6959      	ldr	r1, [r3, #20]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	440b      	add	r3, r1
 8007a46:	1e59      	subs	r1, r3, #1
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a50:	04d9      	lsls	r1, r3, #19
 8007a52:	4b63      	ldr	r3, [pc, #396]	; (8007be0 <USB_EPStartXfer+0x2a8>)
 8007a54:	400b      	ands	r3, r1
 8007a56:	4313      	orrs	r3, r2
 8007a58:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a68:	4619      	mov	r1, r3
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a78:	691a      	ldr	r2, [r3, #16]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a82:	4313      	orrs	r3, r2
 8007a84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	78db      	ldrb	r3, [r3, #3]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d125      	bne.n	8007ada <USB_EPStartXfer+0x1a2>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ab2:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29));
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	015a      	lsls	r2, r3, #5
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ad8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1)
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d10b      	bne.n	8007af8 <USB_EPStartXfer+0x1c0>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aee:	461a      	mov	r2, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	6153      	str	r3, [r2, #20]
 8007af6:	e016      	b.n	8007b26 <USB_EPStartXfer+0x1ee>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	78db      	ldrb	r3, [r3, #3]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d012      	beq.n	8007b26 <USB_EPStartXfer+0x1ee>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00e      	beq.n	8007b26 <USB_EPStartXfer+0x1ee>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0e:	4619      	mov	r1, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	7812      	ldrb	r2, [r2, #0]
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	2201      	movs	r2, #1
 8007b20:	4082      	lsls	r2, r0
 8007b22:	4313      	orrs	r3, r2
 8007b24:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	78db      	ldrb	r3, [r3, #3]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d12e      	bne.n	8007b8c <USB_EPStartXfer+0x254>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d113      	bne.n	8007b66 <USB_EPStartXfer+0x22e>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b62:	600b      	str	r3, [r1, #0]
 8007b64:	e012      	b.n	8007b8c <USB_EPStartXfer+0x254>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b74:	4619      	mov	r1, r3
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b8a:	600b      	str	r3, [r1, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bb0:	600b      	str	r3, [r1, #0]

    if (ep->type == EP_TYPE_ISOC)
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	78db      	ldrb	r3, [r3, #3]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	f040 80f7 	bne.w	8007daa <USB_EPStartXfer+0x472>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	68d9      	ldr	r1, [r3, #12]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	781a      	ldrb	r2, [r3, #0]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	b298      	uxth	r0, r3
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	4603      	mov	r3, r0
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 fa51 	bl	8008078 <USB_WritePacket>
 8007bd6:	e0e8      	b.n	8007daa <USB_EPStartXfer+0x472>
 8007bd8:	e007ffff 	.word	0xe007ffff
 8007bdc:	fff80000 	.word	0xfff80000
 8007be0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	4b6b      	ldr	r3, [pc, #428]	; (8007db4 <USB_EPStartXfer+0x47c>)
 8007c06:	4013      	ands	r3, r2
 8007c08:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c18:	4619      	mov	r1, r3
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c28:	691a      	ldr	r2, [r3, #16]
 8007c2a:	4b63      	ldr	r3, [pc, #396]	; (8007db8 <USB_EPStartXfer+0x480>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d129      	bne.n	8007c8c <USB_EPStartXfer+0x354>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	015a      	lsls	r2, r3, #5
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4413      	add	r3, r2
 8007c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c46:	4619      	mov	r1, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c56:	691a      	ldr	r2, [r3, #16]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c60:	4313      	orrs	r3, r2
 8007c62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c72:	4619      	mov	r1, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c88:	610b      	str	r3, [r1, #16]
 8007c8a:	e03a      	b.n	8007d02 <USB_EPStartXfer+0x3ca>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	695a      	ldr	r2, [r3, #20]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	4413      	add	r3, r2
 8007c96:	1e5a      	subs	r2, r3, #1
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc0:	691a      	ldr	r2, [r3, #16]
 8007cc2:	8afb      	ldrh	r3, [r7, #22]
 8007cc4:	04db      	lsls	r3, r3, #19
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	4b3c      	ldr	r3, [pc, #240]	; (8007dbc <USB_EPStartXfer+0x484>)
 8007cca:	4003      	ands	r3, r0
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cde:	4618      	mov	r0, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cee:	691a      	ldr	r2, [r3, #16]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	8af9      	ldrh	r1, [r7, #22]
 8007cf6:	fb01 f303 	mul.w	r3, r1, r3
 8007cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1)
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d10a      	bne.n	8007d1e <USB_EPStartXfer+0x3e6>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d16:	461a      	mov	r2, r3
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	6153      	str	r3, [r2, #20]
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	78db      	ldrb	r3, [r3, #3]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d12e      	bne.n	8007d84 <USB_EPStartXfer+0x44c>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d113      	bne.n	8007d5e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d44:	4619      	mov	r1, r3
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d5a:	600b      	str	r3, [r1, #0]
 8007d5c:	e012      	b.n	8007d84 <USB_EPStartXfer+0x44c>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d82:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d92:	4619      	mov	r1, r3
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007da8:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	fff80000 	.word	0xfff80000
 8007db8:	e007ffff 	.word	0xe007ffff
 8007dbc:	1ff80000 	.word	0x1ff80000

08007dc0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1)
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	785b      	ldrb	r3, [r3, #1]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	f040 80cd 	bne.w	8007f72 <USB_EP0StartXfer+0x1b2>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d139      	bne.n	8007e54 <USB_EP0StartXfer+0x94>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dee:	4619      	mov	r1, r3
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfe:	691a      	ldr	r2, [r3, #16]
 8007e00:	4b9b      	ldr	r3, [pc, #620]	; (8008070 <USB_EP0StartXfer+0x2b0>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e14:	4619      	mov	r1, r3
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4a:	691a      	ldr	r2, [r3, #16]
 8007e4c:	4b89      	ldr	r3, [pc, #548]	; (8008074 <USB_EP0StartXfer+0x2b4>)
 8007e4e:	4013      	ands	r3, r2
 8007e50:	610b      	str	r3, [r1, #16]
 8007e52:	e058      	b.n	8007f06 <USB_EP0StartXfer+0x146>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e62:	4619      	mov	r1, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e72:	691a      	ldr	r2, [r3, #16]
 8007e74:	4b7f      	ldr	r3, [pc, #508]	; (8008074 <USB_EP0StartXfer+0x2b4>)
 8007e76:	4013      	ands	r3, r2
 8007e78:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e88:	4619      	mov	r1, r3
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e98:	691a      	ldr	r2, [r3, #16]
 8007e9a:	4b75      	ldr	r3, [pc, #468]	; (8008070 <USB_EP0StartXfer+0x2b0>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	610b      	str	r3, [r1, #16]

      if(ep->xfer_len > ep->maxpacket)
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	695a      	ldr	r2, [r3, #20]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d903      	bls.n	8007eb4 <USB_EP0StartXfer+0xf4>
      {
        ep->xfer_len = ep->maxpacket;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ed8:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee8:	4619      	mov	r1, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef8:	691a      	ldr	r2, [r3, #16]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f02:	4313      	orrs	r3, r2
 8007f04:	610b      	str	r3, [r1, #16]

    }

    if (dma == 1)
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d10b      	bne.n	8007f24 <USB_EP0StartXfer+0x164>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	6153      	str	r3, [r2, #20]
 8007f22:	e012      	b.n	8007f4a <USB_EP0StartXfer+0x18a>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00e      	beq.n	8007f4a <USB_EP0StartXfer+0x18a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f32:	4619      	mov	r1, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	4618      	mov	r0, r3
 8007f42:	2301      	movs	r3, #1
 8007f44:	4083      	lsls	r3, r0
 8007f46:	4313      	orrs	r3, r2
 8007f48:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f58:	4619      	mov	r1, r3
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f6e:	600b      	str	r3, [r1, #0]
 8007f70:	e077      	b.n	8008062 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f80:	4619      	mov	r1, r3
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f90:	691a      	ldr	r2, [r3, #16]
 8007f92:	4b38      	ldr	r3, [pc, #224]	; (8008074 <USB_EP0StartXfer+0x2b4>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	4b2d      	ldr	r3, [pc, #180]	; (8008070 <USB_EP0StartXfer+0x2b0>)
 8007fba:	4013      	ands	r3, r2
 8007fbc:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0)
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <USB_EP0StartXfer+0x20e>
    {
      ep->xfer_len = ep->maxpacket;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	689a      	ldr	r2, [r3, #8]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fdc:	4619      	mov	r1, r3
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ff2:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008002:	4619      	mov	r1, r3
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008012:	691a      	ldr	r2, [r3, #16]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800801c:	4313      	orrs	r3, r2
 800801e:	610b      	str	r3, [r1, #16]


    if (dma == 1)
 8008020:	79fb      	ldrb	r3, [r7, #7]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d10a      	bne.n	800803c <USB_EP0StartXfer+0x27c>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008034:	461a      	mov	r2, r3
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	6153      	str	r3, [r2, #20]
    }

    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804a:	4619      	mov	r1, r3
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4413      	add	r3, r2
 8008056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008060:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	e007ffff 	.word	0xe007ffff
 8008074:	fff80000 	.word	0xfff80000

08008078 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008078:	b480      	push	{r7}
 800807a:	b087      	sub	sp, #28
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	4611      	mov	r1, r2
 8008084:	461a      	mov	r2, r3
 8008086:	460b      	mov	r3, r1
 8008088:	71fb      	strb	r3, [r7, #7]
 800808a:	4613      	mov	r3, r2
 800808c:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b= 0 , i= 0;
 800808e:	2300      	movs	r3, #0
 8008090:	613b      	str	r3, [r7, #16]
 8008092:	2300      	movs	r3, #0
 8008094:	617b      	str	r3, [r7, #20]

  if (dma == 0)
 8008096:	f897 3020 	ldrb.w	r3, [r7, #32]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d11d      	bne.n	80080da <USB_WritePacket+0x62>
  {
    count32b =  (len + 3) / 4;
 800809e:	88bb      	ldrh	r3, [r7, #4]
 80080a0:	3303      	adds	r3, #3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	da00      	bge.n	80080a8 <USB_WritePacket+0x30>
 80080a6:	3303      	adds	r3, #3
 80080a8:	109b      	asrs	r3, r3, #2
 80080aa:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src += 4)
 80080ac:	2300      	movs	r3, #0
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	e00f      	b.n	80080d2 <USB_WritePacket+0x5a>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	031a      	lsls	r2, r3, #12
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080be:	461a      	mov	r2, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6013      	str	r3, [r2, #0]
    for (i = 0; i < count32b; i++, src += 4)
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	3301      	adds	r3, #1
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	3304      	adds	r3, #4
 80080d0:	60bb      	str	r3, [r7, #8]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d3eb      	bcc.n	80080b2 <USB_WritePacket+0x3a>
    }
  }
  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	4613      	mov	r3, r2
 80080f4:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 80080fa:	88fb      	ldrh	r3, [r7, #6]
 80080fc:	3303      	adds	r3, #3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	da00      	bge.n	8008104 <USB_ReadPacket+0x1c>
 8008102:	3303      	adds	r3, #3
 8008104:	109b      	asrs	r3, r3, #2
 8008106:	613b      	str	r3, [r7, #16]

  for ( i = 0; i < count32b; i++, dest += 4 )
 8008108:	2300      	movs	r3, #0
 800810a:	617b      	str	r3, [r7, #20]
 800810c:	e00b      	b.n	8008126 <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	3301      	adds	r3, #1
 800811e:	617b      	str	r3, [r7, #20]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	3304      	adds	r3, #4
 8008124:	60bb      	str	r3, [r7, #8]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	429a      	cmp	r2, r3
 800812c:	d3ef      	bcc.n	800810e <USB_ReadPacket+0x26>

  }
  return ((void *)dest);
 800812e:	68bb      	ldr	r3, [r7, #8]
}
 8008130:	4618      	mov	r0, r3
 8008132:	371c      	adds	r7, #28
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	785b      	ldrb	r3, [r3, #1]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d130      	bne.n	80081b0 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	db12      	blt.n	8008188 <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008170:	4619      	mov	r1, r3
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008186:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008196:	4619      	mov	r1, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081ac:	600b      	str	r3, [r1, #0]
 80081ae:	e02f      	b.n	8008210 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	db12      	blt.n	80081ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d2:	4619      	mov	r1, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081e8:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f8:	4619      	mov	r1, r3
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800820e:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d12e      	bne.n	800828e <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823e:	4619      	mov	r1, r3
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008254:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	78db      	ldrb	r3, [r3, #3]
 800825a:	2b03      	cmp	r3, #3
 800825c:	d003      	beq.n	8008266 <USB_EPClearStall+0x48>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	78db      	ldrb	r3, [r3, #3]
 8008262:	2b02      	cmp	r3, #2
 8008264:	d141      	bne.n	80082ea <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008274:	4619      	mov	r1, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800828a:	600b      	str	r3, [r1, #0]
 800828c:	e02d      	b.n	80082ea <USB_EPClearStall+0xcc>
    }
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829c:	4619      	mov	r1, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082b2:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	78db      	ldrb	r3, [r3, #3]
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d003      	beq.n	80082c4 <USB_EPClearStall+0xa6>
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	78db      	ldrb	r3, [r3, #3]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d112      	bne.n	80082ea <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d2:	4619      	mov	r1, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	015a      	lsls	r2, r3, #5
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4413      	add	r3, r2
 80082de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082e8:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800830a:	461a      	mov	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008318:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008320:	4619      	mov	r1, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008332:	4313      	orrs	r3, r2
 8008334:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008352:	461a      	mov	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f023 0302 	bic.w	r3, r3, #2
 8008360:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 8008362:	2003      	movs	r0, #3
 8008364:	f7f9 fc70 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008380:	461a      	mov	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f043 0302 	orr.w	r3, r3, #2
 800838e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 8008390:	2003      	movs	r0, #3
 8008392:	f7f9 fc59 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	60fb      	str	r3, [r7, #12]

  v = USBx->GINTSTS;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	4013      	ands	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
  return v;
 80083bc:	68fb      	ldr	r3, [r7, #12]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b085      	sub	sp, #20
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4013      	ands	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	0c1b      	lsrs	r3, r3, #16
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b085      	sub	sp, #20
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	4013      	ands	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFF));
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	b29b      	uxth	r3, r3
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 800842a:	b480      	push	{r7}
 800842c:	b085      	sub	sp, #20
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	460b      	mov	r3, r1
 8008434:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4413      	add	r3, r2
 800843e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4013      	ands	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
  return v;
 8008454:	68fb      	ldr	r3, [r7, #12]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8008462:	b480      	push	{r7}
 8008464:	b087      	sub	sp, #28
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	460b      	mov	r3, r1
 800846c:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800847e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008480:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008482:	78fb      	ldrb	r3, [r7, #3]
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	fa22 f303 	lsr.w	r3, r2, r3
 800848a:	01db      	lsls	r3, r3, #7
 800848c:	b2db      	uxtb	r3, r3
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	4313      	orrs	r3, r2
 8008492:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a0:	689a      	ldr	r2, [r3, #8]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	4013      	ands	r3, r2
 80084a6:	60fb      	str	r3, [r7, #12]
  return v;
 80084a8:	68fb      	ldr	r3, [r7, #12]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	f003 0301 	and.w	r3, r3, #1
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
	...

080084d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e2:	4619      	mov	r1, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	4b13      	ldr	r3, [pc, #76]	; (800853c <USB_ActivateSetup+0x68>)
 80084ee:	4013      	ands	r3, r2
 80084f0:	600b      	str	r3, [r1, #0]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f003 0306 	and.w	r3, r3, #6
 80084fe:	2b04      	cmp	r3, #4
 8008500:	d10a      	bne.n	8008518 <USB_ActivateSetup+0x44>
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008508:	461a      	mov	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f043 0303 	orr.w	r3, r3, #3
 8008516:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800851e:	461a      	mov	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800852c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	fffff800 	.word	0xfffff800

08008540 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	460b      	mov	r3, r1
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008554:	461a      	mov	r2, r3
 8008556:	2300      	movs	r3, #0
 8008558:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008560:	461a      	mov	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800856e:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008576:	461a      	mov	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	f043 0318 	orr.w	r3, r3, #24
 8008584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858c:	461a      	mov	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800859a:	6113      	str	r3, [r2, #16]

  if (dma == 1)
 800859c:	7afb      	ldrb	r3, [r7, #11]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d10c      	bne.n	80085bc <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a8:	461a      	mov	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b4:	461a      	mov	r2, r3
 80085b6:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80085ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
	...

080085cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3301      	adds	r3, #1
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	4a13      	ldr	r2, [pc, #76]	; (8008630 <USB_CoreReset+0x64>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d901      	bls.n	80085ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e01b      	b.n	8008622 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	daf2      	bge.n	80085d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	f043 0201 	orr.w	r2, r3, #1
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3301      	adds	r3, #1
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4a09      	ldr	r2, [pc, #36]	; (8008630 <USB_CoreReset+0x64>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d901      	bls.n	8008614 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e006      	b.n	8008622 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b01      	cmp	r3, #1
 800861e:	d0f0      	beq.n	8008602 <USB_CoreReset+0x36>

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	00030d40 	.word	0x00030d40

08008634 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	4613      	mov	r3, r2
 8008640:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008642:	2301      	movs	r3, #1
 8008644:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800864a:	4b1f      	ldr	r3, [pc, #124]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 800864c:	7a5b      	ldrb	r3, [r3, #9]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d131      	bne.n	80086b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008654:	4b1c      	ldr	r3, [pc, #112]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 8008656:	7a5b      	ldrb	r3, [r3, #9]
 8008658:	b2db      	uxtb	r3, r3
 800865a:	461a      	mov	r2, r3
 800865c:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 800865e:	2100      	movs	r1, #0
 8008660:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008662:	4b19      	ldr	r3, [pc, #100]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 8008664:	7a5b      	ldrb	r3, [r3, #9]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	4a17      	ldr	r2, [pc, #92]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008672:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 8008674:	7a5b      	ldrb	r3, [r3, #9]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	461a      	mov	r2, r3
 800867a:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 800867c:	4413      	add	r3, r2
 800867e:	79fa      	ldrb	r2, [r7, #7]
 8008680:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008682:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 8008684:	7a5b      	ldrb	r3, [r3, #9]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	b2d1      	uxtb	r1, r2
 800868c:	4a0e      	ldr	r2, [pc, #56]	; (80086c8 <FATFS_LinkDriverEx+0x94>)
 800868e:	7251      	strb	r1, [r2, #9]
 8008690:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008692:	7dbb      	ldrb	r3, [r7, #22]
 8008694:	3330      	adds	r3, #48	; 0x30
 8008696:	b2da      	uxtb	r2, r3
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	3301      	adds	r3, #1
 80086a0:	223a      	movs	r2, #58	; 0x3a
 80086a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	3302      	adds	r3, #2
 80086a8:	222f      	movs	r2, #47	; 0x2f
 80086aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	3303      	adds	r3, #3
 80086b0:	2200      	movs	r2, #0
 80086b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	20000448 	.word	0x20000448

080086cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80086d6:	2200      	movs	r2, #0
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7ff ffaa 	bl	8008634 <FATFS_LinkDriverEx>
 80086e0:	4603      	mov	r3, r0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7c1b      	ldrb	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10e      	bne.n	8008720 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8008702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008706:	2202      	movs	r2, #2
 8008708:	2181      	movs	r1, #129	; 0x81
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f003 fc8c 	bl	800c028 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8008710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008714:	2202      	movs	r2, #2
 8008716:	2101      	movs	r1, #1
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f003 fc85 	bl	800c028 <USBD_LL_OpenEP>
 800871e:	e00b      	b.n	8008738 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8008720:	2340      	movs	r3, #64	; 0x40
 8008722:	2202      	movs	r2, #2
 8008724:	2181      	movs	r1, #129	; 0x81
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f003 fc7e 	bl	800c028 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800872c:	2340      	movs	r3, #64	; 0x40
 800872e:	2202      	movs	r2, #2
 8008730:	2101      	movs	r1, #1
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f003 fc78 	bl	800c028 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8008738:	2308      	movs	r3, #8
 800873a:	2203      	movs	r2, #3
 800873c:	2182      	movs	r1, #130	; 0x82
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f003 fc72 	bl	800c028 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008744:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008748:	f003 fff4 	bl	800c734 <malloc>
 800874c:	4603      	mov	r3, r0
 800874e:	461a      	mov	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800875c:	2b00      	cmp	r3, #0
 800875e:	d102      	bne.n	8008766 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 8008760:	2301      	movs	r3, #1
 8008762:	73fb      	strb	r3, [r7, #15]
 8008764:	e026      	b.n	80087b4 <USBD_CDC_Init+0xca>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800876c:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2200      	movs	r2, #0
 8008784:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	7c1b      	ldrb	r3, [r3, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d109      	bne.n	80087a4 <USBD_CDC_Init+0xba>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800879a:	2101      	movs	r1, #1
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f003 fdbf 	bl	800c320 <USBD_LL_PrepareReceive>
 80087a2:	e007      	b.n	80087b4 <USBD_CDC_Init+0xca>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087aa:	2340      	movs	r3, #64	; 0x40
 80087ac:	2101      	movs	r1, #1
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f003 fdb6 	bl	800c320 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	460b      	mov	r3, r1
 80087c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 80087ce:	2181      	movs	r1, #129	; 0x81
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f003 fc67 	bl	800c0a4 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 80087d6:	2101      	movs	r1, #1
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f003 fc63 	bl	800c0a4 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 80087de:	2182      	movs	r1, #130	; 0x82
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f003 fc5f 	bl	800c0a4 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00e      	beq.n	800880e <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008800:	4618      	mov	r0, r3
 8008802:	f003 ff9f 	bl	800c744 <free>
    pdev->pClassData = NULL;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008828:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008832:	2b00      	cmp	r3, #0
 8008834:	d03a      	beq.n	80088ac <USBD_CDC_Setup+0x94>
 8008836:	2b20      	cmp	r3, #32
 8008838:	d000      	beq.n	800883c <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800883a:	e043      	b.n	80088c4 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	88db      	ldrh	r3, [r3, #6]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d029      	beq.n	8008898 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	b25b      	sxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	da11      	bge.n	8008872 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800885a:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	88d2      	ldrh	r2, [r2, #6]
 8008860:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8008862:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	88db      	ldrh	r3, [r3, #6]
 8008868:	461a      	mov	r2, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 f848 	bl	8009900 <USBD_CtlSendData>
    break;
 8008870:	e029      	b.n	80088c6 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	785a      	ldrb	r2, [r3, #1]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	88db      	ldrh	r3, [r3, #6]
 8008880:	b2da      	uxtb	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 8008888:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	88db      	ldrh	r3, [r3, #6]
 800888e:	461a      	mov	r2, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f001 f863 	bl	800995c <USBD_CtlPrepareRx>
    break;
 8008896:	e016      	b.n	80088c6 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	7850      	ldrb	r0, [r2, #1]
 80088a4:	2200      	movs	r2, #0
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	4798      	blx	r3
    break;
 80088aa:	e00c      	b.n	80088c6 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	785b      	ldrb	r3, [r3, #1]
 80088b0:	2b0a      	cmp	r3, #10
 80088b2:	d001      	beq.n	80088b8 <USBD_CDC_Setup+0xa0>
 80088b4:	2b0b      	cmp	r3, #11
      break;
 80088b6:	e005      	b.n	80088c4 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 80088b8:	2201      	movs	r2, #1
 80088ba:	4905      	ldr	r1, [pc, #20]	; (80088d0 <USBD_CDC_Setup+0xb8>)
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 f81f 	bl	8009900 <USBD_CtlSendData>
      break;
 80088c2:	bf00      	nop
    break;
 80088c4:	bf00      	nop
  }
  return USBD_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	20000454 	.word	0x20000454

080088d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80088e6:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d005      	beq.n	80088fe <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e000      	b.n	8008900 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 80088fe:	2302      	movs	r3, #2
  }
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800891e:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f003 fd35 	bl	800c394 <USBD_LL_GetRxDataSize>
 800892a:	4602      	mov	r2, r0
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00d      	beq.n	8008958 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008950:	4611      	mov	r1, r2
 8008952:	4798      	blx	r3

    return USBD_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	e000      	b.n	800895a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008958:	2302      	movs	r3, #2
  }
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008970:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d015      	beq.n	80089a8 <USBD_CDC_EP0_RxReady+0x46>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008982:	2bff      	cmp	r3, #255	; 0xff
 8008984:	d010      	beq.n	80089a8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008994:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800899c:	b292      	uxth	r2, r2
 800899e:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	22ff      	movs	r2, #255	; 0xff
 80089a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2243      	movs	r2, #67	; 0x43
 80089c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80089c2:	4b03      	ldr	r3, [pc, #12]	; (80089d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	2000009c 	.word	0x2000009c

080089d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2243      	movs	r2, #67	; 0x43
 80089e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80089e2:	4b03      	ldr	r3, [pc, #12]	; (80089f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	20000058 	.word	0x20000058

080089f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2243      	movs	r2, #67	; 0x43
 8008a00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008a02:	4b03      	ldr	r3, [pc, #12]	; (8008a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	200000e0 	.word	0x200000e0

08008a14 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	220a      	movs	r2, #10
 8008a20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008a22:	4b03      	ldr	r3, [pc, #12]	; (8008a30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	20000014 	.word	0x20000014

08008a34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008a3e:	2302      	movs	r3, #2
 8008a40:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b087      	sub	sp, #28
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008a76:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8008a80:	88fa      	ldrh	r2, [r7, #6]
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	371c      	adds	r7, #28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b085      	sub	sp, #20
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008aa6:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008acc:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d017      	beq.n	8008b08 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	7c1b      	ldrb	r3, [r3, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d109      	bne.n	8008af4 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aea:	2101      	movs	r1, #1
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f003 fc17 	bl	800c320 <USBD_LL_PrepareReceive>
 8008af2:	e007      	b.n	8008b04 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008afa:	2340      	movs	r3, #64	; 0x40
 8008afc:	2101      	movs	r1, #1
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f003 fc0e 	bl	800c320 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	e000      	b.n	8008b0a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008b08:	2302      	movs	r3, #2
  }
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8008b26:	2302      	movs	r3, #2
 8008b28:	e01a      	b.n	8008b60 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d003      	beq.n	8008b3c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	79fa      	ldrb	r2, [r7, #7]
 8008b56:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f003 f9db 	bl	800bf14 <USBD_LL_Init>
  
  return USBD_OK; 
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d006      	beq.n	8008b8a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
 8008b88:	e001      	b.n	8008b8e <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f003 fa0d 	bl	800bfc4 <USBD_LL_Start>
  
  return USBD_OK;  
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00c      	beq.n	8008bfe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	78fa      	ldrb	r2, [r7, #3]
 8008bee:	4611      	mov	r1, r2
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	4798      	blx	r3
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	78fa      	ldrb	r2, [r7, #3]
 8008c1e:	4611      	mov	r1, r2
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	4798      	blx	r3
  return USBD_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 fdb4 	bl	80097ae <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8008c54:	461a      	mov	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8008c62:	f003 031f 	and.w	r3, r3, #31
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d00b      	beq.n	8008c82 <USBD_LL_SetupStage+0x54>
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d011      	beq.n	8008c92 <USBD_LL_SetupStage+0x64>
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d117      	bne.n	8008ca2 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f9c6 	bl	800900c <USBD_StdDevReq>
    break;
 8008c80:	e01a      	b.n	8008cb8 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fa0e 	bl	80090ac <USBD_StdItfReq>
    break;
 8008c90:	e012      	b.n	8008cb8 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fa39 	bl	8009112 <USBD_StdEPReq>
    break;
 8008ca0:	e00a      	b.n	8008cb8 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8008ca8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f003 fa2d 	bl	800c110 <USBD_LL_StallEP>
    break;
 8008cb6:	bf00      	nop
  }  
  return USBD_OK;  
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b086      	sub	sp, #24
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	60f8      	str	r0, [r7, #12]
 8008cca:	460b      	mov	r3, r1
 8008ccc:	607a      	str	r2, [r7, #4]
 8008cce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8008cd0:	7afb      	ldrb	r3, [r7, #11]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d138      	bne.n	8008d48 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8008cdc:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d142      	bne.n	8008d6e <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	689a      	ldr	r2, [r3, #8]
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d914      	bls.n	8008d1e <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	689a      	ldr	r2, [r3, #8]
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	1ad2      	subs	r2, r2, r3
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	bf28      	it	cs
 8008d0e:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	461a      	mov	r2, r3
 8008d14:	6879      	ldr	r1, [r7, #4]
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 fe3e 	bl	8009998 <USBD_CtlContinueRx>
 8008d1c:	e027      	b.n	8008d6e <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d105      	bne.n	8008d40 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 fe3b 	bl	80099bc <USBD_CtlSendStatus>
 8008d46:	e012      	b.n	8008d6e <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00c      	beq.n	8008d6e <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d107      	bne.n	8008d6e <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	7afa      	ldrb	r2, [r7, #11]
 8008d68:	4611      	mov	r1, r2
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	4798      	blx	r3
  }  
  return USBD_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	460b      	mov	r3, r1
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8008d86:	7afb      	ldrb	r3, [r7, #11]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d16c      	bne.n	8008e66 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3314      	adds	r3, #20
 8008d90:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d157      	bne.n	8008e4c <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	689a      	ldr	r2, [r3, #8]
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d915      	bls.n	8008dd4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	689a      	ldr	r2, [r3, #8]
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	1ad2      	subs	r2, r2, r3
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	6879      	ldr	r1, [r7, #4]
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 fdb9 	bl	8009938 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	2200      	movs	r2, #0
 8008dca:	2100      	movs	r1, #0
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f003 faa7 	bl	800c320 <USBD_LL_PrepareReceive>
 8008dd2:	e03b      	b.n	8008e4c <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	68d2      	ldr	r2, [r2, #12]
 8008ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008de0:	fb02 f201 	mul.w	r2, r2, r1
 8008de4:	1a9b      	subs	r3, r3, r2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d11c      	bne.n	8008e24 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d316      	bcc.n	8008e24 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d20f      	bcs.n	8008e24 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8008e04:	2200      	movs	r2, #0
 8008e06:	2100      	movs	r1, #0
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 fd95 	bl	8009938 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8008e16:	2300      	movs	r3, #0
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f003 fa7f 	bl	800c320 <USBD_LL_PrepareReceive>
 8008e22:	e013      	b.n	8008e4c <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00a      	beq.n	8008e46 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008e36:	2b03      	cmp	r3, #3
 8008e38:	d105      	bne.n	8008e46 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 fdcb 	bl	80099e2 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d11a      	bne.n	8008e8c <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f7ff feac 	bl	8008bb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8008e64:	e012      	b.n	8008e8c <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00c      	beq.n	8008e8c <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8008e78:	2b03      	cmp	r3, #3
 8008e7a:	d107      	bne.n	8008e8c <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	7afa      	ldrb	r2, [r7, #11]
 8008e86:	4611      	mov	r1, r2
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	4798      	blx	r3
  }  
  return USBD_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3718      	adds	r7, #24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b082      	sub	sp, #8
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8008e9e:	2340      	movs	r3, #64	; 0x40
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f003 f8bf 	bl	800c028 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2240      	movs	r2, #64	; 0x40
 8008eae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8008eb2:	2340      	movs	r3, #64	; 0x40
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2180      	movs	r1, #128	; 0x80
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f003 f8b5 	bl	800c028 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2240      	movs	r2, #64	; 0x40
 8008ec2:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d009      	beq.n	8008eea <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	6852      	ldr	r2, [r2, #4]
 8008ee2:	b2d2      	uxtb	r2, r2
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	4798      	blx	r3
 
  
  return USBD_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	78fa      	ldrb	r2, [r7, #3]
 8008f04:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2204      	movs	r2, #4
 8008f2c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b083      	sub	sp, #12
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d10b      	bne.n	8008f8a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	6852      	ldr	r2, [r2, #4]
 8008ffa:	b2d2      	uxtb	r2, r2
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	4798      	blx	r3
   
  return USBD_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	785b      	ldrb	r3, [r3, #1]
 800901e:	2b09      	cmp	r3, #9
 8009020:	d839      	bhi.n	8009096 <USBD_StdDevReq+0x8a>
 8009022:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <USBD_StdDevReq+0x1c>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	08009079 	.word	0x08009079
 800902c:	0800908d 	.word	0x0800908d
 8009030:	08009097 	.word	0x08009097
 8009034:	08009083 	.word	0x08009083
 8009038:	08009097 	.word	0x08009097
 800903c:	0800905b 	.word	0x0800905b
 8009040:	08009051 	.word	0x08009051
 8009044:	08009097 	.word	0x08009097
 8009048:	0800906f 	.word	0x0800906f
 800904c:	08009065 	.word	0x08009065
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f936 	bl	80092c4 <USBD_GetDescriptor>
    break;
 8009058:	e022      	b.n	80090a0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fa41 	bl	80094e4 <USBD_SetAddress>
    break;
 8009062:	e01d      	b.n	80090a0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fa7a 	bl	8009560 <USBD_SetConfig>
    break;
 800906c:	e018      	b.n	80090a0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fafd 	bl	8009670 <USBD_GetConfig>
    break;
 8009076:	e013      	b.n	80090a0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fb2a 	bl	80096d4 <USBD_GetStatus>
    break;
 8009080:	e00e      	b.n	80090a0 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fb4f 	bl	8009728 <USBD_SetFeature>
    break;
 800908a:	e009      	b.n	80090a0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fb65 	bl	800975e <USBD_ClrFeature>
    break;
 8009094:	e004      	b.n	80090a0 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fbc5 	bl	8009828 <USBD_CtlError>
    break;
 800909e:	bf00      	nop
  }
  
  return ret;
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop

080090ac <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d11b      	bne.n	80090fc <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	889b      	ldrh	r3, [r3, #4]
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d811      	bhi.n	80090f2 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	88db      	ldrh	r3, [r3, #6]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d110      	bne.n	8009106 <USBD_StdItfReq+0x5a>
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10d      	bne.n	8009106 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fc66 	bl	80099bc <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80090f0:	e009      	b.n	8009106 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fb97 	bl	8009828 <USBD_CtlError>
    break;
 80090fa:	e004      	b.n	8009106 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fb92 	bl	8009828 <USBD_CtlError>
    break;
 8009104:	e000      	b.n	8009108 <USBD_StdItfReq+0x5c>
    break;
 8009106:	bf00      	nop
  }
  return USBD_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	889b      	ldrh	r3, [r3, #4]
 8009124:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800912e:	2b20      	cmp	r3, #32
 8009130:	d108      	bne.n	8009144 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	4798      	blx	r3
    
    return USBD_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	e0ba      	b.n	80092ba <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	785b      	ldrb	r3, [r3, #1]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d039      	beq.n	80091c0 <USBD_StdEPReq+0xae>
 800914c:	2b03      	cmp	r3, #3
 800914e:	d002      	beq.n	8009156 <USBD_StdEPReq+0x44>
 8009150:	2b00      	cmp	r3, #0
 8009152:	d06b      	beq.n	800922c <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8009154:	e0b0      	b.n	80092b8 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800915c:	2b02      	cmp	r3, #2
 800915e:	d002      	beq.n	8009166 <USBD_StdEPReq+0x54>
 8009160:	2b03      	cmp	r3, #3
 8009162:	d00c      	beq.n	800917e <USBD_StdEPReq+0x6c>
 8009164:	e025      	b.n	80091b2 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d027      	beq.n	80091bc <USBD_StdEPReq+0xaa>
 800916c:	7bbb      	ldrb	r3, [r7, #14]
 800916e:	2b80      	cmp	r3, #128	; 0x80
 8009170:	d024      	beq.n	80091bc <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8009172:	7bbb      	ldrb	r3, [r7, #14]
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f002 ffca 	bl	800c110 <USBD_LL_StallEP>
      break;	
 800917c:	e01e      	b.n	80091bc <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	885b      	ldrh	r3, [r3, #2]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10a      	bne.n	800919c <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d007      	beq.n	800919c <USBD_StdEPReq+0x8a>
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	2b80      	cmp	r3, #128	; 0x80
 8009190:	d004      	beq.n	800919c <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8009192:	7bbb      	ldrb	r3, [r7, #14]
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f002 ffba 	bl	800c110 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fc06 	bl	80099bc <USBD_CtlSendStatus>
      break;
 80091b0:	e005      	b.n	80091be <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fb37 	bl	8009828 <USBD_CtlError>
      break;    
 80091ba:	e000      	b.n	80091be <USBD_StdEPReq+0xac>
      break;	
 80091bc:	bf00      	nop
    break;
 80091be:	e07b      	b.n	80092b8 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d002      	beq.n	80091d0 <USBD_StdEPReq+0xbe>
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d00c      	beq.n	80091e8 <USBD_StdEPReq+0xd6>
 80091ce:	e024      	b.n	800921a <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d026      	beq.n	8009224 <USBD_StdEPReq+0x112>
 80091d6:	7bbb      	ldrb	r3, [r7, #14]
 80091d8:	2b80      	cmp	r3, #128	; 0x80
 80091da:	d023      	beq.n	8009224 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f002 ff95 	bl	800c110 <USBD_LL_StallEP>
      break;	
 80091e6:	e01d      	b.n	8009224 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	885b      	ldrh	r3, [r3, #2]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d11b      	bne.n	8009228 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 80091f0:	7bbb      	ldrb	r3, [r7, #14]
 80091f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80091fa:	7bbb      	ldrb	r3, [r7, #14]
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f002 ffbc 	bl	800c17c <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fbd2 	bl	80099bc <USBD_CtlSendStatus>
      break;
 8009218:	e006      	b.n	8009228 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fb03 	bl	8009828 <USBD_CtlError>
      break;    
 8009222:	e002      	b.n	800922a <USBD_StdEPReq+0x118>
      break;	
 8009224:	bf00      	nop
 8009226:	e047      	b.n	80092b8 <USBD_StdEPReq+0x1a6>
      break;
 8009228:	bf00      	nop
    break;
 800922a:	e045      	b.n	80092b8 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009232:	2b02      	cmp	r3, #2
 8009234:	d002      	beq.n	800923c <USBD_StdEPReq+0x12a>
 8009236:	2b03      	cmp	r3, #3
 8009238:	d00b      	beq.n	8009252 <USBD_StdEPReq+0x140>
 800923a:	e036      	b.n	80092aa <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 800923c:	7bbb      	ldrb	r3, [r7, #14]
 800923e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009242:	2b00      	cmp	r3, #0
 8009244:	d036      	beq.n	80092b4 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f002 ff60 	bl	800c110 <USBD_LL_StallEP>
      break;	
 8009250:	e030      	b.n	80092b4 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8009252:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009256:	2b00      	cmp	r3, #0
 8009258:	da08      	bge.n	800926c <USBD_StdEPReq+0x15a>
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009260:	3301      	adds	r3, #1
 8009262:	011b      	lsls	r3, r3, #4
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	4413      	add	r3, r2
 8009268:	3304      	adds	r3, #4
 800926a:	e007      	b.n	800927c <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8009272:	3310      	adds	r3, #16
 8009274:	011b      	lsls	r3, r3, #4
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	4413      	add	r3, r2
 800927a:	3304      	adds	r3, #4
 800927c:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800927e:	7bbb      	ldrb	r3, [r7, #14]
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f002 ffb0 	bl	800c1e8 <USBD_LL_IsStallEP>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	2201      	movs	r2, #1
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	e002      	b.n	800929c <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	2200      	movs	r2, #0
 800929a:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 800929c:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 800929e:	2202      	movs	r2, #2
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fb2c 	bl	8009900 <USBD_CtlSendData>
      break;
 80092a8:	e005      	b.n	80092b6 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fabb 	bl	8009828 <USBD_CtlError>
      break;
 80092b2:	e000      	b.n	80092b6 <USBD_StdEPReq+0x1a4>
      break;	
 80092b4:	bf00      	nop
    break;
 80092b6:	bf00      	nop
  }
  return ret;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	885b      	ldrh	r3, [r3, #2]
 80092d2:	0a1b      	lsrs	r3, r3, #8
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	3b01      	subs	r3, #1
 80092d8:	2b0e      	cmp	r3, #14
 80092da:	f200 80e5 	bhi.w	80094a8 <USBD_GetDescriptor+0x1e4>
 80092de:	a201      	add	r2, pc, #4	; (adr r2, 80092e4 <USBD_GetDescriptor+0x20>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	08009339 	.word	0x08009339
 80092e8:	08009351 	.word	0x08009351
 80092ec:	08009391 	.word	0x08009391
 80092f0:	080094a9 	.word	0x080094a9
 80092f4:	080094a9 	.word	0x080094a9
 80092f8:	08009455 	.word	0x08009455
 80092fc:	0800947b 	.word	0x0800947b
 8009300:	080094a9 	.word	0x080094a9
 8009304:	080094a9 	.word	0x080094a9
 8009308:	080094a9 	.word	0x080094a9
 800930c:	080094a9 	.word	0x080094a9
 8009310:	080094a9 	.word	0x080094a9
 8009314:	080094a9 	.word	0x080094a9
 8009318:	080094a9 	.word	0x080094a9
 800931c:	08009321 	.word	0x08009321
  { 
#if (USBD_LPM_ENABLED == 1)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	7c12      	ldrb	r2, [r2, #16]
 800932c:	f107 010a 	add.w	r1, r7, #10
 8009330:	4610      	mov	r0, r2
 8009332:	4798      	blx	r3
 8009334:	60f8      	str	r0, [r7, #12]
    break;
 8009336:	e0bc      	b.n	80094b2 <USBD_GetDescriptor+0x1ee>
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	7c12      	ldrb	r2, [r2, #16]
 8009344:	f107 010a 	add.w	r1, r7, #10
 8009348:	4610      	mov	r0, r2
 800934a:	4798      	blx	r3
 800934c:	60f8      	str	r0, [r7, #12]
    break;
 800934e:	e0b0      	b.n	80094b2 <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	7c1b      	ldrb	r3, [r3, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10d      	bne.n	8009374 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800935e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009360:	f107 020a 	add.w	r2, r7, #10
 8009364:	4610      	mov	r0, r2
 8009366:	4798      	blx	r3
 8009368:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3301      	adds	r3, #1
 800936e:	2202      	movs	r2, #2
 8009370:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009372:	e09e      	b.n	80094b2 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800937a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937c:	f107 020a 	add.w	r2, r7, #10
 8009380:	4610      	mov	r0, r2
 8009382:	4798      	blx	r3
 8009384:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	3301      	adds	r3, #1
 800938a:	2202      	movs	r2, #2
 800938c:	701a      	strb	r2, [r3, #0]
    break;
 800938e:	e090      	b.n	80094b2 <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	885b      	ldrh	r3, [r3, #2]
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b05      	cmp	r3, #5
 8009398:	d856      	bhi.n	8009448 <USBD_GetDescriptor+0x184>
 800939a:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <USBD_GetDescriptor+0xdc>)
 800939c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a0:	080093b9 	.word	0x080093b9
 80093a4:	080093d1 	.word	0x080093d1
 80093a8:	080093e9 	.word	0x080093e9
 80093ac:	08009401 	.word	0x08009401
 80093b0:	08009419 	.word	0x08009419
 80093b4:	08009431 	.word	0x08009431
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	7c12      	ldrb	r2, [r2, #16]
 80093c4:	f107 010a 	add.w	r1, r7, #10
 80093c8:	4610      	mov	r0, r2
 80093ca:	4798      	blx	r3
 80093cc:	60f8      	str	r0, [r7, #12]
      break;
 80093ce:	e040      	b.n	8009452 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	7c12      	ldrb	r2, [r2, #16]
 80093dc:	f107 010a 	add.w	r1, r7, #10
 80093e0:	4610      	mov	r0, r2
 80093e2:	4798      	blx	r3
 80093e4:	60f8      	str	r0, [r7, #12]
      break;
 80093e6:	e034      	b.n	8009452 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	7c12      	ldrb	r2, [r2, #16]
 80093f4:	f107 010a 	add.w	r1, r7, #10
 80093f8:	4610      	mov	r0, r2
 80093fa:	4798      	blx	r3
 80093fc:	60f8      	str	r0, [r7, #12]
      break;
 80093fe:	e028      	b.n	8009452 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	7c12      	ldrb	r2, [r2, #16]
 800940c:	f107 010a 	add.w	r1, r7, #10
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	60f8      	str	r0, [r7, #12]
      break;
 8009416:	e01c      	b.n	8009452 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	7c12      	ldrb	r2, [r2, #16]
 8009424:	f107 010a 	add.w	r1, r7, #10
 8009428:	4610      	mov	r0, r2
 800942a:	4798      	blx	r3
 800942c:	60f8      	str	r0, [r7, #12]
      break;
 800942e:	e010      	b.n	8009452 <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	7c12      	ldrb	r2, [r2, #16]
 800943c:	f107 010a 	add.w	r1, r7, #10
 8009440:	4610      	mov	r0, r2
 8009442:	4798      	blx	r3
 8009444:	60f8      	str	r0, [r7, #12]
      break;
 8009446:	e004      	b.n	8009452 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f9ec 	bl	8009828 <USBD_CtlError>
      return;
 8009450:	e044      	b.n	80094dc <USBD_GetDescriptor+0x218>
#endif   
    }
    break;
 8009452:	e02e      	b.n	80094b2 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	7c1b      	ldrb	r3, [r3, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d109      	bne.n	8009470 <USBD_GetDescriptor+0x1ac>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009464:	f107 020a 	add.w	r2, r7, #10
 8009468:	4610      	mov	r0, r2
 800946a:	4798      	blx	r3
 800946c:	60f8      	str	r0, [r7, #12]
      break;
 800946e:	e020      	b.n	80094b2 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f9d8 	bl	8009828 <USBD_CtlError>
      return;
 8009478:	e030      	b.n	80094dc <USBD_GetDescriptor+0x218>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	7c1b      	ldrb	r3, [r3, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10d      	bne.n	800949e <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948a:	f107 020a 	add.w	r2, r7, #10
 800948e:	4610      	mov	r0, r2
 8009490:	4798      	blx	r3
 8009492:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	3301      	adds	r3, #1
 8009498:	2207      	movs	r2, #7
 800949a:	701a      	strb	r2, [r3, #0]
      break; 
 800949c:	e009      	b.n	80094b2 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f9c1 	bl	8009828 <USBD_CtlError>
      return;
 80094a6:	e019      	b.n	80094dc <USBD_GetDescriptor+0x218>
    }

  default: 
     USBD_CtlError(pdev , req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f9bc 	bl	8009828 <USBD_CtlError>
    return;
 80094b0:	e014      	b.n	80094dc <USBD_GetDescriptor+0x218>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80094b2:	897b      	ldrh	r3, [r7, #10]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d011      	beq.n	80094dc <USBD_GetDescriptor+0x218>
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	88db      	ldrh	r3, [r3, #6]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00d      	beq.n	80094dc <USBD_GetDescriptor+0x218>
  {
    
    len = MIN(len , req->wLength);
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	88da      	ldrh	r2, [r3, #6]
 80094c4:	897b      	ldrh	r3, [r7, #10]
 80094c6:	4293      	cmp	r3, r2
 80094c8:	bf28      	it	cs
 80094ca:	4613      	movcs	r3, r2
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80094d0:	897b      	ldrh	r3, [r7, #10]
 80094d2:	461a      	mov	r2, r3
 80094d4:	68f9      	ldr	r1, [r7, #12]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fa12 	bl	8009900 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop

080094e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	889b      	ldrh	r3, [r3, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d12c      	bne.n	8009550 <USBD_SetAddress+0x6c>
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	88db      	ldrh	r3, [r3, #6]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d128      	bne.n	8009550 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	885b      	ldrh	r3, [r3, #2]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009508:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009510:	2b03      	cmp	r3, #3
 8009512:	d104      	bne.n	800951e <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f986 	bl	8009828 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800951c:	e01c      	b.n	8009558 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	7bfa      	ldrb	r2, [r7, #15]
 8009522:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f002 fe88 	bl	800c240 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fa43 	bl	80099bc <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8009536:	7bfb      	ldrb	r3, [r7, #15]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d004      	beq.n	8009546 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2202      	movs	r2, #2
 8009540:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8009544:	e008      	b.n	8009558 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800954e:	e003      	b.n	8009558 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8009550:	6839      	ldr	r1, [r7, #0]
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f968 	bl	8009828 <USBD_CtlError>
  } 
}
 8009558:	bf00      	nop
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	885b      	ldrh	r3, [r3, #2]
 800956e:	b2da      	uxtb	r2, r3
 8009570:	4b3e      	ldr	r3, [pc, #248]	; (800966c <USBD_SetConfig+0x10c>)
 8009572:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8009574:	4b3d      	ldr	r3, [pc, #244]	; (800966c <USBD_SetConfig+0x10c>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d904      	bls.n	8009586 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 800957c:	6839      	ldr	r1, [r7, #0]
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f952 	bl	8009828 <USBD_CtlError>
 8009584:	e06f      	b.n	8009666 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800958c:	2b02      	cmp	r3, #2
 800958e:	d002      	beq.n	8009596 <USBD_SetConfig+0x36>
 8009590:	2b03      	cmp	r3, #3
 8009592:	d023      	beq.n	80095dc <USBD_SetConfig+0x7c>
 8009594:	e062      	b.n	800965c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8009596:	4b35      	ldr	r3, [pc, #212]	; (800966c <USBD_SetConfig+0x10c>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d01a      	beq.n	80095d4 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800959e:	4b33      	ldr	r3, [pc, #204]	; (800966c <USBD_SetConfig+0x10c>)
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2203      	movs	r2, #3
 80095ac:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80095b0:	4b2e      	ldr	r3, [pc, #184]	; (800966c <USBD_SetConfig+0x10c>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7ff fb07 	bl	8008bca <USBD_SetClassConfig>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d104      	bne.n	80095cc <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f92f 	bl	8009828 <USBD_CtlError>
          return;
 80095ca:	e04c      	b.n	8009666 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f9f5 	bl	80099bc <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80095d2:	e048      	b.n	8009666 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f9f1 	bl	80099bc <USBD_CtlSendStatus>
      break;
 80095da:	e044      	b.n	8009666 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80095dc:	4b23      	ldr	r3, [pc, #140]	; (800966c <USBD_SetConfig+0x10c>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d112      	bne.n	800960a <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80095ec:	4b1f      	ldr	r3, [pc, #124]	; (800966c <USBD_SetConfig+0x10c>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	461a      	mov	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80095f6:	4b1d      	ldr	r3, [pc, #116]	; (800966c <USBD_SetConfig+0x10c>)
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff fb03 	bl	8008c08 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f9da 	bl	80099bc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009608:	e02d      	b.n	8009666 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 800960a:	4b18      	ldr	r3, [pc, #96]	; (800966c <USBD_SetConfig+0x10c>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	429a      	cmp	r2, r3
 8009616:	d01d      	beq.n	8009654 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff faf1 	bl	8008c08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009626:	4b11      	ldr	r3, [pc, #68]	; (800966c <USBD_SetConfig+0x10c>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8009630:	4b0e      	ldr	r3, [pc, #56]	; (800966c <USBD_SetConfig+0x10c>)
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff fac7 	bl	8008bca <USBD_SetClassConfig>
 800963c:	4603      	mov	r3, r0
 800963e:	2b02      	cmp	r3, #2
 8009640:	d104      	bne.n	800964c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f8ef 	bl	8009828 <USBD_CtlError>
          return;
 800964a:	e00c      	b.n	8009666 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f9b5 	bl	80099bc <USBD_CtlSendStatus>
      break;
 8009652:	e008      	b.n	8009666 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f9b1 	bl	80099bc <USBD_CtlSendStatus>
      break;
 800965a:	e004      	b.n	8009666 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f8e2 	bl	8009828 <USBD_CtlError>
      break;
 8009664:	bf00      	nop
    }
  }
}
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20000455 	.word	0x20000455

08009670 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	88db      	ldrh	r3, [r3, #6]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d004      	beq.n	800968c <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f8cf 	bl	8009828 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800968a:	e01f      	b.n	80096cc <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8009692:	2b02      	cmp	r3, #2
 8009694:	d002      	beq.n	800969c <USBD_GetConfig+0x2c>
 8009696:	2b03      	cmp	r3, #3
 8009698:	d00b      	beq.n	80096b2 <USBD_GetConfig+0x42>
 800969a:	e012      	b.n	80096c2 <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 80096a6:	2201      	movs	r2, #1
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f928 	bl	8009900 <USBD_CtlSendData>
      break;
 80096b0:	e00c      	b.n	80096cc <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80096b6:	2201      	movs	r2, #1
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f920 	bl	8009900 <USBD_CtlSendData>
      break;
 80096c0:	e004      	b.n	80096cc <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f8af 	bl	8009828 <USBD_CtlError>
      break;
 80096ca:	bf00      	nop
}
 80096cc:	bf00      	nop
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80096e4:	3b02      	subs	r3, #2
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d815      	bhi.n	8009716 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d005      	beq.n	8009706 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	f043 0202 	orr.w	r2, r3, #2
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 800970a:	2202      	movs	r2, #2
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f8f6 	bl	8009900 <USBD_CtlSendData>
                      2);
    break;
 8009714:	e004      	b.n	8009720 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f885 	bl	8009828 <USBD_CtlError>
    break;
 800971e:	bf00      	nop
  }
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	885b      	ldrh	r3, [r3, #2]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d10d      	bne.n	8009756 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f933 	bl	80099bc <USBD_CtlSendStatus>
  }

}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b082      	sub	sp, #8
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800976e:	3b02      	subs	r3, #2
 8009770:	2b01      	cmp	r3, #1
 8009772:	d812      	bhi.n	800979a <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	885b      	ldrh	r3, [r3, #2]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d113      	bne.n	80097a4 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f912 	bl	80099bc <USBD_CtlSendStatus>
    }
    break;
 8009798:	e004      	b.n	80097a4 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f843 	bl	8009828 <USBD_CtlError>
    break;
 80097a2:	e000      	b.n	80097a6 <USBD_ClrFeature+0x48>
    break;
 80097a4:	bf00      	nop
  }
}
 80097a6:	bf00      	nop
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b083      	sub	sp, #12
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	781a      	ldrb	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	785a      	ldrb	r2, [r3, #1]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	3302      	adds	r3, #2
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	3303      	adds	r3, #3
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	021b      	lsls	r3, r3, #8
 80097da:	b29b      	uxth	r3, r3
 80097dc:	4413      	add	r3, r2
 80097de:	b29a      	uxth	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	3304      	adds	r3, #4
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	3305      	adds	r3, #5
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	021b      	lsls	r3, r3, #8
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	4413      	add	r3, r2
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	3306      	adds	r3, #6
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	b29a      	uxth	r2, r3
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	3307      	adds	r3, #7
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	b29b      	uxth	r3, r3
 8009810:	021b      	lsls	r3, r3, #8
 8009812:	b29b      	uxth	r3, r3
 8009814:	4413      	add	r3, r2
 8009816:	b29a      	uxth	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	80da      	strh	r2, [r3, #6]

}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8009832:	2180      	movs	r1, #128	; 0x80
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f002 fc6b 	bl	800c110 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800983a:	2100      	movs	r1, #0
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f002 fc67 	bl	800c110 <USBD_LL_StallEP>
}
 8009842:	bf00      	nop
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b086      	sub	sp, #24
 800984e:	af00      	add	r7, sp, #0
 8009850:	60f8      	str	r0, [r7, #12]
 8009852:	60b9      	str	r1, [r7, #8]
 8009854:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8009856:	2300      	movs	r3, #0
 8009858:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d033      	beq.n	80098c8 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 f835 	bl	80098d0 <USBD_GetLen>
 8009866:	4603      	mov	r3, r0
 8009868:	3301      	adds	r3, #1
 800986a:	b29b      	uxth	r3, r3
 800986c:	005b      	lsls	r3, r3, #1
 800986e:	b29a      	uxth	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8009874:	7dfb      	ldrb	r3, [r7, #23]
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	75fa      	strb	r2, [r7, #23]
 800987a:	461a      	mov	r2, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	4413      	add	r3, r2
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	8812      	ldrh	r2, [r2, #0]
 8009884:	b2d2      	uxtb	r2, r2
 8009886:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8009888:	7dfb      	ldrb	r3, [r7, #23]
 800988a:	1c5a      	adds	r2, r3, #1
 800988c:	75fa      	strb	r2, [r7, #23]
 800988e:	461a      	mov	r2, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4413      	add	r3, r2
 8009894:	2203      	movs	r2, #3
 8009896:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8009898:	e012      	b.n	80098c0 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	75fa      	strb	r2, [r7, #23]
 80098a0:	461a      	mov	r2, r3
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	441a      	add	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	1c59      	adds	r1, r3, #1
 80098aa:	60f9      	str	r1, [r7, #12]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80098b0:	7dfb      	ldrb	r3, [r7, #23]
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	75fa      	strb	r2, [r7, #23]
 80098b6:	461a      	mov	r2, r3
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	4413      	add	r3, r2
 80098bc:	2200      	movs	r2, #0
 80098be:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e8      	bne.n	800989a <USBD_GetString+0x50>
    }
  } 
}
 80098c8:	bf00      	nop
 80098ca:	3718      	adds	r7, #24
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 80098dc:	e005      	b.n	80098ea <USBD_GetLen+0x1a>
    {
        len++;
 80098de:	7bfb      	ldrb	r3, [r7, #15]
 80098e0:	3301      	adds	r3, #1
 80098e2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3301      	adds	r3, #1
 80098e8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1f5      	bne.n	80098de <USBD_GetLen+0xe>
    }

    return len;
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3714      	adds	r7, #20
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	4613      	mov	r3, r2
 800990c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2202      	movs	r2, #2
 8009912:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8009916:	88fa      	ldrh	r2, [r7, #6]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800991c:	88fa      	ldrh	r2, [r7, #6]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8009922:	88fb      	ldrh	r3, [r7, #6]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	2100      	movs	r1, #0
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f002 fcbf 	bl	800c2ac <USBD_LL_Transmit>
  
  return USBD_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	4613      	mov	r3, r2
 8009944:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8009946:	88fb      	ldrh	r3, [r7, #6]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	2100      	movs	r1, #0
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f002 fcad 	bl	800c2ac <USBD_LL_Transmit>
  
  return USBD_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	4613      	mov	r3, r2
 8009968:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2203      	movs	r2, #3
 800996e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8009972:	88fa      	ldrh	r2, [r7, #6]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800997a:	88fa      	ldrh	r2, [r7, #6]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8009982:	88fb      	ldrh	r3, [r7, #6]
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	2100      	movs	r1, #0
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f002 fcc9 	bl	800c320 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	4613      	mov	r3, r2
 80099a4:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80099a6:	88fb      	ldrh	r3, [r7, #6]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	2100      	movs	r1, #0
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f002 fcb7 	bl	800c320 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2204      	movs	r2, #4
 80099c8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80099cc:	2300      	movs	r3, #0
 80099ce:	2200      	movs	r2, #0
 80099d0:	2100      	movs	r1, #0
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f002 fc6a 	bl	800c2ac <USBD_LL_Transmit>
  
  return USBD_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2205      	movs	r2, #5
 80099ee:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80099f2:	2300      	movs	r3, #0
 80099f4:	2200      	movs	r2, #0
 80099f6:	2100      	movs	r1, #0
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f002 fc91 	bl	800c320 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device 
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
  uint8_t sdramstatus = SDRAM_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	71fb      	strb	r3, [r7, #7]
  
  /* place for custom code */
  
  return sdramstatus;
 8009a12:	79fb      	ldrb	r3, [r7, #7]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2201      	movs	r2, #1
 8009a32:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	2210      	movs	r2, #16
 8009a38:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2200      	movs	r2, #0
 8009a44:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8009a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a4a:	6839      	ldr	r1, [r7, #0]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7fc fbeb 	bl	8006228 <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8009a52:	2001      	movs	r0, #1
 8009a54:	f7f8 f8f8 	bl	8001c48 <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2210      	movs	r2, #16
 8009a62:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	2201      	movs	r2, #1
 8009a68:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8009a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7fc fbd6 	bl	8006228 <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	2203      	movs	r2, #3
 8009a80:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2210      	movs	r2, #16
 8009a86:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2208      	movs	r2, #8
 8009a8c:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2200      	movs	r2, #0
 8009a92:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8009a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7fc fbc4 	bl	8006228 <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8009aa0:	f44f 7308 	mov.w	r3, #544	; 0x220
 8009aa4:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2204      	movs	r2, #4
 8009aaa:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2210      	movs	r2, #16
 8009ab0:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8009abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7fc fbaf 	bl	8006228 <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  hsdram->Instance->SDRTR = REFRESH_COUNT;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f240 6203 	movw	r2, #1539	; 0x603
 8009ad2:	615a      	str	r2, [r3, #20]

}
 8009ad4:	bf00      	nop
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8009adc:	b480      	push	{r7}
 8009ade:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8009ae0:	4a14      	ldr	r2, [pc, #80]	; (8009b34 <DWT_Delay_Init+0x58>)
 8009ae2:	4b14      	ldr	r3, [pc, #80]	; (8009b34 <DWT_Delay_Init+0x58>)
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009aea:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8009aec:	4a11      	ldr	r2, [pc, #68]	; (8009b34 <DWT_Delay_Init+0x58>)
 8009aee:	4b11      	ldr	r3, [pc, #68]	; (8009b34 <DWT_Delay_Init+0x58>)
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009af6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8009af8:	4a0f      	ldr	r2, [pc, #60]	; (8009b38 <DWT_Delay_Init+0x5c>)
 8009afa:	4b0f      	ldr	r3, [pc, #60]	; (8009b38 <DWT_Delay_Init+0x5c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f023 0301 	bic.w	r3, r3, #1
 8009b02:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8009b04:	4a0c      	ldr	r2, [pc, #48]	; (8009b38 <DWT_Delay_Init+0x5c>)
 8009b06:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <DWT_Delay_Init+0x5c>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f043 0301 	orr.w	r3, r3, #1
 8009b0e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8009b10:	4b09      	ldr	r3, [pc, #36]	; (8009b38 <DWT_Delay_Init+0x5c>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8009b16:	bf00      	nop
     __ASM volatile ("NOP");
 8009b18:	bf00      	nop
  __ASM volatile ("NOP");
 8009b1a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8009b1c:	4b06      	ldr	r3, [pc, #24]	; (8009b38 <DWT_Delay_Init+0x5c>)
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8009b24:	2300      	movs	r3, #0
 8009b26:	e000      	b.n	8009b2a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8009b28:	2301      	movs	r3, #1
  }
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	e000edf0 	.word	0xe000edf0
 8009b38:	e0001000 	.word	0xe0001000

08009b3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SDRAMDISK driver ###########################*/
  retSDRAMDISK = FATFS_LinkDriver(&SDRAMDISK_Driver, SDRAMDISKPath);
 8009b40:	4904      	ldr	r1, [pc, #16]	; (8009b54 <MX_FATFS_Init+0x18>)
 8009b42:	4805      	ldr	r0, [pc, #20]	; (8009b58 <MX_FATFS_Init+0x1c>)
 8009b44:	f7fe fdc2 	bl	80086cc <FATFS_LinkDriver>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	4b03      	ldr	r3, [pc, #12]	; (8009b5c <MX_FATFS_Init+0x20>)
 8009b4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009b50:	bf00      	nop
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	20000514 	.word	0x20000514
 8009b58:	080122b8 	.word	0x080122b8
 8009b5c:	20000978 	.word	0x20000978

08009b60 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8009b68:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <DWT_Delay_us+0x3c>)
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8009b6e:	f7fb fed3 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8009b72:	4602      	mov	r2, r0
 8009b74:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <DWT_Delay_us+0x40>)
 8009b76:	fba3 2302 	umull	r2, r3, r3, r2
 8009b7a:	0c9b      	lsrs	r3, r3, #18
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	fb02 f303 	mul.w	r3, r2, r3
 8009b82:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8009b84:	bf00      	nop
 8009b86:	4b05      	ldr	r3, [pc, #20]	; (8009b9c <DWT_Delay_us+0x3c>)
 8009b88:	685a      	ldr	r2, [r3, #4]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	1ad2      	subs	r2, r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d3f8      	bcc.n	8009b86 <DWT_Delay_us+0x26>
}
 8009b94:	bf00      	nop
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	e0001000 	.word	0xe0001000
 8009ba0:	431bde83 	.word	0x431bde83

08009ba4 <initArray>:

#include "main.h"
#include "dwt_stm32_delay.h"


void initArray(Array *a, size_t initialSize) {
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  a->array = (uint16_t *)malloc(initialSize * sizeof(uint16_t));
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	005b      	lsls	r3, r3, #1
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f002 fdbe 	bl	800c734 <malloc>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	461a      	mov	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	601a      	str	r2, [r3, #0]
  a->used = 0;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	605a      	str	r2, [r3, #4]
  a->size = initialSize;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	609a      	str	r2, [r3, #8]
}
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <insertArray>:

void insertArray(Array *a, uint32_t newsize) {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
    a->size = newsize;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	609a      	str	r2, [r3, #8]
    a->array = (uint16_t *)realloc(a->array, a->size * sizeof(uint16_t));
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	4619      	mov	r1, r3
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	f003 fb5d 	bl	800d2b0 <realloc>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	601a      	str	r2, [r3, #0]
    a->used = 0;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	605a      	str	r2, [r3, #4]
}
 8009c02:	bf00      	nop
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <freeArray>:

void freeArray(Array *a) {
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  free(a->array);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f002 fd94 	bl	800c744 <free>
  a->array = NULL;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	601a      	str	r2, [r3, #0]
  a->used = a->size = 0;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	609a      	str	r2, [r3, #8]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	605a      	str	r2, [r3, #4]
}
 8009c30:	bf00      	nop
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <string_parser>:

size_t string_parser(char *input, char ***word_array)
{
 8009c38:	b590      	push	{r4, r7, lr}
 8009c3a:	b089      	sub	sp, #36	; 0x24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
    size_t n = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	61fb      	str	r3, [r7, #28]
    const char *p = input;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	61bb      	str	r3, [r7, #24]

    while ( *p )
 8009c4a:	e02d      	b.n	8009ca8 <string_parser+0x70>
    {
        while ( isspace( ( unsigned char )*p ) ) ++p;
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	61bb      	str	r3, [r7, #24]
 8009c52:	f002 fd61 	bl	800c718 <__locale_ctype_ptr>
 8009c56:	4602      	mov	r2, r0
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	4413      	add	r3, r2
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	f003 0308 	and.w	r3, r3, #8
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1f0      	bne.n	8009c4c <string_parser+0x14>
        n += *p != '\0';
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	bf14      	ite	ne
 8009c72:	2301      	movne	r3, #1
 8009c74:	2300      	moveq	r3, #0
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	461a      	mov	r2, r3
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	61fb      	str	r3, [r7, #28]
        while ( *p && !isspace( ( unsigned char )*p ) ) ++p;
 8009c80:	e002      	b.n	8009c88 <string_parser+0x50>
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	3301      	adds	r3, #1
 8009c86:	61bb      	str	r3, [r7, #24]
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00b      	beq.n	8009ca8 <string_parser+0x70>
 8009c90:	f002 fd42 	bl	800c718 <__locale_ctype_ptr>
 8009c94:	4602      	mov	r2, r0
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	4413      	add	r3, r2
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	f003 0308 	and.w	r3, r3, #8
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d0ec      	beq.n	8009c82 <string_parser+0x4a>
    while ( *p )
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1d0      	bne.n	8009c52 <string_parser+0x1a>
    }

    if ( n )
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d062      	beq.n	8009d7c <string_parser+0x144>
    {
        size_t i = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	617b      	str	r3, [r7, #20]

        *word_array = (char**)malloc( n * sizeof( char * ) );
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f002 fd38 	bl	800c734 <malloc>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	601a      	str	r2, [r3, #0]

        p = input;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	61bb      	str	r3, [r7, #24]

        while ( *p )
 8009cd0:	e050      	b.n	8009d74 <string_parser+0x13c>
        {
            while ( isspace( ( unsigned char )*p ) ) ++p;
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	61bb      	str	r3, [r7, #24]
 8009cd8:	f002 fd1e 	bl	800c718 <__locale_ctype_ptr>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	4413      	add	r3, r2
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	f003 0308 	and.w	r3, r3, #8
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1f0      	bne.n	8009cd2 <string_parser+0x9a>
            if ( *p )
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d03d      	beq.n	8009d74 <string_parser+0x13c>
            {
                const char *q = p;
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	613b      	str	r3, [r7, #16]
                while ( *p && !isspace( ( unsigned char )*p ) ) ++p;
 8009cfc:	e002      	b.n	8009d04 <string_parser+0xcc>
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	3301      	adds	r3, #1
 8009d02:	61bb      	str	r3, [r7, #24]
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <string_parser+0xec>
 8009d0c:	f002 fd04 	bl	800c718 <__locale_ctype_ptr>
 8009d10:	4602      	mov	r2, r0
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	3301      	adds	r3, #1
 8009d18:	4413      	add	r3, r2
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	f003 0308 	and.w	r3, r3, #8
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d0ec      	beq.n	8009cfe <string_parser+0xc6>

                size_t length = p - q;
 8009d24:	69ba      	ldr	r2, [r7, #24]
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	60fb      	str	r3, [r7, #12]

                ( *word_array )[i] = ( char * )malloc( length + 1 );
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	18d4      	adds	r4, r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f002 fcfa 	bl	800c734 <malloc>
 8009d40:	4603      	mov	r3, r0
 8009d42:	6023      	str	r3, [r4, #0]

                strncpy( ( *word_array )[i], q, length );
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	6939      	ldr	r1, [r7, #16]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f003 fb4f 	bl	800d3f8 <strncpy>
                ( *word_array )[i][length] = '\0';
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	4413      	add	r3, r2
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	701a      	strb	r2, [r3, #0]

                ++i;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	3301      	adds	r3, #1
 8009d72:	617b      	str	r3, [r7, #20]
        while ( *p )
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1ad      	bne.n	8009cd8 <string_parser+0xa0>
            }
        }
    }

    return n;
 8009d7c:	69fb      	ldr	r3, [r7, #28]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3724      	adds	r7, #36	; 0x24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd90      	pop	{r4, r7, pc}

08009d86 <PlotData>:

void PlotData(uint32_t XCoordinate,uint32_t YCoordinate)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b082      	sub	sp, #8
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	6039      	str	r1, [r7, #0]
    // Plot at x,y
    BSP_LCD_DrawPixel((uint16_t) XCoordinate,(uint16_t) YCoordinate,1);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	b291      	uxth	r1, r2
 8009d98:	2201      	movs	r2, #1
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7f7 fc3e 	bl	800161c <BSP_LCD_DrawPixel>
}
 8009da0:	bf00      	nop
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <InitScreen>:

void InitScreen(uint32_t BackGroundColor,uint32_t ForeGroundColor)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
// #define LCD_COLOR_BLACK         ((uint32_t)0xFF000000)
// #define LCD_COLOR_BROWN         ((uint32_t)0xFFA52A2A)
// #define LCD_COLOR_ORANGE        ((uint32_t)0xFFFFA500)
// #define LCD_COLOR_TRANSPARENT   ((uint32_t)0xFF000000)

	BSP_LCD_Clear(BackGroundColor);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7f7 fa86 	bl	80012c4 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(BackGroundColor);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7f7 fa39 	bl	8001230 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(ForeGroundColor);
 8009dbe:	6838      	ldr	r0, [r7, #0]
 8009dc0:	f7f7 fa1e 	bl	8001200 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 8009dc4:	4803      	ldr	r0, [pc, #12]	; (8009dd4 <InitScreen+0x2c>)
 8009dc6:	f7f7 fa4d 	bl	8001264 <BSP_LCD_SetFont>
}
 8009dca:	bf00      	nop
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20000008 	.word	0x20000008

08009dd8 <LCDWrite>:

void LCDWrite(uint32_t Line,char Str[])
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b090      	sub	sp, #64	; 0x40
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
    char IntStr[50];

    // InitScreen(LCD_COLOR_BLACK,LCD_COLOR_WHITE,Font20);

    BSP_LCD_ClearStringLine(Line);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7f7 fa96 	bl	8001314 <BSP_LCD_ClearStringLine>
    snprintf(IntStr,50,Str);
 8009de8:	f107 030c 	add.w	r3, r7, #12
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	2132      	movs	r1, #50	; 0x32
 8009df0:	4618      	mov	r0, r3
 8009df2:	f003 faa1 	bl	800d338 <sniprintf>
    BSP_LCD_DisplayStringAtLine((uint16_t)Line,(uint8_t *) IntStr);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	f107 020c 	add.w	r2, r7, #12
 8009dfe:	4611      	mov	r1, r2
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7f7 fbf3 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
}
 8009e06:	bf00      	nop
 8009e08:	3740      	adds	r7, #64	; 0x40
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
	...

08009e10 <CountDown>:

void CountDown(uint32_t millisecs)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
    InitScreen(LCD_COLOR_BLACK,LCD_COLOR_WHITE);
 8009e18:	f04f 31ff 	mov.w	r1, #4294967295
 8009e1c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009e20:	f7ff ffc2 	bl	8009da8 <InitScreen>

    LCDWrite(5," ");
 8009e24:	491c      	ldr	r1, [pc, #112]	; (8009e98 <CountDown+0x88>)
 8009e26:	2005      	movs	r0, #5
 8009e28:	f7ff ffd6 	bl	8009dd8 <LCDWrite>
    DWT_Delay_us(1000);
 8009e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009e30:	f7ff fe96 	bl	8009b60 <DWT_Delay_us>

    LCDWrite(5,"Starting in 3... ");
 8009e34:	4919      	ldr	r1, [pc, #100]	; (8009e9c <CountDown+0x8c>)
 8009e36:	2005      	movs	r0, #5
 8009e38:	f7ff ffce 	bl	8009dd8 <LCDWrite>
    DWT_Delay_us(millisecs*1000);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e42:	fb02 f303 	mul.w	r3, r2, r3
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7ff fe8a 	bl	8009b60 <DWT_Delay_us>

    LCDWrite(5,"Starting in 2... ");
 8009e4c:	4914      	ldr	r1, [pc, #80]	; (8009ea0 <CountDown+0x90>)
 8009e4e:	2005      	movs	r0, #5
 8009e50:	f7ff ffc2 	bl	8009dd8 <LCDWrite>
    DWT_Delay_us(millisecs*1000);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e5a:	fb02 f303 	mul.w	r3, r2, r3
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7ff fe7e 	bl	8009b60 <DWT_Delay_us>

    LCDWrite(5,"Starting in 1... ");
 8009e64:	490f      	ldr	r1, [pc, #60]	; (8009ea4 <CountDown+0x94>)
 8009e66:	2005      	movs	r0, #5
 8009e68:	f7ff ffb6 	bl	8009dd8 <LCDWrite>
    DWT_Delay_us(millisecs*1000);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e72:	fb02 f303 	mul.w	r3, r2, r3
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7ff fe72 	bl	8009b60 <DWT_Delay_us>

    InitScreen(LCD_COLOR_BLACK,LCD_COLOR_WHITE);
 8009e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8009e80:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009e84:	f7ff ff90 	bl	8009da8 <InitScreen>
    LCDWrite(5,"GO!");
 8009e88:	4907      	ldr	r1, [pc, #28]	; (8009ea8 <CountDown+0x98>)
 8009e8a:	2005      	movs	r0, #5
 8009e8c:	f7ff ffa4 	bl	8009dd8 <LCDWrite>
}
 8009e90:	bf00      	nop
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	0800f680 	.word	0x0800f680
 8009e9c:	0800f684 	.word	0x0800f684
 8009ea0:	0800f698 	.word	0x0800f698
 8009ea4:	0800f6ac 	.word	0x0800f6ac
 8009ea8:	0800f6c0 	.word	0x0800f6c0

08009eac <SamplePoints>:

void SamplePoints(Array *Data,uint32_t NoOfPoints,uint32_t Period_us)
{
 8009eac:	b590      	push	{r4, r7, lr}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
    uint32_t i;

    HAL_ADC_Start(&hadc3);
 8009eb8:	4815      	ldr	r0, [pc, #84]	; (8009f10 <SamplePoints+0x64>)
 8009eba:	f7f7 ff2b 	bl	8001d14 <HAL_ADC_Start>

    // Measure NoOfPoints values (f.ex. 19200)
    for(i=0;i<NoOfPoints;i++) {
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	617b      	str	r3, [r7, #20]
 8009ec2:	e010      	b.n	8009ee6 <SamplePoints+0x3a>
        Data->array[i]=(uint16_t)HAL_ADC_GetValue(&hadc3);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	005b      	lsls	r3, r3, #1
 8009ecc:	18d4      	adds	r4, r2, r3
 8009ece:	4810      	ldr	r0, [pc, #64]	; (8009f10 <SamplePoints+0x64>)
 8009ed0:	f7f7 ffc4 	bl	8001e5c <HAL_ADC_GetValue>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	8023      	strh	r3, [r4, #0]
    	DWT_Delay_us(Period_us);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7ff fe40 	bl	8009b60 <DWT_Delay_us>
    for(i=0;i<NoOfPoints;i++) {
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	617b      	str	r3, [r7, #20]
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d3ea      	bcc.n	8009ec4 <SamplePoints+0x18>
    }

    InitScreen(LCD_COLOR_BLACK,LCD_COLOR_WHITE);
 8009eee:	f04f 31ff 	mov.w	r1, #4294967295
 8009ef2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009ef6:	f7ff ff57 	bl	8009da8 <InitScreen>
    LCDWrite(5,"DONE!");
 8009efa:	4906      	ldr	r1, [pc, #24]	; (8009f14 <SamplePoints+0x68>)
 8009efc:	2005      	movs	r0, #5
 8009efe:	f7ff ff6b 	bl	8009dd8 <LCDWrite>

    printf("Sampling done.\r\n");
 8009f02:	4805      	ldr	r0, [pc, #20]	; (8009f18 <SamplePoints+0x6c>)
 8009f04:	f003 f9cc 	bl	800d2a0 <puts>
}
 8009f08:	bf00      	nop
 8009f0a:	371c      	adds	r7, #28
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd90      	pop	{r4, r7, pc}
 8009f10:	20000dd8 	.word	0x20000dd8
 8009f14:	0800f6c4 	.word	0x0800f6c4
 8009f18:	0800f6cc 	.word	0x0800f6cc

08009f1c <AvgAndPlotPoints>:

void AvgAndPlotPoints(Array *Data,uint32_t NoOfPoints, uint32_t AvgSize) {
 8009f1c:	b5b0      	push	{r4, r5, r7, lr}
 8009f1e:	b09a      	sub	sp, #104	; 0x68
 8009f20:	af02      	add	r7, sp, #8
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]

    uint32_t BufferSum,BufferAvg;
    uint32_t XCoord,YCoord;
    char MyStr[50];

    printf("Start reading... \r\n");
 8009f28:	4842      	ldr	r0, [pc, #264]	; (800a034 <AvgAndPlotPoints+0x118>)
 8009f2a:	f003 f9b9 	bl	800d2a0 <puts>
    InitScreen(LCD_COLOR_BLACK,LCD_COLOR_RED);
 8009f2e:	4942      	ldr	r1, [pc, #264]	; (800a038 <AvgAndPlotPoints+0x11c>)
 8009f30:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009f34:	f7ff ff38 	bl	8009da8 <InitScreen>

    for(i1=0;i1<NoOfPoints;i1++) {
 8009f38:	2300      	movs	r3, #0
 8009f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f3c:	e059      	b.n	8009ff2 <AvgAndPlotPoints+0xd6>
        BufferSum=0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	657b      	str	r3, [r7, #84]	; 0x54

        // Read AvgSize samples
        for(i2=i1;i2<i1+AvgSize;i2++) {
 8009f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f46:	e00c      	b.n	8009f62 <AvgAndPlotPoints+0x46>
            BufferSum=BufferSum+(uint32_t)Data->array[i2];
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f4e:	005b      	lsls	r3, r3, #1
 8009f50:	4413      	add	r3, r2
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	461a      	mov	r2, r3
 8009f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f58:	4413      	add	r3, r2
 8009f5a:	657b      	str	r3, [r7, #84]	; 0x54
        for(i2=i1;i2<i1+AvgSize;i2++) {
 8009f5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f5e:	3301      	adds	r3, #1
 8009f60:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	441a      	add	r2, r3
 8009f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d8ec      	bhi.n	8009f48 <AvgAndPlotPoints+0x2c>
        }

        BufferAvg=BufferSum/AvgSize;
 8009f6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f76:	653b      	str	r3, [r7, #80]	; 0x50

        // Calculate two coords and plot
        XCoord=((i1*480.0)/NoOfPoints);
 8009f78:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009f7a:	f7f6 faf3 	bl	8000564 <__aeabi_ui2d>
 8009f7e:	f04f 0200 	mov.w	r2, #0
 8009f82:	4b2e      	ldr	r3, [pc, #184]	; (800a03c <AvgAndPlotPoints+0x120>)
 8009f84:	f7f6 fb64 	bl	8000650 <__aeabi_dmul>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	4625      	mov	r5, r4
 8009f8e:	461c      	mov	r4, r3
 8009f90:	68b8      	ldr	r0, [r7, #8]
 8009f92:	f7f6 fae7 	bl	8000564 <__aeabi_ui2d>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	f7f6 fc81 	bl	80008a4 <__aeabi_ddiv>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	4621      	mov	r1, r4
 8009faa:	f7f6 fe29 	bl	8000c00 <__aeabi_d2uiz>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
        YCoord=(272.0*(BufferAvg/65536.0));
 8009fb2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009fb4:	f7f6 fad6 	bl	8000564 <__aeabi_ui2d>
 8009fb8:	f04f 0200 	mov.w	r2, #0
 8009fbc:	4b20      	ldr	r3, [pc, #128]	; (800a040 <AvgAndPlotPoints+0x124>)
 8009fbe:	f7f6 fc71 	bl	80008a4 <__aeabi_ddiv>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	4621      	mov	r1, r4
 8009fca:	f04f 0200 	mov.w	r2, #0
 8009fce:	4b1d      	ldr	r3, [pc, #116]	; (800a044 <AvgAndPlotPoints+0x128>)
 8009fd0:	f7f6 fb3e 	bl	8000650 <__aeabi_dmul>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	4618      	mov	r0, r3
 8009fda:	4621      	mov	r1, r4
 8009fdc:	f7f6 fe10 	bl	8000c00 <__aeabi_d2uiz>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	64bb      	str	r3, [r7, #72]	; 0x48

        PlotData(XCoord,YCoord);
 8009fe4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009fe6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009fe8:	f7ff fecd 	bl	8009d86 <PlotData>
    for(i1=0;i1<NoOfPoints;i1++) {
 8009fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fee:	3301      	adds	r3, #1
 8009ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ff2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d3a1      	bcc.n	8009f3e <AvgAndPlotPoints+0x22>
    }

    printf("Done all, Points = %lu Avg = %lu \r\n", i1,AvgSize);
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009ffe:	4812      	ldr	r0, [pc, #72]	; (800a048 <AvgAndPlotPoints+0x12c>)
 800a000:	f003 f8da 	bl	800d1b8 <iprintf>

    LCDWrite(0,"");
 800a004:	4911      	ldr	r1, [pc, #68]	; (800a04c <AvgAndPlotPoints+0x130>)
 800a006:	2000      	movs	r0, #0
 800a008:	f7ff fee6 	bl	8009dd8 <LCDWrite>
    snprintf(MyStr,50,"Pnts = %lu Avg = %lu",NoOfPoints,AvgSize);
 800a00c:	f107 0014 	add.w	r0, r7, #20
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4a0e      	ldr	r2, [pc, #56]	; (800a050 <AvgAndPlotPoints+0x134>)
 800a018:	2132      	movs	r1, #50	; 0x32
 800a01a:	f003 f98d 	bl	800d338 <sniprintf>
    LCDWrite(0,MyStr);
 800a01e:	f107 0314 	add.w	r3, r7, #20
 800a022:	4619      	mov	r1, r3
 800a024:	2000      	movs	r0, #0
 800a026:	f7ff fed7 	bl	8009dd8 <LCDWrite>
}
 800a02a:	bf00      	nop
 800a02c:	3760      	adds	r7, #96	; 0x60
 800a02e:	46bd      	mov	sp, r7
 800a030:	bdb0      	pop	{r4, r5, r7, pc}
 800a032:	bf00      	nop
 800a034:	0800f6dc 	.word	0x0800f6dc
 800a038:	ffff0000 	.word	0xffff0000
 800a03c:	407e0000 	.word	0x407e0000
 800a040:	40f00000 	.word	0x40f00000
 800a044:	40710000 	.word	0x40710000
 800a048:	0800f6f0 	.word	0x0800f6f0
 800a04c:	0800f714 	.word	0x0800f714
 800a050:	0800f718 	.word	0x0800f718

0800a054 <SCB_EnableICache>:
{
 800a054:	b480      	push	{r7}
 800a056:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a058:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a05c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a060:	4b09      	ldr	r3, [pc, #36]	; (800a088 <SCB_EnableICache+0x34>)
 800a062:	2200      	movs	r2, #0
 800a064:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a068:	4a07      	ldr	r2, [pc, #28]	; (800a088 <SCB_EnableICache+0x34>)
 800a06a:	4b07      	ldr	r3, [pc, #28]	; (800a088 <SCB_EnableICache+0x34>)
 800a06c:	695b      	ldr	r3, [r3, #20]
 800a06e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a072:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a074:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a078:	f3bf 8f6f 	isb	sy
}
 800a07c:	bf00      	nop
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	e000ed00 	.word	0xe000ed00

0800a08c <SCB_EnableDCache>:
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800a092:	4b1d      	ldr	r3, [pc, #116]	; (800a108 <SCB_EnableDCache+0x7c>)
 800a094:	2200      	movs	r2, #0
 800a096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800a09a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800a09e:	4b1a      	ldr	r3, [pc, #104]	; (800a108 <SCB_EnableDCache+0x7c>)
 800a0a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0a4:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	0b5b      	lsrs	r3, r3, #13
 800a0aa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a0ae:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	08db      	lsrs	r3, r3, #3
 800a0b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0b8:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a0ba:	4913      	ldr	r1, [pc, #76]	; (800a108 <SCB_EnableDCache+0x7c>)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	015a      	lsls	r2, r3, #5
 800a0c0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800a0c4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	1e5a      	subs	r2, r3, #1
 800a0d4:	60ba      	str	r2, [r7, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1ef      	bne.n	800a0ba <SCB_EnableDCache+0x2e>
    } while(sets--);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	1e5a      	subs	r2, r3, #1
 800a0de:	60fa      	str	r2, [r7, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1e5      	bne.n	800a0b0 <SCB_EnableDCache+0x24>
 800a0e4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800a0e8:	4a07      	ldr	r2, [pc, #28]	; (800a108 <SCB_EnableDCache+0x7c>)
 800a0ea:	4b07      	ldr	r3, [pc, #28]	; (800a108 <SCB_EnableDCache+0x7c>)
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0f2:	6153      	str	r3, [r2, #20]
 800a0f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a0f8:	f3bf 8f6f 	isb	sy
}
 800a0fc:	bf00      	nop
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	e000ed00 	.word	0xe000ed00
 800a10c:	00000000 	.word	0x00000000

0800a110 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 800a110:	b590      	push	{r4, r7, lr}
 800a112:	f2ad 4dac 	subw	sp, sp, #1196	; 0x4ac
 800a116:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache-------------------------------------------------------------*/
  SCB_EnableICache();
 800a118:	f7ff ff9c 	bl	800a054 <SCB_EnableICache>

  /* Enable D-Cache-------------------------------------------------------------*/
  SCB_EnableDCache();
 800a11c:	f7ff ffb6 	bl	800a08c <SCB_EnableDCache>

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a120:	f7f7 fd56 	bl	8001bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a124:	f000 fa3e 	bl	800a5a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a128:	f000 fd56 	bl	800abd8 <MX_GPIO_Init>
  MX_DMA_Init();
 800a12c:	f000 fc9c 	bl	800aa68 <MX_DMA_Init>
  MX_FMC_Init();
 800a130:	f000 fd06 	bl	800ab40 <MX_FMC_Init>
  MX_ADC3_Init();
 800a134:	f000 fae4 	bl	800a700 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 800a138:	f000 fc62 	bl	800aa00 <MX_USART1_UART_Init>
  MX_LTDC_Init();
 800a13c:	f000 fbde 	bl	800a8fc <MX_LTDC_Init>
  MX_FATFS_Init();
 800a140:	f7ff fcfc 	bl	8009b3c <MX_FATFS_Init>
  MX_I2C3_Init();
 800a144:	f000 fb90 	bl	800a868 <MX_I2C3_Init>
  MX_DMA2D_Init();
 800a148:	f000 fb54 	bl	800a7f4 <MX_DMA2D_Init>
  MX_CRC_Init();
 800a14c:	f000 fb2a 	bl	800a7a4 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 800a150:	f001 fcc8 	bl	800bae4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Start SDRAM
  FMC_SDRAM_CommandTypeDef hsdram1Command;
  BSP_SDRAM_Initialization_Sequence(&hsdram1,&hsdram1Command);
 800a154:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 800a158:	4619      	mov	r1, r3
 800a15a:	48cf      	ldr	r0, [pc, #828]	; (800a498 <main+0x388>)
 800a15c:	f7ff fc60 	bl	8009a20 <BSP_SDRAM_Initialization_Sequence>

  // Start LCD
  BSP_LCD_Init();
 800a160:	f7f6 ff46 	bl	8000ff0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0,LCD_FB_START_ADDRESS);
 800a164:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800a168:	2000      	movs	r0, #0
 800a16a:	f7f6 ffd9 	bl	8001120 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 800a16e:	2000      	movs	r0, #0
 800a170:	f7f7 f836 	bl	80011e0 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 800a174:	f7f7 fb14 	bl	80017a0 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a178:	f04f 30ff 	mov.w	r0, #4294967295
 800a17c:	f7f7 f8a2 	bl	80012c4 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a180:	f04f 30ff 	mov.w	r0, #4294967295
 800a184:	f7f7 f854 	bl	8001230 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800a188:	48c4      	ldr	r0, [pc, #784]	; (800a49c <main+0x38c>)
 800a18a:	f7f7 f839 	bl	8001200 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"Hello to everyone!");
 800a18e:	49c4      	ldr	r1, [pc, #784]	; (800a4a0 <main+0x390>)
 800a190:	2005      	movs	r0, #5
 800a192:	f7f7 fa2b 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
  HAL_Delay(3000);
 800a196:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a19a:	f7f7 fd55 	bl	8001c48 <HAL_Delay>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 800a19e:	48bf      	ldr	r0, [pc, #764]	; (800a49c <main+0x38c>)
 800a1a0:	f7f7 f890 	bl	80012c4 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800a1a4:	48bd      	ldr	r0, [pc, #756]	; (800a49c <main+0x38c>)
 800a1a6:	f7f7 f843 	bl	8001230 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800a1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ae:	f7f7 f827 	bl	8001200 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"Hello to everyone!");
 800a1b2:	49bb      	ldr	r1, [pc, #748]	; (800a4a0 <main+0x390>)
 800a1b4:	2005      	movs	r0, #5
 800a1b6:	f7f7 fa19 	bl	80015ec <BSP_LCD_DisplayStringAtLine>
  HAL_Delay(3000);
 800a1ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a1be:	f7f7 fd43 	bl	8001c48 <HAL_Delay>


  char buffer[1000]=" ";
 800a1c2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a1c6:	2220      	movs	r2, #32
 800a1c8:	601a      	str	r2, [r3, #0]
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f002 fad0 	bl	800c778 <memset>
	  HAL_Delay(2000);

  }*/


  if(DWT_Delay_Init())
 800a1d8:	f7ff fc80 	bl	8009adc <DWT_Delay_Init>
    }

  /* USER CODE START 2 */

  char CmdBuffer[30];
  char Arg[30]=" ";
 800a1dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	601a      	str	r2, [r3, #0]
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	605a      	str	r2, [r3, #4]
 800a1ec:	609a      	str	r2, [r3, #8]
 800a1ee:	60da      	str	r2, [r3, #12]
 800a1f0:	611a      	str	r2, [r3, #16]
 800a1f2:	615a      	str	r2, [r3, #20]
 800a1f4:	831a      	strh	r2, [r3, #24]
  char Cmd[30]=" ";
 800a1f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	3304      	adds	r3, #4
 800a200:	2200      	movs	r2, #0
 800a202:	601a      	str	r2, [r3, #0]
 800a204:	605a      	str	r2, [r3, #4]
 800a206:	609a      	str	r2, [r3, #8]
 800a208:	60da      	str	r2, [r3, #12]
 800a20a:	611a      	str	r2, [r3, #16]
 800a20c:	615a      	str	r2, [r3, #20]
 800a20e:	831a      	strh	r2, [r3, #24]
  size_t n=0;
 800a210:	2300      	movs	r3, #0
 800a212:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

  uint32_t    NoOfPoints=19200;
 800a216:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800a21a:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
  uint32_t    AvgSize=10;
 800a21e:	230a      	movs	r3, #10
 800a220:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
  uint32_t    Period_us=100;
 800a224:	2364      	movs	r3, #100	; 0x64
 800a226:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
  uint32_t    Count_ms=1000;
 800a22a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a22e:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484

  // Clear screen, set it up
  InitScreen(LCD_COLOR_BLACK,LCD_COLOR_WHITE);
 800a232:	f04f 31ff 	mov.w	r1, #4294967295
 800a236:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a23a:	f7ff fdb5 	bl	8009da8 <InitScreen>

  // Initialize data storage
  // https://stackoverflow.com/questions/3536153/c-dynamically-growing-array
  Array Data;
  initArray(&Data,NoOfPoints);  // initially 19200 elements
 800a23e:	f107 0318 	add.w	r3, r7, #24
 800a242:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 800a246:	4618      	mov	r0, r3
 800a248:	f7ff fcac 	bl	8009ba4 <initArray>

  LCDWrite(5,"Ready.");
 800a24c:	4995      	ldr	r1, [pc, #596]	; (800a4a4 <main+0x394>)
 800a24e:	2005      	movs	r0, #5
 800a250:	f7ff fdc2 	bl	8009dd8 <LCDWrite>

  while (!((strcmp(Cmd,"quit")==0)&&(n==1))) {
 800a254:	e178      	b.n	800a548 <main+0x438>

      // Print Ready and current settings

      sprintf(buffer,"Ready. Settings are Points=%lu, Avg=%lu, Period_us=%lu, Count_ms=%lu. "
    		         "Sampling will take apprx %f secs \r\n",
					  NoOfPoints,AvgSize,Period_us,Count_ms,((float)(NoOfPoints*Period_us/1000000.0)));
 800a256:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 800a25a:	f8d7 2488 	ldr.w	r2, [r7, #1160]	; 0x488
 800a25e:	fb02 f303 	mul.w	r3, r2, r3
 800a262:	4618      	mov	r0, r3
 800a264:	f7f6 f97e 	bl	8000564 <__aeabi_ui2d>
 800a268:	a389      	add	r3, pc, #548	; (adr r3, 800a490 <main+0x380>)
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	f7f6 fb19 	bl	80008a4 <__aeabi_ddiv>
 800a272:	4603      	mov	r3, r0
 800a274:	460c      	mov	r4, r1
 800a276:	4618      	mov	r0, r3
 800a278:	4621      	mov	r1, r4
 800a27a:	f7f6 fce1 	bl	8000c40 <__aeabi_d2f>
 800a27e:	4603      	mov	r3, r0
      sprintf(buffer,"Ready. Settings are Points=%lu, Avg=%lu, Period_us=%lu, Count_ms=%lu. "
 800a280:	4618      	mov	r0, r3
 800a282:	f7f6 f991 	bl	80005a8 <__aeabi_f2d>
 800a286:	4603      	mov	r3, r0
 800a288:	460c      	mov	r4, r1
 800a28a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800a28e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a292:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800a2a2:	f8d7 2490 	ldr.w	r2, [r7, #1168]	; 0x490
 800a2a6:	4980      	ldr	r1, [pc, #512]	; (800a4a8 <main+0x398>)
 800a2a8:	f003 f87a 	bl	800d3a0 <siprintf>
      HAL_UART_Transmit(&huart1,(uint8_t *) buffer, 1000, 0xFFFF);
 800a2ac:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800a2b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a2b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2b8:	487c      	ldr	r0, [pc, #496]	; (800a4ac <main+0x39c>)
 800a2ba:	f7fc fa8c 	bl	80067d6 <HAL_UART_Transmit>

      gets(CmdBuffer);
 800a2be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f002 f9f8 	bl	800c6b8 <gets>
      printf("I got %s \r\n", CmdBuffer);
 800a2c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4878      	ldr	r0, [pc, #480]	; (800a4b0 <main+0x3a0>)
 800a2d0:	f002 ff72 	bl	800d1b8 <iprintf>
      strcpy(Cmd," ");
 800a2d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2d8:	2220      	movs	r2, #32
 800a2da:	801a      	strh	r2, [r3, #0]
      strcpy(Arg," ");
 800a2dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a2e0:	2220      	movs	r2, #32
 800a2e2:	801a      	strh	r2, [r3, #0]

      // Parse command and possible numeric arg
      char s[] = "Initial string";
 800a2e4:	f107 0308 	add.w	r3, r7, #8
 800a2e8:	4a72      	ldr	r2, [pc, #456]	; (800a4b4 <main+0x3a4>)
 800a2ea:	461c      	mov	r4, r3
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a2f0:	c407      	stmia	r4!, {r0, r1, r2}
 800a2f2:	8023      	strh	r3, [r4, #0]
 800a2f4:	3402      	adds	r4, #2
 800a2f6:	0c1b      	lsrs	r3, r3, #16
 800a2f8:	7023      	strb	r3, [r4, #0]
      char ** word_array=NULL;
 800a2fa:	1d3b      	adds	r3, r7, #4
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	601a      	str	r2, [r3, #0]

      strcpy(s,CmdBuffer);
 800a300:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800a304:	f107 0308 	add.w	r3, r7, #8
 800a308:	4611      	mov	r1, r2
 800a30a:	4618      	mov	r0, r3
 800a30c:	f003 f86c 	bl	800d3e8 <strcpy>
      n=string_parser(s,&word_array);
 800a310:	1d3a      	adds	r2, r7, #4
 800a312:	f107 0308 	add.w	r3, r7, #8
 800a316:	4611      	mov	r1, r2
 800a318:	4618      	mov	r0, r3
 800a31a:	f7ff fc8d 	bl	8009c38 <string_parser>
 800a31e:	f8c7 0494 	str.w	r0, [r7, #1172]	; 0x494

      for ( size_t i=0;i<n;i++) {
 800a322:	2300      	movs	r3, #0
 800a324:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 800a328:	e02d      	b.n	800a386 <main+0x276>
          if (i==0) {strcpy(Cmd,word_array[i]);}
 800a32a:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10c      	bne.n	800a34c <main+0x23c>
 800a332:	1d3b      	adds	r3, r7, #4
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a344:	4611      	mov	r1, r2
 800a346:	4618      	mov	r0, r3
 800a348:	f003 f84e 	bl	800d3e8 <strcpy>
          if (i==1) {strcpy(Arg,word_array[i]);}
 800a34c:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 800a350:	2b01      	cmp	r3, #1
 800a352:	d10c      	bne.n	800a36e <main+0x25e>
 800a354:	1d3b      	adds	r3, r7, #4
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4413      	add	r3, r2
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a366:	4611      	mov	r1, r2
 800a368:	4618      	mov	r0, r3
 800a36a:	f003 f83d 	bl	800d3e8 <strcpy>
          if (i>1) {printf("Wrong number of arguments \r\n");}
 800a36e:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 800a372:	2b01      	cmp	r3, #1
 800a374:	d902      	bls.n	800a37c <main+0x26c>
 800a376:	4850      	ldr	r0, [pc, #320]	; (800a4b8 <main+0x3a8>)
 800a378:	f002 ff92 	bl	800d2a0 <puts>
      for ( size_t i=0;i<n;i++) {
 800a37c:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 800a380:	3301      	adds	r3, #1
 800a382:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 800a386:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 800a38a:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800a38e:	429a      	cmp	r2, r3
 800a390:	d3cb      	bcc.n	800a32a <main+0x21a>
      }

      // pc1.printf("Cmd = %s Arg = %s \r\n",Cmd,Arg);
      for ( size_t i=0;i<n;i++) free( word_array[i] );
 800a392:	2300      	movs	r3, #0
 800a394:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800a398:	e00e      	b.n	800a3b8 <main+0x2a8>
 800a39a:	1d3b      	adds	r3, r7, #4
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4413      	add	r3, r2
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f002 f9cb 	bl	800c744 <free>
 800a3ae:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800a3b8:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 800a3bc:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d3ea      	bcc.n	800a39a <main+0x28a>
      free(word_array);
 800a3c4:	1d3b      	adds	r3, r7, #4
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f002 f9bb 	bl	800c744 <free>

      //strcpy(Cmd,"quit");
      //n=1;
      HAL_Delay(3000);
 800a3ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a3d2:	f7f7 fc39 	bl	8001c48 <HAL_Delay>

      // Branch based on command
      // meas: Sample and plot a data set
      if((strcmp(Cmd,"meas")==0)&&(n==1)) {
 800a3d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3da:	4938      	ldr	r1, [pc, #224]	; (800a4bc <main+0x3ac>)
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7f5 ff17 	bl	8000210 <strcmp>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d11a      	bne.n	800a41e <main+0x30e>
 800a3e8:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d116      	bne.n	800a41e <main+0x30e>

          // Countdown
          CountDown(Count_ms);
 800a3f0:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 800a3f4:	f7ff fd0c 	bl	8009e10 <CountDown>

          // Sample & plot data one time
          SamplePoints(&Data,NoOfPoints,Period_us);
 800a3f8:	f107 0318 	add.w	r3, r7, #24
 800a3fc:	f8d7 2488 	ldr.w	r2, [r7, #1160]	; 0x488
 800a400:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 800a404:	4618      	mov	r0, r3
 800a406:	f7ff fd51 	bl	8009eac <SamplePoints>
          AvgAndPlotPoints(&Data,NoOfPoints,AvgSize);
 800a40a:	f107 0318 	add.w	r3, r7, #24
 800a40e:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 800a412:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff fd80 	bl	8009f1c <AvgAndPlotPoints>
 800a41c:	e094      	b.n	800a548 <main+0x438>
      }

      // setpoints: Adjust sampled points
      else if((strcmp(Cmd,"setpoints")==0)&&(n==2)) {
 800a41e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a422:	4927      	ldr	r1, [pc, #156]	; (800a4c0 <main+0x3b0>)
 800a424:	4618      	mov	r0, r3
 800a426:	f7f5 fef3 	bl	8000210 <strcmp>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d115      	bne.n	800a45c <main+0x34c>
 800a430:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800a434:	2b02      	cmp	r3, #2
 800a436:	d111      	bne.n	800a45c <main+0x34c>
          // Allocate more or less data space
          NoOfPoints=(uint32_t) strtol(Arg,NULL,10);
 800a438:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a43c:	220a      	movs	r2, #10
 800a43e:	2100      	movs	r1, #0
 800a440:	4618      	mov	r0, r3
 800a442:	f003 f86f 	bl	800d524 <strtol>
 800a446:	4603      	mov	r3, r0
 800a448:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
          //pc1.printf("Old Data size is %u New NoOfPOints = %u \r\n",Data.size,NoOfPoints);
          insertArray(&Data,NoOfPoints);
 800a44c:	f107 0318 	add.w	r3, r7, #24
 800a450:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff fbbd 	bl	8009bd4 <insertArray>
 800a45a:	e075      	b.n	800a548 <main+0x438>
          //pc1.printf("New Array size is %u \r\n",Data.size);
      }

      // setavg: Adjust average amount in samples
      else if((strcmp(Cmd,"setavg")==0)&&(n==2)) {
 800a45c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a460:	4918      	ldr	r1, [pc, #96]	; (800a4c4 <main+0x3b4>)
 800a462:	4618      	mov	r0, r3
 800a464:	f7f5 fed4 	bl	8000210 <strcmp>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d12c      	bne.n	800a4c8 <main+0x3b8>
 800a46e:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800a472:	2b02      	cmp	r3, #2
 800a474:	d128      	bne.n	800a4c8 <main+0x3b8>
          AvgSize=(uint32_t) strtol(Arg,NULL,10);
 800a476:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a47a:	220a      	movs	r2, #10
 800a47c:	2100      	movs	r1, #0
 800a47e:	4618      	mov	r0, r3
 800a480:	f003 f850 	bl	800d524 <strtol>
 800a484:	4603      	mov	r3, r0
 800a486:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 800a48a:	e05d      	b.n	800a548 <main+0x438>
 800a48c:	f3af 8000 	nop.w
 800a490:	00000000 	.word	0x00000000
 800a494:	412e8480 	.word	0x412e8480
 800a498:	20000ed0 	.word	0x20000ed0
 800a49c:	ff0000ff 	.word	0xff0000ff
 800a4a0:	0800f730 	.word	0x0800f730
 800a4a4:	0800f744 	.word	0x0800f744
 800a4a8:	0800f74c 	.word	0x0800f74c
 800a4ac:	20000e20 	.word	0x20000e20
 800a4b0:	0800f7b8 	.word	0x0800f7b8
 800a4b4:	0800f85c 	.word	0x0800f85c
 800a4b8:	0800f7c4 	.word	0x0800f7c4
 800a4bc:	0800f7e0 	.word	0x0800f7e0
 800a4c0:	0800f7e8 	.word	0x0800f7e8
 800a4c4:	0800f7f4 	.word	0x0800f7f4
      }

      // setperiod: Adjust sample period in us
      else if((strcmp(Cmd,"setperiod")==0)&&(n==2)) {
 800a4c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4cc:	492f      	ldr	r1, [pc, #188]	; (800a58c <main+0x47c>)
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7f5 fe9e 	bl	8000210 <strcmp>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10e      	bne.n	800a4f8 <main+0x3e8>
 800a4da:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d10a      	bne.n	800a4f8 <main+0x3e8>
          Period_us=(uint32_t) strtol(Arg,NULL,10);
 800a4e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a4e6:	220a      	movs	r2, #10
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f003 f81a 	bl	800d524 <strtol>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 800a4f6:	e027      	b.n	800a548 <main+0x438>
      }

      // setcount: Adjust countdown period in ms
      else if((strcmp(Cmd,"setcount")==0)&&(n==2)) {
 800a4f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4fc:	4924      	ldr	r1, [pc, #144]	; (800a590 <main+0x480>)
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7f5 fe86 	bl	8000210 <strcmp>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10e      	bne.n	800a528 <main+0x418>
 800a50a:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d10a      	bne.n	800a528 <main+0x418>
          Count_ms=(uint32_t) strtol(Arg,NULL,10);
 800a512:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a516:	220a      	movs	r2, #10
 800a518:	2100      	movs	r1, #0
 800a51a:	4618      	mov	r0, r3
 800a51c:	f003 f802 	bl	800d524 <strtol>
 800a520:	4603      	mov	r3, r0
 800a522:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800a526:	e00f      	b.n	800a548 <main+0x438>
      }

      // quit: Exit on next while
      else if((strcmp(Cmd,"quit")==0)&&(n==1)) {
 800a528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a52c:	4919      	ldr	r1, [pc, #100]	; (800a594 <main+0x484>)
 800a52e:	4618      	mov	r0, r3
 800a530:	f7f5 fe6e 	bl	8000210 <strcmp>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d103      	bne.n	800a542 <main+0x432>
 800a53a:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d002      	beq.n	800a548 <main+0x438>
          // Do nothing yet
      }
      else {
          printf("Wrong command or argument \r\n");
 800a542:	4815      	ldr	r0, [pc, #84]	; (800a598 <main+0x488>)
 800a544:	f002 feac 	bl	800d2a0 <puts>
  while (!((strcmp(Cmd,"quit")==0)&&(n==1))) {
 800a548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a54c:	4911      	ldr	r1, [pc, #68]	; (800a594 <main+0x484>)
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f5 fe5e 	bl	8000210 <strcmp>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	f47f ae7d 	bne.w	800a256 <main+0x146>
 800a55c:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800a560:	2b01      	cmp	r3, #1
 800a562:	f47f ae78 	bne.w	800a256 <main+0x146>
      }
  }

  // Free memory after quit
  freeArray(&Data);
 800a566:	f107 0318 	add.w	r3, r7, #24
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7ff fb4d 	bl	8009c0a <freeArray>

  // Print informative messages
  InitScreen(LCD_COLOR_BLACK,LCD_COLOR_WHITE);
 800a570:	f04f 31ff 	mov.w	r1, #4294967295
 800a574:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a578:	f7ff fc16 	bl	8009da8 <InitScreen>
  LCDWrite(5,"Stop.");
 800a57c:	4907      	ldr	r1, [pc, #28]	; (800a59c <main+0x48c>)
 800a57e:	2005      	movs	r0, #5
 800a580:	f7ff fc2a 	bl	8009dd8 <LCDWrite>
  printf("Exit. Data freed. Stop. \r\n");
 800a584:	4806      	ldr	r0, [pc, #24]	; (800a5a0 <main+0x490>)
 800a586:	f002 fe8b 	bl	800d2a0 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a58a:	e7fe      	b.n	800a58a <main+0x47a>
 800a58c:	0800f7fc 	.word	0x0800f7fc
 800a590:	0800f808 	.word	0x0800f808
 800a594:	0800f814 	.word	0x0800f814
 800a598:	0800f81c 	.word	0x0800f81c
 800a59c:	0800f838 	.word	0x0800f838
 800a5a0:	0800f840 	.word	0x0800f840

0800a5a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b0b4      	sub	sp, #208	; 0xd0
 800a5a8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a5aa:	4a50      	ldr	r2, [pc, #320]	; (800a6ec <SystemClock_Config+0x148>)
 800a5ac:	4b4f      	ldr	r3, [pc, #316]	; (800a6ec <SystemClock_Config+0x148>)
 800a5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5b4:	6413      	str	r3, [r2, #64]	; 0x40
 800a5b6:	4b4d      	ldr	r3, [pc, #308]	; (800a6ec <SystemClock_Config+0x148>)
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5be:	607b      	str	r3, [r7, #4]
 800a5c0:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a5c2:	4a4b      	ldr	r2, [pc, #300]	; (800a6f0 <SystemClock_Config+0x14c>)
 800a5c4:	4b4a      	ldr	r3, [pc, #296]	; (800a6f0 <SystemClock_Config+0x14c>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5cc:	6013      	str	r3, [r2, #0]
 800a5ce:	4b48      	ldr	r3, [pc, #288]	; (800a6f0 <SystemClock_Config+0x14c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a5d6:	603b      	str	r3, [r7, #0]
 800a5d8:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a5e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a5e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a5ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a5f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800a5f6:	2319      	movs	r3, #25
 800a5f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800a5fc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a600:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a604:	2302      	movs	r3, #2
 800a606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800a60a:	2309      	movs	r3, #9
 800a60c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a610:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a614:	4618      	mov	r0, r3
 800a616:	f7fa fd71 	bl	80050fc <HAL_RCC_OscConfig>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d004      	beq.n	800a62a <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a620:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800a624:	4833      	ldr	r0, [pc, #204]	; (800a6f4 <SystemClock_Config+0x150>)
 800a626:	f000 fe29 	bl	800b27c <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800a62a:	f7fa fd17 	bl	800505c <HAL_PWREx_EnableOverDrive>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d004      	beq.n	800a63e <SystemClock_Config+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a634:	f240 116f 	movw	r1, #367	; 0x16f
 800a638:	482e      	ldr	r0, [pc, #184]	; (800a6f4 <SystemClock_Config+0x150>)
 800a63a:	f000 fe1f 	bl	800b27c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a63e:	230f      	movs	r3, #15
 800a640:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a644:	2302      	movs	r3, #2
 800a646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a64a:	2300      	movs	r3, #0
 800a64c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a650:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a65c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800a660:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a664:	2106      	movs	r1, #6
 800a666:	4618      	mov	r0, r3
 800a668:	f7fa ffb8 	bl	80055dc <HAL_RCC_ClockConfig>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d004      	beq.n	800a67c <SystemClock_Config+0xd8>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a672:	f240 117d 	movw	r1, #381	; 0x17d
 800a676:	481f      	ldr	r0, [pc, #124]	; (800a6f4 <SystemClock_Config+0x150>)
 800a678:	f000 fe00 	bl	800b27c <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 800a67c:	4b1e      	ldr	r3, [pc, #120]	; (800a6f8 <SystemClock_Config+0x154>)
 800a67e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800a680:	23c0      	movs	r3, #192	; 0xc0
 800a682:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800a684:	2305      	movs	r3, #5
 800a686:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800a688:	2302      	movs	r3, #2
 800a68a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800a68c:	2300      	movs	r3, #0
 800a68e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800a690:	2301      	movs	r3, #1
 800a692:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800a694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a698:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a69a:	2300      	movs	r3, #0
 800a69c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a6a2:	f107 0308 	add.w	r3, r7, #8
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fb f99c 	bl	80059e4 <HAL_RCCEx_PeriphCLKConfig>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d004      	beq.n	800a6bc <SystemClock_Config+0x118>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a6b2:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800a6b6:	480f      	ldr	r0, [pc, #60]	; (800a6f4 <SystemClock_Config+0x150>)
 800a6b8:	f000 fde0 	bl	800b27c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800a6bc:	f7fb f92c 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	4b0e      	ldr	r3, [pc, #56]	; (800a6fc <SystemClock_Config+0x158>)
 800a6c4:	fba3 2302 	umull	r2, r3, r3, r2
 800a6c8:	099b      	lsrs	r3, r3, #6
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7f7 ff01 	bl	80024d2 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a6d0:	2004      	movs	r0, #4
 800a6d2:	f7f7 ff0b 	bl	80024ec <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2100      	movs	r1, #0
 800a6da:	f04f 30ff 	mov.w	r0, #4294967295
 800a6de:	f7f7 fece 	bl	800247e <HAL_NVIC_SetPriority>
}
 800a6e2:	bf00      	nop
 800a6e4:	37d0      	adds	r7, #208	; 0xd0
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	40023800 	.word	0x40023800
 800a6f0:	40007000 	.word	0x40007000
 800a6f4:	0800f86c 	.word	0x0800f86c
 800a6f8:	00010048 	.word	0x00010048
 800a6fc:	10624dd3 	.word	0x10624dd3

0800a700 <MX_ADC3_Init>:

/* ADC3 init function */
static void MX_ADC3_Init(void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc3.Instance = ADC3;
 800a706:	4b23      	ldr	r3, [pc, #140]	; (800a794 <MX_ADC3_Init+0x94>)
 800a708:	4a23      	ldr	r2, [pc, #140]	; (800a798 <MX_ADC3_Init+0x98>)
 800a70a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800a70c:	4b21      	ldr	r3, [pc, #132]	; (800a794 <MX_ADC3_Init+0x94>)
 800a70e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a712:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800a714:	4b1f      	ldr	r3, [pc, #124]	; (800a794 <MX_ADC3_Init+0x94>)
 800a716:	2200      	movs	r2, #0
 800a718:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800a71a:	4b1e      	ldr	r3, [pc, #120]	; (800a794 <MX_ADC3_Init+0x94>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800a720:	4b1c      	ldr	r3, [pc, #112]	; (800a794 <MX_ADC3_Init+0x94>)
 800a722:	2200      	movs	r2, #0
 800a724:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800a726:	4b1b      	ldr	r3, [pc, #108]	; (800a794 <MX_ADC3_Init+0x94>)
 800a728:	2200      	movs	r2, #0
 800a72a:	621a      	str	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a72c:	4b19      	ldr	r3, [pc, #100]	; (800a794 <MX_ADC3_Init+0x94>)
 800a72e:	2200      	movs	r2, #0
 800a730:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a732:	4b18      	ldr	r3, [pc, #96]	; (800a794 <MX_ADC3_Init+0x94>)
 800a734:	4a19      	ldr	r2, [pc, #100]	; (800a79c <MX_ADC3_Init+0x9c>)
 800a736:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a738:	4b16      	ldr	r3, [pc, #88]	; (800a794 <MX_ADC3_Init+0x94>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800a73e:	4b15      	ldr	r3, [pc, #84]	; (800a794 <MX_ADC3_Init+0x94>)
 800a740:	2201      	movs	r2, #1
 800a742:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800a744:	4b13      	ldr	r3, [pc, #76]	; (800a794 <MX_ADC3_Init+0x94>)
 800a746:	2200      	movs	r2, #0
 800a748:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a74a:	4b12      	ldr	r3, [pc, #72]	; (800a794 <MX_ADC3_Init+0x94>)
 800a74c:	2201      	movs	r2, #1
 800a74e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800a750:	4810      	ldr	r0, [pc, #64]	; (800a794 <MX_ADC3_Init+0x94>)
 800a752:	f7f7 fa9b 	bl	8001c8c <HAL_ADC_Init>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d004      	beq.n	800a766 <MX_ADC3_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a75c:	f240 11b1 	movw	r1, #433	; 0x1b1
 800a760:	480f      	ldr	r0, [pc, #60]	; (800a7a0 <MX_ADC3_Init+0xa0>)
 800a762:	f000 fd8b 	bl	800b27c <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 800a766:	2300      	movs	r3, #0
 800a768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a76a:	2301      	movs	r3, #1
 800a76c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a76e:	2300      	movs	r3, #0
 800a770:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a772:	463b      	mov	r3, r7
 800a774:	4619      	mov	r1, r3
 800a776:	4807      	ldr	r0, [pc, #28]	; (800a794 <MX_ADC3_Init+0x94>)
 800a778:	f7f7 fb7e 	bl	8001e78 <HAL_ADC_ConfigChannel>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d004      	beq.n	800a78c <MX_ADC3_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a782:	f240 11bb 	movw	r1, #443	; 0x1bb
 800a786:	4806      	ldr	r0, [pc, #24]	; (800a7a0 <MX_ADC3_Init+0xa0>)
 800a788:	f000 fd78 	bl	800b27c <_Error_Handler>
  }

}
 800a78c:	bf00      	nop
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	20000dd8 	.word	0x20000dd8
 800a798:	40012200 	.word	0x40012200
 800a79c:	0f000001 	.word	0x0f000001
 800a7a0:	0800f86c 	.word	0x0800f86c

0800a7a4 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800a7a8:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <MX_CRC_Init+0x44>)
 800a7aa:	4a10      	ldr	r2, [pc, #64]	; (800a7ec <MX_CRC_Init+0x48>)
 800a7ac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800a7ae:	4b0e      	ldr	r3, [pc, #56]	; (800a7e8 <MX_CRC_Init+0x44>)
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <MX_CRC_Init+0x44>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800a7ba:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <MX_CRC_Init+0x44>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800a7c0:	4b09      	ldr	r3, [pc, #36]	; (800a7e8 <MX_CRC_Init+0x44>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800a7c6:	4b08      	ldr	r3, [pc, #32]	; (800a7e8 <MX_CRC_Init+0x44>)
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a7cc:	4806      	ldr	r0, [pc, #24]	; (800a7e8 <MX_CRC_Init+0x44>)
 800a7ce:	f7f7 feb7 	bl	8002540 <HAL_CRC_Init>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d004      	beq.n	800a7e2 <MX_CRC_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a7d8:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800a7dc:	4804      	ldr	r0, [pc, #16]	; (800a7f0 <MX_CRC_Init+0x4c>)
 800a7de:	f000 fd4d 	bl	800b27c <_Error_Handler>
  }

}
 800a7e2:	bf00      	nop
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20000d0c 	.word	0x20000d0c
 800a7ec:	40023000 	.word	0x40023000
 800a7f0:	0800f86c 	.word	0x0800f86c

0800a7f4 <MX_DMA2D_Init>:

/* DMA2D init function */
static void MX_DMA2D_Init(void)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 800a7f8:	4b18      	ldr	r3, [pc, #96]	; (800a85c <MX_DMA2D_Init+0x68>)
 800a7fa:	4a19      	ldr	r2, [pc, #100]	; (800a860 <MX_DMA2D_Init+0x6c>)
 800a7fc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800a7fe:	4b17      	ldr	r3, [pc, #92]	; (800a85c <MX_DMA2D_Init+0x68>)
 800a800:	2200      	movs	r2, #0
 800a802:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800a804:	4b15      	ldr	r3, [pc, #84]	; (800a85c <MX_DMA2D_Init+0x68>)
 800a806:	2200      	movs	r2, #0
 800a808:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800a80a:	4b14      	ldr	r3, [pc, #80]	; (800a85c <MX_DMA2D_Init+0x68>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800a810:	4b12      	ldr	r3, [pc, #72]	; (800a85c <MX_DMA2D_Init+0x68>)
 800a812:	2200      	movs	r2, #0
 800a814:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800a816:	4b11      	ldr	r3, [pc, #68]	; (800a85c <MX_DMA2D_Init+0x68>)
 800a818:	2200      	movs	r2, #0
 800a81a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800a81c:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <MX_DMA2D_Init+0x68>)
 800a81e:	2200      	movs	r2, #0
 800a820:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800a822:	4b0e      	ldr	r3, [pc, #56]	; (800a85c <MX_DMA2D_Init+0x68>)
 800a824:	2200      	movs	r2, #0
 800a826:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800a828:	480c      	ldr	r0, [pc, #48]	; (800a85c <MX_DMA2D_Init+0x68>)
 800a82a:	f7f8 fa4f 	bl	8002ccc <HAL_DMA2D_Init>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d004      	beq.n	800a83e <MX_DMA2D_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a834:	f240 11df 	movw	r1, #479	; 0x1df
 800a838:	480a      	ldr	r0, [pc, #40]	; (800a864 <MX_DMA2D_Init+0x70>)
 800a83a:	f000 fd1f 	bl	800b27c <_Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800a83e:	2101      	movs	r1, #1
 800a840:	4806      	ldr	r0, [pc, #24]	; (800a85c <MX_DMA2D_Init+0x68>)
 800a842:	f7f8 fba1 	bl	8002f88 <HAL_DMA2D_ConfigLayer>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d004      	beq.n	800a856 <MX_DMA2D_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a84c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 800a850:	4804      	ldr	r0, [pc, #16]	; (800a864 <MX_DMA2D_Init+0x70>)
 800a852:	f000 fd13 	bl	800b27c <_Error_Handler>
  }

}
 800a856:	bf00      	nop
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	20000e90 	.word	0x20000e90
 800a860:	4002b000 	.word	0x4002b000
 800a864:	0800f86c 	.word	0x0800f86c

0800a868 <MX_I2C3_Init>:

/* I2C3 init function */
static void MX_I2C3_Init(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800a86c:	4b1f      	ldr	r3, [pc, #124]	; (800a8ec <MX_I2C3_Init+0x84>)
 800a86e:	4a20      	ldr	r2, [pc, #128]	; (800a8f0 <MX_I2C3_Init+0x88>)
 800a870:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800a872:	4b1e      	ldr	r3, [pc, #120]	; (800a8ec <MX_I2C3_Init+0x84>)
 800a874:	4a1f      	ldr	r2, [pc, #124]	; (800a8f4 <MX_I2C3_Init+0x8c>)
 800a876:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 224;
 800a878:	4b1c      	ldr	r3, [pc, #112]	; (800a8ec <MX_I2C3_Init+0x84>)
 800a87a:	22e0      	movs	r2, #224	; 0xe0
 800a87c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a87e:	4b1b      	ldr	r3, [pc, #108]	; (800a8ec <MX_I2C3_Init+0x84>)
 800a880:	2201      	movs	r2, #1
 800a882:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a884:	4b19      	ldr	r3, [pc, #100]	; (800a8ec <MX_I2C3_Init+0x84>)
 800a886:	2200      	movs	r2, #0
 800a888:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800a88a:	4b18      	ldr	r3, [pc, #96]	; (800a8ec <MX_I2C3_Init+0x84>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a890:	4b16      	ldr	r3, [pc, #88]	; (800a8ec <MX_I2C3_Init+0x84>)
 800a892:	2200      	movs	r2, #0
 800a894:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a896:	4b15      	ldr	r3, [pc, #84]	; (800a8ec <MX_I2C3_Init+0x84>)
 800a898:	2200      	movs	r2, #0
 800a89a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a89c:	4b13      	ldr	r3, [pc, #76]	; (800a8ec <MX_I2C3_Init+0x84>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800a8a2:	4812      	ldr	r0, [pc, #72]	; (800a8ec <MX_I2C3_Init+0x84>)
 800a8a4:	f7f8 fe6e 	bl	8003584 <HAL_I2C_Init>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d004      	beq.n	800a8b8 <MX_I2C3_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a8ae:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800a8b2:	4811      	ldr	r0, [pc, #68]	; (800a8f8 <MX_I2C3_Init+0x90>)
 800a8b4:	f000 fce2 	bl	800b27c <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	480c      	ldr	r0, [pc, #48]	; (800a8ec <MX_I2C3_Init+0x84>)
 800a8bc:	f7f8 fef0 	bl	80036a0 <HAL_I2CEx_ConfigAnalogFilter>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d004      	beq.n	800a8d0 <MX_I2C3_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a8c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a8ca:	480b      	ldr	r0, [pc, #44]	; (800a8f8 <MX_I2C3_Init+0x90>)
 800a8cc:	f000 fcd6 	bl	800b27c <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	4806      	ldr	r0, [pc, #24]	; (800a8ec <MX_I2C3_Init+0x84>)
 800a8d4:	f7f8 ff2f 	bl	8003736 <HAL_I2CEx_ConfigDigitalFilter>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d004      	beq.n	800a8e8 <MX_I2C3_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a8de:	f240 2106 	movw	r1, #518	; 0x206
 800a8e2:	4805      	ldr	r0, [pc, #20]	; (800a8f8 <MX_I2C3_Init+0x90>)
 800a8e4:	f000 fcca 	bl	800b27c <_Error_Handler>
  }

}
 800a8e8:	bf00      	nop
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20000c00 	.word	0x20000c00
 800a8f0:	40005c00 	.word	0x40005c00
 800a8f4:	00c0eaff 	.word	0x00c0eaff
 800a8f8:	0800f86c 	.word	0x0800f86c

0800a8fc <MX_LTDC_Init>:

/* LTDC init function */
static void MX_LTDC_Init(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b08e      	sub	sp, #56	; 0x38
 800a900:	af00      	add	r7, sp, #0

  LTDC_LayerCfgTypeDef pLayerCfg;

  hltdc.Instance = LTDC;
 800a902:	4b3c      	ldr	r3, [pc, #240]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a904:	4a3c      	ldr	r2, [pc, #240]	; (800a9f8 <MX_LTDC_Init+0xfc>)
 800a906:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800a908:	4b3a      	ldr	r3, [pc, #232]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a90a:	2200      	movs	r2, #0
 800a90c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800a90e:	4b39      	ldr	r3, [pc, #228]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a910:	2200      	movs	r2, #0
 800a912:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800a914:	4b37      	ldr	r3, [pc, #220]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a916:	2200      	movs	r2, #0
 800a918:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800a91a:	4b36      	ldr	r3, [pc, #216]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a91c:	2200      	movs	r2, #0
 800a91e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800a920:	4b34      	ldr	r3, [pc, #208]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a922:	2228      	movs	r2, #40	; 0x28
 800a924:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800a926:	4b33      	ldr	r3, [pc, #204]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a928:	2209      	movs	r2, #9
 800a92a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800a92c:	4b31      	ldr	r3, [pc, #196]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a92e:	2235      	movs	r2, #53	; 0x35
 800a930:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800a932:	4b30      	ldr	r3, [pc, #192]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a934:	220b      	movs	r2, #11
 800a936:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800a938:	4b2e      	ldr	r3, [pc, #184]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a93a:	f240 2215 	movw	r2, #533	; 0x215
 800a93e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800a940:	4b2c      	ldr	r3, [pc, #176]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a942:	f240 121b 	movw	r2, #283	; 0x11b
 800a946:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800a948:	4b2a      	ldr	r3, [pc, #168]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a94a:	f240 2235 	movw	r2, #565	; 0x235
 800a94e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800a950:	4b28      	ldr	r3, [pc, #160]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a952:	f240 121d 	movw	r2, #285	; 0x11d
 800a956:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800a958:	4b26      	ldr	r3, [pc, #152]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800a960:	4b24      	ldr	r3, [pc, #144]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a962:	2200      	movs	r2, #0
 800a964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800a968:	4b22      	ldr	r3, [pc, #136]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800a970:	4820      	ldr	r0, [pc, #128]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a972:	f7f8 ff2f 	bl	80037d4 <HAL_LTDC_Init>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d004      	beq.n	800a986 <MX_LTDC_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a97c:	f240 2123 	movw	r1, #547	; 0x223
 800a980:	481e      	ldr	r0, [pc, #120]	; (800a9fc <MX_LTDC_Init+0x100>)
 800a982:	f000 fc7b 	bl	800b27c <_Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 800a986:	2300      	movs	r3, #0
 800a988:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800a98a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a98e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800a990:	2300      	movs	r3, #0
 800a992:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800a994:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a998:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800a99a:	2300      	movs	r3, #0
 800a99c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800a99e:	23ff      	movs	r3, #255	; 0xff
 800a9a0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800a9a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9aa:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800a9ac:	2305      	movs	r3, #5
 800a9ae:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = LCD_FB_START_ADDRESS;
 800a9b0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800a9b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800a9d0:	1d3b      	adds	r3, r7, #4
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4807      	ldr	r0, [pc, #28]	; (800a9f4 <MX_LTDC_Init+0xf8>)
 800a9d8:	f7f8 ffd8 	bl	800398c <HAL_LTDC_ConfigLayer>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d004      	beq.n	800a9ec <MX_LTDC_Init+0xf0>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a9e2:	f240 2137 	movw	r1, #567	; 0x237
 800a9e6:	4805      	ldr	r0, [pc, #20]	; (800a9fc <MX_LTDC_Init+0x100>)
 800a9e8:	f000 fc48 	bl	800b27c <_Error_Handler>
  }

}
 800a9ec:	bf00      	nop
 800a9ee:	3738      	adds	r7, #56	; 0x38
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	20000d30 	.word	0x20000d30
 800a9f8:	40016800 	.word	0x40016800
 800a9fc:	0800f86c 	.word	0x0800f86c

0800aa00 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800aa04:	4b15      	ldr	r3, [pc, #84]	; (800aa5c <MX_USART1_UART_Init+0x5c>)
 800aa06:	4a16      	ldr	r2, [pc, #88]	; (800aa60 <MX_USART1_UART_Init+0x60>)
 800aa08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800aa0a:	4b14      	ldr	r3, [pc, #80]	; (800aa5c <MX_USART1_UART_Init+0x5c>)
 800aa0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800aa10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800aa12:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <MX_USART1_UART_Init+0x5c>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800aa18:	4b10      	ldr	r3, [pc, #64]	; (800aa5c <MX_USART1_UART_Init+0x5c>)
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800aa1e:	4b0f      	ldr	r3, [pc, #60]	; (800aa5c <MX_USART1_UART_Init+0x5c>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800aa24:	4b0d      	ldr	r3, [pc, #52]	; (800aa5c <MX_USART1_UART_Init+0x5c>)
 800aa26:	220c      	movs	r2, #12
 800aa28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa2a:	4b0c      	ldr	r3, [pc, #48]	; (800aa5c <MX_USART1_UART_Init+0x5c>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800aa30:	4b0a      	ldr	r3, [pc, #40]	; (800aa5c <MX_USART1_UART_Init+0x5c>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aa36:	4b09      	ldr	r3, [pc, #36]	; (800aa5c <MX_USART1_UART_Init+0x5c>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aa3c:	4b07      	ldr	r3, [pc, #28]	; (800aa5c <MX_USART1_UART_Init+0x5c>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800aa42:	4806      	ldr	r0, [pc, #24]	; (800aa5c <MX_USART1_UART_Init+0x5c>)
 800aa44:	f7fb fe76 	bl	8006734 <HAL_UART_Init>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d004      	beq.n	800aa58 <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800aa4e:	f44f 7113 	mov.w	r1, #588	; 0x24c
 800aa52:	4804      	ldr	r0, [pc, #16]	; (800aa64 <MX_USART1_UART_Init+0x64>)
 800aa54:	f000 fc12 	bl	800b27c <_Error_Handler>
  }

}
 800aa58:	bf00      	nop
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	20000e20 	.word	0x20000e20
 800aa60:	40011000 	.word	0x40011000
 800aa64:	0800f86c 	.word	0x0800f86c

0800aa68 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void) 
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800aa6e:	4a30      	ldr	r2, [pc, #192]	; (800ab30 <MX_DMA_Init+0xc8>)
 800aa70:	4b2f      	ldr	r3, [pc, #188]	; (800ab30 <MX_DMA_Init+0xc8>)
 800aa72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aa78:	6313      	str	r3, [r2, #48]	; 0x30
 800aa7a:	4b2d      	ldr	r3, [pc, #180]	; (800ab30 <MX_DMA_Init+0xc8>)
 800aa7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa82:	607b      	str	r3, [r7, #4]
 800aa84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800aa86:	4a2a      	ldr	r2, [pc, #168]	; (800ab30 <MX_DMA_Init+0xc8>)
 800aa88:	4b29      	ldr	r3, [pc, #164]	; (800ab30 <MX_DMA_Init+0xc8>)
 800aa8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa90:	6313      	str	r3, [r2, #48]	; 0x30
 800aa92:	4b27      	ldr	r3, [pc, #156]	; (800ab30 <MX_DMA_Init+0xc8>)
 800aa94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa9a:	603b      	str	r3, [r7, #0]
 800aa9c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800aa9e:	4b25      	ldr	r3, [pc, #148]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aaa0:	4a25      	ldr	r2, [pc, #148]	; (800ab38 <MX_DMA_Init+0xd0>)
 800aaa2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 800aaa4:	4b23      	ldr	r3, [pc, #140]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800aaaa:	4b22      	ldr	r3, [pc, #136]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aaac:	2280      	movs	r2, #128	; 0x80
 800aaae:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800aab0:	4b20      	ldr	r3, [pc, #128]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aab6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800aab8:	4b1e      	ldr	r3, [pc, #120]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aaba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aabe:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aac0:	4b1c      	ldr	r3, [pc, #112]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aac6:	4b1b      	ldr	r3, [pc, #108]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800aacc:	4b19      	ldr	r3, [pc, #100]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aace:	2200      	movs	r2, #0
 800aad0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800aad2:	4b18      	ldr	r3, [pc, #96]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800aad8:	4b16      	ldr	r3, [pc, #88]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aada:	2204      	movs	r2, #4
 800aadc:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800aade:	4b15      	ldr	r3, [pc, #84]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aae0:	2203      	movs	r2, #3
 800aae2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800aae4:	4b13      	ldr	r3, [pc, #76]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aae6:	2200      	movs	r2, #0
 800aae8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800aaea:	4b12      	ldr	r3, [pc, #72]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800aaf0:	4810      	ldr	r0, [pc, #64]	; (800ab34 <MX_DMA_Init+0xcc>)
 800aaf2:	f7f7 fe03 	bl	80026fc <HAL_DMA_Init>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d004      	beq.n	800ab06 <MX_DMA_Init+0x9e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800aafc:	f44f 711b 	mov.w	r1, #620	; 0x26c
 800ab00:	480e      	ldr	r0, [pc, #56]	; (800ab3c <MX_DMA_Init+0xd4>)
 800ab02:	f000 fbbb 	bl	800b27c <_Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800ab06:	2200      	movs	r2, #0
 800ab08:	2100      	movs	r1, #0
 800ab0a:	200c      	movs	r0, #12
 800ab0c:	f7f7 fcb7 	bl	800247e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800ab10:	200c      	movs	r0, #12
 800ab12:	f7f7 fcd0 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800ab16:	2200      	movs	r2, #0
 800ab18:	2100      	movs	r1, #0
 800ab1a:	200f      	movs	r0, #15
 800ab1c:	f7f7 fcaf 	bl	800247e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800ab20:	200f      	movs	r0, #15
 800ab22:	f7f7 fcc8 	bl	80024b6 <HAL_NVIC_EnableIRQ>

}
 800ab26:	bf00      	nop
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	40023800 	.word	0x40023800
 800ab34:	20000cac 	.word	0x20000cac
 800ab38:	40026410 	.word	0x40026410
 800ab3c:	0800f86c 	.word	0x0800f86c

0800ab40 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b088      	sub	sp, #32
 800ab44:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800ab46:	4b21      	ldr	r3, [pc, #132]	; (800abcc <MX_FMC_Init+0x8c>)
 800ab48:	4a21      	ldr	r2, [pc, #132]	; (800abd0 <MX_FMC_Init+0x90>)
 800ab4a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800ab4c:	4b1f      	ldr	r3, [pc, #124]	; (800abcc <MX_FMC_Init+0x8c>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800ab52:	4b1e      	ldr	r3, [pc, #120]	; (800abcc <MX_FMC_Init+0x8c>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800ab58:	4b1c      	ldr	r3, [pc, #112]	; (800abcc <MX_FMC_Init+0x8c>)
 800ab5a:	2204      	movs	r2, #4
 800ab5c:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800ab5e:	4b1b      	ldr	r3, [pc, #108]	; (800abcc <MX_FMC_Init+0x8c>)
 800ab60:	2210      	movs	r2, #16
 800ab62:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800ab64:	4b19      	ldr	r3, [pc, #100]	; (800abcc <MX_FMC_Init+0x8c>)
 800ab66:	2240      	movs	r2, #64	; 0x40
 800ab68:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800ab6a:	4b18      	ldr	r3, [pc, #96]	; (800abcc <MX_FMC_Init+0x8c>)
 800ab6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab70:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800ab72:	4b16      	ldr	r3, [pc, #88]	; (800abcc <MX_FMC_Init+0x8c>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800ab78:	4b14      	ldr	r3, [pc, #80]	; (800abcc <MX_FMC_Init+0x8c>)
 800ab7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab7e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800ab80:	4b12      	ldr	r3, [pc, #72]	; (800abcc <MX_FMC_Init+0x8c>)
 800ab82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ab86:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800ab88:	4b10      	ldr	r3, [pc, #64]	; (800abcc <MX_FMC_Init+0x8c>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800ab8e:	2302      	movs	r3, #2
 800ab90:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800ab92:	2307      	movs	r3, #7
 800ab94:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800ab96:	2304      	movs	r3, #4
 800ab98:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 800ab9a:	2306      	movs	r3, #6
 800ab9c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800ab9e:	2302      	movs	r3, #2
 800aba0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800aba2:	2302      	movs	r3, #2
 800aba4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800aba6:	2302      	movs	r3, #2
 800aba8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800abaa:	1d3b      	adds	r3, r7, #4
 800abac:	4619      	mov	r1, r3
 800abae:	4807      	ldr	r0, [pc, #28]	; (800abcc <MX_FMC_Init+0x8c>)
 800abb0:	f7fb fb06 	bl	80061c0 <HAL_SDRAM_Init>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d004      	beq.n	800abc4 <MX_FMC_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 800abba:	f240 2196 	movw	r1, #662	; 0x296
 800abbe:	4805      	ldr	r0, [pc, #20]	; (800abd4 <MX_FMC_Init+0x94>)
 800abc0:	f000 fb5c 	bl	800b27c <_Error_Handler>
  }

}
 800abc4:	bf00      	nop
 800abc6:	3720      	adds	r7, #32
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	20000ed0 	.word	0x20000ed0
 800abd0:	a0000140 	.word	0xa0000140
 800abd4:	0800f86c 	.word	0x0800f86c

0800abd8 <MX_GPIO_Init>:
     PA7   ------> ETH_CRS_DV
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
static void MX_GPIO_Init(void)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b090      	sub	sp, #64	; 0x40
 800abdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800abde:	4aae      	ldr	r2, [pc, #696]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800abe0:	4bad      	ldr	r3, [pc, #692]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800abe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe4:	f043 0310 	orr.w	r3, r3, #16
 800abe8:	6313      	str	r3, [r2, #48]	; 0x30
 800abea:	4bab      	ldr	r3, [pc, #684]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800abec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abee:	f003 0310 	and.w	r3, r3, #16
 800abf2:	62bb      	str	r3, [r7, #40]	; 0x28
 800abf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800abf6:	4aa8      	ldr	r2, [pc, #672]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800abf8:	4ba7      	ldr	r3, [pc, #668]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800abfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac00:	6313      	str	r3, [r2, #48]	; 0x30
 800ac02:	4ba5      	ldr	r3, [pc, #660]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac0e:	4aa2      	ldr	r2, [pc, #648]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac10:	4ba1      	ldr	r3, [pc, #644]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac14:	f043 0302 	orr.w	r3, r3, #2
 800ac18:	6313      	str	r3, [r2, #48]	; 0x30
 800ac1a:	4b9f      	ldr	r3, [pc, #636]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1e:	f003 0302 	and.w	r3, r3, #2
 800ac22:	623b      	str	r3, [r7, #32]
 800ac24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ac26:	4a9c      	ldr	r2, [pc, #624]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac28:	4b9b      	ldr	r3, [pc, #620]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2c:	f043 0308 	orr.w	r3, r3, #8
 800ac30:	6313      	str	r3, [r2, #48]	; 0x30
 800ac32:	4b99      	ldr	r3, [pc, #612]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac36:	f003 0308 	and.w	r3, r3, #8
 800ac3a:	61fb      	str	r3, [r7, #28]
 800ac3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac3e:	4a96      	ldr	r2, [pc, #600]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac40:	4b95      	ldr	r3, [pc, #596]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac44:	f043 0304 	orr.w	r3, r3, #4
 800ac48:	6313      	str	r3, [r2, #48]	; 0x30
 800ac4a:	4b93      	ldr	r3, [pc, #588]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4e:	f003 0304 	and.w	r3, r3, #4
 800ac52:	61bb      	str	r3, [r7, #24]
 800ac54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac56:	4a90      	ldr	r2, [pc, #576]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac58:	4b8f      	ldr	r3, [pc, #572]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5c:	f043 0301 	orr.w	r3, r3, #1
 800ac60:	6313      	str	r3, [r2, #48]	; 0x30
 800ac62:	4b8d      	ldr	r3, [pc, #564]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	617b      	str	r3, [r7, #20]
 800ac6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800ac6e:	4a8a      	ldr	r2, [pc, #552]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac70:	4b89      	ldr	r3, [pc, #548]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac78:	6313      	str	r3, [r2, #48]	; 0x30
 800ac7a:	4b87      	ldr	r3, [pc, #540]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac82:	613b      	str	r3, [r7, #16]
 800ac84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800ac86:	4a84      	ldr	r2, [pc, #528]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac88:	4b83      	ldr	r3, [pc, #524]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac90:	6313      	str	r3, [r2, #48]	; 0x30
 800ac92:	4b81      	ldr	r3, [pc, #516]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800ac94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800ac9e:	4a7e      	ldr	r2, [pc, #504]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800aca0:	4b7d      	ldr	r3, [pc, #500]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800aca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aca8:	6313      	str	r3, [r2, #48]	; 0x30
 800acaa:	4b7b      	ldr	r3, [pc, #492]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800acac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acb2:	60bb      	str	r3, [r7, #8]
 800acb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800acb6:	4a78      	ldr	r2, [pc, #480]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800acb8:	4b77      	ldr	r3, [pc, #476]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800acba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acbc:	f043 0320 	orr.w	r3, r3, #32
 800acc0:	6313      	str	r3, [r2, #48]	; 0x30
 800acc2:	4b75      	ldr	r3, [pc, #468]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800acc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc6:	f003 0320 	and.w	r3, r3, #32
 800acca:	607b      	str	r3, [r7, #4]
 800accc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800acce:	4a72      	ldr	r2, [pc, #456]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800acd0:	4b71      	ldr	r3, [pc, #452]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800acd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acd8:	6313      	str	r3, [r2, #48]	; 0x30
 800acda:	4b6f      	ldr	r3, [pc, #444]	; (800ae98 <MX_GPIO_Init+0x2c0>)
 800acdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ace2:	603b      	str	r3, [r7, #0]
 800ace4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800ace6:	2201      	movs	r2, #1
 800ace8:	2120      	movs	r1, #32
 800acea:	486c      	ldr	r0, [pc, #432]	; (800ae9c <MX_GPIO_Init+0x2c4>)
 800acec:	f7f8 fc30 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 800acf0:	2200      	movs	r2, #0
 800acf2:	f241 010c 	movw	r1, #4108	; 0x100c
 800acf6:	486a      	ldr	r0, [pc, #424]	; (800aea0 <MX_GPIO_Init+0x2c8>)
 800acf8:	f7f8 fc2a 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800acfc:	2200      	movs	r2, #0
 800acfe:	2108      	movs	r1, #8
 800ad00:	4868      	ldr	r0, [pc, #416]	; (800aea4 <MX_GPIO_Init+0x2cc>)
 800ad02:	f7f8 fc25 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800ad06:	2200      	movs	r2, #0
 800ad08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ad0c:	4866      	ldr	r0, [pc, #408]	; (800aea8 <MX_GPIO_Init+0x2d0>)
 800ad0e:	f7f8 fc1f 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800ad12:	2200      	movs	r2, #0
 800ad14:	21c8      	movs	r1, #200	; 0xc8
 800ad16:	4865      	ldr	r0, [pc, #404]	; (800aeac <MX_GPIO_Init+0x2d4>)
 800ad18:	f7f8 fc1a 	bl	8003550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800ad1c:	2308      	movs	r3, #8
 800ad1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad20:	2300      	movs	r3, #0
 800ad22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad24:	2300      	movs	r3, #0
 800ad26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ad28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4860      	ldr	r0, [pc, #384]	; (800aeb0 <MX_GPIO_Init+0x2d8>)
 800ad30:	f7f8 fa64 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800ad34:	2304      	movs	r3, #4
 800ad36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad38:	2302      	movs	r3, #2
 800ad3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad40:	2303      	movs	r3, #3
 800ad42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800ad44:	2309      	movs	r3, #9
 800ad46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800ad48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4858      	ldr	r0, [pc, #352]	; (800aeb0 <MX_GPIO_Init+0x2d8>)
 800ad50:	f7f8 fa54 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800ad54:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800ad58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad62:	2303      	movs	r3, #3
 800ad64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ad66:	230b      	movs	r3, #11
 800ad68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ad6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad6e:	4619      	mov	r1, r3
 800ad70:	484e      	ldr	r0, [pc, #312]	; (800aeac <MX_GPIO_Init+0x2d4>)
 800ad72:	f7f8 fa43 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800ad76:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ad7c:	2312      	movs	r3, #18
 800ad7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ad80:	2301      	movs	r3, #1
 800ad82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad84:	2300      	movs	r3, #0
 800ad86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ad88:	2304      	movs	r3, #4
 800ad8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad90:	4619      	mov	r1, r3
 800ad92:	4848      	ldr	r0, [pc, #288]	; (800aeb4 <MX_GPIO_Init+0x2dc>)
 800ad94:	f7f8 fa32 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800ad98:	2310      	movs	r3, #16
 800ad9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad9c:	2302      	movs	r3, #2
 800ad9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ada0:	2300      	movs	r3, #0
 800ada2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ada4:	2300      	movs	r3, #0
 800ada6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ada8:	2302      	movs	r3, #2
 800adaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800adac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800adb0:	4619      	mov	r1, r3
 800adb2:	4840      	ldr	r0, [pc, #256]	; (800aeb4 <MX_GPIO_Init+0x2dc>)
 800adb4:	f7f8 fa22 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800adb8:	2380      	movs	r3, #128	; 0x80
 800adba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adbc:	2302      	movs	r3, #2
 800adbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adc0:	2300      	movs	r3, #0
 800adc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adc4:	2300      	movs	r3, #0
 800adc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800adc8:	2308      	movs	r3, #8
 800adca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800adcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800add0:	4619      	mov	r1, r3
 800add2:	4832      	ldr	r0, [pc, #200]	; (800ae9c <MX_GPIO_Init+0x2c4>)
 800add4:	f7f8 fa12 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9 
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 800add8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800addc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adde:	2302      	movs	r3, #2
 800ade0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ade2:	2300      	movs	r3, #0
 800ade4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ade6:	2303      	movs	r3, #3
 800ade8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800adea:	230c      	movs	r3, #12
 800adec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800adee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800adf2:	4619      	mov	r1, r3
 800adf4:	4830      	ldr	r0, [pc, #192]	; (800aeb8 <MX_GPIO_Init+0x2e0>)
 800adf6:	f7f8 fa01 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800adfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae00:	2302      	movs	r3, #2
 800ae02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae04:	2300      	movs	r3, #0
 800ae06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800ae10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae14:	4619      	mov	r1, r3
 800ae16:	4829      	ldr	r0, [pc, #164]	; (800aebc <MX_GPIO_Init+0x2e4>)
 800ae18:	f7f8 f9f0 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800ae1c:	2360      	movs	r3, #96	; 0x60
 800ae1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae20:	2302      	movs	r3, #2
 800ae22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae24:	2300      	movs	r3, #0
 800ae26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800ae2c:	230d      	movs	r3, #13
 800ae2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ae30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae34:	4619      	mov	r1, r3
 800ae36:	481e      	ldr	r0, [pc, #120]	; (800aeb0 <MX_GPIO_Init+0x2d8>)
 800ae38:	f7f8 f9e0 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800ae3c:	2340      	movs	r3, #64	; 0x40
 800ae3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae40:	2302      	movs	r3, #2
 800ae42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae44:	2300      	movs	r3, #0
 800ae46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800ae4c:	230a      	movs	r3, #10
 800ae4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800ae50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae54:	4619      	mov	r1, r3
 800ae56:	4817      	ldr	r0, [pc, #92]	; (800aeb4 <MX_GPIO_Init+0x2dc>)
 800ae58:	f7f8 f9d0 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800ae5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae62:	2300      	movs	r3, #0
 800ae64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ae6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae6e:	4619      	mov	r1, r3
 800ae70:	4813      	ldr	r0, [pc, #76]	; (800aec0 <MX_GPIO_Init+0x2e8>)
 800ae72:	f7f8 f9c3 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800ae76:	2340      	movs	r3, #64	; 0x40
 800ae78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ae7a:	4b12      	ldr	r3, [pc, #72]	; (800aec4 <MX_GPIO_Init+0x2ec>)
 800ae7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800ae82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae86:	4619      	mov	r1, r3
 800ae88:	4804      	ldr	r0, [pc, #16]	; (800ae9c <MX_GPIO_Init+0x2c4>)
 800ae8a:	f7f8 f9b7 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800ae8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ae92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae94:	e018      	b.n	800aec8 <MX_GPIO_Init+0x2f0>
 800ae96:	bf00      	nop
 800ae98:	40023800 	.word	0x40023800
 800ae9c:	40020c00 	.word	0x40020c00
 800aea0:	40022000 	.word	0x40022000
 800aea4:	40022800 	.word	0x40022800
 800aea8:	40021c00 	.word	0x40021c00
 800aeac:	40021800 	.word	0x40021800
 800aeb0:	40021000 	.word	0x40021000
 800aeb4:	40020400 	.word	0x40020400
 800aeb8:	40020800 	.word	0x40020800
 800aebc:	40020000 	.word	0x40020000
 800aec0:	40022400 	.word	0x40022400
 800aec4:	10120000 	.word	0x10120000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aec8:	2302      	movs	r3, #2
 800aeca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aecc:	2300      	movs	r3, #0
 800aece:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aed0:	2303      	movs	r3, #3
 800aed2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aed4:	230a      	movs	r3, #10
 800aed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aed8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aedc:	4619      	mov	r1, r3
 800aede:	48bb      	ldr	r0, [pc, #748]	; (800b1cc <MX_GPIO_Init+0x5f4>)
 800aee0:	f7f8 f98c 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800aee4:	23f0      	movs	r3, #240	; 0xf0
 800aee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aee8:	2302      	movs	r3, #2
 800aeea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aeec:	2300      	movs	r3, #0
 800aeee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aef0:	2300      	movs	r3, #0
 800aef2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800aef4:	230a      	movs	r3, #10
 800aef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800aef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aefc:	4619      	mov	r1, r3
 800aefe:	48b4      	ldr	r0, [pc, #720]	; (800b1d0 <MX_GPIO_Init+0x5f8>)
 800af00:	f7f8 f97c 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800af04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af0a:	2302      	movs	r3, #2
 800af0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af0e:	2300      	movs	r3, #0
 800af10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af12:	2300      	movs	r3, #0
 800af14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800af16:	230a      	movs	r3, #10
 800af18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800af1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af1e:	4619      	mov	r1, r3
 800af20:	48ac      	ldr	r0, [pc, #688]	; (800b1d4 <MX_GPIO_Init+0x5fc>)
 800af22:	f7f8 f96b 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800af26:	2320      	movs	r3, #32
 800af28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800af2a:	2301      	movs	r3, #1
 800af2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af2e:	2300      	movs	r3, #0
 800af30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af32:	2300      	movs	r3, #0
 800af34:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800af36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af3a:	4619      	mov	r1, r3
 800af3c:	48a6      	ldr	r0, [pc, #664]	; (800b1d8 <MX_GPIO_Init+0x600>)
 800af3e:	f7f8 f95d 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800af42:	2308      	movs	r3, #8
 800af44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af46:	2302      	movs	r3, #2
 800af48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af4a:	2300      	movs	r3, #0
 800af4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af4e:	2300      	movs	r3, #0
 800af50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800af52:	230d      	movs	r3, #13
 800af54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800af56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af5a:	4619      	mov	r1, r3
 800af5c:	489e      	ldr	r0, [pc, #632]	; (800b1d8 <MX_GPIO_Init+0x600>)
 800af5e:	f7f8 f94d 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800af62:	f241 030c 	movw	r3, #4108	; 0x100c
 800af66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800af68:	2301      	movs	r3, #1
 800af6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af6c:	2300      	movs	r3, #0
 800af6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af70:	2300      	movs	r3, #0
 800af72:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800af74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af78:	4619      	mov	r1, r3
 800af7a:	4895      	ldr	r0, [pc, #596]	; (800b1d0 <MX_GPIO_Init+0x5f8>)
 800af7c:	f7f8 f93e 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800af80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800af86:	2300      	movs	r3, #0
 800af88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800af8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af92:	4619      	mov	r1, r3
 800af94:	4891      	ldr	r0, [pc, #580]	; (800b1dc <MX_GPIO_Init+0x604>)
 800af96:	f7f8 f931 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800af9a:	2308      	movs	r3, #8
 800af9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800af9e:	2301      	movs	r3, #1
 800afa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afa6:	2300      	movs	r3, #0
 800afa8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800afaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afae:	4619      	mov	r1, r3
 800afb0:	488b      	ldr	r0, [pc, #556]	; (800b1e0 <MX_GPIO_Init+0x608>)
 800afb2:	f7f8 f923 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800afb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afbc:	2302      	movs	r3, #2
 800afbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afc0:	2300      	movs	r3, #0
 800afc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afc4:	2300      	movs	r3, #0
 800afc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800afc8:	230d      	movs	r3, #13
 800afca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800afcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afd0:	4619      	mov	r1, r3
 800afd2:	4880      	ldr	r0, [pc, #512]	; (800b1d4 <MX_GPIO_Init+0x5fc>)
 800afd4:	f7f8 f912 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800afd8:	2310      	movs	r3, #16
 800afda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800afdc:	2300      	movs	r3, #0
 800afde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afe0:	2300      	movs	r3, #0
 800afe2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800afe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afe8:	4619      	mov	r1, r3
 800afea:	487b      	ldr	r0, [pc, #492]	; (800b1d8 <MX_GPIO_Init+0x600>)
 800afec:	f7f8 f906 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800aff0:	2304      	movs	r3, #4
 800aff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aff4:	2302      	movs	r3, #2
 800aff6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aff8:	2300      	movs	r3, #0
 800affa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800affc:	2303      	movs	r3, #3
 800affe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b000:	230c      	movs	r3, #12
 800b002:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800b004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b008:	4619      	mov	r1, r3
 800b00a:	4873      	ldr	r0, [pc, #460]	; (800b1d8 <MX_GPIO_Init+0x600>)
 800b00c:	f7f8 f8f6 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800b010:	f248 0304 	movw	r3, #32772	; 0x8004
 800b014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b016:	2300      	movs	r3, #0
 800b018:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b01e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b022:	4619      	mov	r1, r3
 800b024:	486f      	ldr	r0, [pc, #444]	; (800b1e4 <MX_GPIO_Init+0x60c>)
 800b026:	f7f8 f8e9 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800b02a:	2302      	movs	r3, #2
 800b02c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b02e:	2302      	movs	r3, #2
 800b030:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b032:	2300      	movs	r3, #0
 800b034:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b036:	2300      	movs	r3, #0
 800b038:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b03a:	2305      	movs	r3, #5
 800b03c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800b03e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b042:	4619      	mov	r1, r3
 800b044:	4862      	ldr	r0, [pc, #392]	; (800b1d0 <MX_GPIO_Init+0x5f8>)
 800b046:	f7f8 f8d9 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800b04a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b04e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b050:	2301      	movs	r3, #1
 800b052:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b054:	2300      	movs	r3, #0
 800b056:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b058:	2300      	movs	r3, #0
 800b05a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800b05c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b060:	4619      	mov	r1, r3
 800b062:	4860      	ldr	r0, [pc, #384]	; (800b1e4 <MX_GPIO_Init+0x60c>)
 800b064:	f7f8 f8ca 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin 
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800b068:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800b06c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b06e:	2302      	movs	r3, #2
 800b070:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b072:	2300      	movs	r3, #0
 800b074:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b076:	2300      	movs	r3, #0
 800b078:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b07a:	230d      	movs	r3, #13
 800b07c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b07e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b082:	4619      	mov	r1, r3
 800b084:	4857      	ldr	r0, [pc, #348]	; (800b1e4 <MX_GPIO_Init+0x60c>)
 800b086:	f7f8 f8b9 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 800b08a:	2301      	movs	r3, #1
 800b08c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b08e:	2302      	movs	r3, #2
 800b090:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b092:	2300      	movs	r3, #0
 800b094:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b096:	2300      	movs	r3, #0
 800b098:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800b09a:	2302      	movs	r3, #2
 800b09c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 800b09e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	484a      	ldr	r0, [pc, #296]	; (800b1d0 <MX_GPIO_Init+0x5f8>)
 800b0a6:	f7f8 f8a9 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 800b0aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 800b0c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	4841      	ldr	r0, [pc, #260]	; (800b1cc <MX_GPIO_Init+0x5f4>)
 800b0c8:	f7f8 f898 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800b0cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b0d2:	4b45      	ldr	r3, [pc, #276]	; (800b1e8 <MX_GPIO_Init+0x610>)
 800b0d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800b0da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0de:	4619      	mov	r1, r3
 800b0e0:	483b      	ldr	r0, [pc, #236]	; (800b1d0 <MX_GPIO_Init+0x5f8>)
 800b0e2:	f7f8 f88b 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800b0e6:	23c0      	movs	r3, #192	; 0xc0
 800b0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800b0f6:	2308      	movs	r3, #8
 800b0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b0fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0fe:	4619      	mov	r1, r3
 800b100:	4836      	ldr	r0, [pc, #216]	; (800b1dc <MX_GPIO_Init+0x604>)
 800b102:	f7f8 f87b 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800b106:	23c8      	movs	r3, #200	; 0xc8
 800b108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b10a:	2301      	movs	r3, #1
 800b10c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b10e:	2300      	movs	r3, #0
 800b110:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b112:	2300      	movs	r3, #0
 800b114:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b11a:	4619      	mov	r1, r3
 800b11c:	482d      	ldr	r0, [pc, #180]	; (800b1d4 <MX_GPIO_Init+0x5fc>)
 800b11e:	f7f8 f86d 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b122:	2332      	movs	r3, #50	; 0x32
 800b124:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b126:	2302      	movs	r3, #2
 800b128:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b12a:	2300      	movs	r3, #0
 800b12c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b12e:	2303      	movs	r3, #3
 800b130:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b132:	230b      	movs	r3, #11
 800b134:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b13a:	4619      	mov	r1, r3
 800b13c:	4827      	ldr	r0, [pc, #156]	; (800b1dc <MX_GPIO_Init+0x604>)
 800b13e:	f7f8 f85d 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b142:	2304      	movs	r3, #4
 800b144:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b146:	2302      	movs	r3, #2
 800b148:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b14e:	2303      	movs	r3, #3
 800b150:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b152:	2309      	movs	r3, #9
 800b154:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b15a:	4619      	mov	r1, r3
 800b15c:	4823      	ldr	r0, [pc, #140]	; (800b1ec <MX_GPIO_Init+0x614>)
 800b15e:	f7f8 f84d 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800b162:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b168:	2302      	movs	r3, #2
 800b16a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b16c:	2300      	movs	r3, #0
 800b16e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b170:	2303      	movs	r3, #3
 800b172:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800b174:	2309      	movs	r3, #9
 800b176:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b17c:	4619      	mov	r1, r3
 800b17e:	4816      	ldr	r0, [pc, #88]	; (800b1d8 <MX_GPIO_Init+0x600>)
 800b180:	f7f8 f83c 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800b184:	2304      	movs	r3, #4
 800b186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b188:	2300      	movs	r3, #0
 800b18a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b18c:	2300      	movs	r3, #0
 800b18e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800b190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b194:	4619      	mov	r1, r3
 800b196:	480f      	ldr	r0, [pc, #60]	; (800b1d4 <MX_GPIO_Init+0x5fc>)
 800b198:	f7f8 f830 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b19c:	2386      	movs	r3, #134	; 0x86
 800b19e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b1ac:	230b      	movs	r3, #11
 800b1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	4805      	ldr	r0, [pc, #20]	; (800b1cc <MX_GPIO_Init+0x5f4>)
 800b1b8:	f7f8 f820 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800b1bc:	2350      	movs	r3, #80	; 0x50
 800b1be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	e011      	b.n	800b1f0 <MX_GPIO_Init+0x618>
 800b1cc:	40020000 	.word	0x40020000
 800b1d0:	40022000 	.word	0x40022000
 800b1d4:	40021800 	.word	0x40021800
 800b1d8:	40020c00 	.word	0x40020c00
 800b1dc:	40020800 	.word	0x40020800
 800b1e0:	40022800 	.word	0x40022800
 800b1e4:	40021c00 	.word	0x40021c00
 800b1e8:	10120000 	.word	0x10120000
 800b1ec:	40020400 	.word	0x40020400
 800b1f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800b1f2:	230d      	movs	r3, #13
 800b1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4813      	ldr	r0, [pc, #76]	; (800b24c <MX_GPIO_Init+0x674>)
 800b1fe:	f7f7 fffd 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800b202:	2340      	movs	r3, #64	; 0x40
 800b204:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b206:	2302      	movs	r3, #2
 800b208:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b20e:	2300      	movs	r3, #0
 800b210:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800b212:	2309      	movs	r3, #9
 800b214:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800b216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b21a:	4619      	mov	r1, r3
 800b21c:	480c      	ldr	r0, [pc, #48]	; (800b250 <MX_GPIO_Init+0x678>)
 800b21e:	f7f7 ffed 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800b222:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800b226:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b228:	2302      	movs	r3, #2
 800b22a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b22c:	2300      	movs	r3, #0
 800b22e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b230:	2300      	movs	r3, #0
 800b232:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b234:	2305      	movs	r3, #5
 800b236:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b238:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b23c:	4619      	mov	r1, r3
 800b23e:	4805      	ldr	r0, [pc, #20]	; (800b254 <MX_GPIO_Init+0x67c>)
 800b240:	f7f7 ffdc 	bl	80031fc <HAL_GPIO_Init>

}
 800b244:	bf00      	nop
 800b246:	3740      	adds	r7, #64	; 0x40
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	40020000 	.word	0x40020000
 800b250:	40021c00 	.word	0x40021c00
 800b254:	40020400 	.word	0x40020400

0800b258 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a04      	ldr	r2, [pc, #16]	; (800b278 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d101      	bne.n	800b26e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b26a:	f7f6 fccd 	bl	8001c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b26e:	bf00      	nop
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	40010000 	.word	0x40010000

0800b27c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  printf("Error file = %s Line = %d ", file,line);
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	6879      	ldr	r1, [r7, #4]
 800b28a:	4802      	ldr	r0, [pc, #8]	; (800b294 <_Error_Handler+0x18>)
 800b28c:	f001 ff94 	bl	800d1b8 <iprintf>

  while(1)
 800b290:	e7fe      	b.n	800b290 <_Error_Handler+0x14>
 800b292:	bf00      	nop
 800b294:	0800f87c 	.word	0x0800f87c

0800b298 <SDRAMDISK_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_initialize(BYTE lun)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	4603      	mov	r3, r0
 800b2a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b2a2:	4b0b      	ldr	r3, [pc, #44]	; (800b2d0 <SDRAMDISK_initialize+0x38>)
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	701a      	strb	r2, [r3, #0]

  /* Configure the SDRAM device */
  if(BSP_SDRAM_Init() == SDRAM_OK)
 800b2a8:	f7fe fbae 	bl	8009a08 <BSP_SDRAM_Init>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d107      	bne.n	800b2c2 <SDRAMDISK_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b2b2:	4b07      	ldr	r3, [pc, #28]	; (800b2d0 <SDRAMDISK_initialize+0x38>)
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	f023 0301 	bic.w	r3, r3, #1
 800b2bc:	b2da      	uxtb	r2, r3
 800b2be:	4b04      	ldr	r3, [pc, #16]	; (800b2d0 <SDRAMDISK_initialize+0x38>)
 800b2c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b2c2:	4b03      	ldr	r3, [pc, #12]	; (800b2d0 <SDRAMDISK_initialize+0x38>)
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	b2db      	uxtb	r3, r3
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	20000123 	.word	0x20000123

0800b2d4 <SDRAMDISK_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SDRAMDISK_status(BYTE lun)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	4603      	mov	r3, r0
 800b2dc:	71fb      	strb	r3, [r7, #7]
  return Stat;
 800b2de:	4b04      	ldr	r3, [pc, #16]	; (800b2f0 <SDRAMDISK_status+0x1c>)
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	b2db      	uxtb	r3, r3
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	20000123 	.word	0x20000123

0800b2f4 <SDRAMDISK_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SDRAMDISK_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b089      	sub	sp, #36	; 0x24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60b9      	str	r1, [r7, #8]
 800b2fc:	607a      	str	r2, [r7, #4]
 800b2fe:	603b      	str	r3, [r7, #0]
 800b300:	4603      	mov	r3, r0
 800b302:	73fb      	strb	r3, [r7, #15]
  uint32_t *pSrcBuffer = (uint32_t *)buff;
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	61fb      	str	r3, [r7, #28]
  uint32_t BufferSize = (BLOCK_SIZE * count)/4;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	025b      	lsls	r3, r3, #9
 800b30c:	089b      	lsrs	r3, r3, #2
 800b30e:	61bb      	str	r3, [r7, #24]
  uint32_t *pSdramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 800b316:	025b      	lsls	r3, r3, #9
 800b318:	617b      	str	r3, [r7, #20]

  for(; BufferSize != 0; BufferSize--)
 800b31a:	e00a      	b.n	800b332 <SDRAMDISK_read+0x3e>
  {
    *pSrcBuffer++ = *(__IO uint32_t *)pSdramAddress++;
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	1d1a      	adds	r2, r3, #4
 800b320:	61fa      	str	r2, [r7, #28]
 800b322:	697a      	ldr	r2, [r7, #20]
 800b324:	1d11      	adds	r1, r2, #4
 800b326:	6179      	str	r1, [r7, #20]
 800b328:	6812      	ldr	r2, [r2, #0]
 800b32a:	601a      	str	r2, [r3, #0]
  for(; BufferSize != 0; BufferSize--)
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	3b01      	subs	r3, #1
 800b330:	61bb      	str	r3, [r7, #24]
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1f1      	bne.n	800b31c <SDRAMDISK_read+0x28>
  }

  return RES_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3724      	adds	r7, #36	; 0x24
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <SDRAMDISK_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SDRAMDISK_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b346:	b480      	push	{r7}
 800b348:	b089      	sub	sp, #36	; 0x24
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	603b      	str	r3, [r7, #0]
 800b352:	4603      	mov	r3, r0
 800b354:	73fb      	strb	r3, [r7, #15]
  uint32_t *pDstBuffer = (uint32_t *)buff;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	61fb      	str	r3, [r7, #28]
  uint32_t BufferSize = (BLOCK_SIZE * count)/4;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	025b      	lsls	r3, r3, #9
 800b35e:	089b      	lsrs	r3, r3, #2
 800b360:	61bb      	str	r3, [r7, #24]
  uint32_t *pSramAddress = (uint32_t *) (SDRAM_DEVICE_ADDR + (sector * BLOCK_SIZE));
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 800b368:	025b      	lsls	r3, r3, #9
 800b36a:	617b      	str	r3, [r7, #20]

  for(; BufferSize != 0; BufferSize--)
 800b36c:	e00a      	b.n	800b384 <SDRAMDISK_write+0x3e>
  {
    *(__IO uint32_t *)pSramAddress++ = *pDstBuffer++;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	1d1a      	adds	r2, r3, #4
 800b372:	617a      	str	r2, [r7, #20]
 800b374:	69fa      	ldr	r2, [r7, #28]
 800b376:	1d11      	adds	r1, r2, #4
 800b378:	61f9      	str	r1, [r7, #28]
 800b37a:	6812      	ldr	r2, [r2, #0]
 800b37c:	601a      	str	r2, [r3, #0]
  for(; BufferSize != 0; BufferSize--)
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	3b01      	subs	r3, #1
 800b382:	61bb      	str	r3, [r7, #24]
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1f1      	bne.n	800b36e <SDRAMDISK_write+0x28>
  }

  return RES_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3724      	adds	r7, #36	; 0x24
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <SDRAMDISK_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SDRAMDISK_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	4603      	mov	r3, r0
 800b3a0:	603a      	str	r2, [r7, #0]
 800b3a2:	71fb      	strb	r3, [r7, #7]
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	73fb      	strb	r3, [r7, #15]

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b3ac:	4b1b      	ldr	r3, [pc, #108]	; (800b41c <SDRAMDISK_ioctl+0x84>)
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	f003 0301 	and.w	r3, r3, #1
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d001      	beq.n	800b3be <SDRAMDISK_ioctl+0x26>
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	e028      	b.n	800b410 <SDRAMDISK_ioctl+0x78>

  switch (cmd)
 800b3be:	79bb      	ldrb	r3, [r7, #6]
 800b3c0:	2b03      	cmp	r3, #3
 800b3c2:	d822      	bhi.n	800b40a <SDRAMDISK_ioctl+0x72>
 800b3c4:	a201      	add	r2, pc, #4	; (adr r2, 800b3cc <SDRAMDISK_ioctl+0x34>)
 800b3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ca:	bf00      	nop
 800b3cc:	0800b3dd 	.word	0x0800b3dd
 800b3d0:	0800b3e3 	.word	0x0800b3e3
 800b3d4:	0800b3f1 	.word	0x0800b3f1
 800b3d8:	0800b3ff 	.word	0x0800b3ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]
    break;
 800b3e0:	e015      	b.n	800b40e <SDRAMDISK_ioctl+0x76>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    *(DWORD*)buff = SDRAM_DEVICE_SIZE / BLOCK_SIZE;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b3e8:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ee:	e00e      	b.n	800b40e <SDRAMDISK_ioctl+0x76>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = BLOCK_SIZE;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3f6:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b3fc:	e007      	b.n	800b40e <SDRAMDISK_ioctl+0x76>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = 1;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	2201      	movs	r2, #1
 800b402:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 800b404:	2300      	movs	r3, #0
 800b406:	73fb      	strb	r3, [r7, #15]
    break;
 800b408:	e001      	b.n	800b40e <SDRAMDISK_ioctl+0x76>

  default:
    res = RES_PARERR;
 800b40a:	2304      	movs	r3, #4
 800b40c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3714      	adds	r7, #20
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr
 800b41c:	20000123 	.word	0x20000123

0800b420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b424:	2003      	movs	r0, #3
 800b426:	f7f7 f81f 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800b42a:	2200      	movs	r2, #0
 800b42c:	2100      	movs	r1, #0
 800b42e:	f06f 000b 	mvn.w	r0, #11
 800b432:	f7f7 f824 	bl	800247e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800b436:	2200      	movs	r2, #0
 800b438:	2100      	movs	r1, #0
 800b43a:	f06f 000a 	mvn.w	r0, #10
 800b43e:	f7f7 f81e 	bl	800247e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800b442:	2200      	movs	r2, #0
 800b444:	2100      	movs	r1, #0
 800b446:	f06f 0009 	mvn.w	r0, #9
 800b44a:	f7f7 f818 	bl	800247e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800b44e:	2200      	movs	r2, #0
 800b450:	2100      	movs	r1, #0
 800b452:	f06f 0004 	mvn.w	r0, #4
 800b456:	f7f7 f812 	bl	800247e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800b45a:	2200      	movs	r2, #0
 800b45c:	2100      	movs	r1, #0
 800b45e:	f06f 0003 	mvn.w	r0, #3
 800b462:	f7f7 f80c 	bl	800247e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800b466:	2200      	movs	r2, #0
 800b468:	2100      	movs	r1, #0
 800b46a:	f06f 0001 	mvn.w	r0, #1
 800b46e:	f7f7 f806 	bl	800247e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b472:	2200      	movs	r2, #0
 800b474:	2100      	movs	r1, #0
 800b476:	f04f 30ff 	mov.w	r0, #4294967295
 800b47a:	f7f7 f800 	bl	800247e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b47e:	bf00      	nop
 800b480:	bd80      	pop	{r7, pc}
	...

0800b484 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a15      	ldr	r2, [pc, #84]	; (800b4e8 <HAL_ADC_MspInit+0x64>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d124      	bne.n	800b4e0 <HAL_ADC_MspInit+0x5c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800b496:	4a15      	ldr	r2, [pc, #84]	; (800b4ec <HAL_ADC_MspInit+0x68>)
 800b498:	4b14      	ldr	r3, [pc, #80]	; (800b4ec <HAL_ADC_MspInit+0x68>)
 800b49a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b49c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b4a0:	6453      	str	r3, [r2, #68]	; 0x44
 800b4a2:	4b12      	ldr	r3, [pc, #72]	; (800b4ec <HAL_ADC_MspInit+0x68>)
 800b4a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4aa:	60bb      	str	r3, [r7, #8]
 800b4ac:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800b4ae:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800b4b2:	60fb      	str	r3, [r7, #12]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b4bc:	f107 030c 	add.w	r3, r7, #12
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	480b      	ldr	r0, [pc, #44]	; (800b4f0 <HAL_ADC_MspInit+0x6c>)
 800b4c4:	f7f7 fe9a 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800b4d4:	f107 030c 	add.w	r3, r7, #12
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4806      	ldr	r0, [pc, #24]	; (800b4f4 <HAL_ADC_MspInit+0x70>)
 800b4dc:	f7f7 fe8e 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800b4e0:	bf00      	nop
 800b4e2:	3720      	adds	r7, #32
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	40012200 	.word	0x40012200
 800b4ec:	40023800 	.word	0x40023800
 800b4f0:	40021400 	.word	0x40021400
 800b4f4:	40020000 	.word	0x40020000

0800b4f8 <HAL_CRC_MspInit>:
  }

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a0a      	ldr	r2, [pc, #40]	; (800b530 <HAL_CRC_MspInit+0x38>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d10b      	bne.n	800b522 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800b50a:	4a0a      	ldr	r2, [pc, #40]	; (800b534 <HAL_CRC_MspInit+0x3c>)
 800b50c:	4b09      	ldr	r3, [pc, #36]	; (800b534 <HAL_CRC_MspInit+0x3c>)
 800b50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b510:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b514:	6313      	str	r3, [r2, #48]	; 0x30
 800b516:	4b07      	ldr	r3, [pc, #28]	; (800b534 <HAL_CRC_MspInit+0x3c>)
 800b518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b51e:	60fb      	str	r3, [r7, #12]
 800b520:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800b522:	bf00      	nop
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	40023000 	.word	0x40023000
 800b534:	40023800 	.word	0x40023800

0800b538 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a0a      	ldr	r2, [pc, #40]	; (800b570 <HAL_DMA2D_MspInit+0x38>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d10b      	bne.n	800b562 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800b54a:	4a0a      	ldr	r2, [pc, #40]	; (800b574 <HAL_DMA2D_MspInit+0x3c>)
 800b54c:	4b09      	ldr	r3, [pc, #36]	; (800b574 <HAL_DMA2D_MspInit+0x3c>)
 800b54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b550:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b554:	6313      	str	r3, [r2, #48]	; 0x30
 800b556:	4b07      	ldr	r3, [pc, #28]	; (800b574 <HAL_DMA2D_MspInit+0x3c>)
 800b558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b55a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b55e:	60fb      	str	r3, [r7, #12]
 800b560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800b562:	bf00      	nop
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	4002b000 	.word	0x4002b000
 800b574:	40023800 	.word	0x40023800

0800b578 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b088      	sub	sp, #32
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a42      	ldr	r2, [pc, #264]	; (800b690 <HAL_I2C_MspInit+0x118>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d17d      	bne.n	800b686 <HAL_I2C_MspInit+0x10e>
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800b58a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800b58e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b590:	2312      	movs	r3, #18
 800b592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b594:	2301      	movs	r3, #1
 800b596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b598:	2303      	movs	r3, #3
 800b59a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800b59c:	2304      	movs	r3, #4
 800b59e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b5a0:	f107 030c 	add.w	r3, r7, #12
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	483b      	ldr	r0, [pc, #236]	; (800b694 <HAL_I2C_MspInit+0x11c>)
 800b5a8:	f7f7 fe28 	bl	80031fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800b5ac:	4a3a      	ldr	r2, [pc, #232]	; (800b698 <HAL_I2C_MspInit+0x120>)
 800b5ae:	4b3a      	ldr	r3, [pc, #232]	; (800b698 <HAL_I2C_MspInit+0x120>)
 800b5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b5b6:	6413      	str	r3, [r2, #64]	; 0x40
 800b5b8:	4b37      	ldr	r3, [pc, #220]	; (800b698 <HAL_I2C_MspInit+0x120>)
 800b5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5c0:	60bb      	str	r3, [r7, #8]
 800b5c2:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 800b5c4:	4b35      	ldr	r3, [pc, #212]	; (800b69c <HAL_I2C_MspInit+0x124>)
 800b5c6:	4a36      	ldr	r2, [pc, #216]	; (800b6a0 <HAL_I2C_MspInit+0x128>)
 800b5c8:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 800b5ca:	4b34      	ldr	r3, [pc, #208]	; (800b69c <HAL_I2C_MspInit+0x124>)
 800b5cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b5d0:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b5d2:	4b32      	ldr	r3, [pc, #200]	; (800b69c <HAL_I2C_MspInit+0x124>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b5d8:	4b30      	ldr	r3, [pc, #192]	; (800b69c <HAL_I2C_MspInit+0x124>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b5de:	4b2f      	ldr	r3, [pc, #188]	; (800b69c <HAL_I2C_MspInit+0x124>)
 800b5e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b5e4:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b5e6:	4b2d      	ldr	r3, [pc, #180]	; (800b69c <HAL_I2C_MspInit+0x124>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b5ec:	4b2b      	ldr	r3, [pc, #172]	; (800b69c <HAL_I2C_MspInit+0x124>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800b5f2:	4b2a      	ldr	r3, [pc, #168]	; (800b69c <HAL_I2C_MspInit+0x124>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b5f8:	4b28      	ldr	r3, [pc, #160]	; (800b69c <HAL_I2C_MspInit+0x124>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b5fe:	4b27      	ldr	r3, [pc, #156]	; (800b69c <HAL_I2C_MspInit+0x124>)
 800b600:	2200      	movs	r2, #0
 800b602:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800b604:	4825      	ldr	r0, [pc, #148]	; (800b69c <HAL_I2C_MspInit+0x124>)
 800b606:	f7f7 f879 	bl	80026fc <HAL_DMA_Init>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d004      	beq.n	800b61a <HAL_I2C_MspInit+0xa2>
    {
      _Error_Handler(__FILE__, __LINE__);
 800b610:	f240 110d 	movw	r1, #269	; 0x10d
 800b614:	4823      	ldr	r0, [pc, #140]	; (800b6a4 <HAL_I2C_MspInit+0x12c>)
 800b616:	f7ff fe31 	bl	800b27c <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a1f      	ldr	r2, [pc, #124]	; (800b69c <HAL_I2C_MspInit+0x124>)
 800b61e:	63da      	str	r2, [r3, #60]	; 0x3c
 800b620:	4a1e      	ldr	r2, [pc, #120]	; (800b69c <HAL_I2C_MspInit+0x124>)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 800b626:	4b20      	ldr	r3, [pc, #128]	; (800b6a8 <HAL_I2C_MspInit+0x130>)
 800b628:	4a20      	ldr	r2, [pc, #128]	; (800b6ac <HAL_I2C_MspInit+0x134>)
 800b62a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 800b62c:	4b1e      	ldr	r3, [pc, #120]	; (800b6a8 <HAL_I2C_MspInit+0x130>)
 800b62e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800b632:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b634:	4b1c      	ldr	r3, [pc, #112]	; (800b6a8 <HAL_I2C_MspInit+0x130>)
 800b636:	2240      	movs	r2, #64	; 0x40
 800b638:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b63a:	4b1b      	ldr	r3, [pc, #108]	; (800b6a8 <HAL_I2C_MspInit+0x130>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_DISABLE;
 800b640:	4b19      	ldr	r3, [pc, #100]	; (800b6a8 <HAL_I2C_MspInit+0x130>)
 800b642:	2200      	movs	r2, #0
 800b644:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b646:	4b18      	ldr	r3, [pc, #96]	; (800b6a8 <HAL_I2C_MspInit+0x130>)
 800b648:	2200      	movs	r2, #0
 800b64a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b64c:	4b16      	ldr	r3, [pc, #88]	; (800b6a8 <HAL_I2C_MspInit+0x130>)
 800b64e:	2200      	movs	r2, #0
 800b650:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800b652:	4b15      	ldr	r3, [pc, #84]	; (800b6a8 <HAL_I2C_MspInit+0x130>)
 800b654:	2200      	movs	r2, #0
 800b656:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b658:	4b13      	ldr	r3, [pc, #76]	; (800b6a8 <HAL_I2C_MspInit+0x130>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b65e:	4b12      	ldr	r3, [pc, #72]	; (800b6a8 <HAL_I2C_MspInit+0x130>)
 800b660:	2200      	movs	r2, #0
 800b662:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 800b664:	4810      	ldr	r0, [pc, #64]	; (800b6a8 <HAL_I2C_MspInit+0x130>)
 800b666:	f7f7 f849 	bl	80026fc <HAL_DMA_Init>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d004      	beq.n	800b67a <HAL_I2C_MspInit+0x102>
    {
      _Error_Handler(__FILE__, __LINE__);
 800b670:	f240 111f 	movw	r1, #287	; 0x11f
 800b674:	480b      	ldr	r0, [pc, #44]	; (800b6a4 <HAL_I2C_MspInit+0x12c>)
 800b676:	f7ff fe01 	bl	800b27c <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4a0a      	ldr	r2, [pc, #40]	; (800b6a8 <HAL_I2C_MspInit+0x130>)
 800b67e:	639a      	str	r2, [r3, #56]	; 0x38
 800b680:	4a09      	ldr	r2, [pc, #36]	; (800b6a8 <HAL_I2C_MspInit+0x130>)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800b686:	bf00      	nop
 800b688:	3720      	adds	r7, #32
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	40005c00 	.word	0x40005c00
 800b694:	40021c00 	.word	0x40021c00
 800b698:	40023800 	.word	0x40023800
 800b69c:	20000c4c 	.word	0x20000c4c
 800b6a0:	40026028 	.word	0x40026028
 800b6a4:	0800f898 	.word	0x0800f898
 800b6a8:	2000097c 	.word	0x2000097c
 800b6ac:	40026070 	.word	0x40026070

0800b6b0 <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a32      	ldr	r2, [pc, #200]	; (800b788 <HAL_LTDC_MspInit+0xd8>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d15e      	bne.n	800b780 <HAL_LTDC_MspInit+0xd0>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800b6c2:	4a32      	ldr	r2, [pc, #200]	; (800b78c <HAL_LTDC_MspInit+0xdc>)
 800b6c4:	4b31      	ldr	r3, [pc, #196]	; (800b78c <HAL_LTDC_MspInit+0xdc>)
 800b6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b6cc:	6453      	str	r3, [r2, #68]	; 0x44
 800b6ce:	4b2f      	ldr	r3, [pc, #188]	; (800b78c <HAL_LTDC_MspInit+0xdc>)
 800b6d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b6d6:	60bb      	str	r3, [r7, #8]
 800b6d8:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800b6da:	2310      	movs	r3, #16
 800b6dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6de:	2302      	movs	r3, #2
 800b6e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b6ea:	230e      	movs	r3, #14
 800b6ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800b6ee:	f107 030c 	add.w	r3, r7, #12
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	4826      	ldr	r0, [pc, #152]	; (800b790 <HAL_LTDC_MspInit+0xe0>)
 800b6f6:	f7f7 fd81 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800b6fa:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800b6fe:	60fb      	str	r3, [r7, #12]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b700:	2302      	movs	r3, #2
 800b702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b704:	2300      	movs	r3, #0
 800b706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b708:	2300      	movs	r3, #0
 800b70a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b70c:	230e      	movs	r3, #14
 800b70e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800b710:	f107 030c 	add.w	r3, r7, #12
 800b714:	4619      	mov	r1, r3
 800b716:	481f      	ldr	r0, [pc, #124]	; (800b794 <HAL_LTDC_MspInit+0xe4>)
 800b718:	f7f7 fd70 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800b71c:	23f7      	movs	r3, #247	; 0xf7
 800b71e:	60fb      	str	r3, [r7, #12]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b720:	2302      	movs	r3, #2
 800b722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b724:	2300      	movs	r3, #0
 800b726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b728:	2300      	movs	r3, #0
 800b72a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b72c:	230e      	movs	r3, #14
 800b72e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800b730:	f107 030c 	add.w	r3, r7, #12
 800b734:	4619      	mov	r1, r3
 800b736:	4818      	ldr	r0, [pc, #96]	; (800b798 <HAL_LTDC_MspInit+0xe8>)
 800b738:	f7f7 fd60 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800b73c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b740:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b742:	2302      	movs	r3, #2
 800b744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b746:	2300      	movs	r3, #0
 800b748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b74a:	2300      	movs	r3, #0
 800b74c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800b74e:	2309      	movs	r3, #9
 800b750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800b752:	f107 030c 	add.w	r3, r7, #12
 800b756:	4619      	mov	r1, r3
 800b758:	4810      	ldr	r0, [pc, #64]	; (800b79c <HAL_LTDC_MspInit+0xec>)
 800b75a:	f7f7 fd4f 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800b75e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800b762:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b764:	2302      	movs	r3, #2
 800b766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b768:	2300      	movs	r3, #0
 800b76a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b76c:	2300      	movs	r3, #0
 800b76e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800b770:	230e      	movs	r3, #14
 800b772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b774:	f107 030c 	add.w	r3, r7, #12
 800b778:	4619      	mov	r1, r3
 800b77a:	4809      	ldr	r0, [pc, #36]	; (800b7a0 <HAL_LTDC_MspInit+0xf0>)
 800b77c:	f7f7 fd3e 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800b780:	bf00      	nop
 800b782:	3720      	adds	r7, #32
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	40016800 	.word	0x40016800
 800b78c:	40023800 	.word	0x40023800
 800b790:	40021000 	.word	0x40021000
 800b794:	40022400 	.word	0x40022400
 800b798:	40022800 	.word	0x40022800
 800b79c:	40021800 	.word	0x40021800
 800b7a0:	40022000 	.word	0x40022000

0800b7a4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b088      	sub	sp, #32
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a19      	ldr	r2, [pc, #100]	; (800b818 <HAL_UART_MspInit+0x74>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d12c      	bne.n	800b810 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b7b6:	4a19      	ldr	r2, [pc, #100]	; (800b81c <HAL_UART_MspInit+0x78>)
 800b7b8:	4b18      	ldr	r3, [pc, #96]	; (800b81c <HAL_UART_MspInit+0x78>)
 800b7ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7bc:	f043 0310 	orr.w	r3, r3, #16
 800b7c0:	6453      	str	r3, [r2, #68]	; 0x44
 800b7c2:	4b16      	ldr	r3, [pc, #88]	; (800b81c <HAL_UART_MspInit+0x78>)
 800b7c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7c6:	f003 0310 	and.w	r3, r3, #16
 800b7ca:	60bb      	str	r3, [r7, #8]
 800b7cc:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800b7ce:	2380      	movs	r3, #128	; 0x80
 800b7d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7d2:	2302      	movs	r3, #2
 800b7d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b7de:	2307      	movs	r3, #7
 800b7e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800b7e2:	f107 030c 	add.w	r3, r7, #12
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	480d      	ldr	r0, [pc, #52]	; (800b820 <HAL_UART_MspInit+0x7c>)
 800b7ea:	f7f7 fd07 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800b7ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b800:	2307      	movs	r3, #7
 800b802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800b804:	f107 030c 	add.w	r3, r7, #12
 800b808:	4619      	mov	r1, r3
 800b80a:	4806      	ldr	r0, [pc, #24]	; (800b824 <HAL_UART_MspInit+0x80>)
 800b80c:	f7f7 fcf6 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b810:	bf00      	nop
 800b812:	3720      	adds	r7, #32
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	40011000 	.word	0x40011000
 800b81c:	40023800 	.word	0x40023800
 800b820:	40020400 	.word	0x40020400
 800b824:	40020000 	.word	0x40020000

0800b828 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800b82e:	4b3b      	ldr	r3, [pc, #236]	; (800b91c <HAL_FMC_MspInit+0xf4>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d16d      	bne.n	800b912 <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 800b836:	4b39      	ldr	r3, [pc, #228]	; (800b91c <HAL_FMC_MspInit+0xf4>)
 800b838:	2201      	movs	r2, #1
 800b83a:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800b83c:	4a38      	ldr	r2, [pc, #224]	; (800b920 <HAL_FMC_MspInit+0xf8>)
 800b83e:	4b38      	ldr	r3, [pc, #224]	; (800b920 <HAL_FMC_MspInit+0xf8>)
 800b840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b842:	f043 0301 	orr.w	r3, r3, #1
 800b846:	6393      	str	r3, [r2, #56]	; 0x38
 800b848:	4b35      	ldr	r3, [pc, #212]	; (800b920 <HAL_FMC_MspInit+0xf8>)
 800b84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	603b      	str	r3, [r7, #0]
 800b852:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800b854:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b858:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b85a:	2302      	movs	r3, #2
 800b85c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b85e:	2300      	movs	r3, #0
 800b860:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b862:	2303      	movs	r3, #3
 800b864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b866:	230c      	movs	r3, #12
 800b868:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b86a:	1d3b      	adds	r3, r7, #4
 800b86c:	4619      	mov	r1, r3
 800b86e:	482d      	ldr	r0, [pc, #180]	; (800b924 <HAL_FMC_MspInit+0xfc>)
 800b870:	f7f7 fcc4 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800b874:	f248 1333 	movw	r3, #33075	; 0x8133
 800b878:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b87a:	2302      	movs	r3, #2
 800b87c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b87e:	2300      	movs	r3, #0
 800b880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b882:	2303      	movs	r3, #3
 800b884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b886:	230c      	movs	r3, #12
 800b888:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b88a:	1d3b      	adds	r3, r7, #4
 800b88c:	4619      	mov	r1, r3
 800b88e:	4826      	ldr	r0, [pc, #152]	; (800b928 <HAL_FMC_MspInit+0x100>)
 800b890:	f7f7 fcb4 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800b894:	f24c 7303 	movw	r3, #50947	; 0xc703
 800b898:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b89a:	2302      	movs	r3, #2
 800b89c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b8a6:	230c      	movs	r3, #12
 800b8a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b8aa:	1d3b      	adds	r3, r7, #4
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	481f      	ldr	r0, [pc, #124]	; (800b92c <HAL_FMC_MspInit+0x104>)
 800b8b0:	f7f7 fca4 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800b8b4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800b8b8:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8c2:	2303      	movs	r3, #3
 800b8c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b8c6:	230c      	movs	r3, #12
 800b8c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b8ca:	1d3b      	adds	r3, r7, #4
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	4818      	ldr	r0, [pc, #96]	; (800b930 <HAL_FMC_MspInit+0x108>)
 800b8d0:	f7f7 fc94 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800b8d4:	2328      	movs	r3, #40	; 0x28
 800b8d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8d8:	2302      	movs	r3, #2
 800b8da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b8e4:	230c      	movs	r3, #12
 800b8e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b8e8:	1d3b      	adds	r3, r7, #4
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	4811      	ldr	r0, [pc, #68]	; (800b934 <HAL_FMC_MspInit+0x10c>)
 800b8ee:	f7f7 fc85 	bl	80031fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800b8f2:	2308      	movs	r3, #8
 800b8f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8fe:	2303      	movs	r3, #3
 800b900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b902:	230c      	movs	r3, #12
 800b904:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800b906:	1d3b      	adds	r3, r7, #4
 800b908:	4619      	mov	r1, r3
 800b90a:	480b      	ldr	r0, [pc, #44]	; (800b938 <HAL_FMC_MspInit+0x110>)
 800b90c:	f7f7 fc76 	bl	80031fc <HAL_GPIO_Init>
 800b910:	e000      	b.n	800b914 <HAL_FMC_MspInit+0xec>
    return;
 800b912:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800b914:	3718      	adds	r7, #24
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	20000458 	.word	0x20000458
 800b920:	40023800 	.word	0x40023800
 800b924:	40021000 	.word	0x40021000
 800b928:	40021800 	.word	0x40021800
 800b92c:	40020c00 	.word	0x40020c00
 800b930:	40021400 	.word	0x40021400
 800b934:	40021c00 	.word	0x40021c00
 800b938:	40020800 	.word	0x40020800

0800b93c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800b944:	f7ff ff70 	bl	800b828 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800b948:	bf00      	nop
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b08c      	sub	sp, #48	; 0x30
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b958:	2300      	movs	r3, #0
 800b95a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b95c:	2300      	movs	r3, #0
 800b95e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800b960:	2200      	movs	r2, #0
 800b962:	6879      	ldr	r1, [r7, #4]
 800b964:	2019      	movs	r0, #25
 800b966:	f7f6 fd8a 	bl	800247e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800b96a:	2019      	movs	r0, #25
 800b96c:	f7f6 fda3 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800b970:	4a1f      	ldr	r2, [pc, #124]	; (800b9f0 <HAL_InitTick+0xa0>)
 800b972:	4b1f      	ldr	r3, [pc, #124]	; (800b9f0 <HAL_InitTick+0xa0>)
 800b974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b976:	f043 0301 	orr.w	r3, r3, #1
 800b97a:	6453      	str	r3, [r2, #68]	; 0x44
 800b97c:	4b1c      	ldr	r3, [pc, #112]	; (800b9f0 <HAL_InitTick+0xa0>)
 800b97e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b980:	f003 0301 	and.w	r3, r3, #1
 800b984:	60fb      	str	r3, [r7, #12]
 800b986:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b988:	f107 0210 	add.w	r2, r7, #16
 800b98c:	f107 0314 	add.w	r3, r7, #20
 800b990:	4611      	mov	r1, r2
 800b992:	4618      	mov	r0, r3
 800b994:	f7f9 fff4 	bl	8005980 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800b998:	f7f9 ffde 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 800b99c:	4603      	mov	r3, r0
 800b99e:	005b      	lsls	r3, r3, #1
 800b9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a4:	4a13      	ldr	r2, [pc, #76]	; (800b9f4 <HAL_InitTick+0xa4>)
 800b9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9aa:	0c9b      	lsrs	r3, r3, #18
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800b9b0:	4b11      	ldr	r3, [pc, #68]	; (800b9f8 <HAL_InitTick+0xa8>)
 800b9b2:	4a12      	ldr	r2, [pc, #72]	; (800b9fc <HAL_InitTick+0xac>)
 800b9b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800b9b6:	4b10      	ldr	r3, [pc, #64]	; (800b9f8 <HAL_InitTick+0xa8>)
 800b9b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b9bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800b9be:	4a0e      	ldr	r2, [pc, #56]	; (800b9f8 <HAL_InitTick+0xa8>)
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800b9c4:	4b0c      	ldr	r3, [pc, #48]	; (800b9f8 <HAL_InitTick+0xa8>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b9ca:	4b0b      	ldr	r3, [pc, #44]	; (800b9f8 <HAL_InitTick+0xa8>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800b9d0:	4809      	ldr	r0, [pc, #36]	; (800b9f8 <HAL_InitTick+0xa8>)
 800b9d2:	f7fa fc54 	bl	800627e <HAL_TIM_Base_Init>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d104      	bne.n	800b9e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800b9dc:	4806      	ldr	r0, [pc, #24]	; (800b9f8 <HAL_InitTick+0xa8>)
 800b9de:	f7fa fc83 	bl	80062e8 <HAL_TIM_Base_Start_IT>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	e000      	b.n	800b9e8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3730      	adds	r7, #48	; 0x30
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	40023800 	.word	0x40023800
 800b9f4:	431bde83 	.word	0x431bde83
 800b9f8:	20000f04 	.word	0x20000f04
 800b9fc:	40010000 	.word	0x40010000

0800ba00 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800ba00:	b480      	push	{r7}
 800ba02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ba04:	bf00      	nop
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ba12:	bf00      	nop
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 800ba20:	f7f6 fd80 	bl	8002524 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ba24:	bf00      	nop
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <DMA1_Stream1_IRQHandler>:

/**
* @brief This function handles DMA1 stream1 global interrupt.
*/
void DMA1_Stream1_IRQHandler(void)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800ba2c:	4802      	ldr	r0, [pc, #8]	; (800ba38 <DMA1_Stream1_IRQHandler+0x10>)
 800ba2e:	f7f6 ff13 	bl	8002858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800ba32:	bf00      	nop
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	20000c4c 	.word	0x20000c4c

0800ba3c <DMA1_Stream4_IRQHandler>:

/**
* @brief This function handles DMA1 stream4 global interrupt.
*/
void DMA1_Stream4_IRQHandler(void)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800ba40:	4802      	ldr	r0, [pc, #8]	; (800ba4c <DMA1_Stream4_IRQHandler+0x10>)
 800ba42:	f7f6 ff09 	bl	8002858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800ba46:	bf00      	nop
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	2000097c 	.word	0x2000097c

0800ba50 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ba54:	4802      	ldr	r0, [pc, #8]	; (800ba60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800ba56:	f7fa fc62 	bl	800631e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800ba5a:	bf00      	nop
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	20000f04 	.word	0x20000f04

0800ba64 <OTG_HS_IRQHandler>:

/**
* @brief This function handles USB On The Go HS global interrupt.
*/
void OTG_HS_IRQHandler(void)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800ba68:	4802      	ldr	r0, [pc, #8]	; (800ba74 <OTG_HS_IRQHandler+0x10>)
 800ba6a:	f7f8 fab3 	bl	8003fd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800ba6e:	bf00      	nop
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	20002168 	.word	0x20002168

0800ba78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ba7c:	4a15      	ldr	r2, [pc, #84]	; (800bad4 <SystemInit+0x5c>)
 800ba7e:	4b15      	ldr	r3, [pc, #84]	; (800bad4 <SystemInit+0x5c>)
 800ba80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ba8c:	4a12      	ldr	r2, [pc, #72]	; (800bad8 <SystemInit+0x60>)
 800ba8e:	4b12      	ldr	r3, [pc, #72]	; (800bad8 <SystemInit+0x60>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f043 0301 	orr.w	r3, r3, #1
 800ba96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ba98:	4b0f      	ldr	r3, [pc, #60]	; (800bad8 <SystemInit+0x60>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ba9e:	490e      	ldr	r1, [pc, #56]	; (800bad8 <SystemInit+0x60>)
 800baa0:	4b0d      	ldr	r3, [pc, #52]	; (800bad8 <SystemInit+0x60>)
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	4b0d      	ldr	r3, [pc, #52]	; (800badc <SystemInit+0x64>)
 800baa6:	4013      	ands	r3, r2
 800baa8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800baaa:	4b0b      	ldr	r3, [pc, #44]	; (800bad8 <SystemInit+0x60>)
 800baac:	4a0c      	ldr	r2, [pc, #48]	; (800bae0 <SystemInit+0x68>)
 800baae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800bab0:	4a09      	ldr	r2, [pc, #36]	; (800bad8 <SystemInit+0x60>)
 800bab2:	4b09      	ldr	r3, [pc, #36]	; (800bad8 <SystemInit+0x60>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800baba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800babc:	4b06      	ldr	r3, [pc, #24]	; (800bad8 <SystemInit+0x60>)
 800babe:	2200      	movs	r2, #0
 800bac0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bac2:	4b04      	ldr	r3, [pc, #16]	; (800bad4 <SystemInit+0x5c>)
 800bac4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bac8:	609a      	str	r2, [r3, #8]
#endif
}
 800baca:	bf00      	nop
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	e000ed00 	.word	0xe000ed00
 800bad8:	40023800 	.word	0x40023800
 800badc:	fef6ffff 	.word	0xfef6ffff
 800bae0:	24003010 	.word	0x24003010

0800bae4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS);
 800bae8:	2201      	movs	r2, #1
 800baea:	4908      	ldr	r1, [pc, #32]	; (800bb0c <MX_USB_DEVICE_Init+0x28>)
 800baec:	4808      	ldr	r0, [pc, #32]	; (800bb10 <MX_USB_DEVICE_Init+0x2c>)
 800baee:	f7fd f810 	bl	8008b12 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC);
 800baf2:	4908      	ldr	r1, [pc, #32]	; (800bb14 <MX_USB_DEVICE_Init+0x30>)
 800baf4:	4806      	ldr	r0, [pc, #24]	; (800bb10 <MX_USB_DEVICE_Init+0x2c>)
 800baf6:	f7fd f837 	bl	8008b68 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS);
 800bafa:	4907      	ldr	r1, [pc, #28]	; (800bb18 <MX_USB_DEVICE_Init+0x34>)
 800bafc:	4804      	ldr	r0, [pc, #16]	; (800bb10 <MX_USB_DEVICE_Init+0x2c>)
 800bafe:	f7fc ff99 	bl	8008a34 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceHS);
 800bb02:	4803      	ldr	r0, [pc, #12]	; (800bb10 <MX_USB_DEVICE_Init+0x2c>)
 800bb04:	f7fd f84a 	bl	8008b9c <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb08:	bf00      	nop
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	20000138 	.word	0x20000138
 800bb10:	20000f44 	.word	0x20000f44
 800bb14:	20000020 	.word	0x20000020
 800bb18:	20000128 	.word	0x20000128

0800bb1c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800bb20:	2200      	movs	r2, #0
 800bb22:	4905      	ldr	r1, [pc, #20]	; (800bb38 <CDC_Init_HS+0x1c>)
 800bb24:	4805      	ldr	r0, [pc, #20]	; (800bb3c <CDC_Init_HS+0x20>)
 800bb26:	f7fc ff9c 	bl	8008a62 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800bb2a:	4905      	ldr	r1, [pc, #20]	; (800bb40 <CDC_Init_HS+0x24>)
 800bb2c:	4803      	ldr	r0, [pc, #12]	; (800bb3c <CDC_Init_HS+0x20>)
 800bb2e:	f7fc ffb2 	bl	8008a96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb32:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	20001968 	.word	0x20001968
 800bb3c:	20000f44 	.word	0x20000f44
 800bb40:	20001168 	.word	0x20001168

0800bb44 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800bb44:	b480      	push	{r7}
 800bb46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800bb48:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	6039      	str	r1, [r7, #0]
 800bb5e:	71fb      	strb	r3, [r7, #7]
 800bb60:	4613      	mov	r3, r2
 800bb62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800bb64:	79fb      	ldrb	r3, [r7, #7]
 800bb66:	2b23      	cmp	r3, #35	; 0x23
 800bb68:	d84a      	bhi.n	800bc00 <CDC_Control_HS+0xac>
 800bb6a:	a201      	add	r2, pc, #4	; (adr r2, 800bb70 <CDC_Control_HS+0x1c>)
 800bb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb70:	0800bc01 	.word	0x0800bc01
 800bb74:	0800bc01 	.word	0x0800bc01
 800bb78:	0800bc01 	.word	0x0800bc01
 800bb7c:	0800bc01 	.word	0x0800bc01
 800bb80:	0800bc01 	.word	0x0800bc01
 800bb84:	0800bc01 	.word	0x0800bc01
 800bb88:	0800bc01 	.word	0x0800bc01
 800bb8c:	0800bc01 	.word	0x0800bc01
 800bb90:	0800bc01 	.word	0x0800bc01
 800bb94:	0800bc01 	.word	0x0800bc01
 800bb98:	0800bc01 	.word	0x0800bc01
 800bb9c:	0800bc01 	.word	0x0800bc01
 800bba0:	0800bc01 	.word	0x0800bc01
 800bba4:	0800bc01 	.word	0x0800bc01
 800bba8:	0800bc01 	.word	0x0800bc01
 800bbac:	0800bc01 	.word	0x0800bc01
 800bbb0:	0800bc01 	.word	0x0800bc01
 800bbb4:	0800bc01 	.word	0x0800bc01
 800bbb8:	0800bc01 	.word	0x0800bc01
 800bbbc:	0800bc01 	.word	0x0800bc01
 800bbc0:	0800bc01 	.word	0x0800bc01
 800bbc4:	0800bc01 	.word	0x0800bc01
 800bbc8:	0800bc01 	.word	0x0800bc01
 800bbcc:	0800bc01 	.word	0x0800bc01
 800bbd0:	0800bc01 	.word	0x0800bc01
 800bbd4:	0800bc01 	.word	0x0800bc01
 800bbd8:	0800bc01 	.word	0x0800bc01
 800bbdc:	0800bc01 	.word	0x0800bc01
 800bbe0:	0800bc01 	.word	0x0800bc01
 800bbe4:	0800bc01 	.word	0x0800bc01
 800bbe8:	0800bc01 	.word	0x0800bc01
 800bbec:	0800bc01 	.word	0x0800bc01
 800bbf0:	0800bc01 	.word	0x0800bc01
 800bbf4:	0800bc01 	.word	0x0800bc01
 800bbf8:	0800bc01 	.word	0x0800bc01
 800bbfc:	0800bc01 	.word	0x0800bc01
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc00:	bf00      	nop
  }

  return (USBD_OK);
 800bc02:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800bc1a:	6879      	ldr	r1, [r7, #4]
 800bc1c:	4805      	ldr	r0, [pc, #20]	; (800bc34 <CDC_Receive_HS+0x24>)
 800bc1e:	f7fc ff3a 	bl	8008a96 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800bc22:	4804      	ldr	r0, [pc, #16]	; (800bc34 <CDC_Receive_HS+0x24>)
 800bc24:	f7fc ff4b 	bl	8008abe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc28:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3708      	adds	r7, #8
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	20000f44 	.word	0x20000f44

0800bc38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b08a      	sub	sp, #40	; 0x28
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_HS)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a33      	ldr	r2, [pc, #204]	; (800bd14 <HAL_PCD_MspInit+0xdc>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d160      	bne.n	800bd0c <HAL_PCD_MspInit+0xd4>
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4 
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800bc4a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800bc4e:	617b      	str	r3, [r7, #20]
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc50:	2302      	movs	r3, #2
 800bc52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc54:	2300      	movs	r3, #0
 800bc56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bc5c:	230a      	movs	r3, #10
 800bc5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc60:	f107 0314 	add.w	r3, r7, #20
 800bc64:	4619      	mov	r1, r3
 800bc66:	482c      	ldr	r0, [pc, #176]	; (800bd18 <HAL_PCD_MspInit+0xe0>)
 800bc68:	f7f7 fac8 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800bc6c:	2310      	movs	r3, #16
 800bc6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc70:	2302      	movs	r3, #2
 800bc72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc74:	2300      	movs	r3, #0
 800bc76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc78:	2303      	movs	r3, #3
 800bc7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bc7c:	230a      	movs	r3, #10
 800bc7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800bc80:	f107 0314 	add.w	r3, r7, #20
 800bc84:	4619      	mov	r1, r3
 800bc86:	4825      	ldr	r0, [pc, #148]	; (800bd1c <HAL_PCD_MspInit+0xe4>)
 800bc88:	f7f7 fab8 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800bc8c:	2305      	movs	r3, #5
 800bc8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc90:	2302      	movs	r3, #2
 800bc92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc94:	2300      	movs	r3, #0
 800bc96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc98:	2303      	movs	r3, #3
 800bc9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bc9c:	230a      	movs	r3, #10
 800bc9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bca0:	f107 0314 	add.w	r3, r7, #20
 800bca4:	4619      	mov	r1, r3
 800bca6:	481e      	ldr	r0, [pc, #120]	; (800bd20 <HAL_PCD_MspInit+0xe8>)
 800bca8:	f7f7 faa8 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800bcac:	2328      	movs	r3, #40	; 0x28
 800bcae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bcbc:	230a      	movs	r3, #10
 800bcbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bcc0:	f107 0314 	add.w	r3, r7, #20
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	4817      	ldr	r0, [pc, #92]	; (800bd24 <HAL_PCD_MspInit+0xec>)
 800bcc8:	f7f7 fa98 	bl	80031fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800bccc:	4a16      	ldr	r2, [pc, #88]	; (800bd28 <HAL_PCD_MspInit+0xf0>)
 800bcce:	4b16      	ldr	r3, [pc, #88]	; (800bd28 <HAL_PCD_MspInit+0xf0>)
 800bcd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bcd6:	6313      	str	r3, [r2, #48]	; 0x30
 800bcd8:	4b13      	ldr	r3, [pc, #76]	; (800bd28 <HAL_PCD_MspInit+0xf0>)
 800bcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bce0:	613b      	str	r3, [r7, #16]
 800bce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800bce4:	4a10      	ldr	r2, [pc, #64]	; (800bd28 <HAL_PCD_MspInit+0xf0>)
 800bce6:	4b10      	ldr	r3, [pc, #64]	; (800bd28 <HAL_PCD_MspInit+0xf0>)
 800bce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcee:	6313      	str	r3, [r2, #48]	; 0x30
 800bcf0:	4b0d      	ldr	r3, [pc, #52]	; (800bd28 <HAL_PCD_MspInit+0xf0>)
 800bcf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bcf8:	60fb      	str	r3, [r7, #12]
 800bcfa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	2100      	movs	r1, #0
 800bd00:	204d      	movs	r0, #77	; 0x4d
 800bd02:	f7f6 fbbc 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800bd06:	204d      	movs	r0, #77	; 0x4d
 800bd08:	f7f6 fbd5 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800bd0c:	bf00      	nop
 800bd0e:	3728      	adds	r7, #40	; 0x28
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	40040000 	.word	0x40040000
 800bd18:	40020400 	.word	0x40020400
 800bd1c:	40021c00 	.word	0x40021c00
 800bd20:	40020800 	.word	0x40020800
 800bd24:	40020000 	.word	0x40020000
 800bd28:	40023800 	.word	0x40023800

0800bd2c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800bd40:	4619      	mov	r1, r3
 800bd42:	4610      	mov	r0, r2
 800bd44:	f7fc ff73 	bl	8008c2e <USBD_LL_SetupStage>
}
 800bd48:	bf00      	nop
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800bd62:	78fa      	ldrb	r2, [r7, #3]
 800bd64:	6879      	ldr	r1, [r7, #4]
 800bd66:	4613      	mov	r3, r2
 800bd68:	00db      	lsls	r3, r3, #3
 800bd6a:	1a9b      	subs	r3, r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	440b      	add	r3, r1
 800bd70:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	78fb      	ldrb	r3, [r7, #3]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	f7fc ffa2 	bl	8008cc2 <USBD_LL_DataOutStage>
}
 800bd7e:	bf00      	nop
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	460b      	mov	r3, r1
 800bd90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800bd98:	78fa      	ldrb	r2, [r7, #3]
 800bd9a:	6879      	ldr	r1, [r7, #4]
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	00db      	lsls	r3, r3, #3
 800bda0:	1a9b      	subs	r3, r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	440b      	add	r3, r1
 800bda6:	3344      	adds	r3, #68	; 0x44
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	78fb      	ldrb	r3, [r7, #3]
 800bdac:	4619      	mov	r1, r3
 800bdae:	f7fc ffe3 	bl	8008d78 <USBD_LL_DataInStage>
}
 800bdb2:	bf00      	nop
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b082      	sub	sp, #8
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fd f8c9 	bl	8008f60 <USBD_LL_SOF>
}
 800bdce:	bf00      	nop
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b084      	sub	sp, #16
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bdde:	2301      	movs	r3, #1
 800bde0:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d002      	beq.n	800bdf0 <HAL_PCD_ResetCallback+0x1a>
 800bdea:	2b02      	cmp	r3, #2
 800bdec:	d003      	beq.n	800bdf6 <HAL_PCD_ResetCallback+0x20>
 800bdee:	e005      	b.n	800bdfc <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]
    break;
 800bdf4:	e005      	b.n	800be02 <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bdfa:	e002      	b.n	800be02 <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	73fb      	strb	r3, [r7, #15]
    break;    
 800be00:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800be08:	7bfa      	ldrb	r2, [r7, #15]
 800be0a:	4611      	mov	r1, r2
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7fd f871 	bl	8008ef4 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800be18:	4618      	mov	r0, r3
 800be1a:	f7fd f83c 	bl	8008e96 <USBD_LL_Reset>
}
 800be1e:	bf00      	nop
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
	...

0800be28 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800be36:	4618      	mov	r0, r3
 800be38:	f7fd f86c 	bl	8008f14 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be44:	461a      	mov	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f043 0301 	orr.w	r3, r3, #1
 800be54:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a1b      	ldr	r3, [r3, #32]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d005      	beq.n	800be6a <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be5e:	4a05      	ldr	r2, [pc, #20]	; (800be74 <HAL_PCD_SuspendCallback+0x4c>)
 800be60:	4b04      	ldr	r3, [pc, #16]	; (800be74 <HAL_PCD_SuspendCallback+0x4c>)
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	f043 0306 	orr.w	r3, r3, #6
 800be68:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800be6a:	bf00      	nop
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	e000ed00 	.word	0xe000ed00

0800be78 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800be86:	4618      	mov	r0, r3
 800be88:	f7fd f859 	bl	8008f3e <USBD_LL_Resume>
}
 800be8c:	bf00      	nop
 800be8e:	3708      	adds	r7, #8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	460b      	mov	r3, r1
 800be9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800bea6:	78fa      	ldrb	r2, [r7, #3]
 800bea8:	4611      	mov	r1, r2
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fd f87f 	bl	8008fae <USBD_LL_IsoOUTIncomplete>
}
 800beb0:	bf00      	nop
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	460b      	mov	r3, r1
 800bec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800beca:	78fa      	ldrb	r2, [r7, #3]
 800becc:	4611      	mov	r1, r2
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fd f860 	bl	8008f94 <USBD_LL_IsoINIncomplete>
}
 800bed4:	bf00      	nop
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800beea:	4618      	mov	r0, r3
 800beec:	f7fd f86c 	bl	8008fc8 <USBD_LL_DevConnected>
}
 800bef0:	bf00      	nop
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fd f869 	bl	8008fde <USBD_LL_DevDisconnected>
}
 800bf0c:	bf00      	nop
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d143      	bne.n	800bfac <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800bf24:	4a24      	ldr	r2, [pc, #144]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_HS;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4a22      	ldr	r2, [pc, #136]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf30:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800bf34:	4b20      	ldr	r3, [pc, #128]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf36:	4a21      	ldr	r2, [pc, #132]	; (800bfbc <USBD_LL_Init+0xa8>)
 800bf38:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 800bf3a:	4b1f      	ldr	r3, [pc, #124]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf3c:	2208      	movs	r2, #8
 800bf3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800bf40:	4b1d      	ldr	r3, [pc, #116]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf42:	2200      	movs	r2, #0
 800bf44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.ep0_mps = DEP0CTL_MPS_64;
 800bf46:	4b1c      	ldr	r3, [pc, #112]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800bf4c:	4b1a      	ldr	r3, [pc, #104]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf4e:	2201      	movs	r2, #1
 800bf50:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800bf52:	4b19      	ldr	r3, [pc, #100]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800bf58:	4b17      	ldr	r3, [pc, #92]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800bf5e:	4b16      	ldr	r3, [pc, #88]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf60:	2200      	movs	r2, #0
 800bf62:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800bf64:	4b14      	ldr	r3, [pc, #80]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf66:	2200      	movs	r2, #0
 800bf68:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800bf6a:	4b13      	ldr	r3, [pc, #76]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800bf70:	4b11      	ldr	r3, [pc, #68]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800bf76:	4810      	ldr	r0, [pc, #64]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf78:	f7f7 fefc 	bl	8003d74 <HAL_PCD_Init>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d004      	beq.n	800bf8c <USBD_LL_Init+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 800bf82:	f240 117f 	movw	r1, #383	; 0x17f
 800bf86:	480e      	ldr	r0, [pc, #56]	; (800bfc0 <USBD_LL_Init+0xac>)
 800bf88:	f7ff f978 	bl	800b27c <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800bf8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf90:	4809      	ldr	r0, [pc, #36]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf92:	f7f9 f82d 	bl	8004ff0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800bf96:	2280      	movs	r2, #128	; 0x80
 800bf98:	2100      	movs	r1, #0
 800bf9a:	4807      	ldr	r0, [pc, #28]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bf9c:	f7f8 ffdd 	bl	8004f5a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800bfa0:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	4804      	ldr	r0, [pc, #16]	; (800bfb8 <USBD_LL_Init+0xa4>)
 800bfa8:	f7f8 ffd7 	bl	8004f5a <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20002168 	.word	0x20002168
 800bfbc:	40040000 	.word	0x40040000
 800bfc0:	0800f8b4 	.word	0x0800f8b4

0800bfc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7f7 ffd8 	bl	8003f90 <HAL_PCD_Start>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800bfe4:	7bbb      	ldrb	r3, [r7, #14]
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d816      	bhi.n	800c018 <USBD_LL_Start+0x54>
 800bfea:	a201      	add	r2, pc, #4	; (adr r2, 800bff0 <USBD_LL_Start+0x2c>)
 800bfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff0:	0800c001 	.word	0x0800c001
 800bff4:	0800c007 	.word	0x0800c007
 800bff8:	0800c00d 	.word	0x0800c00d
 800bffc:	0800c013 	.word	0x0800c013
    case HAL_OK :
      usb_status = USBD_OK;
 800c000:	2300      	movs	r3, #0
 800c002:	73fb      	strb	r3, [r7, #15]
    break;
 800c004:	e00b      	b.n	800c01e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c006:	2302      	movs	r3, #2
 800c008:	73fb      	strb	r3, [r7, #15]
    break;
 800c00a:	e008      	b.n	800c01e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c00c:	2301      	movs	r3, #1
 800c00e:	73fb      	strb	r3, [r7, #15]
    break;
 800c010:	e005      	b.n	800c01e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c012:	2302      	movs	r3, #2
 800c014:	73fb      	strb	r3, [r7, #15]
    break;
 800c016:	e002      	b.n	800c01e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c018:	2302      	movs	r3, #2
 800c01a:	73fb      	strb	r3, [r7, #15]
    break;
 800c01c:	bf00      	nop
  }
  return usb_status;
 800c01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	4608      	mov	r0, r1
 800c032:	4611      	mov	r1, r2
 800c034:	461a      	mov	r2, r3
 800c036:	4603      	mov	r3, r0
 800c038:	70fb      	strb	r3, [r7, #3]
 800c03a:	460b      	mov	r3, r1
 800c03c:	70bb      	strb	r3, [r7, #2]
 800c03e:	4613      	mov	r3, r2
 800c040:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800c050:	78bb      	ldrb	r3, [r7, #2]
 800c052:	883a      	ldrh	r2, [r7, #0]
 800c054:	78f9      	ldrb	r1, [r7, #3]
 800c056:	f7f8 fce2 	bl	8004a1e <HAL_PCD_EP_Open>
 800c05a:	4603      	mov	r3, r0
 800c05c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c05e:	7bbb      	ldrb	r3, [r7, #14]
 800c060:	2b03      	cmp	r3, #3
 800c062:	d817      	bhi.n	800c094 <USBD_LL_OpenEP+0x6c>
 800c064:	a201      	add	r2, pc, #4	; (adr r2, 800c06c <USBD_LL_OpenEP+0x44>)
 800c066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06a:	bf00      	nop
 800c06c:	0800c07d 	.word	0x0800c07d
 800c070:	0800c083 	.word	0x0800c083
 800c074:	0800c089 	.word	0x0800c089
 800c078:	0800c08f 	.word	0x0800c08f
    case HAL_OK :
      usb_status = USBD_OK;
 800c07c:	2300      	movs	r3, #0
 800c07e:	73fb      	strb	r3, [r7, #15]
    break;
 800c080:	e00b      	b.n	800c09a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c082:	2302      	movs	r3, #2
 800c084:	73fb      	strb	r3, [r7, #15]
    break;
 800c086:	e008      	b.n	800c09a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c088:	2301      	movs	r3, #1
 800c08a:	73fb      	strb	r3, [r7, #15]
    break;
 800c08c:	e005      	b.n	800c09a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c08e:	2302      	movs	r3, #2
 800c090:	73fb      	strb	r3, [r7, #15]
    break;
 800c092:	e002      	b.n	800c09a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c094:	2302      	movs	r3, #2
 800c096:	73fb      	strb	r3, [r7, #15]
    break;
 800c098:	bf00      	nop
  }
  return usb_status;
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c0be:	78fa      	ldrb	r2, [r7, #3]
 800c0c0:	4611      	mov	r1, r2
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7f8 fd13 	bl	8004aee <HAL_PCD_EP_Close>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d816      	bhi.n	800c100 <USBD_LL_CloseEP+0x5c>
 800c0d2:	a201      	add	r2, pc, #4	; (adr r2, 800c0d8 <USBD_LL_CloseEP+0x34>)
 800c0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d8:	0800c0e9 	.word	0x0800c0e9
 800c0dc:	0800c0ef 	.word	0x0800c0ef
 800c0e0:	0800c0f5 	.word	0x0800c0f5
 800c0e4:	0800c0fb 	.word	0x0800c0fb
    case HAL_OK :
      usb_status = USBD_OK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c0ec:	e00b      	b.n	800c106 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0ee:	2302      	movs	r3, #2
 800c0f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c0f2:	e008      	b.n	800c106 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c0f8:	e005      	b.n	800c106 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0fa:	2302      	movs	r3, #2
 800c0fc:	73fb      	strb	r3, [r7, #15]
    break;
 800c0fe:	e002      	b.n	800c106 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c100:	2302      	movs	r3, #2
 800c102:	73fb      	strb	r3, [r7, #15]
    break;
 800c104:	bf00      	nop
  }
  return usb_status;  
 800c106:	7bfb      	ldrb	r3, [r7, #15]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	460b      	mov	r3, r1
 800c11a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c11c:	2300      	movs	r3, #0
 800c11e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c120:	2300      	movs	r3, #0
 800c122:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c12a:	78fa      	ldrb	r2, [r7, #3]
 800c12c:	4611      	mov	r1, r2
 800c12e:	4618      	mov	r0, r3
 800c130:	f7f8 fdd3 	bl	8004cda <HAL_PCD_EP_SetStall>
 800c134:	4603      	mov	r3, r0
 800c136:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c138:	7bbb      	ldrb	r3, [r7, #14]
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	d816      	bhi.n	800c16c <USBD_LL_StallEP+0x5c>
 800c13e:	a201      	add	r2, pc, #4	; (adr r2, 800c144 <USBD_LL_StallEP+0x34>)
 800c140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c144:	0800c155 	.word	0x0800c155
 800c148:	0800c15b 	.word	0x0800c15b
 800c14c:	0800c161 	.word	0x0800c161
 800c150:	0800c167 	.word	0x0800c167
    case HAL_OK :
      usb_status = USBD_OK;
 800c154:	2300      	movs	r3, #0
 800c156:	73fb      	strb	r3, [r7, #15]
    break;
 800c158:	e00b      	b.n	800c172 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c15a:	2302      	movs	r3, #2
 800c15c:	73fb      	strb	r3, [r7, #15]
    break;
 800c15e:	e008      	b.n	800c172 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c160:	2301      	movs	r3, #1
 800c162:	73fb      	strb	r3, [r7, #15]
    break;
 800c164:	e005      	b.n	800c172 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c166:	2302      	movs	r3, #2
 800c168:	73fb      	strb	r3, [r7, #15]
    break;
 800c16a:	e002      	b.n	800c172 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c16c:	2302      	movs	r3, #2
 800c16e:	73fb      	strb	r3, [r7, #15]
    break;
 800c170:	bf00      	nop
  }
  return usb_status;  
 800c172:	7bfb      	ldrb	r3, [r7, #15]
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	460b      	mov	r3, r1
 800c186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c196:	78fa      	ldrb	r2, [r7, #3]
 800c198:	4611      	mov	r1, r2
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7f8 fe01 	bl	8004da2 <HAL_PCD_EP_ClrStall>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
 800c1a6:	2b03      	cmp	r3, #3
 800c1a8:	d816      	bhi.n	800c1d8 <USBD_LL_ClearStallEP+0x5c>
 800c1aa:	a201      	add	r2, pc, #4	; (adr r2, 800c1b0 <USBD_LL_ClearStallEP+0x34>)
 800c1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b0:	0800c1c1 	.word	0x0800c1c1
 800c1b4:	0800c1c7 	.word	0x0800c1c7
 800c1b8:	0800c1cd 	.word	0x0800c1cd
 800c1bc:	0800c1d3 	.word	0x0800c1d3
    case HAL_OK :
      usb_status = USBD_OK;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1c4:	e00b      	b.n	800c1de <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ca:	e008      	b.n	800c1de <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c1d0:	e005      	b.n	800c1de <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c1d2:	2302      	movs	r3, #2
 800c1d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c1d6:	e002      	b.n	800c1de <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c1d8:	2302      	movs	r3, #2
 800c1da:	73fb      	strb	r3, [r7, #15]
    break;
 800c1dc:	bf00      	nop
  }
  return usb_status; 
 800c1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3710      	adds	r7, #16
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c1fa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800c1fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c200:	2b00      	cmp	r3, #0
 800c202:	da0b      	bge.n	800c21c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800c204:	78fb      	ldrb	r3, [r7, #3]
 800c206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c20a:	68f9      	ldr	r1, [r7, #12]
 800c20c:	4613      	mov	r3, r2
 800c20e:	00db      	lsls	r3, r3, #3
 800c210:	1a9b      	subs	r3, r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	440b      	add	r3, r1
 800c216:	333a      	adds	r3, #58	; 0x3a
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	e00b      	b.n	800c234 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800c21c:	78fb      	ldrb	r3, [r7, #3]
 800c21e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c222:	68f9      	ldr	r1, [r7, #12]
 800c224:	4613      	mov	r3, r2
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	1a9b      	subs	r3, r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	440b      	add	r3, r1
 800c22e:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800c232:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c234:	4618      	mov	r0, r3
 800c236:	3714      	adds	r7, #20
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr

0800c240 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	460b      	mov	r3, r1
 800c24a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c25a:	78fa      	ldrb	r2, [r7, #3]
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f7f8 fbbc 	bl	80049dc <HAL_PCD_SetAddress>
 800c264:	4603      	mov	r3, r0
 800c266:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800c268:	7bbb      	ldrb	r3, [r7, #14]
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	d816      	bhi.n	800c29c <USBD_LL_SetUSBAddress+0x5c>
 800c26e:	a201      	add	r2, pc, #4	; (adr r2, 800c274 <USBD_LL_SetUSBAddress+0x34>)
 800c270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c274:	0800c285 	.word	0x0800c285
 800c278:	0800c28b 	.word	0x0800c28b
 800c27c:	0800c291 	.word	0x0800c291
 800c280:	0800c297 	.word	0x0800c297
    case HAL_OK :
      usb_status = USBD_OK;
 800c284:	2300      	movs	r3, #0
 800c286:	73fb      	strb	r3, [r7, #15]
    break;
 800c288:	e00b      	b.n	800c2a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c28a:	2302      	movs	r3, #2
 800c28c:	73fb      	strb	r3, [r7, #15]
    break;
 800c28e:	e008      	b.n	800c2a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c290:	2301      	movs	r3, #1
 800c292:	73fb      	strb	r3, [r7, #15]
    break;
 800c294:	e005      	b.n	800c2a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c296:	2302      	movs	r3, #2
 800c298:	73fb      	strb	r3, [r7, #15]
    break;
 800c29a:	e002      	b.n	800c2a2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c29c:	2302      	movs	r3, #2
 800c29e:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a0:	bf00      	nop
  }
  return usb_status;  
 800c2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b086      	sub	sp, #24
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	607a      	str	r2, [r7, #4]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	72fb      	strb	r3, [r7, #11]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800c2ce:	893b      	ldrh	r3, [r7, #8]
 800c2d0:	7af9      	ldrb	r1, [r7, #11]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	f7f8 fcb8 	bl	8004c48 <HAL_PCD_EP_Transmit>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800c2dc:	7dbb      	ldrb	r3, [r7, #22]
 800c2de:	2b03      	cmp	r3, #3
 800c2e0:	d816      	bhi.n	800c310 <USBD_LL_Transmit+0x64>
 800c2e2:	a201      	add	r2, pc, #4	; (adr r2, 800c2e8 <USBD_LL_Transmit+0x3c>)
 800c2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e8:	0800c2f9 	.word	0x0800c2f9
 800c2ec:	0800c2ff 	.word	0x0800c2ff
 800c2f0:	0800c305 	.word	0x0800c305
 800c2f4:	0800c30b 	.word	0x0800c30b
    case HAL_OK :
      usb_status = USBD_OK;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	75fb      	strb	r3, [r7, #23]
    break;
 800c2fc:	e00b      	b.n	800c316 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c2fe:	2302      	movs	r3, #2
 800c300:	75fb      	strb	r3, [r7, #23]
    break;
 800c302:	e008      	b.n	800c316 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c304:	2301      	movs	r3, #1
 800c306:	75fb      	strb	r3, [r7, #23]
    break;
 800c308:	e005      	b.n	800c316 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c30a:	2302      	movs	r3, #2
 800c30c:	75fb      	strb	r3, [r7, #23]
    break;
 800c30e:	e002      	b.n	800c316 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800c310:	2302      	movs	r3, #2
 800c312:	75fb      	strb	r3, [r7, #23]
    break;
 800c314:	bf00      	nop
  }
  return usb_status;    
 800c316:	7dfb      	ldrb	r3, [r7, #23]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	607a      	str	r2, [r7, #4]
 800c32a:	461a      	mov	r2, r3
 800c32c:	460b      	mov	r3, r1
 800c32e:	72fb      	strb	r3, [r7, #11]
 800c330:	4613      	mov	r3, r2
 800c332:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800c342:	893b      	ldrh	r3, [r7, #8]
 800c344:	7af9      	ldrb	r1, [r7, #11]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	f7f8 fc1b 	bl	8004b82 <HAL_PCD_EP_Receive>
 800c34c:	4603      	mov	r3, r0
 800c34e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800c350:	7dbb      	ldrb	r3, [r7, #22]
 800c352:	2b03      	cmp	r3, #3
 800c354:	d816      	bhi.n	800c384 <USBD_LL_PrepareReceive+0x64>
 800c356:	a201      	add	r2, pc, #4	; (adr r2, 800c35c <USBD_LL_PrepareReceive+0x3c>)
 800c358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35c:	0800c36d 	.word	0x0800c36d
 800c360:	0800c373 	.word	0x0800c373
 800c364:	0800c379 	.word	0x0800c379
 800c368:	0800c37f 	.word	0x0800c37f
    case HAL_OK :
      usb_status = USBD_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	75fb      	strb	r3, [r7, #23]
    break;
 800c370:	e00b      	b.n	800c38a <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c372:	2302      	movs	r3, #2
 800c374:	75fb      	strb	r3, [r7, #23]
    break;
 800c376:	e008      	b.n	800c38a <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c378:	2301      	movs	r3, #1
 800c37a:	75fb      	strb	r3, [r7, #23]
    break;
 800c37c:	e005      	b.n	800c38a <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c37e:	2302      	movs	r3, #2
 800c380:	75fb      	strb	r3, [r7, #23]
    break;
 800c382:	e002      	b.n	800c38a <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800c384:	2302      	movs	r3, #2
 800c386:	75fb      	strb	r3, [r7, #23]
    break;
 800c388:	bf00      	nop
  }
  return usb_status; 
 800c38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3718      	adds	r7, #24
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	460b      	mov	r3, r1
 800c39e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c3a6:	78fa      	ldrb	r2, [r7, #3]
 800c3a8:	4611      	mov	r1, r2
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7f8 fc33 	bl	8004c16 <HAL_PCD_EP_GetRxCount>
 800c3b0:	4603      	mov	r3, r0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
	...

0800c3bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c3c8:	78fb      	ldrb	r3, [r7, #3]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d002      	beq.n	800c3d4 <HAL_PCDEx_LPM_Callback+0x18>
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d020      	beq.n	800c414 <HAL_PCDEx_LPM_Callback+0x58>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800c3d2:	e03d      	b.n	800c450 <HAL_PCDEx_LPM_Callback+0x94>
    if (hpcd->Init.low_power_enable)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6a1b      	ldr	r3, [r3, #32]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d007      	beq.n	800c3ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c3dc:	f7fe f8e2 	bl	800a5a4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c3e0:	4a1d      	ldr	r2, [pc, #116]	; (800c458 <HAL_PCDEx_LPM_Callback+0x9c>)
 800c3e2:	4b1d      	ldr	r3, [pc, #116]	; (800c458 <HAL_PCDEx_LPM_Callback+0x9c>)
 800c3e4:	691b      	ldr	r3, [r3, #16]
 800c3e6:	f023 0306 	bic.w	r3, r3, #6
 800c3ea:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f023 0301 	bic.w	r3, r3, #1
 800c404:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fc fd96 	bl	8008f3e <USBD_LL_Resume>
    break;
 800c412:	e01d      	b.n	800c450 <HAL_PCDEx_LPM_Callback+0x94>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c41c:	461a      	mov	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f043 0301 	orr.w	r3, r3, #1
 800c42c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800c434:	4618      	mov	r0, r3
 800c436:	f7fc fd6d 	bl	8008f14 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a1b      	ldr	r3, [r3, #32]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d005      	beq.n	800c44e <HAL_PCDEx_LPM_Callback+0x92>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c442:	4a05      	ldr	r2, [pc, #20]	; (800c458 <HAL_PCDEx_LPM_Callback+0x9c>)
 800c444:	4b04      	ldr	r3, [pc, #16]	; (800c458 <HAL_PCDEx_LPM_Callback+0x9c>)
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	f043 0306 	orr.w	r3, r3, #6
 800c44c:	6113      	str	r3, [r2, #16]
    break;   
 800c44e:	bf00      	nop
}
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	e000ed00 	.word	0xe000ed00

0800c45c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	4603      	mov	r3, r0
 800c464:	6039      	str	r1, [r7, #0]
 800c466:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_HS_DeviceDesc);
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	2212      	movs	r2, #18
 800c46c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800c46e:	4b03      	ldr	r3, [pc, #12]	; (800c47c <USBD_HS_DeviceDescriptor+0x20>)
}
 800c470:	4618      	mov	r0, r3
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	20000158 	.word	0x20000158

0800c480 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	4603      	mov	r3, r0
 800c488:	6039      	str	r1, [r7, #0]
 800c48a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	2204      	movs	r2, #4
 800c490:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c492:	4b03      	ldr	r3, [pc, #12]	; (800c4a0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800c494:	4618      	mov	r0, r3
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr
 800c4a0:	20000178 	.word	0x20000178

0800c4a4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	6039      	str	r1, [r7, #0]
 800c4ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c4b0:	79fb      	ldrb	r3, [r7, #7]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d105      	bne.n	800c4c2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	4907      	ldr	r1, [pc, #28]	; (800c4d8 <USBD_HS_ProductStrDescriptor+0x34>)
 800c4ba:	4808      	ldr	r0, [pc, #32]	; (800c4dc <USBD_HS_ProductStrDescriptor+0x38>)
 800c4bc:	f7fd f9c5 	bl	800984a <USBD_GetString>
 800c4c0:	e004      	b.n	800c4cc <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c4c2:	683a      	ldr	r2, [r7, #0]
 800c4c4:	4904      	ldr	r1, [pc, #16]	; (800c4d8 <USBD_HS_ProductStrDescriptor+0x34>)
 800c4c6:	4805      	ldr	r0, [pc, #20]	; (800c4dc <USBD_HS_ProductStrDescriptor+0x38>)
 800c4c8:	f7fd f9bf 	bl	800984a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4cc:	4b02      	ldr	r3, [pc, #8]	; (800c4d8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	20002568 	.word	0x20002568
 800c4dc:	0800f8c8 	.word	0x0800f8c8

0800c4e0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	6039      	str	r1, [r7, #0]
 800c4ea:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c4ec:	683a      	ldr	r2, [r7, #0]
 800c4ee:	4904      	ldr	r1, [pc, #16]	; (800c500 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800c4f0:	4804      	ldr	r0, [pc, #16]	; (800c504 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800c4f2:	f7fd f9aa 	bl	800984a <USBD_GetString>
  return USBD_StrDesc;
 800c4f6:	4b02      	ldr	r3, [pc, #8]	; (800c500 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	20002568 	.word	0x20002568
 800c504:	0800f8e0 	.word	0x0800f8e0

0800c508 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	6039      	str	r1, [r7, #0]
 800c512:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c514:	79fb      	ldrb	r3, [r7, #7]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d105      	bne.n	800c526 <USBD_HS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	4907      	ldr	r1, [pc, #28]	; (800c53c <USBD_HS_SerialStrDescriptor+0x34>)
 800c51e:	4808      	ldr	r0, [pc, #32]	; (800c540 <USBD_HS_SerialStrDescriptor+0x38>)
 800c520:	f7fd f993 	bl	800984a <USBD_GetString>
 800c524:	e004      	b.n	800c530 <USBD_HS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_HS, USBD_StrDesc, length);
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	4904      	ldr	r1, [pc, #16]	; (800c53c <USBD_HS_SerialStrDescriptor+0x34>)
 800c52a:	4805      	ldr	r0, [pc, #20]	; (800c540 <USBD_HS_SerialStrDescriptor+0x38>)
 800c52c:	f7fd f98d 	bl	800984a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c530:	4b02      	ldr	r3, [pc, #8]	; (800c53c <USBD_HS_SerialStrDescriptor+0x34>)
}
 800c532:	4618      	mov	r0, r3
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	20002568 	.word	0x20002568
 800c540:	0800f8f4 	.word	0x0800f8f4

0800c544 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	4603      	mov	r3, r0
 800c54c:	6039      	str	r1, [r7, #0]
 800c54e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c550:	79fb      	ldrb	r3, [r7, #7]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d105      	bne.n	800c562 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c556:	683a      	ldr	r2, [r7, #0]
 800c558:	4907      	ldr	r1, [pc, #28]	; (800c578 <USBD_HS_ConfigStrDescriptor+0x34>)
 800c55a:	4808      	ldr	r0, [pc, #32]	; (800c57c <USBD_HS_ConfigStrDescriptor+0x38>)
 800c55c:	f7fd f975 	bl	800984a <USBD_GetString>
 800c560:	e004      	b.n	800c56c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c562:	683a      	ldr	r2, [r7, #0]
 800c564:	4904      	ldr	r1, [pc, #16]	; (800c578 <USBD_HS_ConfigStrDescriptor+0x34>)
 800c566:	4805      	ldr	r0, [pc, #20]	; (800c57c <USBD_HS_ConfigStrDescriptor+0x38>)
 800c568:	f7fd f96f 	bl	800984a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c56c:	4b02      	ldr	r3, [pc, #8]	; (800c578 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20002568 	.word	0x20002568
 800c57c:	0800f904 	.word	0x0800f904

0800c580 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	4603      	mov	r3, r0
 800c588:	6039      	str	r1, [r7, #0]
 800c58a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c58c:	79fb      	ldrb	r3, [r7, #7]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d105      	bne.n	800c59e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c592:	683a      	ldr	r2, [r7, #0]
 800c594:	4907      	ldr	r1, [pc, #28]	; (800c5b4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c596:	4808      	ldr	r0, [pc, #32]	; (800c5b8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c598:	f7fd f957 	bl	800984a <USBD_GetString>
 800c59c:	e004      	b.n	800c5a8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	4904      	ldr	r1, [pc, #16]	; (800c5b4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c5a2:	4805      	ldr	r0, [pc, #20]	; (800c5b8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c5a4:	f7fd f951 	bl	800984a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5a8:	4b02      	ldr	r3, [pc, #8]	; (800c5b4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	20002568 	.word	0x20002568
 800c5b8:	0800f910 	.word	0x0800f910

0800c5bc <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	6039      	str	r1, [r7, #0]
 800c5c6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_HS_BOSDesc);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	220c      	movs	r2, #12
 800c5cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800c5ce:	4b03      	ldr	r3, [pc, #12]	; (800c5dc <USBD_HS_USR_BOSDescriptor+0x20>)
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr
 800c5dc:	2000016c 	.word	0x2000016c

0800c5e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c5e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c618 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c5e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c5e6:	e003      	b.n	800c5f0 <LoopCopyDataInit>

0800c5e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c5e8:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c5ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c5ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c5ee:	3104      	adds	r1, #4

0800c5f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c5f0:	480b      	ldr	r0, [pc, #44]	; (800c620 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c5f2:	4b0c      	ldr	r3, [pc, #48]	; (800c624 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c5f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c5f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c5f8:	d3f6      	bcc.n	800c5e8 <CopyDataInit>
  ldr  r2, =_sbss
 800c5fa:	4a0b      	ldr	r2, [pc, #44]	; (800c628 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c5fc:	e002      	b.n	800c604 <LoopFillZerobss>

0800c5fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c5fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c600:	f842 3b04 	str.w	r3, [r2], #4

0800c604 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c604:	4b09      	ldr	r3, [pc, #36]	; (800c62c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c606:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c608:	d3f9      	bcc.n	800c5fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800c60a:	f7ff fa35 	bl	800ba78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c60e:	f000 f85b 	bl	800c6c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c612:	f7fd fd7d 	bl	800a110 <main>
  bx  lr    
 800c616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c618:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800c61c:	080125b8 	.word	0x080125b8
  ldr  r0, =_sdata
 800c620:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c624:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 800c628:	2000034c 	.word	0x2000034c
  ldr  r3, = _ebss
 800c62c:	2000276c 	.word	0x2000276c

0800c630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c630:	e7fe      	b.n	800c630 <ADC_IRQHandler>
	...

0800c634 <_gets_r>:
 800c634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c636:	460e      	mov	r6, r1
 800c638:	4605      	mov	r5, r0
 800c63a:	b118      	cbz	r0, 800c644 <_gets_r+0x10>
 800c63c:	6983      	ldr	r3, [r0, #24]
 800c63e:	b90b      	cbnz	r3, 800c644 <_gets_r+0x10>
 800c640:	f001 ffb4 	bl	800e5ac <__sinit>
 800c644:	69ab      	ldr	r3, [r5, #24]
 800c646:	686c      	ldr	r4, [r5, #4]
 800c648:	b913      	cbnz	r3, 800c650 <_gets_r+0x1c>
 800c64a:	4628      	mov	r0, r5
 800c64c:	f001 ffae 	bl	800e5ac <__sinit>
 800c650:	4b16      	ldr	r3, [pc, #88]	; (800c6ac <_gets_r+0x78>)
 800c652:	429c      	cmp	r4, r3
 800c654:	d114      	bne.n	800c680 <_gets_r+0x4c>
 800c656:	686c      	ldr	r4, [r5, #4]
 800c658:	4637      	mov	r7, r6
 800c65a:	6863      	ldr	r3, [r4, #4]
 800c65c:	3b01      	subs	r3, #1
 800c65e:	2b00      	cmp	r3, #0
 800c660:	6063      	str	r3, [r4, #4]
 800c662:	da17      	bge.n	800c694 <_gets_r+0x60>
 800c664:	4621      	mov	r1, r4
 800c666:	4628      	mov	r0, r5
 800c668:	f000 fe2a 	bl	800d2c0 <__srget_r>
 800c66c:	280a      	cmp	r0, #10
 800c66e:	d003      	beq.n	800c678 <_gets_r+0x44>
 800c670:	1c43      	adds	r3, r0, #1
 800c672:	d115      	bne.n	800c6a0 <_gets_r+0x6c>
 800c674:	42b7      	cmp	r7, r6
 800c676:	d016      	beq.n	800c6a6 <_gets_r+0x72>
 800c678:	2300      	movs	r3, #0
 800c67a:	703b      	strb	r3, [r7, #0]
 800c67c:	4630      	mov	r0, r6
 800c67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c680:	4b0b      	ldr	r3, [pc, #44]	; (800c6b0 <_gets_r+0x7c>)
 800c682:	429c      	cmp	r4, r3
 800c684:	d101      	bne.n	800c68a <_gets_r+0x56>
 800c686:	68ac      	ldr	r4, [r5, #8]
 800c688:	e7e6      	b.n	800c658 <_gets_r+0x24>
 800c68a:	4b0a      	ldr	r3, [pc, #40]	; (800c6b4 <_gets_r+0x80>)
 800c68c:	429c      	cmp	r4, r3
 800c68e:	bf08      	it	eq
 800c690:	68ec      	ldreq	r4, [r5, #12]
 800c692:	e7e1      	b.n	800c658 <_gets_r+0x24>
 800c694:	6823      	ldr	r3, [r4, #0]
 800c696:	1c5a      	adds	r2, r3, #1
 800c698:	6022      	str	r2, [r4, #0]
 800c69a:	7818      	ldrb	r0, [r3, #0]
 800c69c:	280a      	cmp	r0, #10
 800c69e:	d0eb      	beq.n	800c678 <_gets_r+0x44>
 800c6a0:	f807 0b01 	strb.w	r0, [r7], #1
 800c6a4:	e7d9      	b.n	800c65a <_gets_r+0x26>
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	08012454 	.word	0x08012454
 800c6b0:	08012474 	.word	0x08012474
 800c6b4:	08012434 	.word	0x08012434

0800c6b8 <gets>:
 800c6b8:	4b02      	ldr	r3, [pc, #8]	; (800c6c4 <gets+0xc>)
 800c6ba:	4601      	mov	r1, r0
 800c6bc:	6818      	ldr	r0, [r3, #0]
 800c6be:	f7ff bfb9 	b.w	800c634 <_gets_r>
 800c6c2:	bf00      	nop
 800c6c4:	2000017c 	.word	0x2000017c

0800c6c8 <__libc_init_array>:
 800c6c8:	b570      	push	{r4, r5, r6, lr}
 800c6ca:	4e0d      	ldr	r6, [pc, #52]	; (800c700 <__libc_init_array+0x38>)
 800c6cc:	4c0d      	ldr	r4, [pc, #52]	; (800c704 <__libc_init_array+0x3c>)
 800c6ce:	1ba4      	subs	r4, r4, r6
 800c6d0:	10a4      	asrs	r4, r4, #2
 800c6d2:	2500      	movs	r5, #0
 800c6d4:	42a5      	cmp	r5, r4
 800c6d6:	d109      	bne.n	800c6ec <__libc_init_array+0x24>
 800c6d8:	4e0b      	ldr	r6, [pc, #44]	; (800c708 <__libc_init_array+0x40>)
 800c6da:	4c0c      	ldr	r4, [pc, #48]	; (800c70c <__libc_init_array+0x44>)
 800c6dc:	f002 ffc2 	bl	800f664 <_init>
 800c6e0:	1ba4      	subs	r4, r4, r6
 800c6e2:	10a4      	asrs	r4, r4, #2
 800c6e4:	2500      	movs	r5, #0
 800c6e6:	42a5      	cmp	r5, r4
 800c6e8:	d105      	bne.n	800c6f6 <__libc_init_array+0x2e>
 800c6ea:	bd70      	pop	{r4, r5, r6, pc}
 800c6ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6f0:	4798      	blx	r3
 800c6f2:	3501      	adds	r5, #1
 800c6f4:	e7ee      	b.n	800c6d4 <__libc_init_array+0xc>
 800c6f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6fa:	4798      	blx	r3
 800c6fc:	3501      	adds	r5, #1
 800c6fe:	e7f2      	b.n	800c6e6 <__libc_init_array+0x1e>
 800c700:	080125b0 	.word	0x080125b0
 800c704:	080125b0 	.word	0x080125b0
 800c708:	080125b0 	.word	0x080125b0
 800c70c:	080125b4 	.word	0x080125b4

0800c710 <__locale_ctype_ptr_l>:
 800c710:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c714:	4770      	bx	lr
	...

0800c718 <__locale_ctype_ptr>:
 800c718:	4b04      	ldr	r3, [pc, #16]	; (800c72c <__locale_ctype_ptr+0x14>)
 800c71a:	4a05      	ldr	r2, [pc, #20]	; (800c730 <__locale_ctype_ptr+0x18>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6a1b      	ldr	r3, [r3, #32]
 800c720:	2b00      	cmp	r3, #0
 800c722:	bf08      	it	eq
 800c724:	4613      	moveq	r3, r2
 800c726:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c72a:	4770      	bx	lr
 800c72c:	2000017c 	.word	0x2000017c
 800c730:	200001e0 	.word	0x200001e0

0800c734 <malloc>:
 800c734:	4b02      	ldr	r3, [pc, #8]	; (800c740 <malloc+0xc>)
 800c736:	4601      	mov	r1, r0
 800c738:	6818      	ldr	r0, [r3, #0]
 800c73a:	f000 b873 	b.w	800c824 <_malloc_r>
 800c73e:	bf00      	nop
 800c740:	2000017c 	.word	0x2000017c

0800c744 <free>:
 800c744:	4b02      	ldr	r3, [pc, #8]	; (800c750 <free+0xc>)
 800c746:	4601      	mov	r1, r0
 800c748:	6818      	ldr	r0, [r3, #0]
 800c74a:	f000 b81d 	b.w	800c788 <_free_r>
 800c74e:	bf00      	nop
 800c750:	2000017c 	.word	0x2000017c

0800c754 <__ascii_mbtowc>:
 800c754:	b082      	sub	sp, #8
 800c756:	b901      	cbnz	r1, 800c75a <__ascii_mbtowc+0x6>
 800c758:	a901      	add	r1, sp, #4
 800c75a:	b142      	cbz	r2, 800c76e <__ascii_mbtowc+0x1a>
 800c75c:	b14b      	cbz	r3, 800c772 <__ascii_mbtowc+0x1e>
 800c75e:	7813      	ldrb	r3, [r2, #0]
 800c760:	600b      	str	r3, [r1, #0]
 800c762:	7812      	ldrb	r2, [r2, #0]
 800c764:	1c10      	adds	r0, r2, #0
 800c766:	bf18      	it	ne
 800c768:	2001      	movne	r0, #1
 800c76a:	b002      	add	sp, #8
 800c76c:	4770      	bx	lr
 800c76e:	4610      	mov	r0, r2
 800c770:	e7fb      	b.n	800c76a <__ascii_mbtowc+0x16>
 800c772:	f06f 0001 	mvn.w	r0, #1
 800c776:	e7f8      	b.n	800c76a <__ascii_mbtowc+0x16>

0800c778 <memset>:
 800c778:	4402      	add	r2, r0
 800c77a:	4603      	mov	r3, r0
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d100      	bne.n	800c782 <memset+0xa>
 800c780:	4770      	bx	lr
 800c782:	f803 1b01 	strb.w	r1, [r3], #1
 800c786:	e7f9      	b.n	800c77c <memset+0x4>

0800c788 <_free_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	4605      	mov	r5, r0
 800c78c:	2900      	cmp	r1, #0
 800c78e:	d045      	beq.n	800c81c <_free_r+0x94>
 800c790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c794:	1f0c      	subs	r4, r1, #4
 800c796:	2b00      	cmp	r3, #0
 800c798:	bfb8      	it	lt
 800c79a:	18e4      	addlt	r4, r4, r3
 800c79c:	f002 f829 	bl	800e7f2 <__malloc_lock>
 800c7a0:	4a1f      	ldr	r2, [pc, #124]	; (800c820 <_free_r+0x98>)
 800c7a2:	6813      	ldr	r3, [r2, #0]
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	b933      	cbnz	r3, 800c7b6 <_free_r+0x2e>
 800c7a8:	6063      	str	r3, [r4, #4]
 800c7aa:	6014      	str	r4, [r2, #0]
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7b2:	f002 b81f 	b.w	800e7f4 <__malloc_unlock>
 800c7b6:	42a3      	cmp	r3, r4
 800c7b8:	d90c      	bls.n	800c7d4 <_free_r+0x4c>
 800c7ba:	6821      	ldr	r1, [r4, #0]
 800c7bc:	1862      	adds	r2, r4, r1
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	bf04      	itt	eq
 800c7c2:	681a      	ldreq	r2, [r3, #0]
 800c7c4:	685b      	ldreq	r3, [r3, #4]
 800c7c6:	6063      	str	r3, [r4, #4]
 800c7c8:	bf04      	itt	eq
 800c7ca:	1852      	addeq	r2, r2, r1
 800c7cc:	6022      	streq	r2, [r4, #0]
 800c7ce:	6004      	str	r4, [r0, #0]
 800c7d0:	e7ec      	b.n	800c7ac <_free_r+0x24>
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	685a      	ldr	r2, [r3, #4]
 800c7d6:	b10a      	cbz	r2, 800c7dc <_free_r+0x54>
 800c7d8:	42a2      	cmp	r2, r4
 800c7da:	d9fa      	bls.n	800c7d2 <_free_r+0x4a>
 800c7dc:	6819      	ldr	r1, [r3, #0]
 800c7de:	1858      	adds	r0, r3, r1
 800c7e0:	42a0      	cmp	r0, r4
 800c7e2:	d10b      	bne.n	800c7fc <_free_r+0x74>
 800c7e4:	6820      	ldr	r0, [r4, #0]
 800c7e6:	4401      	add	r1, r0
 800c7e8:	1858      	adds	r0, r3, r1
 800c7ea:	4282      	cmp	r2, r0
 800c7ec:	6019      	str	r1, [r3, #0]
 800c7ee:	d1dd      	bne.n	800c7ac <_free_r+0x24>
 800c7f0:	6810      	ldr	r0, [r2, #0]
 800c7f2:	6852      	ldr	r2, [r2, #4]
 800c7f4:	605a      	str	r2, [r3, #4]
 800c7f6:	4401      	add	r1, r0
 800c7f8:	6019      	str	r1, [r3, #0]
 800c7fa:	e7d7      	b.n	800c7ac <_free_r+0x24>
 800c7fc:	d902      	bls.n	800c804 <_free_r+0x7c>
 800c7fe:	230c      	movs	r3, #12
 800c800:	602b      	str	r3, [r5, #0]
 800c802:	e7d3      	b.n	800c7ac <_free_r+0x24>
 800c804:	6820      	ldr	r0, [r4, #0]
 800c806:	1821      	adds	r1, r4, r0
 800c808:	428a      	cmp	r2, r1
 800c80a:	bf04      	itt	eq
 800c80c:	6811      	ldreq	r1, [r2, #0]
 800c80e:	6852      	ldreq	r2, [r2, #4]
 800c810:	6062      	str	r2, [r4, #4]
 800c812:	bf04      	itt	eq
 800c814:	1809      	addeq	r1, r1, r0
 800c816:	6021      	streq	r1, [r4, #0]
 800c818:	605c      	str	r4, [r3, #4]
 800c81a:	e7c7      	b.n	800c7ac <_free_r+0x24>
 800c81c:	bd38      	pop	{r3, r4, r5, pc}
 800c81e:	bf00      	nop
 800c820:	2000045c 	.word	0x2000045c

0800c824 <_malloc_r>:
 800c824:	b570      	push	{r4, r5, r6, lr}
 800c826:	1ccd      	adds	r5, r1, #3
 800c828:	f025 0503 	bic.w	r5, r5, #3
 800c82c:	3508      	adds	r5, #8
 800c82e:	2d0c      	cmp	r5, #12
 800c830:	bf38      	it	cc
 800c832:	250c      	movcc	r5, #12
 800c834:	2d00      	cmp	r5, #0
 800c836:	4606      	mov	r6, r0
 800c838:	db01      	blt.n	800c83e <_malloc_r+0x1a>
 800c83a:	42a9      	cmp	r1, r5
 800c83c:	d903      	bls.n	800c846 <_malloc_r+0x22>
 800c83e:	230c      	movs	r3, #12
 800c840:	6033      	str	r3, [r6, #0]
 800c842:	2000      	movs	r0, #0
 800c844:	bd70      	pop	{r4, r5, r6, pc}
 800c846:	f001 ffd4 	bl	800e7f2 <__malloc_lock>
 800c84a:	4a23      	ldr	r2, [pc, #140]	; (800c8d8 <_malloc_r+0xb4>)
 800c84c:	6814      	ldr	r4, [r2, #0]
 800c84e:	4621      	mov	r1, r4
 800c850:	b991      	cbnz	r1, 800c878 <_malloc_r+0x54>
 800c852:	4c22      	ldr	r4, [pc, #136]	; (800c8dc <_malloc_r+0xb8>)
 800c854:	6823      	ldr	r3, [r4, #0]
 800c856:	b91b      	cbnz	r3, 800c860 <_malloc_r+0x3c>
 800c858:	4630      	mov	r0, r6
 800c85a:	f000 fd5d 	bl	800d318 <_sbrk_r>
 800c85e:	6020      	str	r0, [r4, #0]
 800c860:	4629      	mov	r1, r5
 800c862:	4630      	mov	r0, r6
 800c864:	f000 fd58 	bl	800d318 <_sbrk_r>
 800c868:	1c43      	adds	r3, r0, #1
 800c86a:	d126      	bne.n	800c8ba <_malloc_r+0x96>
 800c86c:	230c      	movs	r3, #12
 800c86e:	6033      	str	r3, [r6, #0]
 800c870:	4630      	mov	r0, r6
 800c872:	f001 ffbf 	bl	800e7f4 <__malloc_unlock>
 800c876:	e7e4      	b.n	800c842 <_malloc_r+0x1e>
 800c878:	680b      	ldr	r3, [r1, #0]
 800c87a:	1b5b      	subs	r3, r3, r5
 800c87c:	d41a      	bmi.n	800c8b4 <_malloc_r+0x90>
 800c87e:	2b0b      	cmp	r3, #11
 800c880:	d90f      	bls.n	800c8a2 <_malloc_r+0x7e>
 800c882:	600b      	str	r3, [r1, #0]
 800c884:	50cd      	str	r5, [r1, r3]
 800c886:	18cc      	adds	r4, r1, r3
 800c888:	4630      	mov	r0, r6
 800c88a:	f001 ffb3 	bl	800e7f4 <__malloc_unlock>
 800c88e:	f104 000b 	add.w	r0, r4, #11
 800c892:	1d23      	adds	r3, r4, #4
 800c894:	f020 0007 	bic.w	r0, r0, #7
 800c898:	1ac3      	subs	r3, r0, r3
 800c89a:	d01b      	beq.n	800c8d4 <_malloc_r+0xb0>
 800c89c:	425a      	negs	r2, r3
 800c89e:	50e2      	str	r2, [r4, r3]
 800c8a0:	bd70      	pop	{r4, r5, r6, pc}
 800c8a2:	428c      	cmp	r4, r1
 800c8a4:	bf0d      	iteet	eq
 800c8a6:	6863      	ldreq	r3, [r4, #4]
 800c8a8:	684b      	ldrne	r3, [r1, #4]
 800c8aa:	6063      	strne	r3, [r4, #4]
 800c8ac:	6013      	streq	r3, [r2, #0]
 800c8ae:	bf18      	it	ne
 800c8b0:	460c      	movne	r4, r1
 800c8b2:	e7e9      	b.n	800c888 <_malloc_r+0x64>
 800c8b4:	460c      	mov	r4, r1
 800c8b6:	6849      	ldr	r1, [r1, #4]
 800c8b8:	e7ca      	b.n	800c850 <_malloc_r+0x2c>
 800c8ba:	1cc4      	adds	r4, r0, #3
 800c8bc:	f024 0403 	bic.w	r4, r4, #3
 800c8c0:	42a0      	cmp	r0, r4
 800c8c2:	d005      	beq.n	800c8d0 <_malloc_r+0xac>
 800c8c4:	1a21      	subs	r1, r4, r0
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	f000 fd26 	bl	800d318 <_sbrk_r>
 800c8cc:	3001      	adds	r0, #1
 800c8ce:	d0cd      	beq.n	800c86c <_malloc_r+0x48>
 800c8d0:	6025      	str	r5, [r4, #0]
 800c8d2:	e7d9      	b.n	800c888 <_malloc_r+0x64>
 800c8d4:	bd70      	pop	{r4, r5, r6, pc}
 800c8d6:	bf00      	nop
 800c8d8:	2000045c 	.word	0x2000045c
 800c8dc:	20000460 	.word	0x20000460

0800c8e0 <__cvt>:
 800c8e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8e4:	ec55 4b10 	vmov	r4, r5, d0
 800c8e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c8ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c8ee:	2d00      	cmp	r5, #0
 800c8f0:	460e      	mov	r6, r1
 800c8f2:	4691      	mov	r9, r2
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	bfb8      	it	lt
 800c8f8:	4622      	movlt	r2, r4
 800c8fa:	462b      	mov	r3, r5
 800c8fc:	f027 0720 	bic.w	r7, r7, #32
 800c900:	bfbb      	ittet	lt
 800c902:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c906:	461d      	movlt	r5, r3
 800c908:	2300      	movge	r3, #0
 800c90a:	232d      	movlt	r3, #45	; 0x2d
 800c90c:	bfb8      	it	lt
 800c90e:	4614      	movlt	r4, r2
 800c910:	2f46      	cmp	r7, #70	; 0x46
 800c912:	700b      	strb	r3, [r1, #0]
 800c914:	d004      	beq.n	800c920 <__cvt+0x40>
 800c916:	2f45      	cmp	r7, #69	; 0x45
 800c918:	d100      	bne.n	800c91c <__cvt+0x3c>
 800c91a:	3601      	adds	r6, #1
 800c91c:	2102      	movs	r1, #2
 800c91e:	e000      	b.n	800c922 <__cvt+0x42>
 800c920:	2103      	movs	r1, #3
 800c922:	ab03      	add	r3, sp, #12
 800c924:	9301      	str	r3, [sp, #4]
 800c926:	ab02      	add	r3, sp, #8
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	4632      	mov	r2, r6
 800c92c:	4653      	mov	r3, sl
 800c92e:	ec45 4b10 	vmov	d0, r4, r5
 800c932:	f000 ff69 	bl	800d808 <_dtoa_r>
 800c936:	2f47      	cmp	r7, #71	; 0x47
 800c938:	4680      	mov	r8, r0
 800c93a:	d102      	bne.n	800c942 <__cvt+0x62>
 800c93c:	f019 0f01 	tst.w	r9, #1
 800c940:	d026      	beq.n	800c990 <__cvt+0xb0>
 800c942:	2f46      	cmp	r7, #70	; 0x46
 800c944:	eb08 0906 	add.w	r9, r8, r6
 800c948:	d111      	bne.n	800c96e <__cvt+0x8e>
 800c94a:	f898 3000 	ldrb.w	r3, [r8]
 800c94e:	2b30      	cmp	r3, #48	; 0x30
 800c950:	d10a      	bne.n	800c968 <__cvt+0x88>
 800c952:	2200      	movs	r2, #0
 800c954:	2300      	movs	r3, #0
 800c956:	4620      	mov	r0, r4
 800c958:	4629      	mov	r1, r5
 800c95a:	f7f4 f8e1 	bl	8000b20 <__aeabi_dcmpeq>
 800c95e:	b918      	cbnz	r0, 800c968 <__cvt+0x88>
 800c960:	f1c6 0601 	rsb	r6, r6, #1
 800c964:	f8ca 6000 	str.w	r6, [sl]
 800c968:	f8da 3000 	ldr.w	r3, [sl]
 800c96c:	4499      	add	r9, r3
 800c96e:	2200      	movs	r2, #0
 800c970:	2300      	movs	r3, #0
 800c972:	4620      	mov	r0, r4
 800c974:	4629      	mov	r1, r5
 800c976:	f7f4 f8d3 	bl	8000b20 <__aeabi_dcmpeq>
 800c97a:	b938      	cbnz	r0, 800c98c <__cvt+0xac>
 800c97c:	2230      	movs	r2, #48	; 0x30
 800c97e:	9b03      	ldr	r3, [sp, #12]
 800c980:	4599      	cmp	r9, r3
 800c982:	d905      	bls.n	800c990 <__cvt+0xb0>
 800c984:	1c59      	adds	r1, r3, #1
 800c986:	9103      	str	r1, [sp, #12]
 800c988:	701a      	strb	r2, [r3, #0]
 800c98a:	e7f8      	b.n	800c97e <__cvt+0x9e>
 800c98c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c990:	9b03      	ldr	r3, [sp, #12]
 800c992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c994:	eba3 0308 	sub.w	r3, r3, r8
 800c998:	4640      	mov	r0, r8
 800c99a:	6013      	str	r3, [r2, #0]
 800c99c:	b004      	add	sp, #16
 800c99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c9a2 <__exponent>:
 800c9a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2900      	cmp	r1, #0
 800c9a8:	bfb8      	it	lt
 800c9aa:	4249      	neglt	r1, r1
 800c9ac:	f803 2b02 	strb.w	r2, [r3], #2
 800c9b0:	bfb4      	ite	lt
 800c9b2:	222d      	movlt	r2, #45	; 0x2d
 800c9b4:	222b      	movge	r2, #43	; 0x2b
 800c9b6:	2909      	cmp	r1, #9
 800c9b8:	7042      	strb	r2, [r0, #1]
 800c9ba:	dd20      	ble.n	800c9fe <__exponent+0x5c>
 800c9bc:	f10d 0207 	add.w	r2, sp, #7
 800c9c0:	4617      	mov	r7, r2
 800c9c2:	260a      	movs	r6, #10
 800c9c4:	fb91 f5f6 	sdiv	r5, r1, r6
 800c9c8:	fb06 1115 	mls	r1, r6, r5, r1
 800c9cc:	3130      	adds	r1, #48	; 0x30
 800c9ce:	2d09      	cmp	r5, #9
 800c9d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c9d4:	f102 34ff 	add.w	r4, r2, #4294967295
 800c9d8:	4629      	mov	r1, r5
 800c9da:	dc09      	bgt.n	800c9f0 <__exponent+0x4e>
 800c9dc:	3130      	adds	r1, #48	; 0x30
 800c9de:	3a02      	subs	r2, #2
 800c9e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c9e4:	42ba      	cmp	r2, r7
 800c9e6:	461c      	mov	r4, r3
 800c9e8:	d304      	bcc.n	800c9f4 <__exponent+0x52>
 800c9ea:	1a20      	subs	r0, r4, r0
 800c9ec:	b003      	add	sp, #12
 800c9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9f0:	4622      	mov	r2, r4
 800c9f2:	e7e7      	b.n	800c9c4 <__exponent+0x22>
 800c9f4:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c9f8:	f803 1b01 	strb.w	r1, [r3], #1
 800c9fc:	e7f2      	b.n	800c9e4 <__exponent+0x42>
 800c9fe:	2230      	movs	r2, #48	; 0x30
 800ca00:	461c      	mov	r4, r3
 800ca02:	4411      	add	r1, r2
 800ca04:	f804 2b02 	strb.w	r2, [r4], #2
 800ca08:	7059      	strb	r1, [r3, #1]
 800ca0a:	e7ee      	b.n	800c9ea <__exponent+0x48>

0800ca0c <_printf_float>:
 800ca0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca10:	b08d      	sub	sp, #52	; 0x34
 800ca12:	460c      	mov	r4, r1
 800ca14:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ca18:	4616      	mov	r6, r2
 800ca1a:	461f      	mov	r7, r3
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	f001 fe6b 	bl	800e6f8 <_localeconv_r>
 800ca22:	6803      	ldr	r3, [r0, #0]
 800ca24:	9304      	str	r3, [sp, #16]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7f3 fbfc 	bl	8000224 <strlen>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ca30:	f8d8 3000 	ldr.w	r3, [r8]
 800ca34:	9005      	str	r0, [sp, #20]
 800ca36:	3307      	adds	r3, #7
 800ca38:	f023 0307 	bic.w	r3, r3, #7
 800ca3c:	f103 0208 	add.w	r2, r3, #8
 800ca40:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ca44:	f8d4 b000 	ldr.w	fp, [r4]
 800ca48:	f8c8 2000 	str.w	r2, [r8]
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ca54:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ca58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca5c:	9307      	str	r3, [sp, #28]
 800ca5e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca62:	f04f 32ff 	mov.w	r2, #4294967295
 800ca66:	4ba5      	ldr	r3, [pc, #660]	; (800ccfc <_printf_float+0x2f0>)
 800ca68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca6c:	f7f4 f88a 	bl	8000b84 <__aeabi_dcmpun>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	f040 81fb 	bne.w	800ce6c <_printf_float+0x460>
 800ca76:	f04f 32ff 	mov.w	r2, #4294967295
 800ca7a:	4ba0      	ldr	r3, [pc, #640]	; (800ccfc <_printf_float+0x2f0>)
 800ca7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca80:	f7f4 f862 	bl	8000b48 <__aeabi_dcmple>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	f040 81f1 	bne.w	800ce6c <_printf_float+0x460>
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	4640      	mov	r0, r8
 800ca90:	4649      	mov	r1, r9
 800ca92:	f7f4 f84f 	bl	8000b34 <__aeabi_dcmplt>
 800ca96:	b110      	cbz	r0, 800ca9e <_printf_float+0x92>
 800ca98:	232d      	movs	r3, #45	; 0x2d
 800ca9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca9e:	4b98      	ldr	r3, [pc, #608]	; (800cd00 <_printf_float+0x2f4>)
 800caa0:	4a98      	ldr	r2, [pc, #608]	; (800cd04 <_printf_float+0x2f8>)
 800caa2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800caa6:	bf8c      	ite	hi
 800caa8:	4690      	movhi	r8, r2
 800caaa:	4698      	movls	r8, r3
 800caac:	2303      	movs	r3, #3
 800caae:	f02b 0204 	bic.w	r2, fp, #4
 800cab2:	6123      	str	r3, [r4, #16]
 800cab4:	6022      	str	r2, [r4, #0]
 800cab6:	f04f 0900 	mov.w	r9, #0
 800caba:	9700      	str	r7, [sp, #0]
 800cabc:	4633      	mov	r3, r6
 800cabe:	aa0b      	add	r2, sp, #44	; 0x2c
 800cac0:	4621      	mov	r1, r4
 800cac2:	4628      	mov	r0, r5
 800cac4:	f000 f9e2 	bl	800ce8c <_printf_common>
 800cac8:	3001      	adds	r0, #1
 800caca:	f040 8093 	bne.w	800cbf4 <_printf_float+0x1e8>
 800cace:	f04f 30ff 	mov.w	r0, #4294967295
 800cad2:	b00d      	add	sp, #52	; 0x34
 800cad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad8:	6861      	ldr	r1, [r4, #4]
 800cada:	1c4b      	adds	r3, r1, #1
 800cadc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800cae0:	d13f      	bne.n	800cb62 <_printf_float+0x156>
 800cae2:	2306      	movs	r3, #6
 800cae4:	6063      	str	r3, [r4, #4]
 800cae6:	2300      	movs	r3, #0
 800cae8:	9303      	str	r3, [sp, #12]
 800caea:	ab0a      	add	r3, sp, #40	; 0x28
 800caec:	9302      	str	r3, [sp, #8]
 800caee:	ab09      	add	r3, sp, #36	; 0x24
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	ec49 8b10 	vmov	d0, r8, r9
 800caf6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cafa:	6022      	str	r2, [r4, #0]
 800cafc:	f8cd a004 	str.w	sl, [sp, #4]
 800cb00:	6861      	ldr	r1, [r4, #4]
 800cb02:	4628      	mov	r0, r5
 800cb04:	f7ff feec 	bl	800c8e0 <__cvt>
 800cb08:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800cb0c:	2b47      	cmp	r3, #71	; 0x47
 800cb0e:	4680      	mov	r8, r0
 800cb10:	d109      	bne.n	800cb26 <_printf_float+0x11a>
 800cb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb14:	1cd8      	adds	r0, r3, #3
 800cb16:	db02      	blt.n	800cb1e <_printf_float+0x112>
 800cb18:	6862      	ldr	r2, [r4, #4]
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	dd57      	ble.n	800cbce <_printf_float+0x1c2>
 800cb1e:	f1aa 0a02 	sub.w	sl, sl, #2
 800cb22:	fa5f fa8a 	uxtb.w	sl, sl
 800cb26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cb2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb2c:	d834      	bhi.n	800cb98 <_printf_float+0x18c>
 800cb2e:	3901      	subs	r1, #1
 800cb30:	4652      	mov	r2, sl
 800cb32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb36:	9109      	str	r1, [sp, #36]	; 0x24
 800cb38:	f7ff ff33 	bl	800c9a2 <__exponent>
 800cb3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb3e:	1883      	adds	r3, r0, r2
 800cb40:	2a01      	cmp	r2, #1
 800cb42:	4681      	mov	r9, r0
 800cb44:	6123      	str	r3, [r4, #16]
 800cb46:	dc02      	bgt.n	800cb4e <_printf_float+0x142>
 800cb48:	6822      	ldr	r2, [r4, #0]
 800cb4a:	07d1      	lsls	r1, r2, #31
 800cb4c:	d501      	bpl.n	800cb52 <_printf_float+0x146>
 800cb4e:	3301      	adds	r3, #1
 800cb50:	6123      	str	r3, [r4, #16]
 800cb52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d0af      	beq.n	800caba <_printf_float+0xae>
 800cb5a:	232d      	movs	r3, #45	; 0x2d
 800cb5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb60:	e7ab      	b.n	800caba <_printf_float+0xae>
 800cb62:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800cb66:	d002      	beq.n	800cb6e <_printf_float+0x162>
 800cb68:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cb6c:	d1bb      	bne.n	800cae6 <_printf_float+0xda>
 800cb6e:	b189      	cbz	r1, 800cb94 <_printf_float+0x188>
 800cb70:	2300      	movs	r3, #0
 800cb72:	9303      	str	r3, [sp, #12]
 800cb74:	ab0a      	add	r3, sp, #40	; 0x28
 800cb76:	9302      	str	r3, [sp, #8]
 800cb78:	ab09      	add	r3, sp, #36	; 0x24
 800cb7a:	9300      	str	r3, [sp, #0]
 800cb7c:	ec49 8b10 	vmov	d0, r8, r9
 800cb80:	6022      	str	r2, [r4, #0]
 800cb82:	f8cd a004 	str.w	sl, [sp, #4]
 800cb86:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	f7ff fea8 	bl	800c8e0 <__cvt>
 800cb90:	4680      	mov	r8, r0
 800cb92:	e7be      	b.n	800cb12 <_printf_float+0x106>
 800cb94:	2301      	movs	r3, #1
 800cb96:	e7a5      	b.n	800cae4 <_printf_float+0xd8>
 800cb98:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800cb9c:	d119      	bne.n	800cbd2 <_printf_float+0x1c6>
 800cb9e:	2900      	cmp	r1, #0
 800cba0:	6863      	ldr	r3, [r4, #4]
 800cba2:	dd0c      	ble.n	800cbbe <_printf_float+0x1b2>
 800cba4:	6121      	str	r1, [r4, #16]
 800cba6:	b913      	cbnz	r3, 800cbae <_printf_float+0x1a2>
 800cba8:	6822      	ldr	r2, [r4, #0]
 800cbaa:	07d2      	lsls	r2, r2, #31
 800cbac:	d502      	bpl.n	800cbb4 <_printf_float+0x1a8>
 800cbae:	3301      	adds	r3, #1
 800cbb0:	440b      	add	r3, r1
 800cbb2:	6123      	str	r3, [r4, #16]
 800cbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb6:	65a3      	str	r3, [r4, #88]	; 0x58
 800cbb8:	f04f 0900 	mov.w	r9, #0
 800cbbc:	e7c9      	b.n	800cb52 <_printf_float+0x146>
 800cbbe:	b913      	cbnz	r3, 800cbc6 <_printf_float+0x1ba>
 800cbc0:	6822      	ldr	r2, [r4, #0]
 800cbc2:	07d0      	lsls	r0, r2, #31
 800cbc4:	d501      	bpl.n	800cbca <_printf_float+0x1be>
 800cbc6:	3302      	adds	r3, #2
 800cbc8:	e7f3      	b.n	800cbb2 <_printf_float+0x1a6>
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e7f1      	b.n	800cbb2 <_printf_float+0x1a6>
 800cbce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800cbd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	db05      	blt.n	800cbe6 <_printf_float+0x1da>
 800cbda:	6822      	ldr	r2, [r4, #0]
 800cbdc:	6123      	str	r3, [r4, #16]
 800cbde:	07d1      	lsls	r1, r2, #31
 800cbe0:	d5e8      	bpl.n	800cbb4 <_printf_float+0x1a8>
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	e7e5      	b.n	800cbb2 <_printf_float+0x1a6>
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	bfd4      	ite	le
 800cbea:	f1c3 0302 	rsble	r3, r3, #2
 800cbee:	2301      	movgt	r3, #1
 800cbf0:	4413      	add	r3, r2
 800cbf2:	e7de      	b.n	800cbb2 <_printf_float+0x1a6>
 800cbf4:	6823      	ldr	r3, [r4, #0]
 800cbf6:	055a      	lsls	r2, r3, #21
 800cbf8:	d407      	bmi.n	800cc0a <_printf_float+0x1fe>
 800cbfa:	6923      	ldr	r3, [r4, #16]
 800cbfc:	4642      	mov	r2, r8
 800cbfe:	4631      	mov	r1, r6
 800cc00:	4628      	mov	r0, r5
 800cc02:	47b8      	blx	r7
 800cc04:	3001      	adds	r0, #1
 800cc06:	d12b      	bne.n	800cc60 <_printf_float+0x254>
 800cc08:	e761      	b.n	800cace <_printf_float+0xc2>
 800cc0a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cc0e:	f240 80e2 	bls.w	800cdd6 <_printf_float+0x3ca>
 800cc12:	2200      	movs	r2, #0
 800cc14:	2300      	movs	r3, #0
 800cc16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc1a:	f7f3 ff81 	bl	8000b20 <__aeabi_dcmpeq>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d03c      	beq.n	800cc9c <_printf_float+0x290>
 800cc22:	2301      	movs	r3, #1
 800cc24:	4a38      	ldr	r2, [pc, #224]	; (800cd08 <_printf_float+0x2fc>)
 800cc26:	4631      	mov	r1, r6
 800cc28:	4628      	mov	r0, r5
 800cc2a:	47b8      	blx	r7
 800cc2c:	3001      	adds	r0, #1
 800cc2e:	f43f af4e 	beq.w	800cace <_printf_float+0xc2>
 800cc32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc36:	429a      	cmp	r2, r3
 800cc38:	db02      	blt.n	800cc40 <_printf_float+0x234>
 800cc3a:	6823      	ldr	r3, [r4, #0]
 800cc3c:	07d8      	lsls	r0, r3, #31
 800cc3e:	d50f      	bpl.n	800cc60 <_printf_float+0x254>
 800cc40:	9b05      	ldr	r3, [sp, #20]
 800cc42:	9a04      	ldr	r2, [sp, #16]
 800cc44:	4631      	mov	r1, r6
 800cc46:	4628      	mov	r0, r5
 800cc48:	47b8      	blx	r7
 800cc4a:	3001      	adds	r0, #1
 800cc4c:	f43f af3f 	beq.w	800cace <_printf_float+0xc2>
 800cc50:	f04f 0800 	mov.w	r8, #0
 800cc54:	f104 091a 	add.w	r9, r4, #26
 800cc58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	4598      	cmp	r8, r3
 800cc5e:	db12      	blt.n	800cc86 <_printf_float+0x27a>
 800cc60:	6823      	ldr	r3, [r4, #0]
 800cc62:	079b      	lsls	r3, r3, #30
 800cc64:	d509      	bpl.n	800cc7a <_printf_float+0x26e>
 800cc66:	f04f 0800 	mov.w	r8, #0
 800cc6a:	f104 0919 	add.w	r9, r4, #25
 800cc6e:	68e3      	ldr	r3, [r4, #12]
 800cc70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc72:	1a9b      	subs	r3, r3, r2
 800cc74:	4598      	cmp	r8, r3
 800cc76:	f2c0 80ee 	blt.w	800ce56 <_printf_float+0x44a>
 800cc7a:	68e0      	ldr	r0, [r4, #12]
 800cc7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc7e:	4298      	cmp	r0, r3
 800cc80:	bfb8      	it	lt
 800cc82:	4618      	movlt	r0, r3
 800cc84:	e725      	b.n	800cad2 <_printf_float+0xc6>
 800cc86:	2301      	movs	r3, #1
 800cc88:	464a      	mov	r2, r9
 800cc8a:	4631      	mov	r1, r6
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	47b8      	blx	r7
 800cc90:	3001      	adds	r0, #1
 800cc92:	f43f af1c 	beq.w	800cace <_printf_float+0xc2>
 800cc96:	f108 0801 	add.w	r8, r8, #1
 800cc9a:	e7dd      	b.n	800cc58 <_printf_float+0x24c>
 800cc9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	dc34      	bgt.n	800cd0c <_printf_float+0x300>
 800cca2:	2301      	movs	r3, #1
 800cca4:	4a18      	ldr	r2, [pc, #96]	; (800cd08 <_printf_float+0x2fc>)
 800cca6:	4631      	mov	r1, r6
 800cca8:	4628      	mov	r0, r5
 800ccaa:	47b8      	blx	r7
 800ccac:	3001      	adds	r0, #1
 800ccae:	f43f af0e 	beq.w	800cace <_printf_float+0xc2>
 800ccb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccb4:	b923      	cbnz	r3, 800ccc0 <_printf_float+0x2b4>
 800ccb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccb8:	b913      	cbnz	r3, 800ccc0 <_printf_float+0x2b4>
 800ccba:	6823      	ldr	r3, [r4, #0]
 800ccbc:	07d9      	lsls	r1, r3, #31
 800ccbe:	d5cf      	bpl.n	800cc60 <_printf_float+0x254>
 800ccc0:	9b05      	ldr	r3, [sp, #20]
 800ccc2:	9a04      	ldr	r2, [sp, #16]
 800ccc4:	4631      	mov	r1, r6
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	47b8      	blx	r7
 800ccca:	3001      	adds	r0, #1
 800cccc:	f43f aeff 	beq.w	800cace <_printf_float+0xc2>
 800ccd0:	f04f 0900 	mov.w	r9, #0
 800ccd4:	f104 0a1a 	add.w	sl, r4, #26
 800ccd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccda:	425b      	negs	r3, r3
 800ccdc:	4599      	cmp	r9, r3
 800ccde:	db01      	blt.n	800cce4 <_printf_float+0x2d8>
 800cce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cce2:	e78b      	b.n	800cbfc <_printf_float+0x1f0>
 800cce4:	2301      	movs	r3, #1
 800cce6:	4652      	mov	r2, sl
 800cce8:	4631      	mov	r1, r6
 800ccea:	4628      	mov	r0, r5
 800ccec:	47b8      	blx	r7
 800ccee:	3001      	adds	r0, #1
 800ccf0:	f43f aeed 	beq.w	800cace <_printf_float+0xc2>
 800ccf4:	f109 0901 	add.w	r9, r9, #1
 800ccf8:	e7ee      	b.n	800ccd8 <_printf_float+0x2cc>
 800ccfa:	bf00      	nop
 800ccfc:	7fefffff 	.word	0x7fefffff
 800cd00:	080122f2 	.word	0x080122f2
 800cd04:	080122f6 	.word	0x080122f6
 800cd08:	08012302 	.word	0x08012302
 800cd0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd10:	429a      	cmp	r2, r3
 800cd12:	bfa8      	it	ge
 800cd14:	461a      	movge	r2, r3
 800cd16:	2a00      	cmp	r2, #0
 800cd18:	4691      	mov	r9, r2
 800cd1a:	dc38      	bgt.n	800cd8e <_printf_float+0x382>
 800cd1c:	f104 031a 	add.w	r3, r4, #26
 800cd20:	f04f 0b00 	mov.w	fp, #0
 800cd24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd28:	9306      	str	r3, [sp, #24]
 800cd2a:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800cd2e:	ebaa 0309 	sub.w	r3, sl, r9
 800cd32:	459b      	cmp	fp, r3
 800cd34:	db33      	blt.n	800cd9e <_printf_float+0x392>
 800cd36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	db3a      	blt.n	800cdb4 <_printf_float+0x3a8>
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	07da      	lsls	r2, r3, #31
 800cd42:	d437      	bmi.n	800cdb4 <_printf_float+0x3a8>
 800cd44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd46:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd48:	eba3 020a 	sub.w	r2, r3, sl
 800cd4c:	eba3 0901 	sub.w	r9, r3, r1
 800cd50:	4591      	cmp	r9, r2
 800cd52:	bfa8      	it	ge
 800cd54:	4691      	movge	r9, r2
 800cd56:	f1b9 0f00 	cmp.w	r9, #0
 800cd5a:	dc33      	bgt.n	800cdc4 <_printf_float+0x3b8>
 800cd5c:	f04f 0800 	mov.w	r8, #0
 800cd60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd64:	f104 0a1a 	add.w	sl, r4, #26
 800cd68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd6c:	1a9b      	subs	r3, r3, r2
 800cd6e:	eba3 0309 	sub.w	r3, r3, r9
 800cd72:	4598      	cmp	r8, r3
 800cd74:	f6bf af74 	bge.w	800cc60 <_printf_float+0x254>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	4652      	mov	r2, sl
 800cd7c:	4631      	mov	r1, r6
 800cd7e:	4628      	mov	r0, r5
 800cd80:	47b8      	blx	r7
 800cd82:	3001      	adds	r0, #1
 800cd84:	f43f aea3 	beq.w	800cace <_printf_float+0xc2>
 800cd88:	f108 0801 	add.w	r8, r8, #1
 800cd8c:	e7ec      	b.n	800cd68 <_printf_float+0x35c>
 800cd8e:	4613      	mov	r3, r2
 800cd90:	4631      	mov	r1, r6
 800cd92:	4642      	mov	r2, r8
 800cd94:	4628      	mov	r0, r5
 800cd96:	47b8      	blx	r7
 800cd98:	3001      	adds	r0, #1
 800cd9a:	d1bf      	bne.n	800cd1c <_printf_float+0x310>
 800cd9c:	e697      	b.n	800cace <_printf_float+0xc2>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	9a06      	ldr	r2, [sp, #24]
 800cda2:	4631      	mov	r1, r6
 800cda4:	4628      	mov	r0, r5
 800cda6:	47b8      	blx	r7
 800cda8:	3001      	adds	r0, #1
 800cdaa:	f43f ae90 	beq.w	800cace <_printf_float+0xc2>
 800cdae:	f10b 0b01 	add.w	fp, fp, #1
 800cdb2:	e7ba      	b.n	800cd2a <_printf_float+0x31e>
 800cdb4:	9b05      	ldr	r3, [sp, #20]
 800cdb6:	9a04      	ldr	r2, [sp, #16]
 800cdb8:	4631      	mov	r1, r6
 800cdba:	4628      	mov	r0, r5
 800cdbc:	47b8      	blx	r7
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	d1c0      	bne.n	800cd44 <_printf_float+0x338>
 800cdc2:	e684      	b.n	800cace <_printf_float+0xc2>
 800cdc4:	464b      	mov	r3, r9
 800cdc6:	eb08 020a 	add.w	r2, r8, sl
 800cdca:	4631      	mov	r1, r6
 800cdcc:	4628      	mov	r0, r5
 800cdce:	47b8      	blx	r7
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	d1c3      	bne.n	800cd5c <_printf_float+0x350>
 800cdd4:	e67b      	b.n	800cace <_printf_float+0xc2>
 800cdd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdd8:	2a01      	cmp	r2, #1
 800cdda:	dc01      	bgt.n	800cde0 <_printf_float+0x3d4>
 800cddc:	07db      	lsls	r3, r3, #31
 800cdde:	d537      	bpl.n	800ce50 <_printf_float+0x444>
 800cde0:	2301      	movs	r3, #1
 800cde2:	4642      	mov	r2, r8
 800cde4:	4631      	mov	r1, r6
 800cde6:	4628      	mov	r0, r5
 800cde8:	47b8      	blx	r7
 800cdea:	3001      	adds	r0, #1
 800cdec:	f43f ae6f 	beq.w	800cace <_printf_float+0xc2>
 800cdf0:	9b05      	ldr	r3, [sp, #20]
 800cdf2:	9a04      	ldr	r2, [sp, #16]
 800cdf4:	4631      	mov	r1, r6
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	47b8      	blx	r7
 800cdfa:	3001      	adds	r0, #1
 800cdfc:	f43f ae67 	beq.w	800cace <_printf_float+0xc2>
 800ce00:	2200      	movs	r2, #0
 800ce02:	2300      	movs	r3, #0
 800ce04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce08:	f7f3 fe8a 	bl	8000b20 <__aeabi_dcmpeq>
 800ce0c:	b158      	cbz	r0, 800ce26 <_printf_float+0x41a>
 800ce0e:	f04f 0800 	mov.w	r8, #0
 800ce12:	f104 0a1a 	add.w	sl, r4, #26
 800ce16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	4598      	cmp	r8, r3
 800ce1c:	db0d      	blt.n	800ce3a <_printf_float+0x42e>
 800ce1e:	464b      	mov	r3, r9
 800ce20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce24:	e6eb      	b.n	800cbfe <_printf_float+0x1f2>
 800ce26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce28:	f108 0201 	add.w	r2, r8, #1
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	4631      	mov	r1, r6
 800ce30:	4628      	mov	r0, r5
 800ce32:	47b8      	blx	r7
 800ce34:	3001      	adds	r0, #1
 800ce36:	d1f2      	bne.n	800ce1e <_printf_float+0x412>
 800ce38:	e649      	b.n	800cace <_printf_float+0xc2>
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	4652      	mov	r2, sl
 800ce3e:	4631      	mov	r1, r6
 800ce40:	4628      	mov	r0, r5
 800ce42:	47b8      	blx	r7
 800ce44:	3001      	adds	r0, #1
 800ce46:	f43f ae42 	beq.w	800cace <_printf_float+0xc2>
 800ce4a:	f108 0801 	add.w	r8, r8, #1
 800ce4e:	e7e2      	b.n	800ce16 <_printf_float+0x40a>
 800ce50:	2301      	movs	r3, #1
 800ce52:	4642      	mov	r2, r8
 800ce54:	e7eb      	b.n	800ce2e <_printf_float+0x422>
 800ce56:	2301      	movs	r3, #1
 800ce58:	464a      	mov	r2, r9
 800ce5a:	4631      	mov	r1, r6
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	47b8      	blx	r7
 800ce60:	3001      	adds	r0, #1
 800ce62:	f43f ae34 	beq.w	800cace <_printf_float+0xc2>
 800ce66:	f108 0801 	add.w	r8, r8, #1
 800ce6a:	e700      	b.n	800cc6e <_printf_float+0x262>
 800ce6c:	4642      	mov	r2, r8
 800ce6e:	464b      	mov	r3, r9
 800ce70:	4640      	mov	r0, r8
 800ce72:	4649      	mov	r1, r9
 800ce74:	f7f3 fe86 	bl	8000b84 <__aeabi_dcmpun>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	f43f ae2d 	beq.w	800cad8 <_printf_float+0xcc>
 800ce7e:	4b01      	ldr	r3, [pc, #4]	; (800ce84 <_printf_float+0x478>)
 800ce80:	4a01      	ldr	r2, [pc, #4]	; (800ce88 <_printf_float+0x47c>)
 800ce82:	e60e      	b.n	800caa2 <_printf_float+0x96>
 800ce84:	080122fa 	.word	0x080122fa
 800ce88:	080122fe 	.word	0x080122fe

0800ce8c <_printf_common>:
 800ce8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce90:	4691      	mov	r9, r2
 800ce92:	461f      	mov	r7, r3
 800ce94:	688a      	ldr	r2, [r1, #8]
 800ce96:	690b      	ldr	r3, [r1, #16]
 800ce98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	bfb8      	it	lt
 800cea0:	4613      	movlt	r3, r2
 800cea2:	f8c9 3000 	str.w	r3, [r9]
 800cea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ceaa:	4606      	mov	r6, r0
 800ceac:	460c      	mov	r4, r1
 800ceae:	b112      	cbz	r2, 800ceb6 <_printf_common+0x2a>
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	f8c9 3000 	str.w	r3, [r9]
 800ceb6:	6823      	ldr	r3, [r4, #0]
 800ceb8:	0699      	lsls	r1, r3, #26
 800ceba:	bf42      	ittt	mi
 800cebc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cec0:	3302      	addmi	r3, #2
 800cec2:	f8c9 3000 	strmi.w	r3, [r9]
 800cec6:	6825      	ldr	r5, [r4, #0]
 800cec8:	f015 0506 	ands.w	r5, r5, #6
 800cecc:	d107      	bne.n	800cede <_printf_common+0x52>
 800cece:	f104 0a19 	add.w	sl, r4, #25
 800ced2:	68e3      	ldr	r3, [r4, #12]
 800ced4:	f8d9 2000 	ldr.w	r2, [r9]
 800ced8:	1a9b      	subs	r3, r3, r2
 800ceda:	429d      	cmp	r5, r3
 800cedc:	db29      	blt.n	800cf32 <_printf_common+0xa6>
 800cede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cee2:	6822      	ldr	r2, [r4, #0]
 800cee4:	3300      	adds	r3, #0
 800cee6:	bf18      	it	ne
 800cee8:	2301      	movne	r3, #1
 800ceea:	0692      	lsls	r2, r2, #26
 800ceec:	d42e      	bmi.n	800cf4c <_printf_common+0xc0>
 800ceee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cef2:	4639      	mov	r1, r7
 800cef4:	4630      	mov	r0, r6
 800cef6:	47c0      	blx	r8
 800cef8:	3001      	adds	r0, #1
 800cefa:	d021      	beq.n	800cf40 <_printf_common+0xb4>
 800cefc:	6823      	ldr	r3, [r4, #0]
 800cefe:	68e5      	ldr	r5, [r4, #12]
 800cf00:	f8d9 2000 	ldr.w	r2, [r9]
 800cf04:	f003 0306 	and.w	r3, r3, #6
 800cf08:	2b04      	cmp	r3, #4
 800cf0a:	bf08      	it	eq
 800cf0c:	1aad      	subeq	r5, r5, r2
 800cf0e:	68a3      	ldr	r3, [r4, #8]
 800cf10:	6922      	ldr	r2, [r4, #16]
 800cf12:	bf0c      	ite	eq
 800cf14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf18:	2500      	movne	r5, #0
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	bfc4      	itt	gt
 800cf1e:	1a9b      	subgt	r3, r3, r2
 800cf20:	18ed      	addgt	r5, r5, r3
 800cf22:	f04f 0900 	mov.w	r9, #0
 800cf26:	341a      	adds	r4, #26
 800cf28:	454d      	cmp	r5, r9
 800cf2a:	d11b      	bne.n	800cf64 <_printf_common+0xd8>
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf32:	2301      	movs	r3, #1
 800cf34:	4652      	mov	r2, sl
 800cf36:	4639      	mov	r1, r7
 800cf38:	4630      	mov	r0, r6
 800cf3a:	47c0      	blx	r8
 800cf3c:	3001      	adds	r0, #1
 800cf3e:	d103      	bne.n	800cf48 <_printf_common+0xbc>
 800cf40:	f04f 30ff 	mov.w	r0, #4294967295
 800cf44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf48:	3501      	adds	r5, #1
 800cf4a:	e7c2      	b.n	800ced2 <_printf_common+0x46>
 800cf4c:	18e1      	adds	r1, r4, r3
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	2030      	movs	r0, #48	; 0x30
 800cf52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf56:	4422      	add	r2, r4
 800cf58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf60:	3302      	adds	r3, #2
 800cf62:	e7c4      	b.n	800ceee <_printf_common+0x62>
 800cf64:	2301      	movs	r3, #1
 800cf66:	4622      	mov	r2, r4
 800cf68:	4639      	mov	r1, r7
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	47c0      	blx	r8
 800cf6e:	3001      	adds	r0, #1
 800cf70:	d0e6      	beq.n	800cf40 <_printf_common+0xb4>
 800cf72:	f109 0901 	add.w	r9, r9, #1
 800cf76:	e7d7      	b.n	800cf28 <_printf_common+0x9c>

0800cf78 <_printf_i>:
 800cf78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf7c:	4617      	mov	r7, r2
 800cf7e:	7e0a      	ldrb	r2, [r1, #24]
 800cf80:	b085      	sub	sp, #20
 800cf82:	2a6e      	cmp	r2, #110	; 0x6e
 800cf84:	4698      	mov	r8, r3
 800cf86:	4606      	mov	r6, r0
 800cf88:	460c      	mov	r4, r1
 800cf8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf8c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800cf90:	f000 80bc 	beq.w	800d10c <_printf_i+0x194>
 800cf94:	d81a      	bhi.n	800cfcc <_printf_i+0x54>
 800cf96:	2a63      	cmp	r2, #99	; 0x63
 800cf98:	d02e      	beq.n	800cff8 <_printf_i+0x80>
 800cf9a:	d80a      	bhi.n	800cfb2 <_printf_i+0x3a>
 800cf9c:	2a00      	cmp	r2, #0
 800cf9e:	f000 80c8 	beq.w	800d132 <_printf_i+0x1ba>
 800cfa2:	2a58      	cmp	r2, #88	; 0x58
 800cfa4:	f000 808a 	beq.w	800d0bc <_printf_i+0x144>
 800cfa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800cfb0:	e02a      	b.n	800d008 <_printf_i+0x90>
 800cfb2:	2a64      	cmp	r2, #100	; 0x64
 800cfb4:	d001      	beq.n	800cfba <_printf_i+0x42>
 800cfb6:	2a69      	cmp	r2, #105	; 0x69
 800cfb8:	d1f6      	bne.n	800cfa8 <_printf_i+0x30>
 800cfba:	6821      	ldr	r1, [r4, #0]
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	f011 0f80 	tst.w	r1, #128	; 0x80
 800cfc2:	d023      	beq.n	800d00c <_printf_i+0x94>
 800cfc4:	1d11      	adds	r1, r2, #4
 800cfc6:	6019      	str	r1, [r3, #0]
 800cfc8:	6813      	ldr	r3, [r2, #0]
 800cfca:	e027      	b.n	800d01c <_printf_i+0xa4>
 800cfcc:	2a73      	cmp	r2, #115	; 0x73
 800cfce:	f000 80b4 	beq.w	800d13a <_printf_i+0x1c2>
 800cfd2:	d808      	bhi.n	800cfe6 <_printf_i+0x6e>
 800cfd4:	2a6f      	cmp	r2, #111	; 0x6f
 800cfd6:	d02a      	beq.n	800d02e <_printf_i+0xb6>
 800cfd8:	2a70      	cmp	r2, #112	; 0x70
 800cfda:	d1e5      	bne.n	800cfa8 <_printf_i+0x30>
 800cfdc:	680a      	ldr	r2, [r1, #0]
 800cfde:	f042 0220 	orr.w	r2, r2, #32
 800cfe2:	600a      	str	r2, [r1, #0]
 800cfe4:	e003      	b.n	800cfee <_printf_i+0x76>
 800cfe6:	2a75      	cmp	r2, #117	; 0x75
 800cfe8:	d021      	beq.n	800d02e <_printf_i+0xb6>
 800cfea:	2a78      	cmp	r2, #120	; 0x78
 800cfec:	d1dc      	bne.n	800cfa8 <_printf_i+0x30>
 800cfee:	2278      	movs	r2, #120	; 0x78
 800cff0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800cff4:	496e      	ldr	r1, [pc, #440]	; (800d1b0 <_printf_i+0x238>)
 800cff6:	e064      	b.n	800d0c2 <_printf_i+0x14a>
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800cffe:	1d11      	adds	r1, r2, #4
 800d000:	6019      	str	r1, [r3, #0]
 800d002:	6813      	ldr	r3, [r2, #0]
 800d004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d008:	2301      	movs	r3, #1
 800d00a:	e0a3      	b.n	800d154 <_printf_i+0x1dc>
 800d00c:	f011 0f40 	tst.w	r1, #64	; 0x40
 800d010:	f102 0104 	add.w	r1, r2, #4
 800d014:	6019      	str	r1, [r3, #0]
 800d016:	d0d7      	beq.n	800cfc8 <_printf_i+0x50>
 800d018:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	da03      	bge.n	800d028 <_printf_i+0xb0>
 800d020:	222d      	movs	r2, #45	; 0x2d
 800d022:	425b      	negs	r3, r3
 800d024:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d028:	4962      	ldr	r1, [pc, #392]	; (800d1b4 <_printf_i+0x23c>)
 800d02a:	220a      	movs	r2, #10
 800d02c:	e017      	b.n	800d05e <_printf_i+0xe6>
 800d02e:	6820      	ldr	r0, [r4, #0]
 800d030:	6819      	ldr	r1, [r3, #0]
 800d032:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d036:	d003      	beq.n	800d040 <_printf_i+0xc8>
 800d038:	1d08      	adds	r0, r1, #4
 800d03a:	6018      	str	r0, [r3, #0]
 800d03c:	680b      	ldr	r3, [r1, #0]
 800d03e:	e006      	b.n	800d04e <_printf_i+0xd6>
 800d040:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d044:	f101 0004 	add.w	r0, r1, #4
 800d048:	6018      	str	r0, [r3, #0]
 800d04a:	d0f7      	beq.n	800d03c <_printf_i+0xc4>
 800d04c:	880b      	ldrh	r3, [r1, #0]
 800d04e:	4959      	ldr	r1, [pc, #356]	; (800d1b4 <_printf_i+0x23c>)
 800d050:	2a6f      	cmp	r2, #111	; 0x6f
 800d052:	bf14      	ite	ne
 800d054:	220a      	movne	r2, #10
 800d056:	2208      	moveq	r2, #8
 800d058:	2000      	movs	r0, #0
 800d05a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800d05e:	6865      	ldr	r5, [r4, #4]
 800d060:	60a5      	str	r5, [r4, #8]
 800d062:	2d00      	cmp	r5, #0
 800d064:	f2c0 809c 	blt.w	800d1a0 <_printf_i+0x228>
 800d068:	6820      	ldr	r0, [r4, #0]
 800d06a:	f020 0004 	bic.w	r0, r0, #4
 800d06e:	6020      	str	r0, [r4, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d13f      	bne.n	800d0f4 <_printf_i+0x17c>
 800d074:	2d00      	cmp	r5, #0
 800d076:	f040 8095 	bne.w	800d1a4 <_printf_i+0x22c>
 800d07a:	4675      	mov	r5, lr
 800d07c:	2a08      	cmp	r2, #8
 800d07e:	d10b      	bne.n	800d098 <_printf_i+0x120>
 800d080:	6823      	ldr	r3, [r4, #0]
 800d082:	07da      	lsls	r2, r3, #31
 800d084:	d508      	bpl.n	800d098 <_printf_i+0x120>
 800d086:	6923      	ldr	r3, [r4, #16]
 800d088:	6862      	ldr	r2, [r4, #4]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	bfde      	ittt	le
 800d08e:	2330      	movle	r3, #48	; 0x30
 800d090:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d094:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d098:	ebae 0305 	sub.w	r3, lr, r5
 800d09c:	6123      	str	r3, [r4, #16]
 800d09e:	f8cd 8000 	str.w	r8, [sp]
 800d0a2:	463b      	mov	r3, r7
 800d0a4:	aa03      	add	r2, sp, #12
 800d0a6:	4621      	mov	r1, r4
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f7ff feef 	bl	800ce8c <_printf_common>
 800d0ae:	3001      	adds	r0, #1
 800d0b0:	d155      	bne.n	800d15e <_printf_i+0x1e6>
 800d0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b6:	b005      	add	sp, #20
 800d0b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800d0c0:	493c      	ldr	r1, [pc, #240]	; (800d1b4 <_printf_i+0x23c>)
 800d0c2:	6822      	ldr	r2, [r4, #0]
 800d0c4:	6818      	ldr	r0, [r3, #0]
 800d0c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d0ca:	f100 0504 	add.w	r5, r0, #4
 800d0ce:	601d      	str	r5, [r3, #0]
 800d0d0:	d001      	beq.n	800d0d6 <_printf_i+0x15e>
 800d0d2:	6803      	ldr	r3, [r0, #0]
 800d0d4:	e002      	b.n	800d0dc <_printf_i+0x164>
 800d0d6:	0655      	lsls	r5, r2, #25
 800d0d8:	d5fb      	bpl.n	800d0d2 <_printf_i+0x15a>
 800d0da:	8803      	ldrh	r3, [r0, #0]
 800d0dc:	07d0      	lsls	r0, r2, #31
 800d0de:	bf44      	itt	mi
 800d0e0:	f042 0220 	orrmi.w	r2, r2, #32
 800d0e4:	6022      	strmi	r2, [r4, #0]
 800d0e6:	b91b      	cbnz	r3, 800d0f0 <_printf_i+0x178>
 800d0e8:	6822      	ldr	r2, [r4, #0]
 800d0ea:	f022 0220 	bic.w	r2, r2, #32
 800d0ee:	6022      	str	r2, [r4, #0]
 800d0f0:	2210      	movs	r2, #16
 800d0f2:	e7b1      	b.n	800d058 <_printf_i+0xe0>
 800d0f4:	4675      	mov	r5, lr
 800d0f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800d0fa:	fb02 3310 	mls	r3, r2, r0, r3
 800d0fe:	5ccb      	ldrb	r3, [r1, r3]
 800d100:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d104:	4603      	mov	r3, r0
 800d106:	2800      	cmp	r0, #0
 800d108:	d1f5      	bne.n	800d0f6 <_printf_i+0x17e>
 800d10a:	e7b7      	b.n	800d07c <_printf_i+0x104>
 800d10c:	6808      	ldr	r0, [r1, #0]
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	6949      	ldr	r1, [r1, #20]
 800d112:	f010 0f80 	tst.w	r0, #128	; 0x80
 800d116:	d004      	beq.n	800d122 <_printf_i+0x1aa>
 800d118:	1d10      	adds	r0, r2, #4
 800d11a:	6018      	str	r0, [r3, #0]
 800d11c:	6813      	ldr	r3, [r2, #0]
 800d11e:	6019      	str	r1, [r3, #0]
 800d120:	e007      	b.n	800d132 <_printf_i+0x1ba>
 800d122:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d126:	f102 0004 	add.w	r0, r2, #4
 800d12a:	6018      	str	r0, [r3, #0]
 800d12c:	6813      	ldr	r3, [r2, #0]
 800d12e:	d0f6      	beq.n	800d11e <_printf_i+0x1a6>
 800d130:	8019      	strh	r1, [r3, #0]
 800d132:	2300      	movs	r3, #0
 800d134:	6123      	str	r3, [r4, #16]
 800d136:	4675      	mov	r5, lr
 800d138:	e7b1      	b.n	800d09e <_printf_i+0x126>
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	1d11      	adds	r1, r2, #4
 800d13e:	6019      	str	r1, [r3, #0]
 800d140:	6815      	ldr	r5, [r2, #0]
 800d142:	6862      	ldr	r2, [r4, #4]
 800d144:	2100      	movs	r1, #0
 800d146:	4628      	mov	r0, r5
 800d148:	f7f3 f87a 	bl	8000240 <memchr>
 800d14c:	b108      	cbz	r0, 800d152 <_printf_i+0x1da>
 800d14e:	1b40      	subs	r0, r0, r5
 800d150:	6060      	str	r0, [r4, #4]
 800d152:	6863      	ldr	r3, [r4, #4]
 800d154:	6123      	str	r3, [r4, #16]
 800d156:	2300      	movs	r3, #0
 800d158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d15c:	e79f      	b.n	800d09e <_printf_i+0x126>
 800d15e:	6923      	ldr	r3, [r4, #16]
 800d160:	462a      	mov	r2, r5
 800d162:	4639      	mov	r1, r7
 800d164:	4630      	mov	r0, r6
 800d166:	47c0      	blx	r8
 800d168:	3001      	adds	r0, #1
 800d16a:	d0a2      	beq.n	800d0b2 <_printf_i+0x13a>
 800d16c:	6823      	ldr	r3, [r4, #0]
 800d16e:	079b      	lsls	r3, r3, #30
 800d170:	d507      	bpl.n	800d182 <_printf_i+0x20a>
 800d172:	2500      	movs	r5, #0
 800d174:	f104 0919 	add.w	r9, r4, #25
 800d178:	68e3      	ldr	r3, [r4, #12]
 800d17a:	9a03      	ldr	r2, [sp, #12]
 800d17c:	1a9b      	subs	r3, r3, r2
 800d17e:	429d      	cmp	r5, r3
 800d180:	db05      	blt.n	800d18e <_printf_i+0x216>
 800d182:	68e0      	ldr	r0, [r4, #12]
 800d184:	9b03      	ldr	r3, [sp, #12]
 800d186:	4298      	cmp	r0, r3
 800d188:	bfb8      	it	lt
 800d18a:	4618      	movlt	r0, r3
 800d18c:	e793      	b.n	800d0b6 <_printf_i+0x13e>
 800d18e:	2301      	movs	r3, #1
 800d190:	464a      	mov	r2, r9
 800d192:	4639      	mov	r1, r7
 800d194:	4630      	mov	r0, r6
 800d196:	47c0      	blx	r8
 800d198:	3001      	adds	r0, #1
 800d19a:	d08a      	beq.n	800d0b2 <_printf_i+0x13a>
 800d19c:	3501      	adds	r5, #1
 800d19e:	e7eb      	b.n	800d178 <_printf_i+0x200>
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1a7      	bne.n	800d0f4 <_printf_i+0x17c>
 800d1a4:	780b      	ldrb	r3, [r1, #0]
 800d1a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1ae:	e765      	b.n	800d07c <_printf_i+0x104>
 800d1b0:	08012315 	.word	0x08012315
 800d1b4:	08012304 	.word	0x08012304

0800d1b8 <iprintf>:
 800d1b8:	b40f      	push	{r0, r1, r2, r3}
 800d1ba:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <iprintf+0x2c>)
 800d1bc:	b513      	push	{r0, r1, r4, lr}
 800d1be:	681c      	ldr	r4, [r3, #0]
 800d1c0:	b124      	cbz	r4, 800d1cc <iprintf+0x14>
 800d1c2:	69a3      	ldr	r3, [r4, #24]
 800d1c4:	b913      	cbnz	r3, 800d1cc <iprintf+0x14>
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f001 f9f0 	bl	800e5ac <__sinit>
 800d1cc:	ab05      	add	r3, sp, #20
 800d1ce:	9a04      	ldr	r2, [sp, #16]
 800d1d0:	68a1      	ldr	r1, [r4, #8]
 800d1d2:	9301      	str	r3, [sp, #4]
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f001 ff8d 	bl	800f0f4 <_vfiprintf_r>
 800d1da:	b002      	add	sp, #8
 800d1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1e0:	b004      	add	sp, #16
 800d1e2:	4770      	bx	lr
 800d1e4:	2000017c 	.word	0x2000017c

0800d1e8 <_puts_r>:
 800d1e8:	b570      	push	{r4, r5, r6, lr}
 800d1ea:	460e      	mov	r6, r1
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	b118      	cbz	r0, 800d1f8 <_puts_r+0x10>
 800d1f0:	6983      	ldr	r3, [r0, #24]
 800d1f2:	b90b      	cbnz	r3, 800d1f8 <_puts_r+0x10>
 800d1f4:	f001 f9da 	bl	800e5ac <__sinit>
 800d1f8:	69ab      	ldr	r3, [r5, #24]
 800d1fa:	68ac      	ldr	r4, [r5, #8]
 800d1fc:	b913      	cbnz	r3, 800d204 <_puts_r+0x1c>
 800d1fe:	4628      	mov	r0, r5
 800d200:	f001 f9d4 	bl	800e5ac <__sinit>
 800d204:	4b23      	ldr	r3, [pc, #140]	; (800d294 <_puts_r+0xac>)
 800d206:	429c      	cmp	r4, r3
 800d208:	d117      	bne.n	800d23a <_puts_r+0x52>
 800d20a:	686c      	ldr	r4, [r5, #4]
 800d20c:	89a3      	ldrh	r3, [r4, #12]
 800d20e:	071b      	lsls	r3, r3, #28
 800d210:	d51d      	bpl.n	800d24e <_puts_r+0x66>
 800d212:	6923      	ldr	r3, [r4, #16]
 800d214:	b1db      	cbz	r3, 800d24e <_puts_r+0x66>
 800d216:	3e01      	subs	r6, #1
 800d218:	68a3      	ldr	r3, [r4, #8]
 800d21a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d21e:	3b01      	subs	r3, #1
 800d220:	60a3      	str	r3, [r4, #8]
 800d222:	b9e9      	cbnz	r1, 800d260 <_puts_r+0x78>
 800d224:	2b00      	cmp	r3, #0
 800d226:	da2e      	bge.n	800d286 <_puts_r+0x9e>
 800d228:	4622      	mov	r2, r4
 800d22a:	210a      	movs	r1, #10
 800d22c:	4628      	mov	r0, r5
 800d22e:	f000 f98f 	bl	800d550 <__swbuf_r>
 800d232:	3001      	adds	r0, #1
 800d234:	d011      	beq.n	800d25a <_puts_r+0x72>
 800d236:	200a      	movs	r0, #10
 800d238:	bd70      	pop	{r4, r5, r6, pc}
 800d23a:	4b17      	ldr	r3, [pc, #92]	; (800d298 <_puts_r+0xb0>)
 800d23c:	429c      	cmp	r4, r3
 800d23e:	d101      	bne.n	800d244 <_puts_r+0x5c>
 800d240:	68ac      	ldr	r4, [r5, #8]
 800d242:	e7e3      	b.n	800d20c <_puts_r+0x24>
 800d244:	4b15      	ldr	r3, [pc, #84]	; (800d29c <_puts_r+0xb4>)
 800d246:	429c      	cmp	r4, r3
 800d248:	bf08      	it	eq
 800d24a:	68ec      	ldreq	r4, [r5, #12]
 800d24c:	e7de      	b.n	800d20c <_puts_r+0x24>
 800d24e:	4621      	mov	r1, r4
 800d250:	4628      	mov	r0, r5
 800d252:	f000 f9dd 	bl	800d610 <__swsetup_r>
 800d256:	2800      	cmp	r0, #0
 800d258:	d0dd      	beq.n	800d216 <_puts_r+0x2e>
 800d25a:	f04f 30ff 	mov.w	r0, #4294967295
 800d25e:	bd70      	pop	{r4, r5, r6, pc}
 800d260:	2b00      	cmp	r3, #0
 800d262:	da04      	bge.n	800d26e <_puts_r+0x86>
 800d264:	69a2      	ldr	r2, [r4, #24]
 800d266:	4293      	cmp	r3, r2
 800d268:	db06      	blt.n	800d278 <_puts_r+0x90>
 800d26a:	290a      	cmp	r1, #10
 800d26c:	d004      	beq.n	800d278 <_puts_r+0x90>
 800d26e:	6823      	ldr	r3, [r4, #0]
 800d270:	1c5a      	adds	r2, r3, #1
 800d272:	6022      	str	r2, [r4, #0]
 800d274:	7019      	strb	r1, [r3, #0]
 800d276:	e7cf      	b.n	800d218 <_puts_r+0x30>
 800d278:	4622      	mov	r2, r4
 800d27a:	4628      	mov	r0, r5
 800d27c:	f000 f968 	bl	800d550 <__swbuf_r>
 800d280:	3001      	adds	r0, #1
 800d282:	d1c9      	bne.n	800d218 <_puts_r+0x30>
 800d284:	e7e9      	b.n	800d25a <_puts_r+0x72>
 800d286:	6823      	ldr	r3, [r4, #0]
 800d288:	200a      	movs	r0, #10
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	6022      	str	r2, [r4, #0]
 800d28e:	7018      	strb	r0, [r3, #0]
 800d290:	bd70      	pop	{r4, r5, r6, pc}
 800d292:	bf00      	nop
 800d294:	08012454 	.word	0x08012454
 800d298:	08012474 	.word	0x08012474
 800d29c:	08012434 	.word	0x08012434

0800d2a0 <puts>:
 800d2a0:	4b02      	ldr	r3, [pc, #8]	; (800d2ac <puts+0xc>)
 800d2a2:	4601      	mov	r1, r0
 800d2a4:	6818      	ldr	r0, [r3, #0]
 800d2a6:	f7ff bf9f 	b.w	800d1e8 <_puts_r>
 800d2aa:	bf00      	nop
 800d2ac:	2000017c 	.word	0x2000017c

0800d2b0 <realloc>:
 800d2b0:	4b02      	ldr	r3, [pc, #8]	; (800d2bc <realloc+0xc>)
 800d2b2:	460a      	mov	r2, r1
 800d2b4:	4601      	mov	r1, r0
 800d2b6:	6818      	ldr	r0, [r3, #0]
 800d2b8:	f001 bd7c 	b.w	800edb4 <_realloc_r>
 800d2bc:	2000017c 	.word	0x2000017c

0800d2c0 <__srget_r>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	4605      	mov	r5, r0
 800d2c6:	b118      	cbz	r0, 800d2d0 <__srget_r+0x10>
 800d2c8:	6983      	ldr	r3, [r0, #24]
 800d2ca:	b90b      	cbnz	r3, 800d2d0 <__srget_r+0x10>
 800d2cc:	f001 f96e 	bl	800e5ac <__sinit>
 800d2d0:	4b0e      	ldr	r3, [pc, #56]	; (800d30c <__srget_r+0x4c>)
 800d2d2:	429c      	cmp	r4, r3
 800d2d4:	d10d      	bne.n	800d2f2 <__srget_r+0x32>
 800d2d6:	686c      	ldr	r4, [r5, #4]
 800d2d8:	4621      	mov	r1, r4
 800d2da:	4628      	mov	r0, r5
 800d2dc:	f002 f82a 	bl	800f334 <__srefill_r>
 800d2e0:	b988      	cbnz	r0, 800d306 <__srget_r+0x46>
 800d2e2:	6863      	ldr	r3, [r4, #4]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	6063      	str	r3, [r4, #4]
 800d2e8:	6823      	ldr	r3, [r4, #0]
 800d2ea:	1c5a      	adds	r2, r3, #1
 800d2ec:	6022      	str	r2, [r4, #0]
 800d2ee:	7818      	ldrb	r0, [r3, #0]
 800d2f0:	bd38      	pop	{r3, r4, r5, pc}
 800d2f2:	4b07      	ldr	r3, [pc, #28]	; (800d310 <__srget_r+0x50>)
 800d2f4:	429c      	cmp	r4, r3
 800d2f6:	d101      	bne.n	800d2fc <__srget_r+0x3c>
 800d2f8:	68ac      	ldr	r4, [r5, #8]
 800d2fa:	e7ed      	b.n	800d2d8 <__srget_r+0x18>
 800d2fc:	4b05      	ldr	r3, [pc, #20]	; (800d314 <__srget_r+0x54>)
 800d2fe:	429c      	cmp	r4, r3
 800d300:	bf08      	it	eq
 800d302:	68ec      	ldreq	r4, [r5, #12]
 800d304:	e7e8      	b.n	800d2d8 <__srget_r+0x18>
 800d306:	f04f 30ff 	mov.w	r0, #4294967295
 800d30a:	bd38      	pop	{r3, r4, r5, pc}
 800d30c:	08012454 	.word	0x08012454
 800d310:	08012474 	.word	0x08012474
 800d314:	08012434 	.word	0x08012434

0800d318 <_sbrk_r>:
 800d318:	b538      	push	{r3, r4, r5, lr}
 800d31a:	4c06      	ldr	r4, [pc, #24]	; (800d334 <_sbrk_r+0x1c>)
 800d31c:	2300      	movs	r3, #0
 800d31e:	4605      	mov	r5, r0
 800d320:	4608      	mov	r0, r1
 800d322:	6023      	str	r3, [r4, #0]
 800d324:	f002 f988 	bl	800f638 <_sbrk>
 800d328:	1c43      	adds	r3, r0, #1
 800d32a:	d102      	bne.n	800d332 <_sbrk_r+0x1a>
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	b103      	cbz	r3, 800d332 <_sbrk_r+0x1a>
 800d330:	602b      	str	r3, [r5, #0]
 800d332:	bd38      	pop	{r3, r4, r5, pc}
 800d334:	20002768 	.word	0x20002768

0800d338 <sniprintf>:
 800d338:	b40c      	push	{r2, r3}
 800d33a:	b530      	push	{r4, r5, lr}
 800d33c:	4b17      	ldr	r3, [pc, #92]	; (800d39c <sniprintf+0x64>)
 800d33e:	1e0c      	subs	r4, r1, #0
 800d340:	b09d      	sub	sp, #116	; 0x74
 800d342:	681d      	ldr	r5, [r3, #0]
 800d344:	da08      	bge.n	800d358 <sniprintf+0x20>
 800d346:	238b      	movs	r3, #139	; 0x8b
 800d348:	602b      	str	r3, [r5, #0]
 800d34a:	f04f 30ff 	mov.w	r0, #4294967295
 800d34e:	b01d      	add	sp, #116	; 0x74
 800d350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d354:	b002      	add	sp, #8
 800d356:	4770      	bx	lr
 800d358:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d35c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d360:	bf14      	ite	ne
 800d362:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d366:	4623      	moveq	r3, r4
 800d368:	9304      	str	r3, [sp, #16]
 800d36a:	9307      	str	r3, [sp, #28]
 800d36c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d370:	9002      	str	r0, [sp, #8]
 800d372:	9006      	str	r0, [sp, #24]
 800d374:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d378:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d37a:	ab21      	add	r3, sp, #132	; 0x84
 800d37c:	a902      	add	r1, sp, #8
 800d37e:	4628      	mov	r0, r5
 800d380:	9301      	str	r3, [sp, #4]
 800d382:	f001 fd99 	bl	800eeb8 <_svfiprintf_r>
 800d386:	1c43      	adds	r3, r0, #1
 800d388:	bfbc      	itt	lt
 800d38a:	238b      	movlt	r3, #139	; 0x8b
 800d38c:	602b      	strlt	r3, [r5, #0]
 800d38e:	2c00      	cmp	r4, #0
 800d390:	d0dd      	beq.n	800d34e <sniprintf+0x16>
 800d392:	9b02      	ldr	r3, [sp, #8]
 800d394:	2200      	movs	r2, #0
 800d396:	701a      	strb	r2, [r3, #0]
 800d398:	e7d9      	b.n	800d34e <sniprintf+0x16>
 800d39a:	bf00      	nop
 800d39c:	2000017c 	.word	0x2000017c

0800d3a0 <siprintf>:
 800d3a0:	b40e      	push	{r1, r2, r3}
 800d3a2:	b500      	push	{lr}
 800d3a4:	b09c      	sub	sp, #112	; 0x70
 800d3a6:	f44f 7102 	mov.w	r1, #520	; 0x208
 800d3aa:	ab1d      	add	r3, sp, #116	; 0x74
 800d3ac:	f8ad 1014 	strh.w	r1, [sp, #20]
 800d3b0:	9002      	str	r0, [sp, #8]
 800d3b2:	9006      	str	r0, [sp, #24]
 800d3b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d3b8:	480a      	ldr	r0, [pc, #40]	; (800d3e4 <siprintf+0x44>)
 800d3ba:	9104      	str	r1, [sp, #16]
 800d3bc:	9107      	str	r1, [sp, #28]
 800d3be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3c6:	f8ad 1016 	strh.w	r1, [sp, #22]
 800d3ca:	6800      	ldr	r0, [r0, #0]
 800d3cc:	9301      	str	r3, [sp, #4]
 800d3ce:	a902      	add	r1, sp, #8
 800d3d0:	f001 fd72 	bl	800eeb8 <_svfiprintf_r>
 800d3d4:	9b02      	ldr	r3, [sp, #8]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	701a      	strb	r2, [r3, #0]
 800d3da:	b01c      	add	sp, #112	; 0x70
 800d3dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3e0:	b003      	add	sp, #12
 800d3e2:	4770      	bx	lr
 800d3e4:	2000017c 	.word	0x2000017c

0800d3e8 <strcpy>:
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3ee:	f803 2b01 	strb.w	r2, [r3], #1
 800d3f2:	2a00      	cmp	r2, #0
 800d3f4:	d1f9      	bne.n	800d3ea <strcpy+0x2>
 800d3f6:	4770      	bx	lr

0800d3f8 <strncpy>:
 800d3f8:	b570      	push	{r4, r5, r6, lr}
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	b902      	cbnz	r2, 800d400 <strncpy+0x8>
 800d3fe:	bd70      	pop	{r4, r5, r6, pc}
 800d400:	4623      	mov	r3, r4
 800d402:	f811 5b01 	ldrb.w	r5, [r1], #1
 800d406:	f803 5b01 	strb.w	r5, [r3], #1
 800d40a:	1e56      	subs	r6, r2, #1
 800d40c:	b91d      	cbnz	r5, 800d416 <strncpy+0x1e>
 800d40e:	4414      	add	r4, r2
 800d410:	42a3      	cmp	r3, r4
 800d412:	d103      	bne.n	800d41c <strncpy+0x24>
 800d414:	bd70      	pop	{r4, r5, r6, pc}
 800d416:	461c      	mov	r4, r3
 800d418:	4632      	mov	r2, r6
 800d41a:	e7ef      	b.n	800d3fc <strncpy+0x4>
 800d41c:	f803 5b01 	strb.w	r5, [r3], #1
 800d420:	e7f6      	b.n	800d410 <strncpy+0x18>

0800d422 <_strtol_l.isra.0>:
 800d422:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d426:	4680      	mov	r8, r0
 800d428:	4689      	mov	r9, r1
 800d42a:	4692      	mov	sl, r2
 800d42c:	461f      	mov	r7, r3
 800d42e:	468b      	mov	fp, r1
 800d430:	465d      	mov	r5, fp
 800d432:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d434:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d438:	f7ff f96a 	bl	800c710 <__locale_ctype_ptr_l>
 800d43c:	4420      	add	r0, r4
 800d43e:	7846      	ldrb	r6, [r0, #1]
 800d440:	f016 0608 	ands.w	r6, r6, #8
 800d444:	d10b      	bne.n	800d45e <_strtol_l.isra.0+0x3c>
 800d446:	2c2d      	cmp	r4, #45	; 0x2d
 800d448:	d10b      	bne.n	800d462 <_strtol_l.isra.0+0x40>
 800d44a:	782c      	ldrb	r4, [r5, #0]
 800d44c:	2601      	movs	r6, #1
 800d44e:	f10b 0502 	add.w	r5, fp, #2
 800d452:	b167      	cbz	r7, 800d46e <_strtol_l.isra.0+0x4c>
 800d454:	2f10      	cmp	r7, #16
 800d456:	d114      	bne.n	800d482 <_strtol_l.isra.0+0x60>
 800d458:	2c30      	cmp	r4, #48	; 0x30
 800d45a:	d00a      	beq.n	800d472 <_strtol_l.isra.0+0x50>
 800d45c:	e011      	b.n	800d482 <_strtol_l.isra.0+0x60>
 800d45e:	46ab      	mov	fp, r5
 800d460:	e7e6      	b.n	800d430 <_strtol_l.isra.0+0xe>
 800d462:	2c2b      	cmp	r4, #43	; 0x2b
 800d464:	bf04      	itt	eq
 800d466:	782c      	ldrbeq	r4, [r5, #0]
 800d468:	f10b 0502 	addeq.w	r5, fp, #2
 800d46c:	e7f1      	b.n	800d452 <_strtol_l.isra.0+0x30>
 800d46e:	2c30      	cmp	r4, #48	; 0x30
 800d470:	d127      	bne.n	800d4c2 <_strtol_l.isra.0+0xa0>
 800d472:	782b      	ldrb	r3, [r5, #0]
 800d474:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d478:	2b58      	cmp	r3, #88	; 0x58
 800d47a:	d14b      	bne.n	800d514 <_strtol_l.isra.0+0xf2>
 800d47c:	786c      	ldrb	r4, [r5, #1]
 800d47e:	2710      	movs	r7, #16
 800d480:	3502      	adds	r5, #2
 800d482:	2e00      	cmp	r6, #0
 800d484:	bf0c      	ite	eq
 800d486:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d48a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d48e:	2200      	movs	r2, #0
 800d490:	fbb1 fef7 	udiv	lr, r1, r7
 800d494:	4610      	mov	r0, r2
 800d496:	fb07 1c1e 	mls	ip, r7, lr, r1
 800d49a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d49e:	2b09      	cmp	r3, #9
 800d4a0:	d811      	bhi.n	800d4c6 <_strtol_l.isra.0+0xa4>
 800d4a2:	461c      	mov	r4, r3
 800d4a4:	42a7      	cmp	r7, r4
 800d4a6:	dd1d      	ble.n	800d4e4 <_strtol_l.isra.0+0xc2>
 800d4a8:	1c53      	adds	r3, r2, #1
 800d4aa:	d007      	beq.n	800d4bc <_strtol_l.isra.0+0x9a>
 800d4ac:	4586      	cmp	lr, r0
 800d4ae:	d316      	bcc.n	800d4de <_strtol_l.isra.0+0xbc>
 800d4b0:	d101      	bne.n	800d4b6 <_strtol_l.isra.0+0x94>
 800d4b2:	45a4      	cmp	ip, r4
 800d4b4:	db13      	blt.n	800d4de <_strtol_l.isra.0+0xbc>
 800d4b6:	fb00 4007 	mla	r0, r0, r7, r4
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4c0:	e7eb      	b.n	800d49a <_strtol_l.isra.0+0x78>
 800d4c2:	270a      	movs	r7, #10
 800d4c4:	e7dd      	b.n	800d482 <_strtol_l.isra.0+0x60>
 800d4c6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d4ca:	2b19      	cmp	r3, #25
 800d4cc:	d801      	bhi.n	800d4d2 <_strtol_l.isra.0+0xb0>
 800d4ce:	3c37      	subs	r4, #55	; 0x37
 800d4d0:	e7e8      	b.n	800d4a4 <_strtol_l.isra.0+0x82>
 800d4d2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d4d6:	2b19      	cmp	r3, #25
 800d4d8:	d804      	bhi.n	800d4e4 <_strtol_l.isra.0+0xc2>
 800d4da:	3c57      	subs	r4, #87	; 0x57
 800d4dc:	e7e2      	b.n	800d4a4 <_strtol_l.isra.0+0x82>
 800d4de:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e2:	e7eb      	b.n	800d4bc <_strtol_l.isra.0+0x9a>
 800d4e4:	1c53      	adds	r3, r2, #1
 800d4e6:	d108      	bne.n	800d4fa <_strtol_l.isra.0+0xd8>
 800d4e8:	2322      	movs	r3, #34	; 0x22
 800d4ea:	f8c8 3000 	str.w	r3, [r8]
 800d4ee:	4608      	mov	r0, r1
 800d4f0:	f1ba 0f00 	cmp.w	sl, #0
 800d4f4:	d107      	bne.n	800d506 <_strtol_l.isra.0+0xe4>
 800d4f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fa:	b106      	cbz	r6, 800d4fe <_strtol_l.isra.0+0xdc>
 800d4fc:	4240      	negs	r0, r0
 800d4fe:	f1ba 0f00 	cmp.w	sl, #0
 800d502:	d00c      	beq.n	800d51e <_strtol_l.isra.0+0xfc>
 800d504:	b122      	cbz	r2, 800d510 <_strtol_l.isra.0+0xee>
 800d506:	3d01      	subs	r5, #1
 800d508:	f8ca 5000 	str.w	r5, [sl]
 800d50c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d510:	464d      	mov	r5, r9
 800d512:	e7f9      	b.n	800d508 <_strtol_l.isra.0+0xe6>
 800d514:	2430      	movs	r4, #48	; 0x30
 800d516:	2f00      	cmp	r7, #0
 800d518:	d1b3      	bne.n	800d482 <_strtol_l.isra.0+0x60>
 800d51a:	2708      	movs	r7, #8
 800d51c:	e7b1      	b.n	800d482 <_strtol_l.isra.0+0x60>
 800d51e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d524 <strtol>:
 800d524:	4b08      	ldr	r3, [pc, #32]	; (800d548 <strtol+0x24>)
 800d526:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d528:	681c      	ldr	r4, [r3, #0]
 800d52a:	4d08      	ldr	r5, [pc, #32]	; (800d54c <strtol+0x28>)
 800d52c:	6a23      	ldr	r3, [r4, #32]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	bf08      	it	eq
 800d532:	462b      	moveq	r3, r5
 800d534:	9300      	str	r3, [sp, #0]
 800d536:	4613      	mov	r3, r2
 800d538:	460a      	mov	r2, r1
 800d53a:	4601      	mov	r1, r0
 800d53c:	4620      	mov	r0, r4
 800d53e:	f7ff ff70 	bl	800d422 <_strtol_l.isra.0>
 800d542:	b003      	add	sp, #12
 800d544:	bd30      	pop	{r4, r5, pc}
 800d546:	bf00      	nop
 800d548:	2000017c 	.word	0x2000017c
 800d54c:	200001e0 	.word	0x200001e0

0800d550 <__swbuf_r>:
 800d550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d552:	460e      	mov	r6, r1
 800d554:	4614      	mov	r4, r2
 800d556:	4605      	mov	r5, r0
 800d558:	b118      	cbz	r0, 800d562 <__swbuf_r+0x12>
 800d55a:	6983      	ldr	r3, [r0, #24]
 800d55c:	b90b      	cbnz	r3, 800d562 <__swbuf_r+0x12>
 800d55e:	f001 f825 	bl	800e5ac <__sinit>
 800d562:	4b21      	ldr	r3, [pc, #132]	; (800d5e8 <__swbuf_r+0x98>)
 800d564:	429c      	cmp	r4, r3
 800d566:	d12a      	bne.n	800d5be <__swbuf_r+0x6e>
 800d568:	686c      	ldr	r4, [r5, #4]
 800d56a:	69a3      	ldr	r3, [r4, #24]
 800d56c:	60a3      	str	r3, [r4, #8]
 800d56e:	89a3      	ldrh	r3, [r4, #12]
 800d570:	071a      	lsls	r2, r3, #28
 800d572:	d52e      	bpl.n	800d5d2 <__swbuf_r+0x82>
 800d574:	6923      	ldr	r3, [r4, #16]
 800d576:	b363      	cbz	r3, 800d5d2 <__swbuf_r+0x82>
 800d578:	6923      	ldr	r3, [r4, #16]
 800d57a:	6820      	ldr	r0, [r4, #0]
 800d57c:	1ac0      	subs	r0, r0, r3
 800d57e:	6963      	ldr	r3, [r4, #20]
 800d580:	b2f6      	uxtb	r6, r6
 800d582:	4298      	cmp	r0, r3
 800d584:	4637      	mov	r7, r6
 800d586:	db04      	blt.n	800d592 <__swbuf_r+0x42>
 800d588:	4621      	mov	r1, r4
 800d58a:	4628      	mov	r0, r5
 800d58c:	f000 ff92 	bl	800e4b4 <_fflush_r>
 800d590:	bb28      	cbnz	r0, 800d5de <__swbuf_r+0x8e>
 800d592:	68a3      	ldr	r3, [r4, #8]
 800d594:	3b01      	subs	r3, #1
 800d596:	60a3      	str	r3, [r4, #8]
 800d598:	6823      	ldr	r3, [r4, #0]
 800d59a:	1c5a      	adds	r2, r3, #1
 800d59c:	6022      	str	r2, [r4, #0]
 800d59e:	701e      	strb	r6, [r3, #0]
 800d5a0:	6963      	ldr	r3, [r4, #20]
 800d5a2:	3001      	adds	r0, #1
 800d5a4:	4298      	cmp	r0, r3
 800d5a6:	d004      	beq.n	800d5b2 <__swbuf_r+0x62>
 800d5a8:	89a3      	ldrh	r3, [r4, #12]
 800d5aa:	07db      	lsls	r3, r3, #31
 800d5ac:	d519      	bpl.n	800d5e2 <__swbuf_r+0x92>
 800d5ae:	2e0a      	cmp	r6, #10
 800d5b0:	d117      	bne.n	800d5e2 <__swbuf_r+0x92>
 800d5b2:	4621      	mov	r1, r4
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	f000 ff7d 	bl	800e4b4 <_fflush_r>
 800d5ba:	b190      	cbz	r0, 800d5e2 <__swbuf_r+0x92>
 800d5bc:	e00f      	b.n	800d5de <__swbuf_r+0x8e>
 800d5be:	4b0b      	ldr	r3, [pc, #44]	; (800d5ec <__swbuf_r+0x9c>)
 800d5c0:	429c      	cmp	r4, r3
 800d5c2:	d101      	bne.n	800d5c8 <__swbuf_r+0x78>
 800d5c4:	68ac      	ldr	r4, [r5, #8]
 800d5c6:	e7d0      	b.n	800d56a <__swbuf_r+0x1a>
 800d5c8:	4b09      	ldr	r3, [pc, #36]	; (800d5f0 <__swbuf_r+0xa0>)
 800d5ca:	429c      	cmp	r4, r3
 800d5cc:	bf08      	it	eq
 800d5ce:	68ec      	ldreq	r4, [r5, #12]
 800d5d0:	e7cb      	b.n	800d56a <__swbuf_r+0x1a>
 800d5d2:	4621      	mov	r1, r4
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	f000 f81b 	bl	800d610 <__swsetup_r>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d0cc      	beq.n	800d578 <__swbuf_r+0x28>
 800d5de:	f04f 37ff 	mov.w	r7, #4294967295
 800d5e2:	4638      	mov	r0, r7
 800d5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	08012454 	.word	0x08012454
 800d5ec:	08012474 	.word	0x08012474
 800d5f0:	08012434 	.word	0x08012434

0800d5f4 <__ascii_wctomb>:
 800d5f4:	b149      	cbz	r1, 800d60a <__ascii_wctomb+0x16>
 800d5f6:	2aff      	cmp	r2, #255	; 0xff
 800d5f8:	bf85      	ittet	hi
 800d5fa:	238a      	movhi	r3, #138	; 0x8a
 800d5fc:	6003      	strhi	r3, [r0, #0]
 800d5fe:	700a      	strbls	r2, [r1, #0]
 800d600:	f04f 30ff 	movhi.w	r0, #4294967295
 800d604:	bf98      	it	ls
 800d606:	2001      	movls	r0, #1
 800d608:	4770      	bx	lr
 800d60a:	4608      	mov	r0, r1
 800d60c:	4770      	bx	lr
	...

0800d610 <__swsetup_r>:
 800d610:	4b32      	ldr	r3, [pc, #200]	; (800d6dc <__swsetup_r+0xcc>)
 800d612:	b570      	push	{r4, r5, r6, lr}
 800d614:	681d      	ldr	r5, [r3, #0]
 800d616:	4606      	mov	r6, r0
 800d618:	460c      	mov	r4, r1
 800d61a:	b125      	cbz	r5, 800d626 <__swsetup_r+0x16>
 800d61c:	69ab      	ldr	r3, [r5, #24]
 800d61e:	b913      	cbnz	r3, 800d626 <__swsetup_r+0x16>
 800d620:	4628      	mov	r0, r5
 800d622:	f000 ffc3 	bl	800e5ac <__sinit>
 800d626:	4b2e      	ldr	r3, [pc, #184]	; (800d6e0 <__swsetup_r+0xd0>)
 800d628:	429c      	cmp	r4, r3
 800d62a:	d10f      	bne.n	800d64c <__swsetup_r+0x3c>
 800d62c:	686c      	ldr	r4, [r5, #4]
 800d62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d632:	b29a      	uxth	r2, r3
 800d634:	0715      	lsls	r5, r2, #28
 800d636:	d42c      	bmi.n	800d692 <__swsetup_r+0x82>
 800d638:	06d0      	lsls	r0, r2, #27
 800d63a:	d411      	bmi.n	800d660 <__swsetup_r+0x50>
 800d63c:	2209      	movs	r2, #9
 800d63e:	6032      	str	r2, [r6, #0]
 800d640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d644:	81a3      	strh	r3, [r4, #12]
 800d646:	f04f 30ff 	mov.w	r0, #4294967295
 800d64a:	bd70      	pop	{r4, r5, r6, pc}
 800d64c:	4b25      	ldr	r3, [pc, #148]	; (800d6e4 <__swsetup_r+0xd4>)
 800d64e:	429c      	cmp	r4, r3
 800d650:	d101      	bne.n	800d656 <__swsetup_r+0x46>
 800d652:	68ac      	ldr	r4, [r5, #8]
 800d654:	e7eb      	b.n	800d62e <__swsetup_r+0x1e>
 800d656:	4b24      	ldr	r3, [pc, #144]	; (800d6e8 <__swsetup_r+0xd8>)
 800d658:	429c      	cmp	r4, r3
 800d65a:	bf08      	it	eq
 800d65c:	68ec      	ldreq	r4, [r5, #12]
 800d65e:	e7e6      	b.n	800d62e <__swsetup_r+0x1e>
 800d660:	0751      	lsls	r1, r2, #29
 800d662:	d512      	bpl.n	800d68a <__swsetup_r+0x7a>
 800d664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d666:	b141      	cbz	r1, 800d67a <__swsetup_r+0x6a>
 800d668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d66c:	4299      	cmp	r1, r3
 800d66e:	d002      	beq.n	800d676 <__swsetup_r+0x66>
 800d670:	4630      	mov	r0, r6
 800d672:	f7ff f889 	bl	800c788 <_free_r>
 800d676:	2300      	movs	r3, #0
 800d678:	6363      	str	r3, [r4, #52]	; 0x34
 800d67a:	89a3      	ldrh	r3, [r4, #12]
 800d67c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d680:	81a3      	strh	r3, [r4, #12]
 800d682:	2300      	movs	r3, #0
 800d684:	6063      	str	r3, [r4, #4]
 800d686:	6923      	ldr	r3, [r4, #16]
 800d688:	6023      	str	r3, [r4, #0]
 800d68a:	89a3      	ldrh	r3, [r4, #12]
 800d68c:	f043 0308 	orr.w	r3, r3, #8
 800d690:	81a3      	strh	r3, [r4, #12]
 800d692:	6923      	ldr	r3, [r4, #16]
 800d694:	b94b      	cbnz	r3, 800d6aa <__swsetup_r+0x9a>
 800d696:	89a3      	ldrh	r3, [r4, #12]
 800d698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d69c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6a0:	d003      	beq.n	800d6aa <__swsetup_r+0x9a>
 800d6a2:	4621      	mov	r1, r4
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	f001 f859 	bl	800e75c <__smakebuf_r>
 800d6aa:	89a2      	ldrh	r2, [r4, #12]
 800d6ac:	f012 0301 	ands.w	r3, r2, #1
 800d6b0:	d00c      	beq.n	800d6cc <__swsetup_r+0xbc>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	60a3      	str	r3, [r4, #8]
 800d6b6:	6963      	ldr	r3, [r4, #20]
 800d6b8:	425b      	negs	r3, r3
 800d6ba:	61a3      	str	r3, [r4, #24]
 800d6bc:	6923      	ldr	r3, [r4, #16]
 800d6be:	b953      	cbnz	r3, 800d6d6 <__swsetup_r+0xc6>
 800d6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d6c8:	d1ba      	bne.n	800d640 <__swsetup_r+0x30>
 800d6ca:	bd70      	pop	{r4, r5, r6, pc}
 800d6cc:	0792      	lsls	r2, r2, #30
 800d6ce:	bf58      	it	pl
 800d6d0:	6963      	ldrpl	r3, [r4, #20]
 800d6d2:	60a3      	str	r3, [r4, #8]
 800d6d4:	e7f2      	b.n	800d6bc <__swsetup_r+0xac>
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	e7f7      	b.n	800d6ca <__swsetup_r+0xba>
 800d6da:	bf00      	nop
 800d6dc:	2000017c 	.word	0x2000017c
 800d6e0:	08012454 	.word	0x08012454
 800d6e4:	08012474 	.word	0x08012474
 800d6e8:	08012434 	.word	0x08012434

0800d6ec <quorem>:
 800d6ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f0:	6903      	ldr	r3, [r0, #16]
 800d6f2:	690c      	ldr	r4, [r1, #16]
 800d6f4:	429c      	cmp	r4, r3
 800d6f6:	4680      	mov	r8, r0
 800d6f8:	f300 8082 	bgt.w	800d800 <quorem+0x114>
 800d6fc:	3c01      	subs	r4, #1
 800d6fe:	f101 0714 	add.w	r7, r1, #20
 800d702:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800d706:	f100 0614 	add.w	r6, r0, #20
 800d70a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d70e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d712:	eb06 030e 	add.w	r3, r6, lr
 800d716:	3501      	adds	r5, #1
 800d718:	eb07 090e 	add.w	r9, r7, lr
 800d71c:	9301      	str	r3, [sp, #4]
 800d71e:	fbb0 f5f5 	udiv	r5, r0, r5
 800d722:	b395      	cbz	r5, 800d78a <quorem+0x9e>
 800d724:	f04f 0a00 	mov.w	sl, #0
 800d728:	4638      	mov	r0, r7
 800d72a:	46b4      	mov	ip, r6
 800d72c:	46d3      	mov	fp, sl
 800d72e:	f850 2b04 	ldr.w	r2, [r0], #4
 800d732:	b293      	uxth	r3, r2
 800d734:	fb05 a303 	mla	r3, r5, r3, sl
 800d738:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	ebab 0303 	sub.w	r3, fp, r3
 800d742:	0c12      	lsrs	r2, r2, #16
 800d744:	f8bc b000 	ldrh.w	fp, [ip]
 800d748:	fb05 a202 	mla	r2, r5, r2, sl
 800d74c:	fa13 f38b 	uxtah	r3, r3, fp
 800d750:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d754:	fa1f fb82 	uxth.w	fp, r2
 800d758:	f8dc 2000 	ldr.w	r2, [ip]
 800d75c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d760:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d764:	b29b      	uxth	r3, r3
 800d766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d76a:	4581      	cmp	r9, r0
 800d76c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d770:	f84c 3b04 	str.w	r3, [ip], #4
 800d774:	d2db      	bcs.n	800d72e <quorem+0x42>
 800d776:	f856 300e 	ldr.w	r3, [r6, lr]
 800d77a:	b933      	cbnz	r3, 800d78a <quorem+0x9e>
 800d77c:	9b01      	ldr	r3, [sp, #4]
 800d77e:	3b04      	subs	r3, #4
 800d780:	429e      	cmp	r6, r3
 800d782:	461a      	mov	r2, r3
 800d784:	d330      	bcc.n	800d7e8 <quorem+0xfc>
 800d786:	f8c8 4010 	str.w	r4, [r8, #16]
 800d78a:	4640      	mov	r0, r8
 800d78c:	f001 fa3d 	bl	800ec0a <__mcmp>
 800d790:	2800      	cmp	r0, #0
 800d792:	db25      	blt.n	800d7e0 <quorem+0xf4>
 800d794:	3501      	adds	r5, #1
 800d796:	4630      	mov	r0, r6
 800d798:	f04f 0e00 	mov.w	lr, #0
 800d79c:	f857 2b04 	ldr.w	r2, [r7], #4
 800d7a0:	f8d0 c000 	ldr.w	ip, [r0]
 800d7a4:	b293      	uxth	r3, r2
 800d7a6:	ebae 0303 	sub.w	r3, lr, r3
 800d7aa:	0c12      	lsrs	r2, r2, #16
 800d7ac:	fa13 f38c 	uxtah	r3, r3, ip
 800d7b0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d7b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7be:	45b9      	cmp	r9, r7
 800d7c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d7c4:	f840 3b04 	str.w	r3, [r0], #4
 800d7c8:	d2e8      	bcs.n	800d79c <quorem+0xb0>
 800d7ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d7ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d7d2:	b92a      	cbnz	r2, 800d7e0 <quorem+0xf4>
 800d7d4:	3b04      	subs	r3, #4
 800d7d6:	429e      	cmp	r6, r3
 800d7d8:	461a      	mov	r2, r3
 800d7da:	d30b      	bcc.n	800d7f4 <quorem+0x108>
 800d7dc:	f8c8 4010 	str.w	r4, [r8, #16]
 800d7e0:	4628      	mov	r0, r5
 800d7e2:	b003      	add	sp, #12
 800d7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e8:	6812      	ldr	r2, [r2, #0]
 800d7ea:	3b04      	subs	r3, #4
 800d7ec:	2a00      	cmp	r2, #0
 800d7ee:	d1ca      	bne.n	800d786 <quorem+0x9a>
 800d7f0:	3c01      	subs	r4, #1
 800d7f2:	e7c5      	b.n	800d780 <quorem+0x94>
 800d7f4:	6812      	ldr	r2, [r2, #0]
 800d7f6:	3b04      	subs	r3, #4
 800d7f8:	2a00      	cmp	r2, #0
 800d7fa:	d1ef      	bne.n	800d7dc <quorem+0xf0>
 800d7fc:	3c01      	subs	r4, #1
 800d7fe:	e7ea      	b.n	800d7d6 <quorem+0xea>
 800d800:	2000      	movs	r0, #0
 800d802:	e7ee      	b.n	800d7e2 <quorem+0xf6>
 800d804:	0000      	movs	r0, r0
	...

0800d808 <_dtoa_r>:
 800d808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d80c:	ec57 6b10 	vmov	r6, r7, d0
 800d810:	b097      	sub	sp, #92	; 0x5c
 800d812:	e9cd 6700 	strd	r6, r7, [sp]
 800d816:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d818:	9107      	str	r1, [sp, #28]
 800d81a:	4604      	mov	r4, r0
 800d81c:	920a      	str	r2, [sp, #40]	; 0x28
 800d81e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d820:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800d822:	b93e      	cbnz	r6, 800d834 <_dtoa_r+0x2c>
 800d824:	2010      	movs	r0, #16
 800d826:	f7fe ff85 	bl	800c734 <malloc>
 800d82a:	6260      	str	r0, [r4, #36]	; 0x24
 800d82c:	6046      	str	r6, [r0, #4]
 800d82e:	6086      	str	r6, [r0, #8]
 800d830:	6006      	str	r6, [r0, #0]
 800d832:	60c6      	str	r6, [r0, #12]
 800d834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d836:	6819      	ldr	r1, [r3, #0]
 800d838:	b151      	cbz	r1, 800d850 <_dtoa_r+0x48>
 800d83a:	685a      	ldr	r2, [r3, #4]
 800d83c:	604a      	str	r2, [r1, #4]
 800d83e:	2301      	movs	r3, #1
 800d840:	4093      	lsls	r3, r2
 800d842:	608b      	str	r3, [r1, #8]
 800d844:	4620      	mov	r0, r4
 800d846:	f001 f80a 	bl	800e85e <_Bfree>
 800d84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d84c:	2200      	movs	r2, #0
 800d84e:	601a      	str	r2, [r3, #0]
 800d850:	9b01      	ldr	r3, [sp, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	bfbf      	itttt	lt
 800d856:	2301      	movlt	r3, #1
 800d858:	602b      	strlt	r3, [r5, #0]
 800d85a:	9b01      	ldrlt	r3, [sp, #4]
 800d85c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d860:	bfb2      	itee	lt
 800d862:	9301      	strlt	r3, [sp, #4]
 800d864:	2300      	movge	r3, #0
 800d866:	602b      	strge	r3, [r5, #0]
 800d868:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d86c:	4ba8      	ldr	r3, [pc, #672]	; (800db10 <_dtoa_r+0x308>)
 800d86e:	ea33 0308 	bics.w	r3, r3, r8
 800d872:	d11b      	bne.n	800d8ac <_dtoa_r+0xa4>
 800d874:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d876:	f242 730f 	movw	r3, #9999	; 0x270f
 800d87a:	6013      	str	r3, [r2, #0]
 800d87c:	9b00      	ldr	r3, [sp, #0]
 800d87e:	b923      	cbnz	r3, 800d88a <_dtoa_r+0x82>
 800d880:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d884:	2800      	cmp	r0, #0
 800d886:	f000 8578 	beq.w	800e37a <_dtoa_r+0xb72>
 800d88a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d88c:	b953      	cbnz	r3, 800d8a4 <_dtoa_r+0x9c>
 800d88e:	4ba1      	ldr	r3, [pc, #644]	; (800db14 <_dtoa_r+0x30c>)
 800d890:	e021      	b.n	800d8d6 <_dtoa_r+0xce>
 800d892:	4ba1      	ldr	r3, [pc, #644]	; (800db18 <_dtoa_r+0x310>)
 800d894:	9302      	str	r3, [sp, #8]
 800d896:	3308      	adds	r3, #8
 800d898:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d89a:	6013      	str	r3, [r2, #0]
 800d89c:	9802      	ldr	r0, [sp, #8]
 800d89e:	b017      	add	sp, #92	; 0x5c
 800d8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a4:	4b9b      	ldr	r3, [pc, #620]	; (800db14 <_dtoa_r+0x30c>)
 800d8a6:	9302      	str	r3, [sp, #8]
 800d8a8:	3303      	adds	r3, #3
 800d8aa:	e7f5      	b.n	800d898 <_dtoa_r+0x90>
 800d8ac:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	4639      	mov	r1, r7
 800d8b8:	f7f3 f932 	bl	8000b20 <__aeabi_dcmpeq>
 800d8bc:	4681      	mov	r9, r0
 800d8be:	b160      	cbz	r0, 800d8da <_dtoa_r+0xd2>
 800d8c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	6013      	str	r3, [r2, #0]
 800d8c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	f000 8553 	beq.w	800e374 <_dtoa_r+0xb6c>
 800d8ce:	4b93      	ldr	r3, [pc, #588]	; (800db1c <_dtoa_r+0x314>)
 800d8d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d8d2:	6013      	str	r3, [r2, #0]
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	9302      	str	r3, [sp, #8]
 800d8d8:	e7e0      	b.n	800d89c <_dtoa_r+0x94>
 800d8da:	aa14      	add	r2, sp, #80	; 0x50
 800d8dc:	a915      	add	r1, sp, #84	; 0x54
 800d8de:	ec47 6b10 	vmov	d0, r6, r7
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	f001 fa09 	bl	800ecfa <__d2b>
 800d8e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d8ec:	4682      	mov	sl, r0
 800d8ee:	2d00      	cmp	r5, #0
 800d8f0:	d07e      	beq.n	800d9f0 <_dtoa_r+0x1e8>
 800d8f2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d8f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d900:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d904:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 800d908:	2200      	movs	r2, #0
 800d90a:	4b85      	ldr	r3, [pc, #532]	; (800db20 <_dtoa_r+0x318>)
 800d90c:	f7f2 fcec 	bl	80002e8 <__aeabi_dsub>
 800d910:	a379      	add	r3, pc, #484	; (adr r3, 800daf8 <_dtoa_r+0x2f0>)
 800d912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d916:	f7f2 fe9b 	bl	8000650 <__aeabi_dmul>
 800d91a:	a379      	add	r3, pc, #484	; (adr r3, 800db00 <_dtoa_r+0x2f8>)
 800d91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d920:	f7f2 fce4 	bl	80002ec <__adddf3>
 800d924:	4606      	mov	r6, r0
 800d926:	4628      	mov	r0, r5
 800d928:	460f      	mov	r7, r1
 800d92a:	f7f2 fe2b 	bl	8000584 <__aeabi_i2d>
 800d92e:	a376      	add	r3, pc, #472	; (adr r3, 800db08 <_dtoa_r+0x300>)
 800d930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d934:	f7f2 fe8c 	bl	8000650 <__aeabi_dmul>
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	4630      	mov	r0, r6
 800d93e:	4639      	mov	r1, r7
 800d940:	f7f2 fcd4 	bl	80002ec <__adddf3>
 800d944:	4606      	mov	r6, r0
 800d946:	460f      	mov	r7, r1
 800d948:	f7f3 f932 	bl	8000bb0 <__aeabi_d2iz>
 800d94c:	2200      	movs	r2, #0
 800d94e:	4683      	mov	fp, r0
 800d950:	2300      	movs	r3, #0
 800d952:	4630      	mov	r0, r6
 800d954:	4639      	mov	r1, r7
 800d956:	f7f3 f8ed 	bl	8000b34 <__aeabi_dcmplt>
 800d95a:	b158      	cbz	r0, 800d974 <_dtoa_r+0x16c>
 800d95c:	4658      	mov	r0, fp
 800d95e:	f7f2 fe11 	bl	8000584 <__aeabi_i2d>
 800d962:	4602      	mov	r2, r0
 800d964:	460b      	mov	r3, r1
 800d966:	4630      	mov	r0, r6
 800d968:	4639      	mov	r1, r7
 800d96a:	f7f3 f8d9 	bl	8000b20 <__aeabi_dcmpeq>
 800d96e:	b908      	cbnz	r0, 800d974 <_dtoa_r+0x16c>
 800d970:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d974:	f1bb 0f16 	cmp.w	fp, #22
 800d978:	d859      	bhi.n	800da2e <_dtoa_r+0x226>
 800d97a:	496a      	ldr	r1, [pc, #424]	; (800db24 <_dtoa_r+0x31c>)
 800d97c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800d980:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d984:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d988:	f7f3 f8f2 	bl	8000b70 <__aeabi_dcmpgt>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d050      	beq.n	800da32 <_dtoa_r+0x22a>
 800d990:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d994:	2300      	movs	r3, #0
 800d996:	930e      	str	r3, [sp, #56]	; 0x38
 800d998:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d99a:	1b5d      	subs	r5, r3, r5
 800d99c:	1e6b      	subs	r3, r5, #1
 800d99e:	9306      	str	r3, [sp, #24]
 800d9a0:	bf45      	ittet	mi
 800d9a2:	f1c5 0301 	rsbmi	r3, r5, #1
 800d9a6:	9305      	strmi	r3, [sp, #20]
 800d9a8:	2300      	movpl	r3, #0
 800d9aa:	2300      	movmi	r3, #0
 800d9ac:	bf4c      	ite	mi
 800d9ae:	9306      	strmi	r3, [sp, #24]
 800d9b0:	9305      	strpl	r3, [sp, #20]
 800d9b2:	f1bb 0f00 	cmp.w	fp, #0
 800d9b6:	db3e      	blt.n	800da36 <_dtoa_r+0x22e>
 800d9b8:	9b06      	ldr	r3, [sp, #24]
 800d9ba:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d9be:	445b      	add	r3, fp
 800d9c0:	9306      	str	r3, [sp, #24]
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	9308      	str	r3, [sp, #32]
 800d9c6:	9b07      	ldr	r3, [sp, #28]
 800d9c8:	2b09      	cmp	r3, #9
 800d9ca:	f200 80af 	bhi.w	800db2c <_dtoa_r+0x324>
 800d9ce:	2b05      	cmp	r3, #5
 800d9d0:	bfc4      	itt	gt
 800d9d2:	3b04      	subgt	r3, #4
 800d9d4:	9307      	strgt	r3, [sp, #28]
 800d9d6:	9b07      	ldr	r3, [sp, #28]
 800d9d8:	f1a3 0302 	sub.w	r3, r3, #2
 800d9dc:	bfcc      	ite	gt
 800d9de:	2600      	movgt	r6, #0
 800d9e0:	2601      	movle	r6, #1
 800d9e2:	2b03      	cmp	r3, #3
 800d9e4:	f200 80ae 	bhi.w	800db44 <_dtoa_r+0x33c>
 800d9e8:	e8df f003 	tbb	[pc, r3]
 800d9ec:	772f8482 	.word	0x772f8482
 800d9f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9f2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d9f4:	441d      	add	r5, r3
 800d9f6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d9fa:	2b20      	cmp	r3, #32
 800d9fc:	dd11      	ble.n	800da22 <_dtoa_r+0x21a>
 800d9fe:	9a00      	ldr	r2, [sp, #0]
 800da00:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800da04:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800da08:	fa22 f000 	lsr.w	r0, r2, r0
 800da0c:	fa08 f303 	lsl.w	r3, r8, r3
 800da10:	4318      	orrs	r0, r3
 800da12:	f7f2 fda7 	bl	8000564 <__aeabi_ui2d>
 800da16:	2301      	movs	r3, #1
 800da18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800da1c:	3d01      	subs	r5, #1
 800da1e:	9312      	str	r3, [sp, #72]	; 0x48
 800da20:	e772      	b.n	800d908 <_dtoa_r+0x100>
 800da22:	f1c3 0020 	rsb	r0, r3, #32
 800da26:	9b00      	ldr	r3, [sp, #0]
 800da28:	fa03 f000 	lsl.w	r0, r3, r0
 800da2c:	e7f1      	b.n	800da12 <_dtoa_r+0x20a>
 800da2e:	2301      	movs	r3, #1
 800da30:	e7b1      	b.n	800d996 <_dtoa_r+0x18e>
 800da32:	900e      	str	r0, [sp, #56]	; 0x38
 800da34:	e7b0      	b.n	800d998 <_dtoa_r+0x190>
 800da36:	9b05      	ldr	r3, [sp, #20]
 800da38:	eba3 030b 	sub.w	r3, r3, fp
 800da3c:	9305      	str	r3, [sp, #20]
 800da3e:	f1cb 0300 	rsb	r3, fp, #0
 800da42:	9308      	str	r3, [sp, #32]
 800da44:	2300      	movs	r3, #0
 800da46:	930b      	str	r3, [sp, #44]	; 0x2c
 800da48:	e7bd      	b.n	800d9c6 <_dtoa_r+0x1be>
 800da4a:	2301      	movs	r3, #1
 800da4c:	9309      	str	r3, [sp, #36]	; 0x24
 800da4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da50:	2b00      	cmp	r3, #0
 800da52:	dd7a      	ble.n	800db4a <_dtoa_r+0x342>
 800da54:	9304      	str	r3, [sp, #16]
 800da56:	9303      	str	r3, [sp, #12]
 800da58:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800da5a:	2200      	movs	r2, #0
 800da5c:	606a      	str	r2, [r5, #4]
 800da5e:	2104      	movs	r1, #4
 800da60:	f101 0214 	add.w	r2, r1, #20
 800da64:	429a      	cmp	r2, r3
 800da66:	d975      	bls.n	800db54 <_dtoa_r+0x34c>
 800da68:	6869      	ldr	r1, [r5, #4]
 800da6a:	4620      	mov	r0, r4
 800da6c:	f000 fec3 	bl	800e7f6 <_Balloc>
 800da70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da72:	6028      	str	r0, [r5, #0]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	9302      	str	r3, [sp, #8]
 800da78:	9b03      	ldr	r3, [sp, #12]
 800da7a:	2b0e      	cmp	r3, #14
 800da7c:	f200 80e5 	bhi.w	800dc4a <_dtoa_r+0x442>
 800da80:	2e00      	cmp	r6, #0
 800da82:	f000 80e2 	beq.w	800dc4a <_dtoa_r+0x442>
 800da86:	ed9d 7b00 	vldr	d7, [sp]
 800da8a:	f1bb 0f00 	cmp.w	fp, #0
 800da8e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800da92:	dd74      	ble.n	800db7e <_dtoa_r+0x376>
 800da94:	4a23      	ldr	r2, [pc, #140]	; (800db24 <_dtoa_r+0x31c>)
 800da96:	f00b 030f 	and.w	r3, fp, #15
 800da9a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800da9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800daa2:	06f0      	lsls	r0, r6, #27
 800daa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800daa8:	d559      	bpl.n	800db5e <_dtoa_r+0x356>
 800daaa:	4b1f      	ldr	r3, [pc, #124]	; (800db28 <_dtoa_r+0x320>)
 800daac:	ec51 0b17 	vmov	r0, r1, d7
 800dab0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dab4:	f7f2 fef6 	bl	80008a4 <__aeabi_ddiv>
 800dab8:	e9cd 0100 	strd	r0, r1, [sp]
 800dabc:	f006 060f 	and.w	r6, r6, #15
 800dac0:	2503      	movs	r5, #3
 800dac2:	4f19      	ldr	r7, [pc, #100]	; (800db28 <_dtoa_r+0x320>)
 800dac4:	2e00      	cmp	r6, #0
 800dac6:	d14c      	bne.n	800db62 <_dtoa_r+0x35a>
 800dac8:	4642      	mov	r2, r8
 800daca:	464b      	mov	r3, r9
 800dacc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dad0:	f7f2 fee8 	bl	80008a4 <__aeabi_ddiv>
 800dad4:	e9cd 0100 	strd	r0, r1, [sp]
 800dad8:	e06a      	b.n	800dbb0 <_dtoa_r+0x3a8>
 800dada:	2301      	movs	r3, #1
 800dadc:	9309      	str	r3, [sp, #36]	; 0x24
 800dade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dae0:	445b      	add	r3, fp
 800dae2:	9304      	str	r3, [sp, #16]
 800dae4:	3301      	adds	r3, #1
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	9303      	str	r3, [sp, #12]
 800daea:	bfb8      	it	lt
 800daec:	2301      	movlt	r3, #1
 800daee:	e7b3      	b.n	800da58 <_dtoa_r+0x250>
 800daf0:	2300      	movs	r3, #0
 800daf2:	e7ab      	b.n	800da4c <_dtoa_r+0x244>
 800daf4:	2300      	movs	r3, #0
 800daf6:	e7f1      	b.n	800dadc <_dtoa_r+0x2d4>
 800daf8:	636f4361 	.word	0x636f4361
 800dafc:	3fd287a7 	.word	0x3fd287a7
 800db00:	8b60c8b3 	.word	0x8b60c8b3
 800db04:	3fc68a28 	.word	0x3fc68a28
 800db08:	509f79fb 	.word	0x509f79fb
 800db0c:	3fd34413 	.word	0x3fd34413
 800db10:	7ff00000 	.word	0x7ff00000
 800db14:	08012430 	.word	0x08012430
 800db18:	08012427 	.word	0x08012427
 800db1c:	08012303 	.word	0x08012303
 800db20:	3ff80000 	.word	0x3ff80000
 800db24:	080124c0 	.word	0x080124c0
 800db28:	08012498 	.word	0x08012498
 800db2c:	2601      	movs	r6, #1
 800db2e:	2300      	movs	r3, #0
 800db30:	9307      	str	r3, [sp, #28]
 800db32:	9609      	str	r6, [sp, #36]	; 0x24
 800db34:	f04f 33ff 	mov.w	r3, #4294967295
 800db38:	9304      	str	r3, [sp, #16]
 800db3a:	9303      	str	r3, [sp, #12]
 800db3c:	2200      	movs	r2, #0
 800db3e:	2312      	movs	r3, #18
 800db40:	920a      	str	r2, [sp, #40]	; 0x28
 800db42:	e789      	b.n	800da58 <_dtoa_r+0x250>
 800db44:	2301      	movs	r3, #1
 800db46:	9309      	str	r3, [sp, #36]	; 0x24
 800db48:	e7f4      	b.n	800db34 <_dtoa_r+0x32c>
 800db4a:	2301      	movs	r3, #1
 800db4c:	9304      	str	r3, [sp, #16]
 800db4e:	9303      	str	r3, [sp, #12]
 800db50:	461a      	mov	r2, r3
 800db52:	e7f5      	b.n	800db40 <_dtoa_r+0x338>
 800db54:	686a      	ldr	r2, [r5, #4]
 800db56:	3201      	adds	r2, #1
 800db58:	606a      	str	r2, [r5, #4]
 800db5a:	0049      	lsls	r1, r1, #1
 800db5c:	e780      	b.n	800da60 <_dtoa_r+0x258>
 800db5e:	2502      	movs	r5, #2
 800db60:	e7af      	b.n	800dac2 <_dtoa_r+0x2ba>
 800db62:	07f1      	lsls	r1, r6, #31
 800db64:	d508      	bpl.n	800db78 <_dtoa_r+0x370>
 800db66:	4640      	mov	r0, r8
 800db68:	4649      	mov	r1, r9
 800db6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db6e:	f7f2 fd6f 	bl	8000650 <__aeabi_dmul>
 800db72:	3501      	adds	r5, #1
 800db74:	4680      	mov	r8, r0
 800db76:	4689      	mov	r9, r1
 800db78:	1076      	asrs	r6, r6, #1
 800db7a:	3708      	adds	r7, #8
 800db7c:	e7a2      	b.n	800dac4 <_dtoa_r+0x2bc>
 800db7e:	f000 809d 	beq.w	800dcbc <_dtoa_r+0x4b4>
 800db82:	f1cb 0600 	rsb	r6, fp, #0
 800db86:	4b9f      	ldr	r3, [pc, #636]	; (800de04 <_dtoa_r+0x5fc>)
 800db88:	4f9f      	ldr	r7, [pc, #636]	; (800de08 <_dtoa_r+0x600>)
 800db8a:	f006 020f 	and.w	r2, r6, #15
 800db8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db9a:	f7f2 fd59 	bl	8000650 <__aeabi_dmul>
 800db9e:	e9cd 0100 	strd	r0, r1, [sp]
 800dba2:	1136      	asrs	r6, r6, #4
 800dba4:	2300      	movs	r3, #0
 800dba6:	2502      	movs	r5, #2
 800dba8:	2e00      	cmp	r6, #0
 800dbaa:	d17c      	bne.n	800dca6 <_dtoa_r+0x49e>
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d191      	bne.n	800dad4 <_dtoa_r+0x2cc>
 800dbb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	f000 8084 	beq.w	800dcc0 <_dtoa_r+0x4b8>
 800dbb8:	e9dd 8900 	ldrd	r8, r9, [sp]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	4b93      	ldr	r3, [pc, #588]	; (800de0c <_dtoa_r+0x604>)
 800dbc0:	4640      	mov	r0, r8
 800dbc2:	4649      	mov	r1, r9
 800dbc4:	f7f2 ffb6 	bl	8000b34 <__aeabi_dcmplt>
 800dbc8:	2800      	cmp	r0, #0
 800dbca:	d079      	beq.n	800dcc0 <_dtoa_r+0x4b8>
 800dbcc:	9b03      	ldr	r3, [sp, #12]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d076      	beq.n	800dcc0 <_dtoa_r+0x4b8>
 800dbd2:	9b04      	ldr	r3, [sp, #16]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	dd34      	ble.n	800dc42 <_dtoa_r+0x43a>
 800dbd8:	2200      	movs	r2, #0
 800dbda:	4b8d      	ldr	r3, [pc, #564]	; (800de10 <_dtoa_r+0x608>)
 800dbdc:	4640      	mov	r0, r8
 800dbde:	4649      	mov	r1, r9
 800dbe0:	f7f2 fd36 	bl	8000650 <__aeabi_dmul>
 800dbe4:	e9cd 0100 	strd	r0, r1, [sp]
 800dbe8:	9e04      	ldr	r6, [sp, #16]
 800dbea:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dbee:	3501      	adds	r5, #1
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	f7f2 fcc7 	bl	8000584 <__aeabi_i2d>
 800dbf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbfa:	f7f2 fd29 	bl	8000650 <__aeabi_dmul>
 800dbfe:	2200      	movs	r2, #0
 800dc00:	4b84      	ldr	r3, [pc, #528]	; (800de14 <_dtoa_r+0x60c>)
 800dc02:	f7f2 fb73 	bl	80002ec <__adddf3>
 800dc06:	4680      	mov	r8, r0
 800dc08:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800dc0c:	2e00      	cmp	r6, #0
 800dc0e:	d15a      	bne.n	800dcc6 <_dtoa_r+0x4be>
 800dc10:	2200      	movs	r2, #0
 800dc12:	4b81      	ldr	r3, [pc, #516]	; (800de18 <_dtoa_r+0x610>)
 800dc14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc18:	f7f2 fb66 	bl	80002e8 <__aeabi_dsub>
 800dc1c:	4642      	mov	r2, r8
 800dc1e:	464b      	mov	r3, r9
 800dc20:	e9cd 0100 	strd	r0, r1, [sp]
 800dc24:	f7f2 ffa4 	bl	8000b70 <__aeabi_dcmpgt>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	f040 829b 	bne.w	800e164 <_dtoa_r+0x95c>
 800dc2e:	4642      	mov	r2, r8
 800dc30:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dc34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc38:	f7f2 ff7c 	bl	8000b34 <__aeabi_dcmplt>
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	f040 828f 	bne.w	800e160 <_dtoa_r+0x958>
 800dc42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dc46:	e9cd 2300 	strd	r2, r3, [sp]
 800dc4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	f2c0 8150 	blt.w	800def2 <_dtoa_r+0x6ea>
 800dc52:	f1bb 0f0e 	cmp.w	fp, #14
 800dc56:	f300 814c 	bgt.w	800def2 <_dtoa_r+0x6ea>
 800dc5a:	4b6a      	ldr	r3, [pc, #424]	; (800de04 <_dtoa_r+0x5fc>)
 800dc5c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dc60:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	f280 80da 	bge.w	800de20 <_dtoa_r+0x618>
 800dc6c:	9b03      	ldr	r3, [sp, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f300 80d6 	bgt.w	800de20 <_dtoa_r+0x618>
 800dc74:	f040 8273 	bne.w	800e15e <_dtoa_r+0x956>
 800dc78:	2200      	movs	r2, #0
 800dc7a:	4b67      	ldr	r3, [pc, #412]	; (800de18 <_dtoa_r+0x610>)
 800dc7c:	4640      	mov	r0, r8
 800dc7e:	4649      	mov	r1, r9
 800dc80:	f7f2 fce6 	bl	8000650 <__aeabi_dmul>
 800dc84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc88:	f7f2 ff68 	bl	8000b5c <__aeabi_dcmpge>
 800dc8c:	9e03      	ldr	r6, [sp, #12]
 800dc8e:	4637      	mov	r7, r6
 800dc90:	2800      	cmp	r0, #0
 800dc92:	f040 824a 	bne.w	800e12a <_dtoa_r+0x922>
 800dc96:	9b02      	ldr	r3, [sp, #8]
 800dc98:	9a02      	ldr	r2, [sp, #8]
 800dc9a:	1c5d      	adds	r5, r3, #1
 800dc9c:	2331      	movs	r3, #49	; 0x31
 800dc9e:	7013      	strb	r3, [r2, #0]
 800dca0:	f10b 0b01 	add.w	fp, fp, #1
 800dca4:	e245      	b.n	800e132 <_dtoa_r+0x92a>
 800dca6:	07f2      	lsls	r2, r6, #31
 800dca8:	d505      	bpl.n	800dcb6 <_dtoa_r+0x4ae>
 800dcaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcae:	f7f2 fccf 	bl	8000650 <__aeabi_dmul>
 800dcb2:	3501      	adds	r5, #1
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	1076      	asrs	r6, r6, #1
 800dcb8:	3708      	adds	r7, #8
 800dcba:	e775      	b.n	800dba8 <_dtoa_r+0x3a0>
 800dcbc:	2502      	movs	r5, #2
 800dcbe:	e777      	b.n	800dbb0 <_dtoa_r+0x3a8>
 800dcc0:	465f      	mov	r7, fp
 800dcc2:	9e03      	ldr	r6, [sp, #12]
 800dcc4:	e794      	b.n	800dbf0 <_dtoa_r+0x3e8>
 800dcc6:	9a02      	ldr	r2, [sp, #8]
 800dcc8:	4b4e      	ldr	r3, [pc, #312]	; (800de04 <_dtoa_r+0x5fc>)
 800dcca:	4432      	add	r2, r6
 800dccc:	9213      	str	r2, [sp, #76]	; 0x4c
 800dcce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcd0:	1e71      	subs	r1, r6, #1
 800dcd2:	2a00      	cmp	r2, #0
 800dcd4:	d048      	beq.n	800dd68 <_dtoa_r+0x560>
 800dcd6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800dcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcde:	2000      	movs	r0, #0
 800dce0:	494e      	ldr	r1, [pc, #312]	; (800de1c <_dtoa_r+0x614>)
 800dce2:	f7f2 fddf 	bl	80008a4 <__aeabi_ddiv>
 800dce6:	4642      	mov	r2, r8
 800dce8:	464b      	mov	r3, r9
 800dcea:	f7f2 fafd 	bl	80002e8 <__aeabi_dsub>
 800dcee:	9d02      	ldr	r5, [sp, #8]
 800dcf0:	4680      	mov	r8, r0
 800dcf2:	4689      	mov	r9, r1
 800dcf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcf8:	f7f2 ff5a 	bl	8000bb0 <__aeabi_d2iz>
 800dcfc:	4606      	mov	r6, r0
 800dcfe:	f7f2 fc41 	bl	8000584 <__aeabi_i2d>
 800dd02:	4602      	mov	r2, r0
 800dd04:	460b      	mov	r3, r1
 800dd06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd0a:	f7f2 faed 	bl	80002e8 <__aeabi_dsub>
 800dd0e:	3630      	adds	r6, #48	; 0x30
 800dd10:	f805 6b01 	strb.w	r6, [r5], #1
 800dd14:	4642      	mov	r2, r8
 800dd16:	464b      	mov	r3, r9
 800dd18:	e9cd 0100 	strd	r0, r1, [sp]
 800dd1c:	f7f2 ff0a 	bl	8000b34 <__aeabi_dcmplt>
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d165      	bne.n	800ddf0 <_dtoa_r+0x5e8>
 800dd24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd28:	2000      	movs	r0, #0
 800dd2a:	4938      	ldr	r1, [pc, #224]	; (800de0c <_dtoa_r+0x604>)
 800dd2c:	f7f2 fadc 	bl	80002e8 <__aeabi_dsub>
 800dd30:	4642      	mov	r2, r8
 800dd32:	464b      	mov	r3, r9
 800dd34:	f7f2 fefe 	bl	8000b34 <__aeabi_dcmplt>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	f040 80ba 	bne.w	800deb2 <_dtoa_r+0x6aa>
 800dd3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dd40:	429d      	cmp	r5, r3
 800dd42:	f43f af7e 	beq.w	800dc42 <_dtoa_r+0x43a>
 800dd46:	2200      	movs	r2, #0
 800dd48:	4b31      	ldr	r3, [pc, #196]	; (800de10 <_dtoa_r+0x608>)
 800dd4a:	4640      	mov	r0, r8
 800dd4c:	4649      	mov	r1, r9
 800dd4e:	f7f2 fc7f 	bl	8000650 <__aeabi_dmul>
 800dd52:	2200      	movs	r2, #0
 800dd54:	4680      	mov	r8, r0
 800dd56:	4689      	mov	r9, r1
 800dd58:	4b2d      	ldr	r3, [pc, #180]	; (800de10 <_dtoa_r+0x608>)
 800dd5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd5e:	f7f2 fc77 	bl	8000650 <__aeabi_dmul>
 800dd62:	e9cd 0100 	strd	r0, r1, [sp]
 800dd66:	e7c5      	b.n	800dcf4 <_dtoa_r+0x4ec>
 800dd68:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800dd6c:	4642      	mov	r2, r8
 800dd6e:	464b      	mov	r3, r9
 800dd70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd74:	f7f2 fc6c 	bl	8000650 <__aeabi_dmul>
 800dd78:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dd7c:	9d02      	ldr	r5, [sp, #8]
 800dd7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd82:	f7f2 ff15 	bl	8000bb0 <__aeabi_d2iz>
 800dd86:	4606      	mov	r6, r0
 800dd88:	f7f2 fbfc 	bl	8000584 <__aeabi_i2d>
 800dd8c:	3630      	adds	r6, #48	; 0x30
 800dd8e:	4602      	mov	r2, r0
 800dd90:	460b      	mov	r3, r1
 800dd92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd96:	f7f2 faa7 	bl	80002e8 <__aeabi_dsub>
 800dd9a:	f805 6b01 	strb.w	r6, [r5], #1
 800dd9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dda0:	42ab      	cmp	r3, r5
 800dda2:	4680      	mov	r8, r0
 800dda4:	4689      	mov	r9, r1
 800dda6:	f04f 0200 	mov.w	r2, #0
 800ddaa:	d125      	bne.n	800ddf8 <_dtoa_r+0x5f0>
 800ddac:	4b1b      	ldr	r3, [pc, #108]	; (800de1c <_dtoa_r+0x614>)
 800ddae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ddb2:	f7f2 fa9b 	bl	80002ec <__adddf3>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	460b      	mov	r3, r1
 800ddba:	4640      	mov	r0, r8
 800ddbc:	4649      	mov	r1, r9
 800ddbe:	f7f2 fed7 	bl	8000b70 <__aeabi_dcmpgt>
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	d175      	bne.n	800deb2 <_dtoa_r+0x6aa>
 800ddc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ddca:	2000      	movs	r0, #0
 800ddcc:	4913      	ldr	r1, [pc, #76]	; (800de1c <_dtoa_r+0x614>)
 800ddce:	f7f2 fa8b 	bl	80002e8 <__aeabi_dsub>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	4640      	mov	r0, r8
 800ddd8:	4649      	mov	r1, r9
 800ddda:	f7f2 feab 	bl	8000b34 <__aeabi_dcmplt>
 800ddde:	2800      	cmp	r0, #0
 800dde0:	f43f af2f 	beq.w	800dc42 <_dtoa_r+0x43a>
 800dde4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dde8:	2b30      	cmp	r3, #48	; 0x30
 800ddea:	f105 32ff 	add.w	r2, r5, #4294967295
 800ddee:	d001      	beq.n	800ddf4 <_dtoa_r+0x5ec>
 800ddf0:	46bb      	mov	fp, r7
 800ddf2:	e04d      	b.n	800de90 <_dtoa_r+0x688>
 800ddf4:	4615      	mov	r5, r2
 800ddf6:	e7f5      	b.n	800dde4 <_dtoa_r+0x5dc>
 800ddf8:	4b05      	ldr	r3, [pc, #20]	; (800de10 <_dtoa_r+0x608>)
 800ddfa:	f7f2 fc29 	bl	8000650 <__aeabi_dmul>
 800ddfe:	e9cd 0100 	strd	r0, r1, [sp]
 800de02:	e7bc      	b.n	800dd7e <_dtoa_r+0x576>
 800de04:	080124c0 	.word	0x080124c0
 800de08:	08012498 	.word	0x08012498
 800de0c:	3ff00000 	.word	0x3ff00000
 800de10:	40240000 	.word	0x40240000
 800de14:	401c0000 	.word	0x401c0000
 800de18:	40140000 	.word	0x40140000
 800de1c:	3fe00000 	.word	0x3fe00000
 800de20:	e9dd 6700 	ldrd	r6, r7, [sp]
 800de24:	9d02      	ldr	r5, [sp, #8]
 800de26:	4642      	mov	r2, r8
 800de28:	464b      	mov	r3, r9
 800de2a:	4630      	mov	r0, r6
 800de2c:	4639      	mov	r1, r7
 800de2e:	f7f2 fd39 	bl	80008a4 <__aeabi_ddiv>
 800de32:	f7f2 febd 	bl	8000bb0 <__aeabi_d2iz>
 800de36:	9000      	str	r0, [sp, #0]
 800de38:	f7f2 fba4 	bl	8000584 <__aeabi_i2d>
 800de3c:	4642      	mov	r2, r8
 800de3e:	464b      	mov	r3, r9
 800de40:	f7f2 fc06 	bl	8000650 <__aeabi_dmul>
 800de44:	4602      	mov	r2, r0
 800de46:	460b      	mov	r3, r1
 800de48:	4630      	mov	r0, r6
 800de4a:	4639      	mov	r1, r7
 800de4c:	f7f2 fa4c 	bl	80002e8 <__aeabi_dsub>
 800de50:	9e00      	ldr	r6, [sp, #0]
 800de52:	9f03      	ldr	r7, [sp, #12]
 800de54:	3630      	adds	r6, #48	; 0x30
 800de56:	f805 6b01 	strb.w	r6, [r5], #1
 800de5a:	9e02      	ldr	r6, [sp, #8]
 800de5c:	1bae      	subs	r6, r5, r6
 800de5e:	42b7      	cmp	r7, r6
 800de60:	4602      	mov	r2, r0
 800de62:	460b      	mov	r3, r1
 800de64:	d138      	bne.n	800ded8 <_dtoa_r+0x6d0>
 800de66:	f7f2 fa41 	bl	80002ec <__adddf3>
 800de6a:	4606      	mov	r6, r0
 800de6c:	460f      	mov	r7, r1
 800de6e:	4602      	mov	r2, r0
 800de70:	460b      	mov	r3, r1
 800de72:	4640      	mov	r0, r8
 800de74:	4649      	mov	r1, r9
 800de76:	f7f2 fe5d 	bl	8000b34 <__aeabi_dcmplt>
 800de7a:	b9c8      	cbnz	r0, 800deb0 <_dtoa_r+0x6a8>
 800de7c:	4632      	mov	r2, r6
 800de7e:	463b      	mov	r3, r7
 800de80:	4640      	mov	r0, r8
 800de82:	4649      	mov	r1, r9
 800de84:	f7f2 fe4c 	bl	8000b20 <__aeabi_dcmpeq>
 800de88:	b110      	cbz	r0, 800de90 <_dtoa_r+0x688>
 800de8a:	9b00      	ldr	r3, [sp, #0]
 800de8c:	07db      	lsls	r3, r3, #31
 800de8e:	d40f      	bmi.n	800deb0 <_dtoa_r+0x6a8>
 800de90:	4651      	mov	r1, sl
 800de92:	4620      	mov	r0, r4
 800de94:	f000 fce3 	bl	800e85e <_Bfree>
 800de98:	2300      	movs	r3, #0
 800de9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800de9c:	702b      	strb	r3, [r5, #0]
 800de9e:	f10b 0301 	add.w	r3, fp, #1
 800dea2:	6013      	str	r3, [r2, #0]
 800dea4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	f43f acf8 	beq.w	800d89c <_dtoa_r+0x94>
 800deac:	601d      	str	r5, [r3, #0]
 800deae:	e4f5      	b.n	800d89c <_dtoa_r+0x94>
 800deb0:	465f      	mov	r7, fp
 800deb2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800deb6:	2a39      	cmp	r2, #57	; 0x39
 800deb8:	f105 33ff 	add.w	r3, r5, #4294967295
 800debc:	d106      	bne.n	800decc <_dtoa_r+0x6c4>
 800debe:	9a02      	ldr	r2, [sp, #8]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d107      	bne.n	800ded4 <_dtoa_r+0x6cc>
 800dec4:	2330      	movs	r3, #48	; 0x30
 800dec6:	7013      	strb	r3, [r2, #0]
 800dec8:	3701      	adds	r7, #1
 800deca:	4613      	mov	r3, r2
 800decc:	781a      	ldrb	r2, [r3, #0]
 800dece:	3201      	adds	r2, #1
 800ded0:	701a      	strb	r2, [r3, #0]
 800ded2:	e78d      	b.n	800ddf0 <_dtoa_r+0x5e8>
 800ded4:	461d      	mov	r5, r3
 800ded6:	e7ec      	b.n	800deb2 <_dtoa_r+0x6aa>
 800ded8:	2200      	movs	r2, #0
 800deda:	4ba4      	ldr	r3, [pc, #656]	; (800e16c <_dtoa_r+0x964>)
 800dedc:	f7f2 fbb8 	bl	8000650 <__aeabi_dmul>
 800dee0:	2200      	movs	r2, #0
 800dee2:	2300      	movs	r3, #0
 800dee4:	4606      	mov	r6, r0
 800dee6:	460f      	mov	r7, r1
 800dee8:	f7f2 fe1a 	bl	8000b20 <__aeabi_dcmpeq>
 800deec:	2800      	cmp	r0, #0
 800deee:	d09a      	beq.n	800de26 <_dtoa_r+0x61e>
 800def0:	e7ce      	b.n	800de90 <_dtoa_r+0x688>
 800def2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800def4:	2a00      	cmp	r2, #0
 800def6:	f000 80cd 	beq.w	800e094 <_dtoa_r+0x88c>
 800defa:	9a07      	ldr	r2, [sp, #28]
 800defc:	2a01      	cmp	r2, #1
 800defe:	f300 80af 	bgt.w	800e060 <_dtoa_r+0x858>
 800df02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800df04:	2a00      	cmp	r2, #0
 800df06:	f000 80a7 	beq.w	800e058 <_dtoa_r+0x850>
 800df0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800df0e:	9e08      	ldr	r6, [sp, #32]
 800df10:	9d05      	ldr	r5, [sp, #20]
 800df12:	9a05      	ldr	r2, [sp, #20]
 800df14:	441a      	add	r2, r3
 800df16:	9205      	str	r2, [sp, #20]
 800df18:	9a06      	ldr	r2, [sp, #24]
 800df1a:	2101      	movs	r1, #1
 800df1c:	441a      	add	r2, r3
 800df1e:	4620      	mov	r0, r4
 800df20:	9206      	str	r2, [sp, #24]
 800df22:	f000 fd3c 	bl	800e99e <__i2b>
 800df26:	4607      	mov	r7, r0
 800df28:	2d00      	cmp	r5, #0
 800df2a:	dd0c      	ble.n	800df46 <_dtoa_r+0x73e>
 800df2c:	9b06      	ldr	r3, [sp, #24]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	dd09      	ble.n	800df46 <_dtoa_r+0x73e>
 800df32:	42ab      	cmp	r3, r5
 800df34:	9a05      	ldr	r2, [sp, #20]
 800df36:	bfa8      	it	ge
 800df38:	462b      	movge	r3, r5
 800df3a:	1ad2      	subs	r2, r2, r3
 800df3c:	9205      	str	r2, [sp, #20]
 800df3e:	9a06      	ldr	r2, [sp, #24]
 800df40:	1aed      	subs	r5, r5, r3
 800df42:	1ad3      	subs	r3, r2, r3
 800df44:	9306      	str	r3, [sp, #24]
 800df46:	9b08      	ldr	r3, [sp, #32]
 800df48:	b1f3      	cbz	r3, 800df88 <_dtoa_r+0x780>
 800df4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f000 80a5 	beq.w	800e09c <_dtoa_r+0x894>
 800df52:	2e00      	cmp	r6, #0
 800df54:	dd10      	ble.n	800df78 <_dtoa_r+0x770>
 800df56:	4639      	mov	r1, r7
 800df58:	4632      	mov	r2, r6
 800df5a:	4620      	mov	r0, r4
 800df5c:	f000 fdb6 	bl	800eacc <__pow5mult>
 800df60:	4652      	mov	r2, sl
 800df62:	4601      	mov	r1, r0
 800df64:	4607      	mov	r7, r0
 800df66:	4620      	mov	r0, r4
 800df68:	f000 fd22 	bl	800e9b0 <__multiply>
 800df6c:	4651      	mov	r1, sl
 800df6e:	4680      	mov	r8, r0
 800df70:	4620      	mov	r0, r4
 800df72:	f000 fc74 	bl	800e85e <_Bfree>
 800df76:	46c2      	mov	sl, r8
 800df78:	9b08      	ldr	r3, [sp, #32]
 800df7a:	1b9a      	subs	r2, r3, r6
 800df7c:	d004      	beq.n	800df88 <_dtoa_r+0x780>
 800df7e:	4651      	mov	r1, sl
 800df80:	4620      	mov	r0, r4
 800df82:	f000 fda3 	bl	800eacc <__pow5mult>
 800df86:	4682      	mov	sl, r0
 800df88:	2101      	movs	r1, #1
 800df8a:	4620      	mov	r0, r4
 800df8c:	f000 fd07 	bl	800e99e <__i2b>
 800df90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df92:	2b00      	cmp	r3, #0
 800df94:	4606      	mov	r6, r0
 800df96:	f340 8083 	ble.w	800e0a0 <_dtoa_r+0x898>
 800df9a:	461a      	mov	r2, r3
 800df9c:	4601      	mov	r1, r0
 800df9e:	4620      	mov	r0, r4
 800dfa0:	f000 fd94 	bl	800eacc <__pow5mult>
 800dfa4:	9b07      	ldr	r3, [sp, #28]
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	4606      	mov	r6, r0
 800dfaa:	dd7c      	ble.n	800e0a6 <_dtoa_r+0x89e>
 800dfac:	f04f 0800 	mov.w	r8, #0
 800dfb0:	6933      	ldr	r3, [r6, #16]
 800dfb2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dfb6:	6918      	ldr	r0, [r3, #16]
 800dfb8:	f000 fca3 	bl	800e902 <__hi0bits>
 800dfbc:	f1c0 0020 	rsb	r0, r0, #32
 800dfc0:	9b06      	ldr	r3, [sp, #24]
 800dfc2:	4418      	add	r0, r3
 800dfc4:	f010 001f 	ands.w	r0, r0, #31
 800dfc8:	f000 8096 	beq.w	800e0f8 <_dtoa_r+0x8f0>
 800dfcc:	f1c0 0320 	rsb	r3, r0, #32
 800dfd0:	2b04      	cmp	r3, #4
 800dfd2:	f340 8087 	ble.w	800e0e4 <_dtoa_r+0x8dc>
 800dfd6:	9b05      	ldr	r3, [sp, #20]
 800dfd8:	f1c0 001c 	rsb	r0, r0, #28
 800dfdc:	4403      	add	r3, r0
 800dfde:	9305      	str	r3, [sp, #20]
 800dfe0:	9b06      	ldr	r3, [sp, #24]
 800dfe2:	4405      	add	r5, r0
 800dfe4:	4403      	add	r3, r0
 800dfe6:	9306      	str	r3, [sp, #24]
 800dfe8:	9b05      	ldr	r3, [sp, #20]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	dd05      	ble.n	800dffa <_dtoa_r+0x7f2>
 800dfee:	4651      	mov	r1, sl
 800dff0:	461a      	mov	r2, r3
 800dff2:	4620      	mov	r0, r4
 800dff4:	f000 fdb8 	bl	800eb68 <__lshift>
 800dff8:	4682      	mov	sl, r0
 800dffa:	9b06      	ldr	r3, [sp, #24]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	dd05      	ble.n	800e00c <_dtoa_r+0x804>
 800e000:	4631      	mov	r1, r6
 800e002:	461a      	mov	r2, r3
 800e004:	4620      	mov	r0, r4
 800e006:	f000 fdaf 	bl	800eb68 <__lshift>
 800e00a:	4606      	mov	r6, r0
 800e00c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d074      	beq.n	800e0fc <_dtoa_r+0x8f4>
 800e012:	4631      	mov	r1, r6
 800e014:	4650      	mov	r0, sl
 800e016:	f000 fdf8 	bl	800ec0a <__mcmp>
 800e01a:	2800      	cmp	r0, #0
 800e01c:	da6e      	bge.n	800e0fc <_dtoa_r+0x8f4>
 800e01e:	2300      	movs	r3, #0
 800e020:	4651      	mov	r1, sl
 800e022:	220a      	movs	r2, #10
 800e024:	4620      	mov	r0, r4
 800e026:	f000 fc31 	bl	800e88c <__multadd>
 800e02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e02c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e030:	4682      	mov	sl, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	f000 81a8 	beq.w	800e388 <_dtoa_r+0xb80>
 800e038:	2300      	movs	r3, #0
 800e03a:	4639      	mov	r1, r7
 800e03c:	220a      	movs	r2, #10
 800e03e:	4620      	mov	r0, r4
 800e040:	f000 fc24 	bl	800e88c <__multadd>
 800e044:	9b04      	ldr	r3, [sp, #16]
 800e046:	2b00      	cmp	r3, #0
 800e048:	4607      	mov	r7, r0
 800e04a:	f300 80c8 	bgt.w	800e1de <_dtoa_r+0x9d6>
 800e04e:	9b07      	ldr	r3, [sp, #28]
 800e050:	2b02      	cmp	r3, #2
 800e052:	f340 80c4 	ble.w	800e1de <_dtoa_r+0x9d6>
 800e056:	e059      	b.n	800e10c <_dtoa_r+0x904>
 800e058:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e05a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e05e:	e756      	b.n	800df0e <_dtoa_r+0x706>
 800e060:	9b03      	ldr	r3, [sp, #12]
 800e062:	1e5e      	subs	r6, r3, #1
 800e064:	9b08      	ldr	r3, [sp, #32]
 800e066:	42b3      	cmp	r3, r6
 800e068:	bfbf      	itttt	lt
 800e06a:	9b08      	ldrlt	r3, [sp, #32]
 800e06c:	9608      	strlt	r6, [sp, #32]
 800e06e:	1af2      	sublt	r2, r6, r3
 800e070:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800e072:	bfb6      	itet	lt
 800e074:	189b      	addlt	r3, r3, r2
 800e076:	1b9e      	subge	r6, r3, r6
 800e078:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800e07a:	9b03      	ldr	r3, [sp, #12]
 800e07c:	bfb8      	it	lt
 800e07e:	2600      	movlt	r6, #0
 800e080:	2b00      	cmp	r3, #0
 800e082:	bfb9      	ittee	lt
 800e084:	9b05      	ldrlt	r3, [sp, #20]
 800e086:	9a03      	ldrlt	r2, [sp, #12]
 800e088:	9d05      	ldrge	r5, [sp, #20]
 800e08a:	9b03      	ldrge	r3, [sp, #12]
 800e08c:	bfbc      	itt	lt
 800e08e:	1a9d      	sublt	r5, r3, r2
 800e090:	2300      	movlt	r3, #0
 800e092:	e73e      	b.n	800df12 <_dtoa_r+0x70a>
 800e094:	9e08      	ldr	r6, [sp, #32]
 800e096:	9d05      	ldr	r5, [sp, #20]
 800e098:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e09a:	e745      	b.n	800df28 <_dtoa_r+0x720>
 800e09c:	9a08      	ldr	r2, [sp, #32]
 800e09e:	e76e      	b.n	800df7e <_dtoa_r+0x776>
 800e0a0:	9b07      	ldr	r3, [sp, #28]
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	dc19      	bgt.n	800e0da <_dtoa_r+0x8d2>
 800e0a6:	9b00      	ldr	r3, [sp, #0]
 800e0a8:	b9bb      	cbnz	r3, 800e0da <_dtoa_r+0x8d2>
 800e0aa:	9b01      	ldr	r3, [sp, #4]
 800e0ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0b0:	b99b      	cbnz	r3, 800e0da <_dtoa_r+0x8d2>
 800e0b2:	9b01      	ldr	r3, [sp, #4]
 800e0b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0b8:	0d1b      	lsrs	r3, r3, #20
 800e0ba:	051b      	lsls	r3, r3, #20
 800e0bc:	b183      	cbz	r3, 800e0e0 <_dtoa_r+0x8d8>
 800e0be:	9b05      	ldr	r3, [sp, #20]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	9305      	str	r3, [sp, #20]
 800e0c4:	9b06      	ldr	r3, [sp, #24]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	9306      	str	r3, [sp, #24]
 800e0ca:	f04f 0801 	mov.w	r8, #1
 800e0ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	f47f af6d 	bne.w	800dfb0 <_dtoa_r+0x7a8>
 800e0d6:	2001      	movs	r0, #1
 800e0d8:	e772      	b.n	800dfc0 <_dtoa_r+0x7b8>
 800e0da:	f04f 0800 	mov.w	r8, #0
 800e0de:	e7f6      	b.n	800e0ce <_dtoa_r+0x8c6>
 800e0e0:	4698      	mov	r8, r3
 800e0e2:	e7f4      	b.n	800e0ce <_dtoa_r+0x8c6>
 800e0e4:	d080      	beq.n	800dfe8 <_dtoa_r+0x7e0>
 800e0e6:	9a05      	ldr	r2, [sp, #20]
 800e0e8:	331c      	adds	r3, #28
 800e0ea:	441a      	add	r2, r3
 800e0ec:	9205      	str	r2, [sp, #20]
 800e0ee:	9a06      	ldr	r2, [sp, #24]
 800e0f0:	441a      	add	r2, r3
 800e0f2:	441d      	add	r5, r3
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	e776      	b.n	800dfe6 <_dtoa_r+0x7de>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	e7f4      	b.n	800e0e6 <_dtoa_r+0x8de>
 800e0fc:	9b03      	ldr	r3, [sp, #12]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	dc36      	bgt.n	800e170 <_dtoa_r+0x968>
 800e102:	9b07      	ldr	r3, [sp, #28]
 800e104:	2b02      	cmp	r3, #2
 800e106:	dd33      	ble.n	800e170 <_dtoa_r+0x968>
 800e108:	9b03      	ldr	r3, [sp, #12]
 800e10a:	9304      	str	r3, [sp, #16]
 800e10c:	9b04      	ldr	r3, [sp, #16]
 800e10e:	b963      	cbnz	r3, 800e12a <_dtoa_r+0x922>
 800e110:	4631      	mov	r1, r6
 800e112:	2205      	movs	r2, #5
 800e114:	4620      	mov	r0, r4
 800e116:	f000 fbb9 	bl	800e88c <__multadd>
 800e11a:	4601      	mov	r1, r0
 800e11c:	4606      	mov	r6, r0
 800e11e:	4650      	mov	r0, sl
 800e120:	f000 fd73 	bl	800ec0a <__mcmp>
 800e124:	2800      	cmp	r0, #0
 800e126:	f73f adb6 	bgt.w	800dc96 <_dtoa_r+0x48e>
 800e12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e12c:	9d02      	ldr	r5, [sp, #8]
 800e12e:	ea6f 0b03 	mvn.w	fp, r3
 800e132:	2300      	movs	r3, #0
 800e134:	9303      	str	r3, [sp, #12]
 800e136:	4631      	mov	r1, r6
 800e138:	4620      	mov	r0, r4
 800e13a:	f000 fb90 	bl	800e85e <_Bfree>
 800e13e:	2f00      	cmp	r7, #0
 800e140:	f43f aea6 	beq.w	800de90 <_dtoa_r+0x688>
 800e144:	9b03      	ldr	r3, [sp, #12]
 800e146:	b12b      	cbz	r3, 800e154 <_dtoa_r+0x94c>
 800e148:	42bb      	cmp	r3, r7
 800e14a:	d003      	beq.n	800e154 <_dtoa_r+0x94c>
 800e14c:	4619      	mov	r1, r3
 800e14e:	4620      	mov	r0, r4
 800e150:	f000 fb85 	bl	800e85e <_Bfree>
 800e154:	4639      	mov	r1, r7
 800e156:	4620      	mov	r0, r4
 800e158:	f000 fb81 	bl	800e85e <_Bfree>
 800e15c:	e698      	b.n	800de90 <_dtoa_r+0x688>
 800e15e:	2600      	movs	r6, #0
 800e160:	4637      	mov	r7, r6
 800e162:	e7e2      	b.n	800e12a <_dtoa_r+0x922>
 800e164:	46bb      	mov	fp, r7
 800e166:	4637      	mov	r7, r6
 800e168:	e595      	b.n	800dc96 <_dtoa_r+0x48e>
 800e16a:	bf00      	nop
 800e16c:	40240000 	.word	0x40240000
 800e170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e172:	bb93      	cbnz	r3, 800e1da <_dtoa_r+0x9d2>
 800e174:	9b03      	ldr	r3, [sp, #12]
 800e176:	9304      	str	r3, [sp, #16]
 800e178:	9d02      	ldr	r5, [sp, #8]
 800e17a:	4631      	mov	r1, r6
 800e17c:	4650      	mov	r0, sl
 800e17e:	f7ff fab5 	bl	800d6ec <quorem>
 800e182:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e186:	f805 9b01 	strb.w	r9, [r5], #1
 800e18a:	9b02      	ldr	r3, [sp, #8]
 800e18c:	9a04      	ldr	r2, [sp, #16]
 800e18e:	1aeb      	subs	r3, r5, r3
 800e190:	429a      	cmp	r2, r3
 800e192:	f300 80dc 	bgt.w	800e34e <_dtoa_r+0xb46>
 800e196:	9b02      	ldr	r3, [sp, #8]
 800e198:	2a01      	cmp	r2, #1
 800e19a:	bfac      	ite	ge
 800e19c:	189b      	addge	r3, r3, r2
 800e19e:	3301      	addlt	r3, #1
 800e1a0:	4698      	mov	r8, r3
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	9303      	str	r3, [sp, #12]
 800e1a6:	4651      	mov	r1, sl
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f000 fcdc 	bl	800eb68 <__lshift>
 800e1b0:	4631      	mov	r1, r6
 800e1b2:	4682      	mov	sl, r0
 800e1b4:	f000 fd29 	bl	800ec0a <__mcmp>
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	f300 808d 	bgt.w	800e2d8 <_dtoa_r+0xad0>
 800e1be:	d103      	bne.n	800e1c8 <_dtoa_r+0x9c0>
 800e1c0:	f019 0f01 	tst.w	r9, #1
 800e1c4:	f040 8088 	bne.w	800e2d8 <_dtoa_r+0xad0>
 800e1c8:	4645      	mov	r5, r8
 800e1ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e1ce:	2b30      	cmp	r3, #48	; 0x30
 800e1d0:	f105 32ff 	add.w	r2, r5, #4294967295
 800e1d4:	d1af      	bne.n	800e136 <_dtoa_r+0x92e>
 800e1d6:	4615      	mov	r5, r2
 800e1d8:	e7f7      	b.n	800e1ca <_dtoa_r+0x9c2>
 800e1da:	9b03      	ldr	r3, [sp, #12]
 800e1dc:	9304      	str	r3, [sp, #16]
 800e1de:	2d00      	cmp	r5, #0
 800e1e0:	dd05      	ble.n	800e1ee <_dtoa_r+0x9e6>
 800e1e2:	4639      	mov	r1, r7
 800e1e4:	462a      	mov	r2, r5
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f000 fcbe 	bl	800eb68 <__lshift>
 800e1ec:	4607      	mov	r7, r0
 800e1ee:	f1b8 0f00 	cmp.w	r8, #0
 800e1f2:	d04c      	beq.n	800e28e <_dtoa_r+0xa86>
 800e1f4:	6879      	ldr	r1, [r7, #4]
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f000 fafd 	bl	800e7f6 <_Balloc>
 800e1fc:	693a      	ldr	r2, [r7, #16]
 800e1fe:	3202      	adds	r2, #2
 800e200:	4605      	mov	r5, r0
 800e202:	0092      	lsls	r2, r2, #2
 800e204:	f107 010c 	add.w	r1, r7, #12
 800e208:	300c      	adds	r0, #12
 800e20a:	f000 fae7 	bl	800e7dc <memcpy>
 800e20e:	2201      	movs	r2, #1
 800e210:	4629      	mov	r1, r5
 800e212:	4620      	mov	r0, r4
 800e214:	f000 fca8 	bl	800eb68 <__lshift>
 800e218:	9b00      	ldr	r3, [sp, #0]
 800e21a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e21e:	9703      	str	r7, [sp, #12]
 800e220:	f003 0301 	and.w	r3, r3, #1
 800e224:	4607      	mov	r7, r0
 800e226:	9305      	str	r3, [sp, #20]
 800e228:	4631      	mov	r1, r6
 800e22a:	4650      	mov	r0, sl
 800e22c:	f7ff fa5e 	bl	800d6ec <quorem>
 800e230:	9903      	ldr	r1, [sp, #12]
 800e232:	4605      	mov	r5, r0
 800e234:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e238:	4650      	mov	r0, sl
 800e23a:	f000 fce6 	bl	800ec0a <__mcmp>
 800e23e:	463a      	mov	r2, r7
 800e240:	9000      	str	r0, [sp, #0]
 800e242:	4631      	mov	r1, r6
 800e244:	4620      	mov	r0, r4
 800e246:	f000 fcfa 	bl	800ec3e <__mdiff>
 800e24a:	68c3      	ldr	r3, [r0, #12]
 800e24c:	4602      	mov	r2, r0
 800e24e:	bb03      	cbnz	r3, 800e292 <_dtoa_r+0xa8a>
 800e250:	4601      	mov	r1, r0
 800e252:	9006      	str	r0, [sp, #24]
 800e254:	4650      	mov	r0, sl
 800e256:	f000 fcd8 	bl	800ec0a <__mcmp>
 800e25a:	9a06      	ldr	r2, [sp, #24]
 800e25c:	4603      	mov	r3, r0
 800e25e:	4611      	mov	r1, r2
 800e260:	4620      	mov	r0, r4
 800e262:	9306      	str	r3, [sp, #24]
 800e264:	f000 fafb 	bl	800e85e <_Bfree>
 800e268:	9b06      	ldr	r3, [sp, #24]
 800e26a:	b9a3      	cbnz	r3, 800e296 <_dtoa_r+0xa8e>
 800e26c:	9a07      	ldr	r2, [sp, #28]
 800e26e:	b992      	cbnz	r2, 800e296 <_dtoa_r+0xa8e>
 800e270:	9a05      	ldr	r2, [sp, #20]
 800e272:	b982      	cbnz	r2, 800e296 <_dtoa_r+0xa8e>
 800e274:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e278:	d029      	beq.n	800e2ce <_dtoa_r+0xac6>
 800e27a:	9b00      	ldr	r3, [sp, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	dd01      	ble.n	800e284 <_dtoa_r+0xa7c>
 800e280:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800e284:	f108 0501 	add.w	r5, r8, #1
 800e288:	f888 9000 	strb.w	r9, [r8]
 800e28c:	e753      	b.n	800e136 <_dtoa_r+0x92e>
 800e28e:	4638      	mov	r0, r7
 800e290:	e7c2      	b.n	800e218 <_dtoa_r+0xa10>
 800e292:	2301      	movs	r3, #1
 800e294:	e7e3      	b.n	800e25e <_dtoa_r+0xa56>
 800e296:	9a00      	ldr	r2, [sp, #0]
 800e298:	2a00      	cmp	r2, #0
 800e29a:	db04      	blt.n	800e2a6 <_dtoa_r+0xa9e>
 800e29c:	d125      	bne.n	800e2ea <_dtoa_r+0xae2>
 800e29e:	9a07      	ldr	r2, [sp, #28]
 800e2a0:	bb1a      	cbnz	r2, 800e2ea <_dtoa_r+0xae2>
 800e2a2:	9a05      	ldr	r2, [sp, #20]
 800e2a4:	bb0a      	cbnz	r2, 800e2ea <_dtoa_r+0xae2>
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	ddec      	ble.n	800e284 <_dtoa_r+0xa7c>
 800e2aa:	4651      	mov	r1, sl
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f000 fc5a 	bl	800eb68 <__lshift>
 800e2b4:	4631      	mov	r1, r6
 800e2b6:	4682      	mov	sl, r0
 800e2b8:	f000 fca7 	bl	800ec0a <__mcmp>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	dc03      	bgt.n	800e2c8 <_dtoa_r+0xac0>
 800e2c0:	d1e0      	bne.n	800e284 <_dtoa_r+0xa7c>
 800e2c2:	f019 0f01 	tst.w	r9, #1
 800e2c6:	d0dd      	beq.n	800e284 <_dtoa_r+0xa7c>
 800e2c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e2cc:	d1d8      	bne.n	800e280 <_dtoa_r+0xa78>
 800e2ce:	2339      	movs	r3, #57	; 0x39
 800e2d0:	f888 3000 	strb.w	r3, [r8]
 800e2d4:	f108 0801 	add.w	r8, r8, #1
 800e2d8:	4645      	mov	r5, r8
 800e2da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e2de:	2b39      	cmp	r3, #57	; 0x39
 800e2e0:	f105 32ff 	add.w	r2, r5, #4294967295
 800e2e4:	d03b      	beq.n	800e35e <_dtoa_r+0xb56>
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	e040      	b.n	800e36c <_dtoa_r+0xb64>
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	f108 0501 	add.w	r5, r8, #1
 800e2f0:	dd05      	ble.n	800e2fe <_dtoa_r+0xaf6>
 800e2f2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e2f6:	d0ea      	beq.n	800e2ce <_dtoa_r+0xac6>
 800e2f8:	f109 0901 	add.w	r9, r9, #1
 800e2fc:	e7c4      	b.n	800e288 <_dtoa_r+0xa80>
 800e2fe:	9b02      	ldr	r3, [sp, #8]
 800e300:	9a04      	ldr	r2, [sp, #16]
 800e302:	f805 9c01 	strb.w	r9, [r5, #-1]
 800e306:	1aeb      	subs	r3, r5, r3
 800e308:	4293      	cmp	r3, r2
 800e30a:	46a8      	mov	r8, r5
 800e30c:	f43f af4b 	beq.w	800e1a6 <_dtoa_r+0x99e>
 800e310:	4651      	mov	r1, sl
 800e312:	2300      	movs	r3, #0
 800e314:	220a      	movs	r2, #10
 800e316:	4620      	mov	r0, r4
 800e318:	f000 fab8 	bl	800e88c <__multadd>
 800e31c:	9b03      	ldr	r3, [sp, #12]
 800e31e:	9903      	ldr	r1, [sp, #12]
 800e320:	42bb      	cmp	r3, r7
 800e322:	4682      	mov	sl, r0
 800e324:	f04f 0300 	mov.w	r3, #0
 800e328:	f04f 020a 	mov.w	r2, #10
 800e32c:	4620      	mov	r0, r4
 800e32e:	d104      	bne.n	800e33a <_dtoa_r+0xb32>
 800e330:	f000 faac 	bl	800e88c <__multadd>
 800e334:	9003      	str	r0, [sp, #12]
 800e336:	4607      	mov	r7, r0
 800e338:	e776      	b.n	800e228 <_dtoa_r+0xa20>
 800e33a:	f000 faa7 	bl	800e88c <__multadd>
 800e33e:	2300      	movs	r3, #0
 800e340:	9003      	str	r0, [sp, #12]
 800e342:	220a      	movs	r2, #10
 800e344:	4639      	mov	r1, r7
 800e346:	4620      	mov	r0, r4
 800e348:	f000 faa0 	bl	800e88c <__multadd>
 800e34c:	e7f3      	b.n	800e336 <_dtoa_r+0xb2e>
 800e34e:	4651      	mov	r1, sl
 800e350:	2300      	movs	r3, #0
 800e352:	220a      	movs	r2, #10
 800e354:	4620      	mov	r0, r4
 800e356:	f000 fa99 	bl	800e88c <__multadd>
 800e35a:	4682      	mov	sl, r0
 800e35c:	e70d      	b.n	800e17a <_dtoa_r+0x972>
 800e35e:	9b02      	ldr	r3, [sp, #8]
 800e360:	4293      	cmp	r3, r2
 800e362:	d105      	bne.n	800e370 <_dtoa_r+0xb68>
 800e364:	9a02      	ldr	r2, [sp, #8]
 800e366:	f10b 0b01 	add.w	fp, fp, #1
 800e36a:	2331      	movs	r3, #49	; 0x31
 800e36c:	7013      	strb	r3, [r2, #0]
 800e36e:	e6e2      	b.n	800e136 <_dtoa_r+0x92e>
 800e370:	4615      	mov	r5, r2
 800e372:	e7b2      	b.n	800e2da <_dtoa_r+0xad2>
 800e374:	4b09      	ldr	r3, [pc, #36]	; (800e39c <_dtoa_r+0xb94>)
 800e376:	f7ff baae 	b.w	800d8d6 <_dtoa_r+0xce>
 800e37a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f47f aa88 	bne.w	800d892 <_dtoa_r+0x8a>
 800e382:	4b07      	ldr	r3, [pc, #28]	; (800e3a0 <_dtoa_r+0xb98>)
 800e384:	f7ff baa7 	b.w	800d8d6 <_dtoa_r+0xce>
 800e388:	9b04      	ldr	r3, [sp, #16]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	f73f aef4 	bgt.w	800e178 <_dtoa_r+0x970>
 800e390:	9b07      	ldr	r3, [sp, #28]
 800e392:	2b02      	cmp	r3, #2
 800e394:	f77f aef0 	ble.w	800e178 <_dtoa_r+0x970>
 800e398:	e6b8      	b.n	800e10c <_dtoa_r+0x904>
 800e39a:	bf00      	nop
 800e39c:	08012302 	.word	0x08012302
 800e3a0:	08012427 	.word	0x08012427

0800e3a4 <__sflush_r>:
 800e3a4:	898a      	ldrh	r2, [r1, #12]
 800e3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3aa:	4605      	mov	r5, r0
 800e3ac:	0710      	lsls	r0, r2, #28
 800e3ae:	460c      	mov	r4, r1
 800e3b0:	d45a      	bmi.n	800e468 <__sflush_r+0xc4>
 800e3b2:	684b      	ldr	r3, [r1, #4]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	dc05      	bgt.n	800e3c4 <__sflush_r+0x20>
 800e3b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	dc02      	bgt.n	800e3c4 <__sflush_r+0x20>
 800e3be:	2000      	movs	r0, #0
 800e3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3c6:	2e00      	cmp	r6, #0
 800e3c8:	d0f9      	beq.n	800e3be <__sflush_r+0x1a>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e3d0:	682f      	ldr	r7, [r5, #0]
 800e3d2:	602b      	str	r3, [r5, #0]
 800e3d4:	d033      	beq.n	800e43e <__sflush_r+0x9a>
 800e3d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e3d8:	89a3      	ldrh	r3, [r4, #12]
 800e3da:	075a      	lsls	r2, r3, #29
 800e3dc:	d505      	bpl.n	800e3ea <__sflush_r+0x46>
 800e3de:	6863      	ldr	r3, [r4, #4]
 800e3e0:	1ac0      	subs	r0, r0, r3
 800e3e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3e4:	b10b      	cbz	r3, 800e3ea <__sflush_r+0x46>
 800e3e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3e8:	1ac0      	subs	r0, r0, r3
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3f0:	6a21      	ldr	r1, [r4, #32]
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	47b0      	blx	r6
 800e3f6:	1c43      	adds	r3, r0, #1
 800e3f8:	89a3      	ldrh	r3, [r4, #12]
 800e3fa:	d106      	bne.n	800e40a <__sflush_r+0x66>
 800e3fc:	6829      	ldr	r1, [r5, #0]
 800e3fe:	291d      	cmp	r1, #29
 800e400:	d84b      	bhi.n	800e49a <__sflush_r+0xf6>
 800e402:	4a2b      	ldr	r2, [pc, #172]	; (800e4b0 <__sflush_r+0x10c>)
 800e404:	40ca      	lsrs	r2, r1
 800e406:	07d6      	lsls	r6, r2, #31
 800e408:	d547      	bpl.n	800e49a <__sflush_r+0xf6>
 800e40a:	2200      	movs	r2, #0
 800e40c:	6062      	str	r2, [r4, #4]
 800e40e:	04d9      	lsls	r1, r3, #19
 800e410:	6922      	ldr	r2, [r4, #16]
 800e412:	6022      	str	r2, [r4, #0]
 800e414:	d504      	bpl.n	800e420 <__sflush_r+0x7c>
 800e416:	1c42      	adds	r2, r0, #1
 800e418:	d101      	bne.n	800e41e <__sflush_r+0x7a>
 800e41a:	682b      	ldr	r3, [r5, #0]
 800e41c:	b903      	cbnz	r3, 800e420 <__sflush_r+0x7c>
 800e41e:	6560      	str	r0, [r4, #84]	; 0x54
 800e420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e422:	602f      	str	r7, [r5, #0]
 800e424:	2900      	cmp	r1, #0
 800e426:	d0ca      	beq.n	800e3be <__sflush_r+0x1a>
 800e428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e42c:	4299      	cmp	r1, r3
 800e42e:	d002      	beq.n	800e436 <__sflush_r+0x92>
 800e430:	4628      	mov	r0, r5
 800e432:	f7fe f9a9 	bl	800c788 <_free_r>
 800e436:	2000      	movs	r0, #0
 800e438:	6360      	str	r0, [r4, #52]	; 0x34
 800e43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e43e:	6a21      	ldr	r1, [r4, #32]
 800e440:	2301      	movs	r3, #1
 800e442:	4628      	mov	r0, r5
 800e444:	47b0      	blx	r6
 800e446:	1c41      	adds	r1, r0, #1
 800e448:	d1c6      	bne.n	800e3d8 <__sflush_r+0x34>
 800e44a:	682b      	ldr	r3, [r5, #0]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d0c3      	beq.n	800e3d8 <__sflush_r+0x34>
 800e450:	2b1d      	cmp	r3, #29
 800e452:	d001      	beq.n	800e458 <__sflush_r+0xb4>
 800e454:	2b16      	cmp	r3, #22
 800e456:	d101      	bne.n	800e45c <__sflush_r+0xb8>
 800e458:	602f      	str	r7, [r5, #0]
 800e45a:	e7b0      	b.n	800e3be <__sflush_r+0x1a>
 800e45c:	89a3      	ldrh	r3, [r4, #12]
 800e45e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e462:	81a3      	strh	r3, [r4, #12]
 800e464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e468:	690f      	ldr	r7, [r1, #16]
 800e46a:	2f00      	cmp	r7, #0
 800e46c:	d0a7      	beq.n	800e3be <__sflush_r+0x1a>
 800e46e:	0793      	lsls	r3, r2, #30
 800e470:	680e      	ldr	r6, [r1, #0]
 800e472:	bf08      	it	eq
 800e474:	694b      	ldreq	r3, [r1, #20]
 800e476:	600f      	str	r7, [r1, #0]
 800e478:	bf18      	it	ne
 800e47a:	2300      	movne	r3, #0
 800e47c:	eba6 0807 	sub.w	r8, r6, r7
 800e480:	608b      	str	r3, [r1, #8]
 800e482:	f1b8 0f00 	cmp.w	r8, #0
 800e486:	dd9a      	ble.n	800e3be <__sflush_r+0x1a>
 800e488:	4643      	mov	r3, r8
 800e48a:	463a      	mov	r2, r7
 800e48c:	6a21      	ldr	r1, [r4, #32]
 800e48e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e490:	4628      	mov	r0, r5
 800e492:	47b0      	blx	r6
 800e494:	2800      	cmp	r0, #0
 800e496:	dc07      	bgt.n	800e4a8 <__sflush_r+0x104>
 800e498:	89a3      	ldrh	r3, [r4, #12]
 800e49a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e49e:	81a3      	strh	r3, [r4, #12]
 800e4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4a8:	4407      	add	r7, r0
 800e4aa:	eba8 0800 	sub.w	r8, r8, r0
 800e4ae:	e7e8      	b.n	800e482 <__sflush_r+0xde>
 800e4b0:	20400001 	.word	0x20400001

0800e4b4 <_fflush_r>:
 800e4b4:	b538      	push	{r3, r4, r5, lr}
 800e4b6:	690b      	ldr	r3, [r1, #16]
 800e4b8:	4605      	mov	r5, r0
 800e4ba:	460c      	mov	r4, r1
 800e4bc:	b1db      	cbz	r3, 800e4f6 <_fflush_r+0x42>
 800e4be:	b118      	cbz	r0, 800e4c8 <_fflush_r+0x14>
 800e4c0:	6983      	ldr	r3, [r0, #24]
 800e4c2:	b90b      	cbnz	r3, 800e4c8 <_fflush_r+0x14>
 800e4c4:	f000 f872 	bl	800e5ac <__sinit>
 800e4c8:	4b0c      	ldr	r3, [pc, #48]	; (800e4fc <_fflush_r+0x48>)
 800e4ca:	429c      	cmp	r4, r3
 800e4cc:	d109      	bne.n	800e4e2 <_fflush_r+0x2e>
 800e4ce:	686c      	ldr	r4, [r5, #4]
 800e4d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4d4:	b17b      	cbz	r3, 800e4f6 <_fflush_r+0x42>
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	4628      	mov	r0, r5
 800e4da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4de:	f7ff bf61 	b.w	800e3a4 <__sflush_r>
 800e4e2:	4b07      	ldr	r3, [pc, #28]	; (800e500 <_fflush_r+0x4c>)
 800e4e4:	429c      	cmp	r4, r3
 800e4e6:	d101      	bne.n	800e4ec <_fflush_r+0x38>
 800e4e8:	68ac      	ldr	r4, [r5, #8]
 800e4ea:	e7f1      	b.n	800e4d0 <_fflush_r+0x1c>
 800e4ec:	4b05      	ldr	r3, [pc, #20]	; (800e504 <_fflush_r+0x50>)
 800e4ee:	429c      	cmp	r4, r3
 800e4f0:	bf08      	it	eq
 800e4f2:	68ec      	ldreq	r4, [r5, #12]
 800e4f4:	e7ec      	b.n	800e4d0 <_fflush_r+0x1c>
 800e4f6:	2000      	movs	r0, #0
 800e4f8:	bd38      	pop	{r3, r4, r5, pc}
 800e4fa:	bf00      	nop
 800e4fc:	08012454 	.word	0x08012454
 800e500:	08012474 	.word	0x08012474
 800e504:	08012434 	.word	0x08012434

0800e508 <fflush>:
 800e508:	4601      	mov	r1, r0
 800e50a:	b920      	cbnz	r0, 800e516 <fflush+0xe>
 800e50c:	4b04      	ldr	r3, [pc, #16]	; (800e520 <fflush+0x18>)
 800e50e:	4905      	ldr	r1, [pc, #20]	; (800e524 <fflush+0x1c>)
 800e510:	6818      	ldr	r0, [r3, #0]
 800e512:	f000 b8d3 	b.w	800e6bc <_fwalk_reent>
 800e516:	4b04      	ldr	r3, [pc, #16]	; (800e528 <fflush+0x20>)
 800e518:	6818      	ldr	r0, [r3, #0]
 800e51a:	f7ff bfcb 	b.w	800e4b4 <_fflush_r>
 800e51e:	bf00      	nop
 800e520:	080122e4 	.word	0x080122e4
 800e524:	0800e4b5 	.word	0x0800e4b5
 800e528:	2000017c 	.word	0x2000017c

0800e52c <_cleanup_r>:
 800e52c:	4901      	ldr	r1, [pc, #4]	; (800e534 <_cleanup_r+0x8>)
 800e52e:	f000 b8c5 	b.w	800e6bc <_fwalk_reent>
 800e532:	bf00      	nop
 800e534:	0800e4b5 	.word	0x0800e4b5

0800e538 <std.isra.0>:
 800e538:	2300      	movs	r3, #0
 800e53a:	b510      	push	{r4, lr}
 800e53c:	4604      	mov	r4, r0
 800e53e:	6003      	str	r3, [r0, #0]
 800e540:	6043      	str	r3, [r0, #4]
 800e542:	6083      	str	r3, [r0, #8]
 800e544:	8181      	strh	r1, [r0, #12]
 800e546:	6643      	str	r3, [r0, #100]	; 0x64
 800e548:	81c2      	strh	r2, [r0, #14]
 800e54a:	6103      	str	r3, [r0, #16]
 800e54c:	6143      	str	r3, [r0, #20]
 800e54e:	6183      	str	r3, [r0, #24]
 800e550:	4619      	mov	r1, r3
 800e552:	2208      	movs	r2, #8
 800e554:	305c      	adds	r0, #92	; 0x5c
 800e556:	f7fe f90f 	bl	800c778 <memset>
 800e55a:	4b05      	ldr	r3, [pc, #20]	; (800e570 <std.isra.0+0x38>)
 800e55c:	6263      	str	r3, [r4, #36]	; 0x24
 800e55e:	4b05      	ldr	r3, [pc, #20]	; (800e574 <std.isra.0+0x3c>)
 800e560:	62a3      	str	r3, [r4, #40]	; 0x28
 800e562:	4b05      	ldr	r3, [pc, #20]	; (800e578 <std.isra.0+0x40>)
 800e564:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e566:	4b05      	ldr	r3, [pc, #20]	; (800e57c <std.isra.0+0x44>)
 800e568:	6224      	str	r4, [r4, #32]
 800e56a:	6323      	str	r3, [r4, #48]	; 0x30
 800e56c:	bd10      	pop	{r4, pc}
 800e56e:	bf00      	nop
 800e570:	0800f449 	.word	0x0800f449
 800e574:	0800f46b 	.word	0x0800f46b
 800e578:	0800f4a3 	.word	0x0800f4a3
 800e57c:	0800f4c7 	.word	0x0800f4c7

0800e580 <__sfmoreglue>:
 800e580:	b570      	push	{r4, r5, r6, lr}
 800e582:	1e4a      	subs	r2, r1, #1
 800e584:	2568      	movs	r5, #104	; 0x68
 800e586:	4355      	muls	r5, r2
 800e588:	460e      	mov	r6, r1
 800e58a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e58e:	f7fe f949 	bl	800c824 <_malloc_r>
 800e592:	4604      	mov	r4, r0
 800e594:	b140      	cbz	r0, 800e5a8 <__sfmoreglue+0x28>
 800e596:	2100      	movs	r1, #0
 800e598:	e880 0042 	stmia.w	r0, {r1, r6}
 800e59c:	300c      	adds	r0, #12
 800e59e:	60a0      	str	r0, [r4, #8]
 800e5a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e5a4:	f7fe f8e8 	bl	800c778 <memset>
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	bd70      	pop	{r4, r5, r6, pc}

0800e5ac <__sinit>:
 800e5ac:	6983      	ldr	r3, [r0, #24]
 800e5ae:	b510      	push	{r4, lr}
 800e5b0:	4604      	mov	r4, r0
 800e5b2:	bb33      	cbnz	r3, 800e602 <__sinit+0x56>
 800e5b4:	6483      	str	r3, [r0, #72]	; 0x48
 800e5b6:	64c3      	str	r3, [r0, #76]	; 0x4c
 800e5b8:	6503      	str	r3, [r0, #80]	; 0x50
 800e5ba:	4b12      	ldr	r3, [pc, #72]	; (800e604 <__sinit+0x58>)
 800e5bc:	4a12      	ldr	r2, [pc, #72]	; (800e608 <__sinit+0x5c>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	6282      	str	r2, [r0, #40]	; 0x28
 800e5c2:	4298      	cmp	r0, r3
 800e5c4:	bf04      	itt	eq
 800e5c6:	2301      	moveq	r3, #1
 800e5c8:	6183      	streq	r3, [r0, #24]
 800e5ca:	f000 f81f 	bl	800e60c <__sfp>
 800e5ce:	6060      	str	r0, [r4, #4]
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f000 f81b 	bl	800e60c <__sfp>
 800e5d6:	60a0      	str	r0, [r4, #8]
 800e5d8:	4620      	mov	r0, r4
 800e5da:	f000 f817 	bl	800e60c <__sfp>
 800e5de:	2200      	movs	r2, #0
 800e5e0:	60e0      	str	r0, [r4, #12]
 800e5e2:	2104      	movs	r1, #4
 800e5e4:	6860      	ldr	r0, [r4, #4]
 800e5e6:	f7ff ffa7 	bl	800e538 <std.isra.0>
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	2109      	movs	r1, #9
 800e5ee:	68a0      	ldr	r0, [r4, #8]
 800e5f0:	f7ff ffa2 	bl	800e538 <std.isra.0>
 800e5f4:	2202      	movs	r2, #2
 800e5f6:	2112      	movs	r1, #18
 800e5f8:	68e0      	ldr	r0, [r4, #12]
 800e5fa:	f7ff ff9d 	bl	800e538 <std.isra.0>
 800e5fe:	2301      	movs	r3, #1
 800e600:	61a3      	str	r3, [r4, #24]
 800e602:	bd10      	pop	{r4, pc}
 800e604:	080122e4 	.word	0x080122e4
 800e608:	0800e52d 	.word	0x0800e52d

0800e60c <__sfp>:
 800e60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60e:	4b1c      	ldr	r3, [pc, #112]	; (800e680 <__sfp+0x74>)
 800e610:	681e      	ldr	r6, [r3, #0]
 800e612:	69b3      	ldr	r3, [r6, #24]
 800e614:	4607      	mov	r7, r0
 800e616:	b913      	cbnz	r3, 800e61e <__sfp+0x12>
 800e618:	4630      	mov	r0, r6
 800e61a:	f7ff ffc7 	bl	800e5ac <__sinit>
 800e61e:	3648      	adds	r6, #72	; 0x48
 800e620:	68b4      	ldr	r4, [r6, #8]
 800e622:	6873      	ldr	r3, [r6, #4]
 800e624:	3b01      	subs	r3, #1
 800e626:	d503      	bpl.n	800e630 <__sfp+0x24>
 800e628:	6833      	ldr	r3, [r6, #0]
 800e62a:	b133      	cbz	r3, 800e63a <__sfp+0x2e>
 800e62c:	6836      	ldr	r6, [r6, #0]
 800e62e:	e7f7      	b.n	800e620 <__sfp+0x14>
 800e630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e634:	b16d      	cbz	r5, 800e652 <__sfp+0x46>
 800e636:	3468      	adds	r4, #104	; 0x68
 800e638:	e7f4      	b.n	800e624 <__sfp+0x18>
 800e63a:	2104      	movs	r1, #4
 800e63c:	4638      	mov	r0, r7
 800e63e:	f7ff ff9f 	bl	800e580 <__sfmoreglue>
 800e642:	6030      	str	r0, [r6, #0]
 800e644:	2800      	cmp	r0, #0
 800e646:	d1f1      	bne.n	800e62c <__sfp+0x20>
 800e648:	230c      	movs	r3, #12
 800e64a:	603b      	str	r3, [r7, #0]
 800e64c:	4604      	mov	r4, r0
 800e64e:	4620      	mov	r0, r4
 800e650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e656:	81e3      	strh	r3, [r4, #14]
 800e658:	2301      	movs	r3, #1
 800e65a:	81a3      	strh	r3, [r4, #12]
 800e65c:	6665      	str	r5, [r4, #100]	; 0x64
 800e65e:	6025      	str	r5, [r4, #0]
 800e660:	60a5      	str	r5, [r4, #8]
 800e662:	6065      	str	r5, [r4, #4]
 800e664:	6125      	str	r5, [r4, #16]
 800e666:	6165      	str	r5, [r4, #20]
 800e668:	61a5      	str	r5, [r4, #24]
 800e66a:	2208      	movs	r2, #8
 800e66c:	4629      	mov	r1, r5
 800e66e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e672:	f7fe f881 	bl	800c778 <memset>
 800e676:	6365      	str	r5, [r4, #52]	; 0x34
 800e678:	63a5      	str	r5, [r4, #56]	; 0x38
 800e67a:	64a5      	str	r5, [r4, #72]	; 0x48
 800e67c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800e67e:	e7e6      	b.n	800e64e <__sfp+0x42>
 800e680:	080122e4 	.word	0x080122e4

0800e684 <_fwalk>:
 800e684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e688:	4688      	mov	r8, r1
 800e68a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e68e:	2600      	movs	r6, #0
 800e690:	b914      	cbnz	r4, 800e698 <_fwalk+0x14>
 800e692:	4630      	mov	r0, r6
 800e694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e698:	68a5      	ldr	r5, [r4, #8]
 800e69a:	6867      	ldr	r7, [r4, #4]
 800e69c:	3f01      	subs	r7, #1
 800e69e:	d501      	bpl.n	800e6a4 <_fwalk+0x20>
 800e6a0:	6824      	ldr	r4, [r4, #0]
 800e6a2:	e7f5      	b.n	800e690 <_fwalk+0xc>
 800e6a4:	89ab      	ldrh	r3, [r5, #12]
 800e6a6:	2b01      	cmp	r3, #1
 800e6a8:	d906      	bls.n	800e6b8 <_fwalk+0x34>
 800e6aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	d002      	beq.n	800e6b8 <_fwalk+0x34>
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	47c0      	blx	r8
 800e6b6:	4306      	orrs	r6, r0
 800e6b8:	3568      	adds	r5, #104	; 0x68
 800e6ba:	e7ef      	b.n	800e69c <_fwalk+0x18>

0800e6bc <_fwalk_reent>:
 800e6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6c0:	4680      	mov	r8, r0
 800e6c2:	4689      	mov	r9, r1
 800e6c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e6c8:	2600      	movs	r6, #0
 800e6ca:	b914      	cbnz	r4, 800e6d2 <_fwalk_reent+0x16>
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6d2:	68a5      	ldr	r5, [r4, #8]
 800e6d4:	6867      	ldr	r7, [r4, #4]
 800e6d6:	3f01      	subs	r7, #1
 800e6d8:	d501      	bpl.n	800e6de <_fwalk_reent+0x22>
 800e6da:	6824      	ldr	r4, [r4, #0]
 800e6dc:	e7f5      	b.n	800e6ca <_fwalk_reent+0xe>
 800e6de:	89ab      	ldrh	r3, [r5, #12]
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d907      	bls.n	800e6f4 <_fwalk_reent+0x38>
 800e6e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	d003      	beq.n	800e6f4 <_fwalk_reent+0x38>
 800e6ec:	4629      	mov	r1, r5
 800e6ee:	4640      	mov	r0, r8
 800e6f0:	47c8      	blx	r9
 800e6f2:	4306      	orrs	r6, r0
 800e6f4:	3568      	adds	r5, #104	; 0x68
 800e6f6:	e7ee      	b.n	800e6d6 <_fwalk_reent+0x1a>

0800e6f8 <_localeconv_r>:
 800e6f8:	4b04      	ldr	r3, [pc, #16]	; (800e70c <_localeconv_r+0x14>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	6a18      	ldr	r0, [r3, #32]
 800e6fe:	4b04      	ldr	r3, [pc, #16]	; (800e710 <_localeconv_r+0x18>)
 800e700:	2800      	cmp	r0, #0
 800e702:	bf08      	it	eq
 800e704:	4618      	moveq	r0, r3
 800e706:	30f0      	adds	r0, #240	; 0xf0
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop
 800e70c:	2000017c 	.word	0x2000017c
 800e710:	200001e0 	.word	0x200001e0

0800e714 <__swhatbuf_r>:
 800e714:	b570      	push	{r4, r5, r6, lr}
 800e716:	460e      	mov	r6, r1
 800e718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e71c:	2900      	cmp	r1, #0
 800e71e:	b090      	sub	sp, #64	; 0x40
 800e720:	4614      	mov	r4, r2
 800e722:	461d      	mov	r5, r3
 800e724:	da07      	bge.n	800e736 <__swhatbuf_r+0x22>
 800e726:	2300      	movs	r3, #0
 800e728:	602b      	str	r3, [r5, #0]
 800e72a:	89b3      	ldrh	r3, [r6, #12]
 800e72c:	061a      	lsls	r2, r3, #24
 800e72e:	d410      	bmi.n	800e752 <__swhatbuf_r+0x3e>
 800e730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e734:	e00e      	b.n	800e754 <__swhatbuf_r+0x40>
 800e736:	aa01      	add	r2, sp, #4
 800e738:	f000 feec 	bl	800f514 <_fstat_r>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	dbf2      	blt.n	800e726 <__swhatbuf_r+0x12>
 800e740:	9a02      	ldr	r2, [sp, #8]
 800e742:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e746:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e74a:	425a      	negs	r2, r3
 800e74c:	415a      	adcs	r2, r3
 800e74e:	602a      	str	r2, [r5, #0]
 800e750:	e7ee      	b.n	800e730 <__swhatbuf_r+0x1c>
 800e752:	2340      	movs	r3, #64	; 0x40
 800e754:	2000      	movs	r0, #0
 800e756:	6023      	str	r3, [r4, #0]
 800e758:	b010      	add	sp, #64	; 0x40
 800e75a:	bd70      	pop	{r4, r5, r6, pc}

0800e75c <__smakebuf_r>:
 800e75c:	898b      	ldrh	r3, [r1, #12]
 800e75e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e760:	079d      	lsls	r5, r3, #30
 800e762:	4606      	mov	r6, r0
 800e764:	460c      	mov	r4, r1
 800e766:	d507      	bpl.n	800e778 <__smakebuf_r+0x1c>
 800e768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e76c:	6023      	str	r3, [r4, #0]
 800e76e:	6123      	str	r3, [r4, #16]
 800e770:	2301      	movs	r3, #1
 800e772:	6163      	str	r3, [r4, #20]
 800e774:	b002      	add	sp, #8
 800e776:	bd70      	pop	{r4, r5, r6, pc}
 800e778:	ab01      	add	r3, sp, #4
 800e77a:	466a      	mov	r2, sp
 800e77c:	f7ff ffca 	bl	800e714 <__swhatbuf_r>
 800e780:	9900      	ldr	r1, [sp, #0]
 800e782:	4605      	mov	r5, r0
 800e784:	4630      	mov	r0, r6
 800e786:	f7fe f84d 	bl	800c824 <_malloc_r>
 800e78a:	b948      	cbnz	r0, 800e7a0 <__smakebuf_r+0x44>
 800e78c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e790:	059a      	lsls	r2, r3, #22
 800e792:	d4ef      	bmi.n	800e774 <__smakebuf_r+0x18>
 800e794:	f023 0303 	bic.w	r3, r3, #3
 800e798:	f043 0302 	orr.w	r3, r3, #2
 800e79c:	81a3      	strh	r3, [r4, #12]
 800e79e:	e7e3      	b.n	800e768 <__smakebuf_r+0xc>
 800e7a0:	4b0d      	ldr	r3, [pc, #52]	; (800e7d8 <__smakebuf_r+0x7c>)
 800e7a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e7a4:	89a3      	ldrh	r3, [r4, #12]
 800e7a6:	6020      	str	r0, [r4, #0]
 800e7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7ac:	81a3      	strh	r3, [r4, #12]
 800e7ae:	9b00      	ldr	r3, [sp, #0]
 800e7b0:	6163      	str	r3, [r4, #20]
 800e7b2:	9b01      	ldr	r3, [sp, #4]
 800e7b4:	6120      	str	r0, [r4, #16]
 800e7b6:	b15b      	cbz	r3, 800e7d0 <__smakebuf_r+0x74>
 800e7b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f000 febb 	bl	800f538 <_isatty_r>
 800e7c2:	b128      	cbz	r0, 800e7d0 <__smakebuf_r+0x74>
 800e7c4:	89a3      	ldrh	r3, [r4, #12]
 800e7c6:	f023 0303 	bic.w	r3, r3, #3
 800e7ca:	f043 0301 	orr.w	r3, r3, #1
 800e7ce:	81a3      	strh	r3, [r4, #12]
 800e7d0:	89a3      	ldrh	r3, [r4, #12]
 800e7d2:	431d      	orrs	r5, r3
 800e7d4:	81a5      	strh	r5, [r4, #12]
 800e7d6:	e7cd      	b.n	800e774 <__smakebuf_r+0x18>
 800e7d8:	0800e52d 	.word	0x0800e52d

0800e7dc <memcpy>:
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	1e43      	subs	r3, r0, #1
 800e7e0:	440a      	add	r2, r1
 800e7e2:	4291      	cmp	r1, r2
 800e7e4:	d100      	bne.n	800e7e8 <memcpy+0xc>
 800e7e6:	bd10      	pop	{r4, pc}
 800e7e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7f0:	e7f7      	b.n	800e7e2 <memcpy+0x6>

0800e7f2 <__malloc_lock>:
 800e7f2:	4770      	bx	lr

0800e7f4 <__malloc_unlock>:
 800e7f4:	4770      	bx	lr

0800e7f6 <_Balloc>:
 800e7f6:	b570      	push	{r4, r5, r6, lr}
 800e7f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e7fa:	4604      	mov	r4, r0
 800e7fc:	460e      	mov	r6, r1
 800e7fe:	b93d      	cbnz	r5, 800e810 <_Balloc+0x1a>
 800e800:	2010      	movs	r0, #16
 800e802:	f7fd ff97 	bl	800c734 <malloc>
 800e806:	6260      	str	r0, [r4, #36]	; 0x24
 800e808:	6045      	str	r5, [r0, #4]
 800e80a:	6085      	str	r5, [r0, #8]
 800e80c:	6005      	str	r5, [r0, #0]
 800e80e:	60c5      	str	r5, [r0, #12]
 800e810:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e812:	68eb      	ldr	r3, [r5, #12]
 800e814:	b183      	cbz	r3, 800e838 <_Balloc+0x42>
 800e816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e818:	68db      	ldr	r3, [r3, #12]
 800e81a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e81e:	b9b8      	cbnz	r0, 800e850 <_Balloc+0x5a>
 800e820:	2101      	movs	r1, #1
 800e822:	fa01 f506 	lsl.w	r5, r1, r6
 800e826:	1d6a      	adds	r2, r5, #5
 800e828:	0092      	lsls	r2, r2, #2
 800e82a:	4620      	mov	r0, r4
 800e82c:	f000 fab4 	bl	800ed98 <_calloc_r>
 800e830:	b160      	cbz	r0, 800e84c <_Balloc+0x56>
 800e832:	6046      	str	r6, [r0, #4]
 800e834:	6085      	str	r5, [r0, #8]
 800e836:	e00e      	b.n	800e856 <_Balloc+0x60>
 800e838:	2221      	movs	r2, #33	; 0x21
 800e83a:	2104      	movs	r1, #4
 800e83c:	4620      	mov	r0, r4
 800e83e:	f000 faab 	bl	800ed98 <_calloc_r>
 800e842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e844:	60e8      	str	r0, [r5, #12]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d1e4      	bne.n	800e816 <_Balloc+0x20>
 800e84c:	2000      	movs	r0, #0
 800e84e:	bd70      	pop	{r4, r5, r6, pc}
 800e850:	6802      	ldr	r2, [r0, #0]
 800e852:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e856:	2300      	movs	r3, #0
 800e858:	6103      	str	r3, [r0, #16]
 800e85a:	60c3      	str	r3, [r0, #12]
 800e85c:	bd70      	pop	{r4, r5, r6, pc}

0800e85e <_Bfree>:
 800e85e:	b570      	push	{r4, r5, r6, lr}
 800e860:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e862:	4606      	mov	r6, r0
 800e864:	460d      	mov	r5, r1
 800e866:	b93c      	cbnz	r4, 800e878 <_Bfree+0x1a>
 800e868:	2010      	movs	r0, #16
 800e86a:	f7fd ff63 	bl	800c734 <malloc>
 800e86e:	6270      	str	r0, [r6, #36]	; 0x24
 800e870:	6044      	str	r4, [r0, #4]
 800e872:	6084      	str	r4, [r0, #8]
 800e874:	6004      	str	r4, [r0, #0]
 800e876:	60c4      	str	r4, [r0, #12]
 800e878:	b13d      	cbz	r5, 800e88a <_Bfree+0x2c>
 800e87a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e87c:	686a      	ldr	r2, [r5, #4]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e884:	6029      	str	r1, [r5, #0]
 800e886:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e88a:	bd70      	pop	{r4, r5, r6, pc}

0800e88c <__multadd>:
 800e88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e890:	690d      	ldr	r5, [r1, #16]
 800e892:	461f      	mov	r7, r3
 800e894:	4606      	mov	r6, r0
 800e896:	460c      	mov	r4, r1
 800e898:	f101 0e14 	add.w	lr, r1, #20
 800e89c:	2300      	movs	r3, #0
 800e89e:	f8de 0000 	ldr.w	r0, [lr]
 800e8a2:	b281      	uxth	r1, r0
 800e8a4:	fb02 7101 	mla	r1, r2, r1, r7
 800e8a8:	0c0f      	lsrs	r7, r1, #16
 800e8aa:	0c00      	lsrs	r0, r0, #16
 800e8ac:	fb02 7000 	mla	r0, r2, r0, r7
 800e8b0:	b289      	uxth	r1, r1
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e8b8:	429d      	cmp	r5, r3
 800e8ba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e8be:	f84e 1b04 	str.w	r1, [lr], #4
 800e8c2:	dcec      	bgt.n	800e89e <__multadd+0x12>
 800e8c4:	b1d7      	cbz	r7, 800e8fc <__multadd+0x70>
 800e8c6:	68a3      	ldr	r3, [r4, #8]
 800e8c8:	429d      	cmp	r5, r3
 800e8ca:	db12      	blt.n	800e8f2 <__multadd+0x66>
 800e8cc:	6861      	ldr	r1, [r4, #4]
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	3101      	adds	r1, #1
 800e8d2:	f7ff ff90 	bl	800e7f6 <_Balloc>
 800e8d6:	6922      	ldr	r2, [r4, #16]
 800e8d8:	3202      	adds	r2, #2
 800e8da:	f104 010c 	add.w	r1, r4, #12
 800e8de:	4680      	mov	r8, r0
 800e8e0:	0092      	lsls	r2, r2, #2
 800e8e2:	300c      	adds	r0, #12
 800e8e4:	f7ff ff7a 	bl	800e7dc <memcpy>
 800e8e8:	4621      	mov	r1, r4
 800e8ea:	4630      	mov	r0, r6
 800e8ec:	f7ff ffb7 	bl	800e85e <_Bfree>
 800e8f0:	4644      	mov	r4, r8
 800e8f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e8f6:	3501      	adds	r5, #1
 800e8f8:	615f      	str	r7, [r3, #20]
 800e8fa:	6125      	str	r5, [r4, #16]
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e902 <__hi0bits>:
 800e902:	0c02      	lsrs	r2, r0, #16
 800e904:	0412      	lsls	r2, r2, #16
 800e906:	4603      	mov	r3, r0
 800e908:	b9b2      	cbnz	r2, 800e938 <__hi0bits+0x36>
 800e90a:	0403      	lsls	r3, r0, #16
 800e90c:	2010      	movs	r0, #16
 800e90e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e912:	bf04      	itt	eq
 800e914:	021b      	lsleq	r3, r3, #8
 800e916:	3008      	addeq	r0, #8
 800e918:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e91c:	bf04      	itt	eq
 800e91e:	011b      	lsleq	r3, r3, #4
 800e920:	3004      	addeq	r0, #4
 800e922:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e926:	bf04      	itt	eq
 800e928:	009b      	lsleq	r3, r3, #2
 800e92a:	3002      	addeq	r0, #2
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	db06      	blt.n	800e93e <__hi0bits+0x3c>
 800e930:	005b      	lsls	r3, r3, #1
 800e932:	d503      	bpl.n	800e93c <__hi0bits+0x3a>
 800e934:	3001      	adds	r0, #1
 800e936:	4770      	bx	lr
 800e938:	2000      	movs	r0, #0
 800e93a:	e7e8      	b.n	800e90e <__hi0bits+0xc>
 800e93c:	2020      	movs	r0, #32
 800e93e:	4770      	bx	lr

0800e940 <__lo0bits>:
 800e940:	6803      	ldr	r3, [r0, #0]
 800e942:	f013 0207 	ands.w	r2, r3, #7
 800e946:	4601      	mov	r1, r0
 800e948:	d00b      	beq.n	800e962 <__lo0bits+0x22>
 800e94a:	07da      	lsls	r2, r3, #31
 800e94c:	d423      	bmi.n	800e996 <__lo0bits+0x56>
 800e94e:	0798      	lsls	r0, r3, #30
 800e950:	bf49      	itett	mi
 800e952:	085b      	lsrmi	r3, r3, #1
 800e954:	089b      	lsrpl	r3, r3, #2
 800e956:	2001      	movmi	r0, #1
 800e958:	600b      	strmi	r3, [r1, #0]
 800e95a:	bf5c      	itt	pl
 800e95c:	600b      	strpl	r3, [r1, #0]
 800e95e:	2002      	movpl	r0, #2
 800e960:	4770      	bx	lr
 800e962:	b298      	uxth	r0, r3
 800e964:	b9a8      	cbnz	r0, 800e992 <__lo0bits+0x52>
 800e966:	0c1b      	lsrs	r3, r3, #16
 800e968:	2010      	movs	r0, #16
 800e96a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e96e:	bf04      	itt	eq
 800e970:	0a1b      	lsreq	r3, r3, #8
 800e972:	3008      	addeq	r0, #8
 800e974:	071a      	lsls	r2, r3, #28
 800e976:	bf04      	itt	eq
 800e978:	091b      	lsreq	r3, r3, #4
 800e97a:	3004      	addeq	r0, #4
 800e97c:	079a      	lsls	r2, r3, #30
 800e97e:	bf04      	itt	eq
 800e980:	089b      	lsreq	r3, r3, #2
 800e982:	3002      	addeq	r0, #2
 800e984:	07da      	lsls	r2, r3, #31
 800e986:	d402      	bmi.n	800e98e <__lo0bits+0x4e>
 800e988:	085b      	lsrs	r3, r3, #1
 800e98a:	d006      	beq.n	800e99a <__lo0bits+0x5a>
 800e98c:	3001      	adds	r0, #1
 800e98e:	600b      	str	r3, [r1, #0]
 800e990:	4770      	bx	lr
 800e992:	4610      	mov	r0, r2
 800e994:	e7e9      	b.n	800e96a <__lo0bits+0x2a>
 800e996:	2000      	movs	r0, #0
 800e998:	4770      	bx	lr
 800e99a:	2020      	movs	r0, #32
 800e99c:	4770      	bx	lr

0800e99e <__i2b>:
 800e99e:	b510      	push	{r4, lr}
 800e9a0:	460c      	mov	r4, r1
 800e9a2:	2101      	movs	r1, #1
 800e9a4:	f7ff ff27 	bl	800e7f6 <_Balloc>
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	6144      	str	r4, [r0, #20]
 800e9ac:	6102      	str	r2, [r0, #16]
 800e9ae:	bd10      	pop	{r4, pc}

0800e9b0 <__multiply>:
 800e9b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	4614      	mov	r4, r2
 800e9b6:	690a      	ldr	r2, [r1, #16]
 800e9b8:	6923      	ldr	r3, [r4, #16]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	bfb8      	it	lt
 800e9be:	460b      	movlt	r3, r1
 800e9c0:	4689      	mov	r9, r1
 800e9c2:	bfbc      	itt	lt
 800e9c4:	46a1      	movlt	r9, r4
 800e9c6:	461c      	movlt	r4, r3
 800e9c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e9cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e9d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e9d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e9d8:	eb07 060a 	add.w	r6, r7, sl
 800e9dc:	429e      	cmp	r6, r3
 800e9de:	bfc8      	it	gt
 800e9e0:	3101      	addgt	r1, #1
 800e9e2:	f7ff ff08 	bl	800e7f6 <_Balloc>
 800e9e6:	f100 0514 	add.w	r5, r0, #20
 800e9ea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e9ee:	462b      	mov	r3, r5
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	4543      	cmp	r3, r8
 800e9f4:	d316      	bcc.n	800ea24 <__multiply+0x74>
 800e9f6:	f104 0214 	add.w	r2, r4, #20
 800e9fa:	f109 0114 	add.w	r1, r9, #20
 800e9fe:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800ea02:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ea06:	9301      	str	r3, [sp, #4]
 800ea08:	9c01      	ldr	r4, [sp, #4]
 800ea0a:	4294      	cmp	r4, r2
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	d80c      	bhi.n	800ea2a <__multiply+0x7a>
 800ea10:	2e00      	cmp	r6, #0
 800ea12:	dd03      	ble.n	800ea1c <__multiply+0x6c>
 800ea14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d054      	beq.n	800eac6 <__multiply+0x116>
 800ea1c:	6106      	str	r6, [r0, #16]
 800ea1e:	b003      	add	sp, #12
 800ea20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea24:	f843 2b04 	str.w	r2, [r3], #4
 800ea28:	e7e3      	b.n	800e9f2 <__multiply+0x42>
 800ea2a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ea2e:	3204      	adds	r2, #4
 800ea30:	f1ba 0f00 	cmp.w	sl, #0
 800ea34:	d020      	beq.n	800ea78 <__multiply+0xc8>
 800ea36:	46ae      	mov	lr, r5
 800ea38:	4689      	mov	r9, r1
 800ea3a:	f04f 0c00 	mov.w	ip, #0
 800ea3e:	f859 4b04 	ldr.w	r4, [r9], #4
 800ea42:	f8be b000 	ldrh.w	fp, [lr]
 800ea46:	b2a3      	uxth	r3, r4
 800ea48:	fb0a b303 	mla	r3, sl, r3, fp
 800ea4c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800ea50:	f8de 4000 	ldr.w	r4, [lr]
 800ea54:	4463      	add	r3, ip
 800ea56:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800ea5a:	fb0a c40b 	mla	r4, sl, fp, ip
 800ea5e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ea68:	454f      	cmp	r7, r9
 800ea6a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800ea6e:	f84e 3b04 	str.w	r3, [lr], #4
 800ea72:	d8e4      	bhi.n	800ea3e <__multiply+0x8e>
 800ea74:	f8ce c000 	str.w	ip, [lr]
 800ea78:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800ea7c:	f1b9 0f00 	cmp.w	r9, #0
 800ea80:	d01f      	beq.n	800eac2 <__multiply+0x112>
 800ea82:	682b      	ldr	r3, [r5, #0]
 800ea84:	46ae      	mov	lr, r5
 800ea86:	468c      	mov	ip, r1
 800ea88:	f04f 0a00 	mov.w	sl, #0
 800ea8c:	f8bc 4000 	ldrh.w	r4, [ip]
 800ea90:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ea94:	fb09 b404 	mla	r4, r9, r4, fp
 800ea98:	44a2      	add	sl, r4
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800eaa0:	f84e 3b04 	str.w	r3, [lr], #4
 800eaa4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eaa8:	f8be 4000 	ldrh.w	r4, [lr]
 800eaac:	0c1b      	lsrs	r3, r3, #16
 800eaae:	fb09 4303 	mla	r3, r9, r3, r4
 800eab2:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800eab6:	4567      	cmp	r7, ip
 800eab8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eabc:	d8e6      	bhi.n	800ea8c <__multiply+0xdc>
 800eabe:	f8ce 3000 	str.w	r3, [lr]
 800eac2:	3504      	adds	r5, #4
 800eac4:	e7a0      	b.n	800ea08 <__multiply+0x58>
 800eac6:	3e01      	subs	r6, #1
 800eac8:	e7a2      	b.n	800ea10 <__multiply+0x60>
	...

0800eacc <__pow5mult>:
 800eacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ead0:	4615      	mov	r5, r2
 800ead2:	f012 0203 	ands.w	r2, r2, #3
 800ead6:	4606      	mov	r6, r0
 800ead8:	460f      	mov	r7, r1
 800eada:	d007      	beq.n	800eaec <__pow5mult+0x20>
 800eadc:	3a01      	subs	r2, #1
 800eade:	4c21      	ldr	r4, [pc, #132]	; (800eb64 <__pow5mult+0x98>)
 800eae0:	2300      	movs	r3, #0
 800eae2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eae6:	f7ff fed1 	bl	800e88c <__multadd>
 800eaea:	4607      	mov	r7, r0
 800eaec:	10ad      	asrs	r5, r5, #2
 800eaee:	d035      	beq.n	800eb5c <__pow5mult+0x90>
 800eaf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eaf2:	b93c      	cbnz	r4, 800eb04 <__pow5mult+0x38>
 800eaf4:	2010      	movs	r0, #16
 800eaf6:	f7fd fe1d 	bl	800c734 <malloc>
 800eafa:	6270      	str	r0, [r6, #36]	; 0x24
 800eafc:	6044      	str	r4, [r0, #4]
 800eafe:	6084      	str	r4, [r0, #8]
 800eb00:	6004      	str	r4, [r0, #0]
 800eb02:	60c4      	str	r4, [r0, #12]
 800eb04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eb08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb0c:	b94c      	cbnz	r4, 800eb22 <__pow5mult+0x56>
 800eb0e:	f240 2171 	movw	r1, #625	; 0x271
 800eb12:	4630      	mov	r0, r6
 800eb14:	f7ff ff43 	bl	800e99e <__i2b>
 800eb18:	2300      	movs	r3, #0
 800eb1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb1e:	4604      	mov	r4, r0
 800eb20:	6003      	str	r3, [r0, #0]
 800eb22:	f04f 0800 	mov.w	r8, #0
 800eb26:	07eb      	lsls	r3, r5, #31
 800eb28:	d50a      	bpl.n	800eb40 <__pow5mult+0x74>
 800eb2a:	4639      	mov	r1, r7
 800eb2c:	4622      	mov	r2, r4
 800eb2e:	4630      	mov	r0, r6
 800eb30:	f7ff ff3e 	bl	800e9b0 <__multiply>
 800eb34:	4639      	mov	r1, r7
 800eb36:	4681      	mov	r9, r0
 800eb38:	4630      	mov	r0, r6
 800eb3a:	f7ff fe90 	bl	800e85e <_Bfree>
 800eb3e:	464f      	mov	r7, r9
 800eb40:	106d      	asrs	r5, r5, #1
 800eb42:	d00b      	beq.n	800eb5c <__pow5mult+0x90>
 800eb44:	6820      	ldr	r0, [r4, #0]
 800eb46:	b938      	cbnz	r0, 800eb58 <__pow5mult+0x8c>
 800eb48:	4622      	mov	r2, r4
 800eb4a:	4621      	mov	r1, r4
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	f7ff ff2f 	bl	800e9b0 <__multiply>
 800eb52:	6020      	str	r0, [r4, #0]
 800eb54:	f8c0 8000 	str.w	r8, [r0]
 800eb58:	4604      	mov	r4, r0
 800eb5a:	e7e4      	b.n	800eb26 <__pow5mult+0x5a>
 800eb5c:	4638      	mov	r0, r7
 800eb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb62:	bf00      	nop
 800eb64:	08012588 	.word	0x08012588

0800eb68 <__lshift>:
 800eb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb6c:	460c      	mov	r4, r1
 800eb6e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb72:	6923      	ldr	r3, [r4, #16]
 800eb74:	6849      	ldr	r1, [r1, #4]
 800eb76:	eb0a 0903 	add.w	r9, sl, r3
 800eb7a:	68a3      	ldr	r3, [r4, #8]
 800eb7c:	4607      	mov	r7, r0
 800eb7e:	4616      	mov	r6, r2
 800eb80:	f109 0501 	add.w	r5, r9, #1
 800eb84:	42ab      	cmp	r3, r5
 800eb86:	db31      	blt.n	800ebec <__lshift+0x84>
 800eb88:	4638      	mov	r0, r7
 800eb8a:	f7ff fe34 	bl	800e7f6 <_Balloc>
 800eb8e:	2200      	movs	r2, #0
 800eb90:	4680      	mov	r8, r0
 800eb92:	f100 0314 	add.w	r3, r0, #20
 800eb96:	4611      	mov	r1, r2
 800eb98:	4552      	cmp	r2, sl
 800eb9a:	db2a      	blt.n	800ebf2 <__lshift+0x8a>
 800eb9c:	6920      	ldr	r0, [r4, #16]
 800eb9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eba2:	f104 0114 	add.w	r1, r4, #20
 800eba6:	f016 021f 	ands.w	r2, r6, #31
 800ebaa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800ebae:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800ebb2:	d022      	beq.n	800ebfa <__lshift+0x92>
 800ebb4:	f1c2 0c20 	rsb	ip, r2, #32
 800ebb8:	2000      	movs	r0, #0
 800ebba:	680e      	ldr	r6, [r1, #0]
 800ebbc:	4096      	lsls	r6, r2
 800ebbe:	4330      	orrs	r0, r6
 800ebc0:	f843 0b04 	str.w	r0, [r3], #4
 800ebc4:	f851 0b04 	ldr.w	r0, [r1], #4
 800ebc8:	458e      	cmp	lr, r1
 800ebca:	fa20 f00c 	lsr.w	r0, r0, ip
 800ebce:	d8f4      	bhi.n	800ebba <__lshift+0x52>
 800ebd0:	6018      	str	r0, [r3, #0]
 800ebd2:	b108      	cbz	r0, 800ebd8 <__lshift+0x70>
 800ebd4:	f109 0502 	add.w	r5, r9, #2
 800ebd8:	3d01      	subs	r5, #1
 800ebda:	4638      	mov	r0, r7
 800ebdc:	f8c8 5010 	str.w	r5, [r8, #16]
 800ebe0:	4621      	mov	r1, r4
 800ebe2:	f7ff fe3c 	bl	800e85e <_Bfree>
 800ebe6:	4640      	mov	r0, r8
 800ebe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebec:	3101      	adds	r1, #1
 800ebee:	005b      	lsls	r3, r3, #1
 800ebf0:	e7c8      	b.n	800eb84 <__lshift+0x1c>
 800ebf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ebf6:	3201      	adds	r2, #1
 800ebf8:	e7ce      	b.n	800eb98 <__lshift+0x30>
 800ebfa:	3b04      	subs	r3, #4
 800ebfc:	f851 2b04 	ldr.w	r2, [r1], #4
 800ec00:	f843 2f04 	str.w	r2, [r3, #4]!
 800ec04:	458e      	cmp	lr, r1
 800ec06:	d8f9      	bhi.n	800ebfc <__lshift+0x94>
 800ec08:	e7e6      	b.n	800ebd8 <__lshift+0x70>

0800ec0a <__mcmp>:
 800ec0a:	6903      	ldr	r3, [r0, #16]
 800ec0c:	690a      	ldr	r2, [r1, #16]
 800ec0e:	1a9b      	subs	r3, r3, r2
 800ec10:	b530      	push	{r4, r5, lr}
 800ec12:	d10c      	bne.n	800ec2e <__mcmp+0x24>
 800ec14:	0092      	lsls	r2, r2, #2
 800ec16:	3014      	adds	r0, #20
 800ec18:	3114      	adds	r1, #20
 800ec1a:	1884      	adds	r4, r0, r2
 800ec1c:	4411      	add	r1, r2
 800ec1e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ec22:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ec26:	4295      	cmp	r5, r2
 800ec28:	d003      	beq.n	800ec32 <__mcmp+0x28>
 800ec2a:	d305      	bcc.n	800ec38 <__mcmp+0x2e>
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	4618      	mov	r0, r3
 800ec30:	bd30      	pop	{r4, r5, pc}
 800ec32:	42a0      	cmp	r0, r4
 800ec34:	d3f3      	bcc.n	800ec1e <__mcmp+0x14>
 800ec36:	e7fa      	b.n	800ec2e <__mcmp+0x24>
 800ec38:	f04f 33ff 	mov.w	r3, #4294967295
 800ec3c:	e7f7      	b.n	800ec2e <__mcmp+0x24>

0800ec3e <__mdiff>:
 800ec3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec42:	460d      	mov	r5, r1
 800ec44:	4607      	mov	r7, r0
 800ec46:	4611      	mov	r1, r2
 800ec48:	4628      	mov	r0, r5
 800ec4a:	4614      	mov	r4, r2
 800ec4c:	f7ff ffdd 	bl	800ec0a <__mcmp>
 800ec50:	1e06      	subs	r6, r0, #0
 800ec52:	d108      	bne.n	800ec66 <__mdiff+0x28>
 800ec54:	4631      	mov	r1, r6
 800ec56:	4638      	mov	r0, r7
 800ec58:	f7ff fdcd 	bl	800e7f6 <_Balloc>
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	6103      	str	r3, [r0, #16]
 800ec60:	6146      	str	r6, [r0, #20]
 800ec62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec66:	bfa4      	itt	ge
 800ec68:	4623      	movge	r3, r4
 800ec6a:	462c      	movge	r4, r5
 800ec6c:	4638      	mov	r0, r7
 800ec6e:	6861      	ldr	r1, [r4, #4]
 800ec70:	bfa6      	itte	ge
 800ec72:	461d      	movge	r5, r3
 800ec74:	2600      	movge	r6, #0
 800ec76:	2601      	movlt	r6, #1
 800ec78:	f7ff fdbd 	bl	800e7f6 <_Balloc>
 800ec7c:	692b      	ldr	r3, [r5, #16]
 800ec7e:	60c6      	str	r6, [r0, #12]
 800ec80:	6926      	ldr	r6, [r4, #16]
 800ec82:	f105 0914 	add.w	r9, r5, #20
 800ec86:	f104 0214 	add.w	r2, r4, #20
 800ec8a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ec8e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ec92:	f100 0514 	add.w	r5, r0, #20
 800ec96:	f04f 0c00 	mov.w	ip, #0
 800ec9a:	f852 ab04 	ldr.w	sl, [r2], #4
 800ec9e:	f859 4b04 	ldr.w	r4, [r9], #4
 800eca2:	fa1c f18a 	uxtah	r1, ip, sl
 800eca6:	b2a3      	uxth	r3, r4
 800eca8:	1ac9      	subs	r1, r1, r3
 800ecaa:	0c23      	lsrs	r3, r4, #16
 800ecac:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ecb0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ecb4:	b289      	uxth	r1, r1
 800ecb6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ecba:	45c8      	cmp	r8, r9
 800ecbc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ecc0:	4696      	mov	lr, r2
 800ecc2:	f845 3b04 	str.w	r3, [r5], #4
 800ecc6:	d8e8      	bhi.n	800ec9a <__mdiff+0x5c>
 800ecc8:	45be      	cmp	lr, r7
 800ecca:	d305      	bcc.n	800ecd8 <__mdiff+0x9a>
 800eccc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ecd0:	b18b      	cbz	r3, 800ecf6 <__mdiff+0xb8>
 800ecd2:	6106      	str	r6, [r0, #16]
 800ecd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecd8:	f85e 1b04 	ldr.w	r1, [lr], #4
 800ecdc:	fa1c f381 	uxtah	r3, ip, r1
 800ece0:	141a      	asrs	r2, r3, #16
 800ece2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ece6:	b29b      	uxth	r3, r3
 800ece8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ecec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ecf0:	f845 3b04 	str.w	r3, [r5], #4
 800ecf4:	e7e8      	b.n	800ecc8 <__mdiff+0x8a>
 800ecf6:	3e01      	subs	r6, #1
 800ecf8:	e7e8      	b.n	800eccc <__mdiff+0x8e>

0800ecfa <__d2b>:
 800ecfa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ecfe:	460e      	mov	r6, r1
 800ed00:	2101      	movs	r1, #1
 800ed02:	ec59 8b10 	vmov	r8, r9, d0
 800ed06:	4615      	mov	r5, r2
 800ed08:	f7ff fd75 	bl	800e7f6 <_Balloc>
 800ed0c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ed10:	4607      	mov	r7, r0
 800ed12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed16:	bb34      	cbnz	r4, 800ed66 <__d2b+0x6c>
 800ed18:	9301      	str	r3, [sp, #4]
 800ed1a:	f1b8 0f00 	cmp.w	r8, #0
 800ed1e:	d027      	beq.n	800ed70 <__d2b+0x76>
 800ed20:	a802      	add	r0, sp, #8
 800ed22:	f840 8d08 	str.w	r8, [r0, #-8]!
 800ed26:	f7ff fe0b 	bl	800e940 <__lo0bits>
 800ed2a:	9900      	ldr	r1, [sp, #0]
 800ed2c:	b1f0      	cbz	r0, 800ed6c <__d2b+0x72>
 800ed2e:	9a01      	ldr	r2, [sp, #4]
 800ed30:	f1c0 0320 	rsb	r3, r0, #32
 800ed34:	fa02 f303 	lsl.w	r3, r2, r3
 800ed38:	430b      	orrs	r3, r1
 800ed3a:	40c2      	lsrs	r2, r0
 800ed3c:	617b      	str	r3, [r7, #20]
 800ed3e:	9201      	str	r2, [sp, #4]
 800ed40:	9b01      	ldr	r3, [sp, #4]
 800ed42:	61bb      	str	r3, [r7, #24]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	bf14      	ite	ne
 800ed48:	2102      	movne	r1, #2
 800ed4a:	2101      	moveq	r1, #1
 800ed4c:	6139      	str	r1, [r7, #16]
 800ed4e:	b1c4      	cbz	r4, 800ed82 <__d2b+0x88>
 800ed50:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ed54:	4404      	add	r4, r0
 800ed56:	6034      	str	r4, [r6, #0]
 800ed58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ed5c:	6028      	str	r0, [r5, #0]
 800ed5e:	4638      	mov	r0, r7
 800ed60:	b003      	add	sp, #12
 800ed62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed6a:	e7d5      	b.n	800ed18 <__d2b+0x1e>
 800ed6c:	6179      	str	r1, [r7, #20]
 800ed6e:	e7e7      	b.n	800ed40 <__d2b+0x46>
 800ed70:	a801      	add	r0, sp, #4
 800ed72:	f7ff fde5 	bl	800e940 <__lo0bits>
 800ed76:	9b01      	ldr	r3, [sp, #4]
 800ed78:	617b      	str	r3, [r7, #20]
 800ed7a:	2101      	movs	r1, #1
 800ed7c:	6139      	str	r1, [r7, #16]
 800ed7e:	3020      	adds	r0, #32
 800ed80:	e7e5      	b.n	800ed4e <__d2b+0x54>
 800ed82:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ed86:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed8a:	6030      	str	r0, [r6, #0]
 800ed8c:	6918      	ldr	r0, [r3, #16]
 800ed8e:	f7ff fdb8 	bl	800e902 <__hi0bits>
 800ed92:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ed96:	e7e1      	b.n	800ed5c <__d2b+0x62>

0800ed98 <_calloc_r>:
 800ed98:	b538      	push	{r3, r4, r5, lr}
 800ed9a:	fb02 f401 	mul.w	r4, r2, r1
 800ed9e:	4621      	mov	r1, r4
 800eda0:	f7fd fd40 	bl	800c824 <_malloc_r>
 800eda4:	4605      	mov	r5, r0
 800eda6:	b118      	cbz	r0, 800edb0 <_calloc_r+0x18>
 800eda8:	4622      	mov	r2, r4
 800edaa:	2100      	movs	r1, #0
 800edac:	f7fd fce4 	bl	800c778 <memset>
 800edb0:	4628      	mov	r0, r5
 800edb2:	bd38      	pop	{r3, r4, r5, pc}

0800edb4 <_realloc_r>:
 800edb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edb6:	4607      	mov	r7, r0
 800edb8:	4614      	mov	r4, r2
 800edba:	460e      	mov	r6, r1
 800edbc:	b921      	cbnz	r1, 800edc8 <_realloc_r+0x14>
 800edbe:	4611      	mov	r1, r2
 800edc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800edc4:	f7fd bd2e 	b.w	800c824 <_malloc_r>
 800edc8:	b922      	cbnz	r2, 800edd4 <_realloc_r+0x20>
 800edca:	f7fd fcdd 	bl	800c788 <_free_r>
 800edce:	4625      	mov	r5, r4
 800edd0:	4628      	mov	r0, r5
 800edd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edd4:	f000 fbec 	bl	800f5b0 <_malloc_usable_size_r>
 800edd8:	4284      	cmp	r4, r0
 800edda:	d90f      	bls.n	800edfc <_realloc_r+0x48>
 800eddc:	4621      	mov	r1, r4
 800edde:	4638      	mov	r0, r7
 800ede0:	f7fd fd20 	bl	800c824 <_malloc_r>
 800ede4:	4605      	mov	r5, r0
 800ede6:	2800      	cmp	r0, #0
 800ede8:	d0f2      	beq.n	800edd0 <_realloc_r+0x1c>
 800edea:	4631      	mov	r1, r6
 800edec:	4622      	mov	r2, r4
 800edee:	f7ff fcf5 	bl	800e7dc <memcpy>
 800edf2:	4631      	mov	r1, r6
 800edf4:	4638      	mov	r0, r7
 800edf6:	f7fd fcc7 	bl	800c788 <_free_r>
 800edfa:	e7e9      	b.n	800edd0 <_realloc_r+0x1c>
 800edfc:	4635      	mov	r5, r6
 800edfe:	e7e7      	b.n	800edd0 <_realloc_r+0x1c>

0800ee00 <__ssputs_r>:
 800ee00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee04:	688e      	ldr	r6, [r1, #8]
 800ee06:	429e      	cmp	r6, r3
 800ee08:	4682      	mov	sl, r0
 800ee0a:	460c      	mov	r4, r1
 800ee0c:	4691      	mov	r9, r2
 800ee0e:	4698      	mov	r8, r3
 800ee10:	d835      	bhi.n	800ee7e <__ssputs_r+0x7e>
 800ee12:	898a      	ldrh	r2, [r1, #12]
 800ee14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee18:	d031      	beq.n	800ee7e <__ssputs_r+0x7e>
 800ee1a:	6825      	ldr	r5, [r4, #0]
 800ee1c:	6909      	ldr	r1, [r1, #16]
 800ee1e:	1a6f      	subs	r7, r5, r1
 800ee20:	6965      	ldr	r5, [r4, #20]
 800ee22:	2302      	movs	r3, #2
 800ee24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee28:	fb95 f5f3 	sdiv	r5, r5, r3
 800ee2c:	f108 0301 	add.w	r3, r8, #1
 800ee30:	443b      	add	r3, r7
 800ee32:	429d      	cmp	r5, r3
 800ee34:	bf38      	it	cc
 800ee36:	461d      	movcc	r5, r3
 800ee38:	0553      	lsls	r3, r2, #21
 800ee3a:	d531      	bpl.n	800eea0 <__ssputs_r+0xa0>
 800ee3c:	4629      	mov	r1, r5
 800ee3e:	f7fd fcf1 	bl	800c824 <_malloc_r>
 800ee42:	4606      	mov	r6, r0
 800ee44:	b950      	cbnz	r0, 800ee5c <__ssputs_r+0x5c>
 800ee46:	230c      	movs	r3, #12
 800ee48:	f8ca 3000 	str.w	r3, [sl]
 800ee4c:	89a3      	ldrh	r3, [r4, #12]
 800ee4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee52:	81a3      	strh	r3, [r4, #12]
 800ee54:	f04f 30ff 	mov.w	r0, #4294967295
 800ee58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee5c:	463a      	mov	r2, r7
 800ee5e:	6921      	ldr	r1, [r4, #16]
 800ee60:	f7ff fcbc 	bl	800e7dc <memcpy>
 800ee64:	89a3      	ldrh	r3, [r4, #12]
 800ee66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee6e:	81a3      	strh	r3, [r4, #12]
 800ee70:	6126      	str	r6, [r4, #16]
 800ee72:	6165      	str	r5, [r4, #20]
 800ee74:	443e      	add	r6, r7
 800ee76:	1bed      	subs	r5, r5, r7
 800ee78:	6026      	str	r6, [r4, #0]
 800ee7a:	60a5      	str	r5, [r4, #8]
 800ee7c:	4646      	mov	r6, r8
 800ee7e:	4546      	cmp	r6, r8
 800ee80:	bf28      	it	cs
 800ee82:	4646      	movcs	r6, r8
 800ee84:	4632      	mov	r2, r6
 800ee86:	4649      	mov	r1, r9
 800ee88:	6820      	ldr	r0, [r4, #0]
 800ee8a:	f000 fb77 	bl	800f57c <memmove>
 800ee8e:	68a3      	ldr	r3, [r4, #8]
 800ee90:	1b9b      	subs	r3, r3, r6
 800ee92:	60a3      	str	r3, [r4, #8]
 800ee94:	6823      	ldr	r3, [r4, #0]
 800ee96:	441e      	add	r6, r3
 800ee98:	6026      	str	r6, [r4, #0]
 800ee9a:	2000      	movs	r0, #0
 800ee9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eea0:	462a      	mov	r2, r5
 800eea2:	f7ff ff87 	bl	800edb4 <_realloc_r>
 800eea6:	4606      	mov	r6, r0
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	d1e1      	bne.n	800ee70 <__ssputs_r+0x70>
 800eeac:	6921      	ldr	r1, [r4, #16]
 800eeae:	4650      	mov	r0, sl
 800eeb0:	f7fd fc6a 	bl	800c788 <_free_r>
 800eeb4:	e7c7      	b.n	800ee46 <__ssputs_r+0x46>
	...

0800eeb8 <_svfiprintf_r>:
 800eeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eebc:	b09d      	sub	sp, #116	; 0x74
 800eebe:	4680      	mov	r8, r0
 800eec0:	9303      	str	r3, [sp, #12]
 800eec2:	898b      	ldrh	r3, [r1, #12]
 800eec4:	061c      	lsls	r4, r3, #24
 800eec6:	460d      	mov	r5, r1
 800eec8:	4616      	mov	r6, r2
 800eeca:	d50f      	bpl.n	800eeec <_svfiprintf_r+0x34>
 800eecc:	690b      	ldr	r3, [r1, #16]
 800eece:	b96b      	cbnz	r3, 800eeec <_svfiprintf_r+0x34>
 800eed0:	2140      	movs	r1, #64	; 0x40
 800eed2:	f7fd fca7 	bl	800c824 <_malloc_r>
 800eed6:	6028      	str	r0, [r5, #0]
 800eed8:	6128      	str	r0, [r5, #16]
 800eeda:	b928      	cbnz	r0, 800eee8 <_svfiprintf_r+0x30>
 800eedc:	230c      	movs	r3, #12
 800eede:	f8c8 3000 	str.w	r3, [r8]
 800eee2:	f04f 30ff 	mov.w	r0, #4294967295
 800eee6:	e0c5      	b.n	800f074 <_svfiprintf_r+0x1bc>
 800eee8:	2340      	movs	r3, #64	; 0x40
 800eeea:	616b      	str	r3, [r5, #20]
 800eeec:	2300      	movs	r3, #0
 800eeee:	9309      	str	r3, [sp, #36]	; 0x24
 800eef0:	2320      	movs	r3, #32
 800eef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eef6:	2330      	movs	r3, #48	; 0x30
 800eef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eefc:	f04f 0b01 	mov.w	fp, #1
 800ef00:	4637      	mov	r7, r6
 800ef02:	463c      	mov	r4, r7
 800ef04:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d13c      	bne.n	800ef86 <_svfiprintf_r+0xce>
 800ef0c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ef10:	d00b      	beq.n	800ef2a <_svfiprintf_r+0x72>
 800ef12:	4653      	mov	r3, sl
 800ef14:	4632      	mov	r2, r6
 800ef16:	4629      	mov	r1, r5
 800ef18:	4640      	mov	r0, r8
 800ef1a:	f7ff ff71 	bl	800ee00 <__ssputs_r>
 800ef1e:	3001      	adds	r0, #1
 800ef20:	f000 80a3 	beq.w	800f06a <_svfiprintf_r+0x1b2>
 800ef24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef26:	4453      	add	r3, sl
 800ef28:	9309      	str	r3, [sp, #36]	; 0x24
 800ef2a:	783b      	ldrb	r3, [r7, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	f000 809c 	beq.w	800f06a <_svfiprintf_r+0x1b2>
 800ef32:	2300      	movs	r3, #0
 800ef34:	f04f 32ff 	mov.w	r2, #4294967295
 800ef38:	9304      	str	r3, [sp, #16]
 800ef3a:	9307      	str	r3, [sp, #28]
 800ef3c:	9205      	str	r2, [sp, #20]
 800ef3e:	9306      	str	r3, [sp, #24]
 800ef40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef44:	931a      	str	r3, [sp, #104]	; 0x68
 800ef46:	2205      	movs	r2, #5
 800ef48:	7821      	ldrb	r1, [r4, #0]
 800ef4a:	4850      	ldr	r0, [pc, #320]	; (800f08c <_svfiprintf_r+0x1d4>)
 800ef4c:	f7f1 f978 	bl	8000240 <memchr>
 800ef50:	1c67      	adds	r7, r4, #1
 800ef52:	9b04      	ldr	r3, [sp, #16]
 800ef54:	b9d8      	cbnz	r0, 800ef8e <_svfiprintf_r+0xd6>
 800ef56:	06d9      	lsls	r1, r3, #27
 800ef58:	bf44      	itt	mi
 800ef5a:	2220      	movmi	r2, #32
 800ef5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ef60:	071a      	lsls	r2, r3, #28
 800ef62:	bf44      	itt	mi
 800ef64:	222b      	movmi	r2, #43	; 0x2b
 800ef66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ef6a:	7822      	ldrb	r2, [r4, #0]
 800ef6c:	2a2a      	cmp	r2, #42	; 0x2a
 800ef6e:	d016      	beq.n	800ef9e <_svfiprintf_r+0xe6>
 800ef70:	9a07      	ldr	r2, [sp, #28]
 800ef72:	2100      	movs	r1, #0
 800ef74:	200a      	movs	r0, #10
 800ef76:	4627      	mov	r7, r4
 800ef78:	3401      	adds	r4, #1
 800ef7a:	783b      	ldrb	r3, [r7, #0]
 800ef7c:	3b30      	subs	r3, #48	; 0x30
 800ef7e:	2b09      	cmp	r3, #9
 800ef80:	d951      	bls.n	800f026 <_svfiprintf_r+0x16e>
 800ef82:	b1c9      	cbz	r1, 800efb8 <_svfiprintf_r+0x100>
 800ef84:	e011      	b.n	800efaa <_svfiprintf_r+0xf2>
 800ef86:	2b25      	cmp	r3, #37	; 0x25
 800ef88:	d0c0      	beq.n	800ef0c <_svfiprintf_r+0x54>
 800ef8a:	4627      	mov	r7, r4
 800ef8c:	e7b9      	b.n	800ef02 <_svfiprintf_r+0x4a>
 800ef8e:	4a3f      	ldr	r2, [pc, #252]	; (800f08c <_svfiprintf_r+0x1d4>)
 800ef90:	1a80      	subs	r0, r0, r2
 800ef92:	fa0b f000 	lsl.w	r0, fp, r0
 800ef96:	4318      	orrs	r0, r3
 800ef98:	9004      	str	r0, [sp, #16]
 800ef9a:	463c      	mov	r4, r7
 800ef9c:	e7d3      	b.n	800ef46 <_svfiprintf_r+0x8e>
 800ef9e:	9a03      	ldr	r2, [sp, #12]
 800efa0:	1d11      	adds	r1, r2, #4
 800efa2:	6812      	ldr	r2, [r2, #0]
 800efa4:	9103      	str	r1, [sp, #12]
 800efa6:	2a00      	cmp	r2, #0
 800efa8:	db01      	blt.n	800efae <_svfiprintf_r+0xf6>
 800efaa:	9207      	str	r2, [sp, #28]
 800efac:	e004      	b.n	800efb8 <_svfiprintf_r+0x100>
 800efae:	4252      	negs	r2, r2
 800efb0:	f043 0302 	orr.w	r3, r3, #2
 800efb4:	9207      	str	r2, [sp, #28]
 800efb6:	9304      	str	r3, [sp, #16]
 800efb8:	783b      	ldrb	r3, [r7, #0]
 800efba:	2b2e      	cmp	r3, #46	; 0x2e
 800efbc:	d10e      	bne.n	800efdc <_svfiprintf_r+0x124>
 800efbe:	787b      	ldrb	r3, [r7, #1]
 800efc0:	2b2a      	cmp	r3, #42	; 0x2a
 800efc2:	f107 0101 	add.w	r1, r7, #1
 800efc6:	d132      	bne.n	800f02e <_svfiprintf_r+0x176>
 800efc8:	9b03      	ldr	r3, [sp, #12]
 800efca:	1d1a      	adds	r2, r3, #4
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	9203      	str	r2, [sp, #12]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	bfb8      	it	lt
 800efd4:	f04f 33ff 	movlt.w	r3, #4294967295
 800efd8:	3702      	adds	r7, #2
 800efda:	9305      	str	r3, [sp, #20]
 800efdc:	4c2c      	ldr	r4, [pc, #176]	; (800f090 <_svfiprintf_r+0x1d8>)
 800efde:	7839      	ldrb	r1, [r7, #0]
 800efe0:	2203      	movs	r2, #3
 800efe2:	4620      	mov	r0, r4
 800efe4:	f7f1 f92c 	bl	8000240 <memchr>
 800efe8:	b138      	cbz	r0, 800effa <_svfiprintf_r+0x142>
 800efea:	2340      	movs	r3, #64	; 0x40
 800efec:	1b00      	subs	r0, r0, r4
 800efee:	fa03 f000 	lsl.w	r0, r3, r0
 800eff2:	9b04      	ldr	r3, [sp, #16]
 800eff4:	4303      	orrs	r3, r0
 800eff6:	9304      	str	r3, [sp, #16]
 800eff8:	3701      	adds	r7, #1
 800effa:	7839      	ldrb	r1, [r7, #0]
 800effc:	4825      	ldr	r0, [pc, #148]	; (800f094 <_svfiprintf_r+0x1dc>)
 800effe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f002:	2206      	movs	r2, #6
 800f004:	1c7e      	adds	r6, r7, #1
 800f006:	f7f1 f91b 	bl	8000240 <memchr>
 800f00a:	2800      	cmp	r0, #0
 800f00c:	d035      	beq.n	800f07a <_svfiprintf_r+0x1c2>
 800f00e:	4b22      	ldr	r3, [pc, #136]	; (800f098 <_svfiprintf_r+0x1e0>)
 800f010:	b9fb      	cbnz	r3, 800f052 <_svfiprintf_r+0x19a>
 800f012:	9b03      	ldr	r3, [sp, #12]
 800f014:	3307      	adds	r3, #7
 800f016:	f023 0307 	bic.w	r3, r3, #7
 800f01a:	3308      	adds	r3, #8
 800f01c:	9303      	str	r3, [sp, #12]
 800f01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f020:	444b      	add	r3, r9
 800f022:	9309      	str	r3, [sp, #36]	; 0x24
 800f024:	e76c      	b.n	800ef00 <_svfiprintf_r+0x48>
 800f026:	fb00 3202 	mla	r2, r0, r2, r3
 800f02a:	2101      	movs	r1, #1
 800f02c:	e7a3      	b.n	800ef76 <_svfiprintf_r+0xbe>
 800f02e:	2300      	movs	r3, #0
 800f030:	9305      	str	r3, [sp, #20]
 800f032:	4618      	mov	r0, r3
 800f034:	240a      	movs	r4, #10
 800f036:	460f      	mov	r7, r1
 800f038:	3101      	adds	r1, #1
 800f03a:	783a      	ldrb	r2, [r7, #0]
 800f03c:	3a30      	subs	r2, #48	; 0x30
 800f03e:	2a09      	cmp	r2, #9
 800f040:	d903      	bls.n	800f04a <_svfiprintf_r+0x192>
 800f042:	2b00      	cmp	r3, #0
 800f044:	d0ca      	beq.n	800efdc <_svfiprintf_r+0x124>
 800f046:	9005      	str	r0, [sp, #20]
 800f048:	e7c8      	b.n	800efdc <_svfiprintf_r+0x124>
 800f04a:	fb04 2000 	mla	r0, r4, r0, r2
 800f04e:	2301      	movs	r3, #1
 800f050:	e7f1      	b.n	800f036 <_svfiprintf_r+0x17e>
 800f052:	ab03      	add	r3, sp, #12
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	462a      	mov	r2, r5
 800f058:	4b10      	ldr	r3, [pc, #64]	; (800f09c <_svfiprintf_r+0x1e4>)
 800f05a:	a904      	add	r1, sp, #16
 800f05c:	4640      	mov	r0, r8
 800f05e:	f7fd fcd5 	bl	800ca0c <_printf_float>
 800f062:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f066:	4681      	mov	r9, r0
 800f068:	d1d9      	bne.n	800f01e <_svfiprintf_r+0x166>
 800f06a:	89ab      	ldrh	r3, [r5, #12]
 800f06c:	065b      	lsls	r3, r3, #25
 800f06e:	f53f af38 	bmi.w	800eee2 <_svfiprintf_r+0x2a>
 800f072:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f074:	b01d      	add	sp, #116	; 0x74
 800f076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f07a:	ab03      	add	r3, sp, #12
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	462a      	mov	r2, r5
 800f080:	4b06      	ldr	r3, [pc, #24]	; (800f09c <_svfiprintf_r+0x1e4>)
 800f082:	a904      	add	r1, sp, #16
 800f084:	4640      	mov	r0, r8
 800f086:	f7fd ff77 	bl	800cf78 <_printf_i>
 800f08a:	e7ea      	b.n	800f062 <_svfiprintf_r+0x1aa>
 800f08c:	08012594 	.word	0x08012594
 800f090:	0801259a 	.word	0x0801259a
 800f094:	0801259e 	.word	0x0801259e
 800f098:	0800ca0d 	.word	0x0800ca0d
 800f09c:	0800ee01 	.word	0x0800ee01

0800f0a0 <__sfputc_r>:
 800f0a0:	6893      	ldr	r3, [r2, #8]
 800f0a2:	3b01      	subs	r3, #1
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	b410      	push	{r4}
 800f0a8:	6093      	str	r3, [r2, #8]
 800f0aa:	da09      	bge.n	800f0c0 <__sfputc_r+0x20>
 800f0ac:	6994      	ldr	r4, [r2, #24]
 800f0ae:	42a3      	cmp	r3, r4
 800f0b0:	db02      	blt.n	800f0b8 <__sfputc_r+0x18>
 800f0b2:	b2cb      	uxtb	r3, r1
 800f0b4:	2b0a      	cmp	r3, #10
 800f0b6:	d103      	bne.n	800f0c0 <__sfputc_r+0x20>
 800f0b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0bc:	f7fe ba48 	b.w	800d550 <__swbuf_r>
 800f0c0:	6813      	ldr	r3, [r2, #0]
 800f0c2:	1c58      	adds	r0, r3, #1
 800f0c4:	6010      	str	r0, [r2, #0]
 800f0c6:	7019      	strb	r1, [r3, #0]
 800f0c8:	b2c8      	uxtb	r0, r1
 800f0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <__sfputs_r>:
 800f0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	460f      	mov	r7, r1
 800f0d6:	4614      	mov	r4, r2
 800f0d8:	18d5      	adds	r5, r2, r3
 800f0da:	42ac      	cmp	r4, r5
 800f0dc:	d101      	bne.n	800f0e2 <__sfputs_r+0x12>
 800f0de:	2000      	movs	r0, #0
 800f0e0:	e007      	b.n	800f0f2 <__sfputs_r+0x22>
 800f0e2:	463a      	mov	r2, r7
 800f0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	f7ff ffd9 	bl	800f0a0 <__sfputc_r>
 800f0ee:	1c43      	adds	r3, r0, #1
 800f0f0:	d1f3      	bne.n	800f0da <__sfputs_r+0xa>
 800f0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f0f4 <_vfiprintf_r>:
 800f0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f8:	b09d      	sub	sp, #116	; 0x74
 800f0fa:	460c      	mov	r4, r1
 800f0fc:	4617      	mov	r7, r2
 800f0fe:	9303      	str	r3, [sp, #12]
 800f100:	4606      	mov	r6, r0
 800f102:	b118      	cbz	r0, 800f10c <_vfiprintf_r+0x18>
 800f104:	6983      	ldr	r3, [r0, #24]
 800f106:	b90b      	cbnz	r3, 800f10c <_vfiprintf_r+0x18>
 800f108:	f7ff fa50 	bl	800e5ac <__sinit>
 800f10c:	4b7c      	ldr	r3, [pc, #496]	; (800f300 <_vfiprintf_r+0x20c>)
 800f10e:	429c      	cmp	r4, r3
 800f110:	d157      	bne.n	800f1c2 <_vfiprintf_r+0xce>
 800f112:	6874      	ldr	r4, [r6, #4]
 800f114:	89a3      	ldrh	r3, [r4, #12]
 800f116:	0718      	lsls	r0, r3, #28
 800f118:	d55d      	bpl.n	800f1d6 <_vfiprintf_r+0xe2>
 800f11a:	6923      	ldr	r3, [r4, #16]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d05a      	beq.n	800f1d6 <_vfiprintf_r+0xe2>
 800f120:	2300      	movs	r3, #0
 800f122:	9309      	str	r3, [sp, #36]	; 0x24
 800f124:	2320      	movs	r3, #32
 800f126:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f12a:	2330      	movs	r3, #48	; 0x30
 800f12c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f130:	f04f 0b01 	mov.w	fp, #1
 800f134:	46b8      	mov	r8, r7
 800f136:	4645      	mov	r5, r8
 800f138:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d155      	bne.n	800f1ec <_vfiprintf_r+0xf8>
 800f140:	ebb8 0a07 	subs.w	sl, r8, r7
 800f144:	d00b      	beq.n	800f15e <_vfiprintf_r+0x6a>
 800f146:	4653      	mov	r3, sl
 800f148:	463a      	mov	r2, r7
 800f14a:	4621      	mov	r1, r4
 800f14c:	4630      	mov	r0, r6
 800f14e:	f7ff ffbf 	bl	800f0d0 <__sfputs_r>
 800f152:	3001      	adds	r0, #1
 800f154:	f000 80c4 	beq.w	800f2e0 <_vfiprintf_r+0x1ec>
 800f158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f15a:	4453      	add	r3, sl
 800f15c:	9309      	str	r3, [sp, #36]	; 0x24
 800f15e:	f898 3000 	ldrb.w	r3, [r8]
 800f162:	2b00      	cmp	r3, #0
 800f164:	f000 80bc 	beq.w	800f2e0 <_vfiprintf_r+0x1ec>
 800f168:	2300      	movs	r3, #0
 800f16a:	f04f 32ff 	mov.w	r2, #4294967295
 800f16e:	9304      	str	r3, [sp, #16]
 800f170:	9307      	str	r3, [sp, #28]
 800f172:	9205      	str	r2, [sp, #20]
 800f174:	9306      	str	r3, [sp, #24]
 800f176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f17a:	931a      	str	r3, [sp, #104]	; 0x68
 800f17c:	2205      	movs	r2, #5
 800f17e:	7829      	ldrb	r1, [r5, #0]
 800f180:	4860      	ldr	r0, [pc, #384]	; (800f304 <_vfiprintf_r+0x210>)
 800f182:	f7f1 f85d 	bl	8000240 <memchr>
 800f186:	f105 0801 	add.w	r8, r5, #1
 800f18a:	9b04      	ldr	r3, [sp, #16]
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d131      	bne.n	800f1f4 <_vfiprintf_r+0x100>
 800f190:	06d9      	lsls	r1, r3, #27
 800f192:	bf44      	itt	mi
 800f194:	2220      	movmi	r2, #32
 800f196:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f19a:	071a      	lsls	r2, r3, #28
 800f19c:	bf44      	itt	mi
 800f19e:	222b      	movmi	r2, #43	; 0x2b
 800f1a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f1a4:	782a      	ldrb	r2, [r5, #0]
 800f1a6:	2a2a      	cmp	r2, #42	; 0x2a
 800f1a8:	d02c      	beq.n	800f204 <_vfiprintf_r+0x110>
 800f1aa:	9a07      	ldr	r2, [sp, #28]
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	200a      	movs	r0, #10
 800f1b0:	46a8      	mov	r8, r5
 800f1b2:	3501      	adds	r5, #1
 800f1b4:	f898 3000 	ldrb.w	r3, [r8]
 800f1b8:	3b30      	subs	r3, #48	; 0x30
 800f1ba:	2b09      	cmp	r3, #9
 800f1bc:	d96d      	bls.n	800f29a <_vfiprintf_r+0x1a6>
 800f1be:	b371      	cbz	r1, 800f21e <_vfiprintf_r+0x12a>
 800f1c0:	e026      	b.n	800f210 <_vfiprintf_r+0x11c>
 800f1c2:	4b51      	ldr	r3, [pc, #324]	; (800f308 <_vfiprintf_r+0x214>)
 800f1c4:	429c      	cmp	r4, r3
 800f1c6:	d101      	bne.n	800f1cc <_vfiprintf_r+0xd8>
 800f1c8:	68b4      	ldr	r4, [r6, #8]
 800f1ca:	e7a3      	b.n	800f114 <_vfiprintf_r+0x20>
 800f1cc:	4b4f      	ldr	r3, [pc, #316]	; (800f30c <_vfiprintf_r+0x218>)
 800f1ce:	429c      	cmp	r4, r3
 800f1d0:	bf08      	it	eq
 800f1d2:	68f4      	ldreq	r4, [r6, #12]
 800f1d4:	e79e      	b.n	800f114 <_vfiprintf_r+0x20>
 800f1d6:	4621      	mov	r1, r4
 800f1d8:	4630      	mov	r0, r6
 800f1da:	f7fe fa19 	bl	800d610 <__swsetup_r>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	d09e      	beq.n	800f120 <_vfiprintf_r+0x2c>
 800f1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e6:	b01d      	add	sp, #116	; 0x74
 800f1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ec:	2b25      	cmp	r3, #37	; 0x25
 800f1ee:	d0a7      	beq.n	800f140 <_vfiprintf_r+0x4c>
 800f1f0:	46a8      	mov	r8, r5
 800f1f2:	e7a0      	b.n	800f136 <_vfiprintf_r+0x42>
 800f1f4:	4a43      	ldr	r2, [pc, #268]	; (800f304 <_vfiprintf_r+0x210>)
 800f1f6:	1a80      	subs	r0, r0, r2
 800f1f8:	fa0b f000 	lsl.w	r0, fp, r0
 800f1fc:	4318      	orrs	r0, r3
 800f1fe:	9004      	str	r0, [sp, #16]
 800f200:	4645      	mov	r5, r8
 800f202:	e7bb      	b.n	800f17c <_vfiprintf_r+0x88>
 800f204:	9a03      	ldr	r2, [sp, #12]
 800f206:	1d11      	adds	r1, r2, #4
 800f208:	6812      	ldr	r2, [r2, #0]
 800f20a:	9103      	str	r1, [sp, #12]
 800f20c:	2a00      	cmp	r2, #0
 800f20e:	db01      	blt.n	800f214 <_vfiprintf_r+0x120>
 800f210:	9207      	str	r2, [sp, #28]
 800f212:	e004      	b.n	800f21e <_vfiprintf_r+0x12a>
 800f214:	4252      	negs	r2, r2
 800f216:	f043 0302 	orr.w	r3, r3, #2
 800f21a:	9207      	str	r2, [sp, #28]
 800f21c:	9304      	str	r3, [sp, #16]
 800f21e:	f898 3000 	ldrb.w	r3, [r8]
 800f222:	2b2e      	cmp	r3, #46	; 0x2e
 800f224:	d110      	bne.n	800f248 <_vfiprintf_r+0x154>
 800f226:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f22a:	2b2a      	cmp	r3, #42	; 0x2a
 800f22c:	f108 0101 	add.w	r1, r8, #1
 800f230:	d137      	bne.n	800f2a2 <_vfiprintf_r+0x1ae>
 800f232:	9b03      	ldr	r3, [sp, #12]
 800f234:	1d1a      	adds	r2, r3, #4
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	9203      	str	r2, [sp, #12]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	bfb8      	it	lt
 800f23e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f242:	f108 0802 	add.w	r8, r8, #2
 800f246:	9305      	str	r3, [sp, #20]
 800f248:	4d31      	ldr	r5, [pc, #196]	; (800f310 <_vfiprintf_r+0x21c>)
 800f24a:	f898 1000 	ldrb.w	r1, [r8]
 800f24e:	2203      	movs	r2, #3
 800f250:	4628      	mov	r0, r5
 800f252:	f7f0 fff5 	bl	8000240 <memchr>
 800f256:	b140      	cbz	r0, 800f26a <_vfiprintf_r+0x176>
 800f258:	2340      	movs	r3, #64	; 0x40
 800f25a:	1b40      	subs	r0, r0, r5
 800f25c:	fa03 f000 	lsl.w	r0, r3, r0
 800f260:	9b04      	ldr	r3, [sp, #16]
 800f262:	4303      	orrs	r3, r0
 800f264:	9304      	str	r3, [sp, #16]
 800f266:	f108 0801 	add.w	r8, r8, #1
 800f26a:	f898 1000 	ldrb.w	r1, [r8]
 800f26e:	4829      	ldr	r0, [pc, #164]	; (800f314 <_vfiprintf_r+0x220>)
 800f270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f274:	2206      	movs	r2, #6
 800f276:	f108 0701 	add.w	r7, r8, #1
 800f27a:	f7f0 ffe1 	bl	8000240 <memchr>
 800f27e:	2800      	cmp	r0, #0
 800f280:	d034      	beq.n	800f2ec <_vfiprintf_r+0x1f8>
 800f282:	4b25      	ldr	r3, [pc, #148]	; (800f318 <_vfiprintf_r+0x224>)
 800f284:	bb03      	cbnz	r3, 800f2c8 <_vfiprintf_r+0x1d4>
 800f286:	9b03      	ldr	r3, [sp, #12]
 800f288:	3307      	adds	r3, #7
 800f28a:	f023 0307 	bic.w	r3, r3, #7
 800f28e:	3308      	adds	r3, #8
 800f290:	9303      	str	r3, [sp, #12]
 800f292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f294:	444b      	add	r3, r9
 800f296:	9309      	str	r3, [sp, #36]	; 0x24
 800f298:	e74c      	b.n	800f134 <_vfiprintf_r+0x40>
 800f29a:	fb00 3202 	mla	r2, r0, r2, r3
 800f29e:	2101      	movs	r1, #1
 800f2a0:	e786      	b.n	800f1b0 <_vfiprintf_r+0xbc>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	9305      	str	r3, [sp, #20]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	250a      	movs	r5, #10
 800f2aa:	4688      	mov	r8, r1
 800f2ac:	3101      	adds	r1, #1
 800f2ae:	f898 2000 	ldrb.w	r2, [r8]
 800f2b2:	3a30      	subs	r2, #48	; 0x30
 800f2b4:	2a09      	cmp	r2, #9
 800f2b6:	d903      	bls.n	800f2c0 <_vfiprintf_r+0x1cc>
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d0c5      	beq.n	800f248 <_vfiprintf_r+0x154>
 800f2bc:	9005      	str	r0, [sp, #20]
 800f2be:	e7c3      	b.n	800f248 <_vfiprintf_r+0x154>
 800f2c0:	fb05 2000 	mla	r0, r5, r0, r2
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	e7f0      	b.n	800f2aa <_vfiprintf_r+0x1b6>
 800f2c8:	ab03      	add	r3, sp, #12
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	4622      	mov	r2, r4
 800f2ce:	4b13      	ldr	r3, [pc, #76]	; (800f31c <_vfiprintf_r+0x228>)
 800f2d0:	a904      	add	r1, sp, #16
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	f7fd fb9a 	bl	800ca0c <_printf_float>
 800f2d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f2dc:	4681      	mov	r9, r0
 800f2de:	d1d8      	bne.n	800f292 <_vfiprintf_r+0x19e>
 800f2e0:	89a3      	ldrh	r3, [r4, #12]
 800f2e2:	065b      	lsls	r3, r3, #25
 800f2e4:	f53f af7d 	bmi.w	800f1e2 <_vfiprintf_r+0xee>
 800f2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2ea:	e77c      	b.n	800f1e6 <_vfiprintf_r+0xf2>
 800f2ec:	ab03      	add	r3, sp, #12
 800f2ee:	9300      	str	r3, [sp, #0]
 800f2f0:	4622      	mov	r2, r4
 800f2f2:	4b0a      	ldr	r3, [pc, #40]	; (800f31c <_vfiprintf_r+0x228>)
 800f2f4:	a904      	add	r1, sp, #16
 800f2f6:	4630      	mov	r0, r6
 800f2f8:	f7fd fe3e 	bl	800cf78 <_printf_i>
 800f2fc:	e7ec      	b.n	800f2d8 <_vfiprintf_r+0x1e4>
 800f2fe:	bf00      	nop
 800f300:	08012454 	.word	0x08012454
 800f304:	08012594 	.word	0x08012594
 800f308:	08012474 	.word	0x08012474
 800f30c:	08012434 	.word	0x08012434
 800f310:	0801259a 	.word	0x0801259a
 800f314:	0801259e 	.word	0x0801259e
 800f318:	0800ca0d 	.word	0x0800ca0d
 800f31c:	0800f0d1 	.word	0x0800f0d1

0800f320 <lflush>:
 800f320:	8983      	ldrh	r3, [r0, #12]
 800f322:	f003 0309 	and.w	r3, r3, #9
 800f326:	2b09      	cmp	r3, #9
 800f328:	d101      	bne.n	800f32e <lflush+0xe>
 800f32a:	f7ff b8ed 	b.w	800e508 <fflush>
 800f32e:	2000      	movs	r0, #0
 800f330:	4770      	bx	lr
	...

0800f334 <__srefill_r>:
 800f334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f336:	460c      	mov	r4, r1
 800f338:	4605      	mov	r5, r0
 800f33a:	b118      	cbz	r0, 800f344 <__srefill_r+0x10>
 800f33c:	6983      	ldr	r3, [r0, #24]
 800f33e:	b90b      	cbnz	r3, 800f344 <__srefill_r+0x10>
 800f340:	f7ff f934 	bl	800e5ac <__sinit>
 800f344:	4b3b      	ldr	r3, [pc, #236]	; (800f434 <__srefill_r+0x100>)
 800f346:	429c      	cmp	r4, r3
 800f348:	d10a      	bne.n	800f360 <__srefill_r+0x2c>
 800f34a:	686c      	ldr	r4, [r5, #4]
 800f34c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f350:	2300      	movs	r3, #0
 800f352:	6063      	str	r3, [r4, #4]
 800f354:	b293      	uxth	r3, r2
 800f356:	069e      	lsls	r6, r3, #26
 800f358:	d50c      	bpl.n	800f374 <__srefill_r+0x40>
 800f35a:	f04f 30ff 	mov.w	r0, #4294967295
 800f35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f360:	4b35      	ldr	r3, [pc, #212]	; (800f438 <__srefill_r+0x104>)
 800f362:	429c      	cmp	r4, r3
 800f364:	d101      	bne.n	800f36a <__srefill_r+0x36>
 800f366:	68ac      	ldr	r4, [r5, #8]
 800f368:	e7f0      	b.n	800f34c <__srefill_r+0x18>
 800f36a:	4b34      	ldr	r3, [pc, #208]	; (800f43c <__srefill_r+0x108>)
 800f36c:	429c      	cmp	r4, r3
 800f36e:	bf08      	it	eq
 800f370:	68ec      	ldreq	r4, [r5, #12]
 800f372:	e7eb      	b.n	800f34c <__srefill_r+0x18>
 800f374:	0758      	lsls	r0, r3, #29
 800f376:	d448      	bmi.n	800f40a <__srefill_r+0xd6>
 800f378:	06d9      	lsls	r1, r3, #27
 800f37a:	d405      	bmi.n	800f388 <__srefill_r+0x54>
 800f37c:	2309      	movs	r3, #9
 800f37e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f382:	602b      	str	r3, [r5, #0]
 800f384:	81a2      	strh	r2, [r4, #12]
 800f386:	e7e8      	b.n	800f35a <__srefill_r+0x26>
 800f388:	071a      	lsls	r2, r3, #28
 800f38a:	d50b      	bpl.n	800f3a4 <__srefill_r+0x70>
 800f38c:	4621      	mov	r1, r4
 800f38e:	4628      	mov	r0, r5
 800f390:	f7ff f890 	bl	800e4b4 <_fflush_r>
 800f394:	2800      	cmp	r0, #0
 800f396:	d1e0      	bne.n	800f35a <__srefill_r+0x26>
 800f398:	89a3      	ldrh	r3, [r4, #12]
 800f39a:	60a0      	str	r0, [r4, #8]
 800f39c:	f023 0308 	bic.w	r3, r3, #8
 800f3a0:	81a3      	strh	r3, [r4, #12]
 800f3a2:	61a0      	str	r0, [r4, #24]
 800f3a4:	89a3      	ldrh	r3, [r4, #12]
 800f3a6:	f043 0304 	orr.w	r3, r3, #4
 800f3aa:	81a3      	strh	r3, [r4, #12]
 800f3ac:	6923      	ldr	r3, [r4, #16]
 800f3ae:	b91b      	cbnz	r3, 800f3b8 <__srefill_r+0x84>
 800f3b0:	4621      	mov	r1, r4
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	f7ff f9d2 	bl	800e75c <__smakebuf_r>
 800f3b8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800f3bc:	b2be      	uxth	r6, r7
 800f3be:	07b3      	lsls	r3, r6, #30
 800f3c0:	d00f      	beq.n	800f3e2 <__srefill_r+0xae>
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	81a3      	strh	r3, [r4, #12]
 800f3c6:	4b1e      	ldr	r3, [pc, #120]	; (800f440 <__srefill_r+0x10c>)
 800f3c8:	491e      	ldr	r1, [pc, #120]	; (800f444 <__srefill_r+0x110>)
 800f3ca:	6818      	ldr	r0, [r3, #0]
 800f3cc:	f006 0609 	and.w	r6, r6, #9
 800f3d0:	f7ff f958 	bl	800e684 <_fwalk>
 800f3d4:	2e09      	cmp	r6, #9
 800f3d6:	81a7      	strh	r7, [r4, #12]
 800f3d8:	d103      	bne.n	800f3e2 <__srefill_r+0xae>
 800f3da:	4621      	mov	r1, r4
 800f3dc:	4628      	mov	r0, r5
 800f3de:	f7fe ffe1 	bl	800e3a4 <__sflush_r>
 800f3e2:	6922      	ldr	r2, [r4, #16]
 800f3e4:	6022      	str	r2, [r4, #0]
 800f3e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f3e8:	6963      	ldr	r3, [r4, #20]
 800f3ea:	6a21      	ldr	r1, [r4, #32]
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	47b0      	blx	r6
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	6060      	str	r0, [r4, #4]
 800f3f4:	dc1c      	bgt.n	800f430 <__srefill_r+0xfc>
 800f3f6:	89a3      	ldrh	r3, [r4, #12]
 800f3f8:	bf17      	itett	ne
 800f3fa:	2200      	movne	r2, #0
 800f3fc:	f043 0320 	orreq.w	r3, r3, #32
 800f400:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800f404:	6062      	strne	r2, [r4, #4]
 800f406:	81a3      	strh	r3, [r4, #12]
 800f408:	e7a7      	b.n	800f35a <__srefill_r+0x26>
 800f40a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f40c:	2900      	cmp	r1, #0
 800f40e:	d0cd      	beq.n	800f3ac <__srefill_r+0x78>
 800f410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f414:	4299      	cmp	r1, r3
 800f416:	d002      	beq.n	800f41e <__srefill_r+0xea>
 800f418:	4628      	mov	r0, r5
 800f41a:	f7fd f9b5 	bl	800c788 <_free_r>
 800f41e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f420:	6063      	str	r3, [r4, #4]
 800f422:	2000      	movs	r0, #0
 800f424:	6360      	str	r0, [r4, #52]	; 0x34
 800f426:	2b00      	cmp	r3, #0
 800f428:	d0c0      	beq.n	800f3ac <__srefill_r+0x78>
 800f42a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f42c:	6023      	str	r3, [r4, #0]
 800f42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f430:	2000      	movs	r0, #0
 800f432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f434:	08012454 	.word	0x08012454
 800f438:	08012474 	.word	0x08012474
 800f43c:	08012434 	.word	0x08012434
 800f440:	080122e4 	.word	0x080122e4
 800f444:	0800f321 	.word	0x0800f321

0800f448 <__sread>:
 800f448:	b510      	push	{r4, lr}
 800f44a:	460c      	mov	r4, r1
 800f44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f450:	f000 f8b8 	bl	800f5c4 <_read_r>
 800f454:	2800      	cmp	r0, #0
 800f456:	bfab      	itete	ge
 800f458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f45a:	89a3      	ldrhlt	r3, [r4, #12]
 800f45c:	181b      	addge	r3, r3, r0
 800f45e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f462:	bfac      	ite	ge
 800f464:	6563      	strge	r3, [r4, #84]	; 0x54
 800f466:	81a3      	strhlt	r3, [r4, #12]
 800f468:	bd10      	pop	{r4, pc}

0800f46a <__swrite>:
 800f46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f46e:	461f      	mov	r7, r3
 800f470:	898b      	ldrh	r3, [r1, #12]
 800f472:	05db      	lsls	r3, r3, #23
 800f474:	4605      	mov	r5, r0
 800f476:	460c      	mov	r4, r1
 800f478:	4616      	mov	r6, r2
 800f47a:	d505      	bpl.n	800f488 <__swrite+0x1e>
 800f47c:	2302      	movs	r3, #2
 800f47e:	2200      	movs	r2, #0
 800f480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f484:	f000 f868 	bl	800f558 <_lseek_r>
 800f488:	89a3      	ldrh	r3, [r4, #12]
 800f48a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f48e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f492:	81a3      	strh	r3, [r4, #12]
 800f494:	4632      	mov	r2, r6
 800f496:	463b      	mov	r3, r7
 800f498:	4628      	mov	r0, r5
 800f49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f49e:	f000 b817 	b.w	800f4d0 <_write_r>

0800f4a2 <__sseek>:
 800f4a2:	b510      	push	{r4, lr}
 800f4a4:	460c      	mov	r4, r1
 800f4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4aa:	f000 f855 	bl	800f558 <_lseek_r>
 800f4ae:	1c43      	adds	r3, r0, #1
 800f4b0:	89a3      	ldrh	r3, [r4, #12]
 800f4b2:	bf15      	itete	ne
 800f4b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f4b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f4ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f4be:	81a3      	strheq	r3, [r4, #12]
 800f4c0:	bf18      	it	ne
 800f4c2:	81a3      	strhne	r3, [r4, #12]
 800f4c4:	bd10      	pop	{r4, pc}

0800f4c6 <__sclose>:
 800f4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4ca:	f000 b813 	b.w	800f4f4 <_close_r>
	...

0800f4d0 <_write_r>:
 800f4d0:	b538      	push	{r3, r4, r5, lr}
 800f4d2:	4c07      	ldr	r4, [pc, #28]	; (800f4f0 <_write_r+0x20>)
 800f4d4:	4605      	mov	r5, r0
 800f4d6:	4608      	mov	r0, r1
 800f4d8:	4611      	mov	r1, r2
 800f4da:	2200      	movs	r2, #0
 800f4dc:	6022      	str	r2, [r4, #0]
 800f4de:	461a      	mov	r2, r3
 800f4e0:	f000 f8b8 	bl	800f654 <_write>
 800f4e4:	1c43      	adds	r3, r0, #1
 800f4e6:	d102      	bne.n	800f4ee <_write_r+0x1e>
 800f4e8:	6823      	ldr	r3, [r4, #0]
 800f4ea:	b103      	cbz	r3, 800f4ee <_write_r+0x1e>
 800f4ec:	602b      	str	r3, [r5, #0]
 800f4ee:	bd38      	pop	{r3, r4, r5, pc}
 800f4f0:	20002768 	.word	0x20002768

0800f4f4 <_close_r>:
 800f4f4:	b538      	push	{r3, r4, r5, lr}
 800f4f6:	4c06      	ldr	r4, [pc, #24]	; (800f510 <_close_r+0x1c>)
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	4605      	mov	r5, r0
 800f4fc:	4608      	mov	r0, r1
 800f4fe:	6023      	str	r3, [r4, #0]
 800f500:	f000 f872 	bl	800f5e8 <_close>
 800f504:	1c43      	adds	r3, r0, #1
 800f506:	d102      	bne.n	800f50e <_close_r+0x1a>
 800f508:	6823      	ldr	r3, [r4, #0]
 800f50a:	b103      	cbz	r3, 800f50e <_close_r+0x1a>
 800f50c:	602b      	str	r3, [r5, #0]
 800f50e:	bd38      	pop	{r3, r4, r5, pc}
 800f510:	20002768 	.word	0x20002768

0800f514 <_fstat_r>:
 800f514:	b538      	push	{r3, r4, r5, lr}
 800f516:	4c07      	ldr	r4, [pc, #28]	; (800f534 <_fstat_r+0x20>)
 800f518:	2300      	movs	r3, #0
 800f51a:	4605      	mov	r5, r0
 800f51c:	4608      	mov	r0, r1
 800f51e:	4611      	mov	r1, r2
 800f520:	6023      	str	r3, [r4, #0]
 800f522:	f000 f869 	bl	800f5f8 <_fstat>
 800f526:	1c43      	adds	r3, r0, #1
 800f528:	d102      	bne.n	800f530 <_fstat_r+0x1c>
 800f52a:	6823      	ldr	r3, [r4, #0]
 800f52c:	b103      	cbz	r3, 800f530 <_fstat_r+0x1c>
 800f52e:	602b      	str	r3, [r5, #0]
 800f530:	bd38      	pop	{r3, r4, r5, pc}
 800f532:	bf00      	nop
 800f534:	20002768 	.word	0x20002768

0800f538 <_isatty_r>:
 800f538:	b538      	push	{r3, r4, r5, lr}
 800f53a:	4c06      	ldr	r4, [pc, #24]	; (800f554 <_isatty_r+0x1c>)
 800f53c:	2300      	movs	r3, #0
 800f53e:	4605      	mov	r5, r0
 800f540:	4608      	mov	r0, r1
 800f542:	6023      	str	r3, [r4, #0]
 800f544:	f000 f860 	bl	800f608 <_isatty>
 800f548:	1c43      	adds	r3, r0, #1
 800f54a:	d102      	bne.n	800f552 <_isatty_r+0x1a>
 800f54c:	6823      	ldr	r3, [r4, #0]
 800f54e:	b103      	cbz	r3, 800f552 <_isatty_r+0x1a>
 800f550:	602b      	str	r3, [r5, #0]
 800f552:	bd38      	pop	{r3, r4, r5, pc}
 800f554:	20002768 	.word	0x20002768

0800f558 <_lseek_r>:
 800f558:	b538      	push	{r3, r4, r5, lr}
 800f55a:	4c07      	ldr	r4, [pc, #28]	; (800f578 <_lseek_r+0x20>)
 800f55c:	4605      	mov	r5, r0
 800f55e:	4608      	mov	r0, r1
 800f560:	4611      	mov	r1, r2
 800f562:	2200      	movs	r2, #0
 800f564:	6022      	str	r2, [r4, #0]
 800f566:	461a      	mov	r2, r3
 800f568:	f000 f856 	bl	800f618 <_lseek>
 800f56c:	1c43      	adds	r3, r0, #1
 800f56e:	d102      	bne.n	800f576 <_lseek_r+0x1e>
 800f570:	6823      	ldr	r3, [r4, #0]
 800f572:	b103      	cbz	r3, 800f576 <_lseek_r+0x1e>
 800f574:	602b      	str	r3, [r5, #0]
 800f576:	bd38      	pop	{r3, r4, r5, pc}
 800f578:	20002768 	.word	0x20002768

0800f57c <memmove>:
 800f57c:	4288      	cmp	r0, r1
 800f57e:	b510      	push	{r4, lr}
 800f580:	eb01 0302 	add.w	r3, r1, r2
 800f584:	d803      	bhi.n	800f58e <memmove+0x12>
 800f586:	1e42      	subs	r2, r0, #1
 800f588:	4299      	cmp	r1, r3
 800f58a:	d10c      	bne.n	800f5a6 <memmove+0x2a>
 800f58c:	bd10      	pop	{r4, pc}
 800f58e:	4298      	cmp	r0, r3
 800f590:	d2f9      	bcs.n	800f586 <memmove+0xa>
 800f592:	1881      	adds	r1, r0, r2
 800f594:	1ad2      	subs	r2, r2, r3
 800f596:	42d3      	cmn	r3, r2
 800f598:	d100      	bne.n	800f59c <memmove+0x20>
 800f59a:	bd10      	pop	{r4, pc}
 800f59c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5a0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f5a4:	e7f7      	b.n	800f596 <memmove+0x1a>
 800f5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f5ae:	e7eb      	b.n	800f588 <memmove+0xc>

0800f5b0 <_malloc_usable_size_r>:
 800f5b0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	f1a0 0004 	sub.w	r0, r0, #4
 800f5ba:	bfbc      	itt	lt
 800f5bc:	580b      	ldrlt	r3, [r1, r0]
 800f5be:	18c0      	addlt	r0, r0, r3
 800f5c0:	4770      	bx	lr
	...

0800f5c4 <_read_r>:
 800f5c4:	b538      	push	{r3, r4, r5, lr}
 800f5c6:	4c07      	ldr	r4, [pc, #28]	; (800f5e4 <_read_r+0x20>)
 800f5c8:	4605      	mov	r5, r0
 800f5ca:	4608      	mov	r0, r1
 800f5cc:	4611      	mov	r1, r2
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	6022      	str	r2, [r4, #0]
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	f000 f828 	bl	800f628 <_read>
 800f5d8:	1c43      	adds	r3, r0, #1
 800f5da:	d102      	bne.n	800f5e2 <_read_r+0x1e>
 800f5dc:	6823      	ldr	r3, [r4, #0]
 800f5de:	b103      	cbz	r3, 800f5e2 <_read_r+0x1e>
 800f5e0:	602b      	str	r3, [r5, #0]
 800f5e2:	bd38      	pop	{r3, r4, r5, pc}
 800f5e4:	20002768 	.word	0x20002768

0800f5e8 <_close>:
 800f5e8:	4b02      	ldr	r3, [pc, #8]	; (800f5f4 <_close+0xc>)
 800f5ea:	2258      	movs	r2, #88	; 0x58
 800f5ec:	601a      	str	r2, [r3, #0]
 800f5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f5f2:	4770      	bx	lr
 800f5f4:	20002768 	.word	0x20002768

0800f5f8 <_fstat>:
 800f5f8:	4b02      	ldr	r3, [pc, #8]	; (800f604 <_fstat+0xc>)
 800f5fa:	2258      	movs	r2, #88	; 0x58
 800f5fc:	601a      	str	r2, [r3, #0]
 800f5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f602:	4770      	bx	lr
 800f604:	20002768 	.word	0x20002768

0800f608 <_isatty>:
 800f608:	4b02      	ldr	r3, [pc, #8]	; (800f614 <_isatty+0xc>)
 800f60a:	2258      	movs	r2, #88	; 0x58
 800f60c:	601a      	str	r2, [r3, #0]
 800f60e:	2000      	movs	r0, #0
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop
 800f614:	20002768 	.word	0x20002768

0800f618 <_lseek>:
 800f618:	4b02      	ldr	r3, [pc, #8]	; (800f624 <_lseek+0xc>)
 800f61a:	2258      	movs	r2, #88	; 0x58
 800f61c:	601a      	str	r2, [r3, #0]
 800f61e:	f04f 30ff 	mov.w	r0, #4294967295
 800f622:	4770      	bx	lr
 800f624:	20002768 	.word	0x20002768

0800f628 <_read>:
 800f628:	4b02      	ldr	r3, [pc, #8]	; (800f634 <_read+0xc>)
 800f62a:	2258      	movs	r2, #88	; 0x58
 800f62c:	601a      	str	r2, [r3, #0]
 800f62e:	f04f 30ff 	mov.w	r0, #4294967295
 800f632:	4770      	bx	lr
 800f634:	20002768 	.word	0x20002768

0800f638 <_sbrk>:
 800f638:	4b04      	ldr	r3, [pc, #16]	; (800f64c <_sbrk+0x14>)
 800f63a:	6819      	ldr	r1, [r3, #0]
 800f63c:	4602      	mov	r2, r0
 800f63e:	b909      	cbnz	r1, 800f644 <_sbrk+0xc>
 800f640:	4903      	ldr	r1, [pc, #12]	; (800f650 <_sbrk+0x18>)
 800f642:	6019      	str	r1, [r3, #0]
 800f644:	6818      	ldr	r0, [r3, #0]
 800f646:	4402      	add	r2, r0
 800f648:	601a      	str	r2, [r3, #0]
 800f64a:	4770      	bx	lr
 800f64c:	20000464 	.word	0x20000464
 800f650:	2000276c 	.word	0x2000276c

0800f654 <_write>:
 800f654:	4b02      	ldr	r3, [pc, #8]	; (800f660 <_write+0xc>)
 800f656:	2258      	movs	r2, #88	; 0x58
 800f658:	601a      	str	r2, [r3, #0]
 800f65a:	f04f 30ff 	mov.w	r0, #4294967295
 800f65e:	4770      	bx	lr
 800f660:	20002768 	.word	0x20002768

0800f664 <_init>:
 800f664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f666:	bf00      	nop
 800f668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f66a:	bc08      	pop	{r3}
 800f66c:	469e      	mov	lr, r3
 800f66e:	4770      	bx	lr

0800f670 <_fini>:
 800f670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f672:	bf00      	nop
 800f674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f676:	bc08      	pop	{r3}
 800f678:	469e      	mov	lr, r3
 800f67a:	4770      	bx	lr
